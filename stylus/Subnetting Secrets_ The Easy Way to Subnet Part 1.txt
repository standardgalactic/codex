



  SUBNETTING SECRETSThe Easy Way to Subnet  PART 1   By Paul Browning© Paul Browning 2012







IMPORTANT COPYRIGHT & LEGAL NOTICESubnetting Secrets© is published by Reality Press Ltd.Copyright 2012 by Paul BrowningALL RIGHTS RESERVED: No part of Subnetting Secrets© may be reproduced or transmitted in any form whatsoever, electronic or mechanical, including photocopying, recording, or by any informational storage or retrieval system, without expressed, written and signed permission from the author (with the exception of brief quotations as used in reviews or discussion groups, with attribution to the author and source).







Subnetting - What Is It and Why Bother Learning It?Good question. Let me ask you a few back. Are you in the IT industry already, or are you hoping to get into the IT industry and, in particular, in some sort of helpdesk, PC support, networking or other technical role?Would you find it useful to know how network addressing works and how to determine easily and quickly which subnet a particular host belongs to? Would you like to resolve IP addressing issues quickly and easily while other engineers around you are busy surfing the net looking for subnet calculators?Would you like to avoid the embarrassment of having to troubleshoot IP addressing issues on a live network but aren't sure what to do or where to start? Would you feel awkward having to answer subnetting questions in an exam, a technical interview for a job or a consulting role in a company?If you answered yes to any of the questions above, then you are reading the right book. There are few guarantees in life but here is one from me. If you follow my advice and read through this book, and watch the videos several times, you will be able to do the above and far, far more.In Parts 1 and 2 of Subnetting Secrets©, you are going to learn everything you need to know about IP addressing and subnetting. You will be shown detailed examples of how to determine which subnet a certain host belongs to and how to design a subnet mask so that you can carry out some basic network design.You are also going to learn what most network engineers skip, overlook or simply just don't know. By the end of the journey, you will know more about subnetting than 95% of the network engineers currently employed in the IT industry do!! I should know. I have worked on hundreds of networks and have met over a thousand IT engineers during my time as a Cisco TAC and through my Cisco and networking training courses at www.howtonetwork.net.I am going to reveal some things to you that you probably never knew and that will really sharpen up your subnetting skills to a very high level. Chances are you have been doing it the long and hard way since you first learned about subnetting.You'll be very surprised at just how easy all this stuff really is. It really isn't that complicated at all to be honest (once you see the easy way to subnet). The problem for many years has been that very technical people have tried to make something that is easy appear to be very difficult. Why they do that I will never know. Perhaps they want other people to think that subnetting is some mysterious skill that only a few engineers can master, or perhaps they can only understand something when it is explained in a complicated way.Does this all sound too good to be true? Let me take what is seemingly a huge and complicated subject and show you how easy it really is.







What's In Subnetting Secrets?Here is a summary of what you are going to learn:







About MeI served as a police officer in the UK for 12 years, initially in uniform on the streets as a police constable and then as a detective. I was promoted to sergeant after about seven years and I worked in uniform in Birmingham, UK, for five years before leaving for a career in IT.I worked on a helpdesk for a while and studied hard. Over a period of years, I passed my MCSE, A+, Network+, CCNA and CCNP exams, and then my CCIE written exams. Just for the record, I find studying to be really hard, so for every hour everybody else was putting into their studying, I had to do two.I eventually got a job working at the Cisco TAC, where I worked for two years doing router architecture support and then WAN support. We were all made redundant in 2002, so I started my own IT consultancy and training company called Networks Incorporated, which I sold in 2008.After that, I started an online IT certification site called www.howtonetwork.net, which teaches people just like you how to study for and pass their IT exams.I am not a naturally technical person, and I find it difficult to absorb information, so what I tend to do is try to make it all as easy as possible to understand. I always found subnetting to be particularly challenging, and you may find it hard, too.I read several subnetting books written by people touted as IT 'experts' but I was left more confused than when I started. I also read several Cisco CCNA books, paid for CD ROMs from websites and read white papers, but they made it all sound so complicated. I thought to myself, 'there must be an easier way than this to learn how to subnet.' I was right, but I didn't realize that I would be the one to discover it!!After weeks of frustration, I pencilled out a few subnetting ideas myself and quite by accident discovered a very simple, accurate and easy way to work out subnetting problems. I also developed the Subnetting Secrets Chart©, which you will see explained in great detail in Part 2. This is the exact method I use to teach my students subnetting, and I wrote about it in my CCNA home study guide 'CCNA Simplified - Your Complete Guide to Passing the CCNA Exam'. This book has been used by thousands of Cisco students over the past few years to help them study for their CCNA exam.







What to Expect from This BookBy the time you have read through this book a few times, you should feel confident about the following scenarios:• Troubleshooting subnetting and IP addressing issues on a live network• Answering subnetting questions in exams and interviews• Carrying out basic network design• Determining wildcard masks for access lists or OSPF routing• Working out VLSM and CIDR• Sending supernetted routes out of your network to the Internet• Teaching subnetting to other people• Understanding IPv6 addressing• And much more...Understanding subnetting and the other subjects in this book is going to make you a valuable member of any IT team, enhance your consulting skills and give you increased confidence when working on live network issues.Imagine how good you will feel when you are able to run rings round most other IT people who either cannot subnet at all or are able to perform basic subnetting but take a very long time to work out the answers to any subnetting issues. My goal is to turn you into a subnetting expert by teaching you how it all works, why it works and how to figure it all out with minimum fuss and effort. Would that be of interest to you?How the Book Is Laid OutYou will start with the basics, such as binary maths, hexadecimal and how to convert between hexadecimal and decimal. You will learn where subnetting actually comes from and why it's important. You will also learn the longhand way of working out subnetting problems before progressing (in Part 2) to the quick and easy way, which I recommend you use in exams, IT interviews and when troubleshooting live network issues where time is of the essence.What You Will Learn in Part 1› How binary works - Why bring in binary maths to confuse everything? You will learn why it's necessary, and how to determine binary addresses quickly and convert them to decimal.› How hexadecimal works - If you want to pass the Cisco CCNA or Network+ exam, you will need to understand hex numbering. I will explain how it all works and more.› IP addressing - What is an IP address made from, what is an octet and why are IP addresses separated into classes; also, why are classes not important anymore?› How to subnet - This is the reason you bought this book in the first place! You will by guided step by step to determine which subnet a certain host is in. This is the longer way to do it, which you need to understand before moving on to the quick and easy way in Part 2.› How to supernet a network when advertising it to the Internet.› How IP subnet-zero works - This causes more confusion and raises more questions than anything else in subnetting. What does it actually mean and what impact does it have when you are designing subnets or working out subnetting problems? Can you use it or not?What You Will Learn in Part 2› Twenty examples of Class A, B and C subnets, with as many different subnet masks as I could think of. By the time you have worked through every example several times, you will be supremely confident at subnetting.› Subnetting in your head. No, I am not mad! You will see that it is actually possible to work out subnetting problems in your head without putting pen to paper. Wait and see.› Network design. If you were asked by a client or your boss to create a subnet mask that generates six subnets with at least 20 hosts per subnet, could you come up with the answer in about 10 seconds? You will learn how here.By the end of Part 2, you will be able to do all this and more. Just the basic design skill alone makes this book worth the investment many times over.What You Will Learn in the Appendices› More advanced VLSM, in case you need to design networks› Advanced IPv6, in case you need to migrate in the future› Route summarization theory and techniquesThe WebsiteThis book has actually evolved into a full training website, with streaming videos demonstrating most of the examples in Part 2. While the purchase of this book does not give you full access to the site, please note that you do not need to join the site in order to understand subnetting - I'm not selling you anything else. I put the site up for those people who wanted purely online access and video examples. The url below gives you access to free examples, so please visit and watch the videos:www.subnetting-secrets.comHere are some other sites you may find useful:www.subnetting.org - a site I had developed to help you test your subnetting.www.in60days.net - a site to help you study for your Cisco CCNA exam in 60 days.www.ccnahomelab.com - this site shows you how to build your own CCNA home lab!What Others Are Saying about Subnetting Secrets©I could tell you what a massive impact my easy way to subnet has had on other people just like you, but don't just take my word for it:Hi Paul,I passed my CCNA today. Thanks for all the help and great course. The labs are very helpful and the Super Subnetting Chart, I think that saved the day.Thanks again,Paul CoxI have just taken and passed the CCNA today. You need 849 to pass and I got 900...The subnetting questions were a breeze using the chart technique.Hubert Taylor, IT Technician







How to Read This BookDid you know that the way we are taught to learn at school is probably the worst method possible? Have you ever just sat there staring at a book, trying to force the information in, or after reading a few pages completely forget the page you have just read? Our recall is less than 40% after one hour and less than 20% 24 hours later.May I humbly suggest that trying to force new information into your brain, by staring at the page and hoping it sinks in, won't work? Try my way instead and see how much your understanding and retention improves.Step 1: Flick through every page in Part 1 and Part 2 and glance over them, but don't actually read the text. Just pick up the main headers and subjects covered. Take no more than about 5 seconds per page.Step 2: Flick through the pages again, but this time spend about 10 seconds per page and glance at the first few sentences of each main heading.Step 3: Do the same thing again, but this time take about 30 seconds per page. Casually take in the main themes of each page and a few sentences as well. Enjoy the process and tell yourself that you don't really care how much information goes in or how quickly.Step 4: Take a break and do something else. Subnetting is a skill you will have for life so there is no hurry to learn it.Step 5: This time have a more thorough read-through of each page. Take about 1 minute per page and avoid sub-vocalizing (reading the words out in your head as if you are speaking aloud). Reading out the words in your head is actually going to slow you down quite a bit.Make a mental note of the contents and subject matter but let it soak in at a speed that feels natural for you. The mind picks up every sentence, word and letter with 100% perfect retention. The bit we sometimes struggle with is the recall!!Step 6: Take about 2 minutes per page and, if it helps, put a small tick next to the areas of major interest to you. Enjoy the process.Take a break and the next day repeat Step 6 a few times. As you pass over the pages time and time again, you will find that the material goes in effortlessly. You will also find that you have the ability to recall and apply the information with amazing accuracy.Set a goal to spend about 20 minutes per day (but no more than 30) learning the material. You wouldn't expect to learn juggling in an hour, so why expect to understand all of this in a day? Let the knowledge sink in at the right pace for you to ensure it stays in. I know that this book promises to reveal the easy way to subnet but it isn't a quick fix. You must still invest some time to learn how to apply the skills.If you want to learn more about speed-reading, I recommend you invest in a book on it.P.S. I refer to Cisco and the Cisco CCNA exam throughout the book because you will benefit from seeing how subnetting is applied to network equipment. Please just ignore references to Cisco or the CCNA exam if they are not relevant to you. The material is just as relevant if you do not intend to take any exams at all or if you work with a different vendor's equipment.







Part I - IP AddressingHow Binary WorksIn order to understand how IP addressing works, you need to understand binary mathematics (sorry). Computers and networking equipment do not understand decimal. We use decimal because it is a numbering system using ten digits, invented by a caveman centuries ago when he realized he had ten digits on his hands that could be used for counting dinosaurs as they walked past his cave.Computers and networking equipment can only understand electrical signals. Since an electrical signal is either on or off, the only numbering system that will work is binary. Binary uses only two numbers, a 0 or a 1. A 0 means there is no electrical pulse on the wire and a 1 means that there is a pulse on the wire.Any number can be made up from binary values. The more binary values we add, the larger the number can become. For every binary value we add, we double the next number (e.g., 1 to 2 to 4 to 8 to 16 and so on into infinity), starting at the right and moving left. With two binary digits, we can count up to 3. We just place a 0 or a 1 in the column to decide whether we want to use that value.We will start with only two binary values in columns 1 and 2.0 + 0 = 00 + 1 = 12 + 0 = 22 + 1 = 3If we use eight binary bit places (an octet), we can get any number from 0 up to 255. You can see that we start our numbering from the right and move across to the left.If we add a 0 to each of these columns, we have a value of 0 in decimal.If we add a 1 to each of these columns, we have a value of 255 in decimal.Don't believe me?128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255So logic dictates we can actually make any number from 0 to 255 by placing a 0 or a 1 in various columns.32 + 8 + 4 = 44IP addressing and subnetting are based upon the fundamentals above. We can summarize what we know so far by looking at Table 1 below. Pay special attention to this table because the values can be used for any subnet mask (more on that later).Table 1. Binary ValuesMake up some of your own binary numbers to ensure you understand this concept fully.How Hexadecimal WorksHexadecimal (or hex) is an alternative numbering system. Rather than counting in 2s or by 10, 16 numbers or characters are used. Hex starts at 0 and goes all the way up to F, as illustrated below:0 1 2 3 4 5 6 7 8 9 A B C D E FEach hexadecimal digit actually represents four binary digits, as shown below in Table 2:Table 2. Decimal, Hex and Binary DigitsConverting from binary to hex to decimal is fairly simple, as shown in Table 3 below:Table 3. Conversion of Binary to Hex to DecimalHex is a more manageable counting system for humans than binary but close enough to binary to be used by computers and networking equipment. Any number can be made using hex, as it can use binary or decimal; just count in multiples of 16 instead:1 x 16 = 16 16 x 16 = 256 256 x 16 = 4096 ...and so on.Counting in hex, therefore, goes 0 1 2 3 4 5 6 7 8 9 A B C D E F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 etc. to infinity. 1A (above), for example, is an A in the 1 column and a 1 in the 16 column: A = 10 + 16 = 26.When converting binary to hex, it makes the task easier to break the octet into two groups of 4 bits. So 11110011 becomes 1111 0011. 1111 is 8 + 4 + 2 + 1 = 15, and 0011 is 2 + 1 = 3. 15 is F in hex and 3 is 3 in hex, giving us the answer F3. You can check Table 1 (above) to confirm this.Hex to binary is carried out using the same process. For example, 7C can be split into 7, which is 0111 in binary, and C (12 in decimal), which is 1100 in binary. The answer, then, is 01111100.Converting ExerciseHere are some examples for you to try. If you get stuck, you can find the answers at the end of Part 1. A very useful thing to do would be to write out the charts for working out hex and binary (i.e., for hex, a 1 column, then a 16 column, then a 256 column and so on).1. Convert 1111 to hex and decimal.2. Convert 11010 to hex and decimal.3. Convert 10000 to hex and decimal.4. Convert 20 to binary and hex.5. Convert 32 to binary and hex.6. Convert 101 to binary and hex.7. Convert A6 from hex to binary and decimal.8. Convert 15 from hex to binary and decimal9. Convert B5 from hex to binary and decimal.It would be useful in the exam to write out Table 2 to help you work out any binary to hex to decimal conversions.







IP Version 4The current version of Internet Protocol (IP) in wide deployment is version 4. Version 6 is currently in use on a number of experimental networks and will ultimately replace IPv4 on the Internet. There is, however, a lot of work yet to be done before this can happen. It is important to understand that although most IT exams are concerned with subnetting in IPv4, you should be familiar with how to read IPv6 (presented later) because at some point in the not-too-distant future, it will soon become the standard for all networks.IPv4 uses four octets in a group to create an IP address, and each octet is made up of 8 bits, or 1 byte. Therefore, every IP address is 32 binary bits (4 x 8 = 32), or 4 bytes.FOR EXAMS: You may see questions that ask about IP addressing in bits and bytes; pay careful attention and read these questions thoroughly.IPv4 was designed so there would be enough IP addresses for the foreseeable future. No one predicted the huge growth in IT that was to come, so this scheme, in its initial incarnation, had to be amended to cater for the demand.An example of how an IPv4 address appears in binary is as follows:Each grouping of eight numbers is an octet, and the four octets give us a 32- bit IP address.IN THE REAL WORLD: It is worth remembering that routers and PCs do not see an IPv4 address as four octets, they just see 32 bits. Octets just make things easier for us to see.Powers of TwoIn order to really understand IP addressing, you should understand the powers of two. While it may appear confusing initially, you simply start with the number two and keep doubling the previous number - that's all there is to it.1 x 2 = 2 2 x 2 = 4 4 x 2 = 8 8 x 2 = 16
16
x 2 = 32 ...and so on.The important thing isn't the multiplication, it's what is happening to the answers. Each time, the number doubles. If we want to work out the powers (where the ^ character represents 'to the power of'), we would write it like this:2^1 = 2 x 1 = 2 2^2 = 2 x 2 = 4 2^3 = 2 x 2 x 2 = 8 2^4 = 2 x 2 x 2 x 2 = 16 2^5 = 2 x 2 x 2 x 2 x 2 = 32IP AddressingNow we understand that an IP address is made up from binary numbers, which are grouped into octets. When IP addressing was first conceived, it was determined that this amount would be more than enough for many years to come. Unfortunately, the huge growth of home and business computing was never anticipated. IPv6 has several trillion available addresses that should last a few years into the future.When IP (version 4) addresses were first invented, they were separated into classes. The IP address class you were given depended upon how large your organization was.IN THE REAL WORLD: IP addresses are assigned by a group called the IANA (Internet Assigned Number Authority). You can also buy one from an ISP who has in turn bought a block from the IANA.Class A AddressesHistorically, these were given to the very largest organizations that would need a tremendous number of IP addresses since they owned more computers than everyone else. Class A addresses use only the first octet to identify the network number, while the remaining three octets are left for identifying the hosts on the network. The following is an example of a Class A address:Network.Host.Host.Host: 10.2.5.4 (the network is 10 and 2.5.4 is a host on that network).In binary, it would look like this:nnnnnnnn.hhhhhhhh.hhhhhhhh.hhhhhhhhIN THE REAL WORLD: You would pronounce the above IP address as ten dot two dot five dot four.Class A addresses are numbered from 1 to 126 in the first octet. Network equipment identifies a Class A address because the very first bit on the first octet has to be a 0, meaning a Class A address cannot have a 1 in this bit position.Referring to the octet below, the first network number is 1.The last possible network number is 127 (check by adding all the values together). Network number 127 cannot actually be used because the value 127.0.0.1 is reserved for troubleshooting (normally found on a logical interface called 'loopback' on network devices). You can ping the loopback address below to check whether the TCP/IP is working on your host:Since we are not permitted to use 0 or 127 as network numbers, this leaves us with 126 available networks for Class A addresses.For the hosts, we can start at number 1 until every single possible value is used up. To illustrate, we will use an address starting with 10 as an example:10.0.0.1 is the first host; in binary, it would look like the following:00001010.00000000.00000000.0000000110.            0.              0.               110.0.0.2 is the second host, or in binary:00001010.00000000.00000000.0000001010.            0.              0.               210.255.255.254 is the last host, or in binary:00001010.11111111.11111111.1111111010.            255.          255.           254Now you can see why we use decimal. It would take a long time to write out addresses in binary and it would be almost impossible to remember them. You can change Cisco routers to display all addresses in binary but there is no reason to do this.Why can't we have 10.255.255.255 as a host? Because when all the binary values have a 1 on the host part of the address, this tells the network that it is a broadcast packet. You will learn how this works later.Class B AddressesClass B addresses were reserved for large organizations that needed a lot of host numbers but not as many as the largest organizations. Unfortunately, when a Class B address was assigned to an organization, it resulted in thousands of wasted host numbers.Class B addresses must have the first two binary values in the first octet reserved with a 1 and a 0 next to it. Referring to the octet below, the first network number is 128, meaning we have all the available network bits in the first octet turned off:The last available Class B network number is 191 (add the values together).  Still in the first octet, we have turned the network bits on:For Class B addresses, we use the first two octets for the network address. For example, for address 130.24.5.2, 130.24 is the network number and 5.2 is a host on that network. The rule remains that the first number you see will always be between 128 and 191.If we use the powers of two rule, the first two octets will have a possible 65536 (2^16 = 65536) networks. However, we are not allowed to use the first two bits of the first octet because they are reserved for showing the 10 (binary) value, remember? So this leaves us with 6 + 8 digits: 2^14 gives us 16384 networks.We have the full two octets to use for hosts, so 8 + 8 bits gives us 2^16 = 65536 hosts per Class B network. We actually have to take 2 away from this value for the broadcast and subnet (more on this later), so technically it is 65534 host addresses.Class C AddressesClass C addresses were originally reserved for any organization that was not large enough to warrant having a Class A or B address. A Class C address has the first three bits reserved so the network device can recognize it as such. The first three bits must show as 110. Referring to the octet below, the first network number is 192, and all the other network bits are off (0):Still referring to the first octet, the last network number is 223, and this time all the network bits are on (1):An example of a Class C address is 200.2.1.4, where 200.2.1 is the network address and .4 is a host on that network. You can see that there are lots of available network numbers to assign to companies; however, there are a limited amount of numbers free to use for the hosts on the networks.For networks, we have to take the first 3 bits (011) from the first octet, giving us 5 + 8 + 8 = 21 network bits:2^21 = 2097152 networksFor the hosts, we have 2^8, giving us 255 (although only 254 are usable).INSPIRATION: If none of this makes any sense at the moment, this is to be expected. I read the subnetting chapter in a very famous CCNA book for six weeks and it still made no sense to me. Eventually, I worked out the easy way to subnet, which I will share with you later. As you read through this material several (or more) times, it will start to make more sense.Class D and Class E AddressesClass D addresses are reserved for multicast traffic, so they cannot be used on your network. Multicast traffic is traffic sent to multiple hosts using one IP address. A live webcast of a rock concert would be an example of multicasting.Class E addresses are reserved for experimental use only.SummaryTable 4 below summarizes what we know about the different classes:Table 4. Summary of Address ClassesWe need only to look at the number in the first octet to recognize which class address we are dealing with, for example:10.1.2.1 = Class A
190.2.3.4 = Class B
220.3.4.2 = Class CIPv6 AddressingIPv6 addressing, which will be covered in greater detail in Appendix C, is receiving a lot of attention at the moment in the IT community, even though its development started back in 1991. Why do we need IPv6?Nobody predicted the exponential explosion in the growth of the Internet when it was first developed. Who could have imagined, even just a few years ago, that nearly every household in the world would have a PC in it, or that everyone would require an IP address for their work PCs, home PCs, mobile phones, mobile IP devices and even remote IP management of such things as home-intruder alarms, cookers, garage doors and TVs? Experts now agree that estimates of each individual requiring over 250 IP addresses is well within the bounds of possibility.IPv4 was developed when only large companies required IP addresses. These addresses were cut into blocks, from A to C, with D reserved for multicasting and E for experimental use. The original incarnation of classes created huge wastage, for example, Class A addresses wasted potentially thousands of addresses and Class C addresses forced smaller companies to buy several blocks of network addresses for use in their networks. Often, the addresses were non-contiguous, which added to route summarization problems.Work on IPv6 began as soon as the scale of the IPv4 problem was fully realized (1991). At that point, Internet experts argued that the current range of IPv4 addresses would become exhausted somewhere between 2005 and 2015. In addition, because IPv4 is a connectionless protocol, there is no guarantee of data delivery and no facility to mark packets in order to detect or correct errors.Shortfalls of IPv4Development of IPv6 allowed some of the shortfalls of IPv4 to be addressed, some of which include the following:• LAN latency - When IPv4 is used on Ethernet segments, there has to be Layer 3 to Layer 2 mapping. IPv4 uses an ARP broadcast to perform the address resolution. This involves an ARP broadcast packet being sent to and received by all stations on an Ethernet segment. The packet is processed as an interrupt on the Ethernet port.• Security - IPv4 has no built-in security parameters. This function is left to PC and router firewalls.• Mobility - IPv4 has no facility to allocate IP addresses to PDAs or other mobile devices.• Routing - IPv4 addressing can lead to huge routing tables and vast amounts of routing update packets traversing the Internet. Changes made to DNS entries can take up to 48 hours to propagate, leading to network downtime.Anatomy of an IP PacketThe design of a new IP addressing scheme has given the architects a clean slate and the ability to incorporate a wish list into the design of the IPv6 packet. The requirements were a pure design for the header with as few fields as possible, which is different from the IPv4 addressing scheme shown below in Figure 1:Figure 1. IPv4 Header - 20 OctetsIPv4 allows a unique network number to be allocated to every device on the Internet, but IPv6 takes this one step further, as shown in Figure 2 below:Figure 2. IPv6 Header - 40 OctetsIPv6 assigns a 128-bit numerical address to each interface on a network. This, of course, will lead to extreme difficulty for network administrators to track which device is which. For this reason, IPv6 will work hand in hand with DNS. There is no requirement for a subnet mask in IPv6; instead, a prefix is used.An IPv6 address is comprised of two parts. The first part is the link-layer address (Layer 2), which identifies the host destination within the subnet. The second address is Layer 3 and it identifies the destination network the packet must reach. IPv6 uses the Neighbor Discovery Protocol, not ARP, for Layer 2 to Layer 3 address mapping. The main difference between IPv4 and IPv6 addressing is illustrated in Figure 3 below:Figure 3. IPv6 Address SizeThere are 2 to the power of 128 (2^128) addresses available with IPv6, which is exactly 340,282,366,920,938,463,374,607,431,768,211,456 addresses. That is over 5 x 10^28 addresses for every person in the world! These addresses are available without the need for private address translation or any other techniques required for address conservation.RFC 1884 recommends that IPv6 syntax for the 128 bits be represented in eight groups of hexadecimal digits. Each group is divided by a colon, so the syntax is referred to as coloned hex, an example of which is shown below:EEDE:AC89:4323:5445:FE32:BB78:7856:2022The addresses can be shortened in the following two ways: • Remove leading zeros and double colons to represent successive zeros within colons.▫ Original address: 3223:0002:3DD2:0000:0667:0000:4CC3:2002▫ Shortened address: 3223:2:3DD2:0000:0667:0000:4CC3:2002 (the second octet has been shortened to the number 2)• Use ONE SET of double colons to replace four consecutive zeros.▫ Original address: 3223:0002:3DD2:0000:0667:0000:4CC3:2002▫ Shortened address: 3223:2:3DD2::667:0000:4CC3:2002 (0000 becomes ::)NOTE: The reason the second set of four consecutive zeros remains in the address is that the RFC states that only one pair of double colons can be used within an IPv6 address. (RFC stands for requests for comments. These are documents submitted suggesting how network protocols will work. You can read more at http://www.rfc-editor.org.)No BroadcastingThere are three types of IPv6 addresses: unicast, anycast and multicast. Broadcasting does not exist in IPv6.1. Unicast - As with IPv4, an IPv6 unicast address is applied to a single interface.2. Anycast - An IPv6 anycast address is one that can be assigned to a group of interfaces. This can be used in load balancing.3. Multicast - Much the same as with IPv4, a packet sent to a multicast address is delivered to all the interfaces identified by that address.In IPv6, broadcasts are replaced by multicasts and anycasts.Migrating from IPv4 to IPv6You will not find Internet users all over the world using IPv4 one day and then switching to IPv6 the next. The change will take place over a number of years in a phased approach. Address allocation will take place in batches of addresses using a combination of DNS and DHCP or DHCPv6 auto-configuration scripts. To assign IPv6 addresses manually to nodes on a network would be an almost impossible task. DHCPv6 operation is described in RFC 3736.The two main methods available to phase IPv6 addressing into networks are dual stack and tunneling, as illustrated in Figures 4 and 5 below:Figure 4. Dual StackWith dual stack, two IP protocol stacks - IPv4 and IPv6 - run on a network device simultaneously. The dual-stack method will be the preferred migration method for networks transitioning from IPv4 to IPv6 because it can continue to run both protocols seamlessly while the transition takes place. Dual stack can operate on the same network node interface and chooses which version of IP to use based upon the destination address.This process has been thoroughly tested by a project team referred to as 6-Bone. The only requirement to implement IPv6 addressing on a network is connectivity to a DNS server.Figure 5. TunnelingTunneling in internetworking usually refers to one type of packet being encapsulated in another type of packet. In this instance, an IPv6 packet is encapsulated inside an IPv4 packet. In order for tunneling to work, the routers must support dual stack, so both IPv4 and IPv6 are running.IPv6 packets up to 20 bytes can be transmitted because the IPv4 header is 20 bytes in length. The IPv4 header is appended to the packet and removed at the destination router, as illustrated in Figure 6 below.IPv6 tunneling will allow current IPv4 addressing to be used in conjunction with IPv6 addresses much in the same way that dual protocols can be run on a network that is transitioning from one to another. IPv6 tunneling is defined in RFC 3056 and 2893, among others.Figure 6. IPv4 Header on an IPv6 PacketIPv6 InterfacesEach link in an IPv6 network must have a unique Interface Identifier (ID). This is the host portion of the IPv6 address, and it is always 64 bits long, dynamically created and based on Layer 2 encapsulation. IDs are defined on interface types such as PPP, HDLC, ATM, Frame Relay, Ethernet and so on.For Ethernet networking, the ID is based on the MAC address, but the hex number FFFE is inserted into the 48-bit address. For example, 23:80:26:F3:22:E0 would become 23:80:26:FF:FE:F3:22:E0, as shown in Figure 7 below:Figure7. IPv6 Host AddressIPv6 and RoutingIPv6 uses the same longest prefix match principle that IPv4 uses. IPv6 currently works with the following:• Static routing• New generation RIP• OSPFv3• ISIS for IPv6• EIGRP for IPv6• MP-BGP4Configuring IPv6Cisco IOS supports IPv6 commands in version 12.2(2)T or later. To implement IPv6 on a Cisco device, simply add an IPv6 configuration to an IPv4 interface and it will run dual stack, as illustrated in the example below:Router#config t Router(config)#IPv6 unicast-routing Router(config)#interface fast ethernet 0/0 Router(config-if)#ip address 192.1681.1 255.255.255.0 Router(config-if)#IPv6 address 2eef:c001:b14:2::c12/125 Router(config-if)#exit Router#show IPv6 interface FastEthernet0/0 is up, line protocol is down IPv6 is enabled, link-local address is FE80::20E:83FF:FEF5:FD4F [TENTATIVE] Global unicast address(es): 2EEF:C001:B14:2::C12, subnet is 2EEF:C001:B14:2::C10/125 [TENTATIVE]Reserved AddressesIn order to help prevent wastage of IP addresses, certain addresses were reserved for use on private networks. Any individual can use these addresses on their network providing they do not try to get out to the Internet using them. The address allocation scheme was first suggested in RFC 1918, 'Address Allocation for Private Internets'.IN THE REAL WORLD: In order to get out to the Internet, a technique known as NAT (network address translation) is used to swap a private address to a public address.The reserved addresses are as follows:• 10.x.x.x - Any IP address beginning with 10• 172.16.x.x to 173.31.x.x - Any IP address starting with 172.16 to 172.31, inclusive• 192.168.x.x - Any IP address starting with 192.168This idea proved to be an ideal way to avoid wasting thousands of IP addresses. Once again, the address classes are summarized in Figure 8 below:Figure 8. IP Addressing Classes Summarized







SubnettingSubnetting can be one of the most difficult subjects to master for many IT people. There is a long way and a very short and easy way to subnet. It is vital you understand how the long way works first. However, in real life, you will use the short (and easy) way.IN THE REAL WORLD: You would need to use the longhand way of working out subnetting when designing subnetting for a client.Address DepletionShortly after the IPv4 addressing scheme was implemented, it became apparent that there were not enough addresses to meet demand. More and more organizations were using computers and networking equipment, and the current scheme was wasting thousands of addresses. For example, a company is given a Class A address, which can only be given to 126 companies. The first octet is used for the network and the other three octets are free for use on the network. If we use every combination of numbers on the remaining 24 digits (the three octets free for hosts on the network), then we have a maximum value of over 16 million hosts (16,777,216, in fact). We can actually work out how many networks or hosts we have by using the powers of two:3 x 8 = 24 gives us 2^24 = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 = 16777216 hostsFOR EXAMS: You must be very familiar with the powers of two, hex and binary to pass exams such as the CCNA or Network +.Historically, a very large organization would be allocated a Class A address and would need around 10,000 host addresses, wasting the other 16 million plus. Because they owned the network number, it couldn't be shared with other organizations so the other addresses were wasted.For a Class B address, the story is very similar, except instead of having three octets free for hosts on the network, it has only two free, resulting in 16 remaining digits for a total of 65536 hosts:2 x 8 = 16 gives us 2^16
= 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 = 65536 hostsINSPIRATION: Working out IP addressing and subnetting can seem like learning another language at times. Confusion comes before inspiration, not the other way around.How to SubnetThe problem with the initial way of using IP addresses was having certain parts of the address for the network and certain parts for the hosts. Class A addresses have 8 bits for the network and 24 bits for the hosts, Class B addresses have 16 bits for the network and 16 bits for the hosts, and Class C addresses have 24 bits for the network and 8 bits for the hosts. The question was how to prevent host addresses from being wasted. The answer came with the introduction of subnetting.Subnetting allowed bits that were normally used for the host part to be used for the subnet part of the address. To let routers or PCs know that subnetting was being used, another number had to be applied to the IP address. This number, which is binary, is known as the subnet mask.IN THE REAL WORLD: Subnetting and many other internetworking methods and tools are introduced by RFCs, which are open for anybody to comment upon before they are published at www.rfc-editor.org.Each bit on the subnet mask is compared with the bits on the IP address to determine which parts belong to the network and which belong to the host. A default subnet mask is allocated to each class of address. If you do not want to use subnetting, simply add the subnet mask to the end of the IP address. It is not possible to enter an IP address onto a PC or router without also entering the subnet mask.The following are default subnet masks:• Class A - 255.0.0.0(in binary:11111111.00000000.00000000.00000000)• Class B - 255.255.0.0(in binary:11111111.11111111.00000000.00000000)• Class C - 255.255.255.0(in binary:11111111.11111111.11111111.00000000)We can see that the first octet for Class A addresses is reserved for the network number. This is the default anyway, like the first two octets for Class B addresses and the first three octets for Class C addresses.A rule for subnet masks is that the 1 and 0 network and host bits must be contiguous (i.e., connect without a break). So you can have:11111111.11111111.00000000.00000000but you cannot have:11111111.00011111.00000000.00000000We can also see how important it is to remember that the router or PC sees numbers in binary.IN THE REAL WORLD: Whenever a network address does not look right to you, write it out in binary.What we now have is a situation where each part of the IP address is matched with the subnet mask to determine which bits are part of the network identification and which bits are part of the host identification, for example:10001100.10110011.11110000.11001000   140.179.240.200 (Class B)11111111.11111111.00000000.00000000   255.255.0.0 (subnet mask)---------------------------------------------------10001100.10110011.00000000.00000000  140.179.0.0 (network address)How did we get this number? The router performs something called logical ANDing. It compares the 1s and 0s to establish which numbers belong to the network and which belong to the host, as illustrated below:With logical ANDing, all the values are compared and anything apart from a 1 and 1 equals 0. Check the above example again to make sure you understand how it works.IN THE REAL WORLD: Many network engineers do not understand subnetting. Make sure you are not one of them. Once you know it, you will know it forever.Because you now know which are the network addresses and which are the hosts, you can start assigning IP addresses to hosts on your network. If all the host bits are 0, then you cannot use this to put on a network host. The all 0s represent the subnet; we shall see why and how shortly.140.179.0.0 is your network address, and 140.179.0.0 in binary has all of the host bits turned off:10001100.10110011.00000000.00000000
 Every host bit is turned offNetwork.    Network.  Host.         Host140.179.0.1 can be used for your first host and 140.179.0.2 can be used for your second host. You can keep adding hosts until both the third and fourth octets are (almost) full. For example, 140.179.0.255 is a valid host number,140.179.1.255 is also a valid host number and 140.179.255.254 is the last host number you can use.Here is the last host number in binary:10001100.10110011.11111111.11111110  Not every host bit is turned onNetwork.    Network.  Host.         HostWhy can't we use the last bit portion above for a host? An IP address with all 1s in the host portion is reserved to tell the network that the packet is a broadcast packet. A broadcast packet is a packet that must be examined by all hosts on the network (or, more specifically, all of the hosts on this portion of the network, i.e., the subnet). The number below is a broadcast packet to every host on the 140.179 network:140.179.255.255 (in binary, all the host bits are turned on):10001100.10110011.11111111.11111111
 Every host bit is turned onNetwork.    Network.  Host.         HostSo now you can see that using all 0s for the hosts is not permitted since this is the network, and you cannot use all 1s because this is reserved for a broadcast. With this information, you will be able to decide how many available hosts you have per network or subnet.FOR EXAMS: You may be tested on subnetting thoroughly in the exam, working out how many hosts per subnet, and which is the subnet and which is the broadcast address. You must be able to do this quickly or you will run out of time.To work out how many hosts you get on a subnet, using the 'powers of two' formula, simply multiply two to the power of how many host bits you have and take away two, one for the network of all 0s and one for the broadcast address of all 1s. This formula is represented as 2^n - 2.Referring to the example 140.179.0.0 255.255.0.0, the last two octets (the 0.0) are free to allocate to hosts on the network, giving you 16 bits. Using the formula above results in the following:2^16 - 2 = 65534 hostsDo you think it would be practical to have a network with over 65,000 hosts on it? We cannot break down this network into smaller units, and if we have a broadcast on the network, every single host on the network will have to stop what it's doing to listen to the broadcast packet to see whether it is the intended recipient.Let's steal some bits from the host part of the address and make a subnet or mini-network from those bits. I will write out the network address in longhand to make it easier to understand:140.179.00000  000.00000000 [16 bits][5 bits]       [11 bits][network][subnet]   [host bits]We have stolen five of the host bits for the subnet. The advantage is that we have more than one subnet we can use and we have fewer hosts per subnet. We can use the 'powers of two' formula to work out how many subnets we have and how many hosts per subnet. We do not have to take 2 away for the subnets for reasons you will see later.2^5 (2 x 2 x 2 x 2 x 2) = 32 subnets each with2^11 - 2 (2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 - 2) = 2046 hosts per subnetWhy would we want to do this? You have fewer hosts using the bandwidth on your network segment. It is far easier to administer smaller subnets rather than one huge network. Additionally, it is desirable to limit the number of broadcasts on a given subnet because every host on a subnet must examine the contents of a broadcast packet, whether it is the intended recipient or not.In an environment with an excessive number of hosts, the number of broadcasts can grow quite a bit, and while not immediately measurable, this broadcast traffic will lower the overall performance of all of the networked systems. In addition, you can only have one network per router interface. It is better to have a smaller number of hosts connected to a router interface than several thousand hosts.Remember: the more host bits you steal, the more subnets you get, but each of those subnets is capable of supporting fewer hosts. Deciding how many hosts you need and how many hosts per subnet is part of the network design phase. The more host bits we steal means we have more subnets but fewer host bits available - this is the trade off.Table 5 below illustrates a Class B network. Remember that for Class B addresses we are looking at the third and fourth octets for the bit pattern. The first two octets are used for the network address and cannot be stolen.Table 5. Class B Subnetting SummariesHow to Write Out Subnet MasksWe do not write out the subnet mask bits in binary. Rather, we have a way to write out subnet masks when entering them on network equipment and when writing them out by hand.If we steal five host bits from the third octet, we have to add the binary values together:So we have 128 + 64 + 32 + 16 + 8 = 248Remember that we are using a Class B example here and are working with the third octet. We are not allowed to alter the first two octets, as they are for the network. This gives us 255.255.248.0, which tells the router we are subnetting and that we are using the first five host bits to carve out our subnets.Things can get a little bit (or more) complicated and we can no longer rely upon what our eyes are telling us, because the router is looking at a binary value and we are looking at a decimal value. Don't worry about this too much because we will look at the quick and easy way to work out subnetting later.In order for the router to know whether a host is on a certain subnet, it looks to the masked bits. If all of the masked bits match, then it follows that the host must be on the same subnet. If the subnet bits do not match, then the hosts are on different subnets.This time we have IP address 129.10.147.1 255.255.248.0. Again, we have a Class B address and we are stealing five bits for subnetting. We know we have stolen five bits because 248 in binary is 11111000, which is five masked bits:10000001.00001010.10010011.00010000 (129.10.147.32)10000001.00001010.10010100.01010101 (129.10.148.85)We can see that the subnet bits in the examples above both match. In the example below, one subnet bit has changed (it ends in a 1 instead of 0):10000001.00001010.10011010.00000010 (129.10.154.2)The router or PC can see it is a different subnet but, unfortunately, when we write it out in decimal, it is not very easy for us to see that this third IP address is in a different subnet.Changing the Subnet RepresentationAlthough subnet masks are displayed as dotted decimal, the format can be changed on Cisco routers to bit-count or hex with the 'ip netmask-format bit' command, as illustrated in the configuration below:Router#show interface serial 0 Serial0 is administratively down, line protocol is down  Hardware is HD64570  Internet address is 192.168.1.1 255.255.255.0RouterA#terminal ip netmask-format ?  bit-count  Display netmask as number of significant bits  decimal   Display netmask in dotted decimal  hexadecimal Display netmask in hexadecimalRouterA#terminal ip netmask-format bit-countRouter#show interface serial 0 Serial0 is administratively down, line protocol is down  Hardware is HD64570  Internet address is 192.168.1.1/24Bit-count shows the address with a slash value, such as 172.16.1.0/24, decimal displays the subnet mask in dotted decimal, such as 255.255.255.0, and hex shows the mask in hex, such as 0Xffffff00.There are only certain values available to use as a subnet mask due to binary mathematics, as shown in Table 6 below:Table 6. Subnet Mask ValuesIf you calculate a subnet mask and it is some other value, such as 160, it is clearly wrong!Variable Length Subnet Masking (VLSM)Although subnetting provides a useful mechanism to improve the IP addressing issue, network administrators were only able to use one subnet mask for an entire network. RFC 1009 addressed this issue by allowing a subnetted network to use more than one subnet mask. Now a network administrator can have a Class B address with a 255.255.192.0 mask but further break down that subnet into smaller units, with masks such as 255.255.224.0.Instead of writing out the subnet in decimal, engineers in the real world use something called a slash address, writing out how many bits are used for subnetting. The following examples illustrate this method:255.255.0.0 can be expressed as /16 because there are 16 binary bits masked: 11111111.11111111.00000000.00000000 = 16 on (or masked) bits.255.255.192.0 can be expressed as /18 because there are 18 binary bits masked: 11111111.11111111.11000000.00000000 = 18 on (or masked) bits.255.255.240.0 can be expressed as /20 because there are 20 binary bits masked: 11111111.11111111.11110000.00000000 = 20 on (or masked) bits.IN THE REAL WORLD: Cisco IOS 12.0 and later will recognise VLSM automatically. Prior to this, you will need to use the 'ip subnet-zero command' if you want to use VLSM.We will cover VLSM in more detail later on in the book.Classless Inter-Domain Routing (CIDR)RFC 1517, 1518, 1519 and 1520 specify CIDR features. CIDR removed the need for IP address classes and was yet another solution to the problem of IP address depletion. CIDR allows for something known as route aggregation, whereby a single route in a routing table can represent several network addresses, saving space and routing table size.Using CIDR, we no longer need to worry about the class system for addressing networks. Network administrators can now allocate address spaces on an as-needed basis rather than having to use a Class B address and waste thousands of spare addresses.CIDR also allows for supernetting. Supernetting enables you to advertise a summary of your network addresses, providing you have a contiguous block. For example, if you owned the networks 172.16.20.0/24 up to 172.16.23.0/24, then you could advertise a single network 172.16.20.0/22 out to the Internet. The advantages of CIDR are saving space on the bandwidth and greater efficiency. This is also known as route summarization.Route summarization only works if you work out the addresses in binary first.11111111.11111111.11111111.00000000 = 24-bit mask
10101100.00010000.00010100.00000000 = 172.16.20.0
10101100.00010000.00010101.00000000 = 172.16.21.0
10101100.00010000.00010110.00000000 = 172.16.22.0
10101100.00010000.00010111.00000000 = 172.16.23.0All of the bold parts of the addresses above are common and can be aggregated with one subnet mask to advertise them all. There are 22 common bits so we can use the mask 255.255.252.0, or /22, to advertise the entire block of addresses. This supernetting method reduces the amount of routes advertised, as shown in Figure 9 below:Figure 9. SupernettingCIDR allows the use of the slash system for representing subnet masks, for example, /26 instead of 255.255.255.192. Table 7 below shows a Class C subnetting chart with CIDR representation.Table 7. CIDRWe will cover this subject in more detail in Appendix B.How Many Subnets and How Many Hosts?Understanding this formula is crucial to passing IT exams such as the Cisco CCNA, as well as in real-life networking. Many networking emergencies could have been avoided by planning for future requirements during the design stage.IN THE REAL WORLD: When planning a network addressing scheme, always ask the client what his or her expected growth for the next few years is and account for that. Never design a network addressing scheme for what the client has currently.Given a network ID and subnet mask, how many subnets can we form and how many hosts are there per subnet? It all boils down to the powers of two:255.255.224.011111111.11111111.11100000.00000000           [16 bits ]         [3 bits]     [13 bits]          [Network]      [Subnet]      [Host]In the Class B example above, we have three subnet bits to use and we can use every combination of three binary numbers to make up different subnets:000,001,010,101,011,110,100 and 111In the past, we had to disregard the 000 subnet because this is the actual subnet, and we couldn't use the 111 subnet because this is for broadcasting. (Cisco has changed this for the CCNA syllabus and we MAY OR MAY NOT use these subnets, depending upon the circumstances.) Not an ideal situation to be in, really, so the only way round this is to read the question carefully.This leaves eight subnets to use (or six if you are not permitted to use subnet-zero, but let's assume it is okay to use it).Alternatively, we could write it this way:2^3 (2 x 2 x 2) = 8 subnetsGenerally, the total number of subnets will be 2^subnet bits (and take two away if you are not allowed to use subnet-zero).How many hosts?We have 13 bits left for the host addresses:2^13 - 2 = 8190 hosts.For the subnet mask above, we have eight subnets and each subnet has 8190 hosts available for use.INSPIRATION: Don't worry if none of this makes any sense at the moment. Just keep on going. Once you learn the easy way to subnet using the Subnetting Secrets Chart©, you will realise that this is not difficult at all.Here is another example:131.107.32.0 (network address)255.255.224.0 (subnet mask)We have a Class B address and we are taking 3 bits from the host bits (3 binary bits is 11100000, which is 128 + 64 + 32 = 224). There isn't room to fit in every permutation so the output has been shortened and is shown below:11111111.11111111.11100000.00000000 255.255.224.0 (subnet mask)  
10000011.01101011.00100000.00000000 131.107.32.0 (this is the subnet)
10000011.01101011.00100000.00000001 131.107.32.1 (this is the first host)
10000011.01101011.00100000.00000010 131.107.32.2 (this is the second host)
10000011.01101011.00100000.00000011 131.107.32.3 (this is the third host)
10000011.01101011.00100001.11111111 131.107.33.255 (we keep counting up)
10000011.01101011.00100011.11111111 131.107.35.255 (keep going)
10000011.01101011.00100111.11111110 131.107.39.254 (keep going)
10000011.01101011.00111111.11111110 131.107.63.254 (this is the last host)
10000011.01101011.00111111.11111111 131.107.63.255 (broadcast address)So our hosts are 131.107.32.1 to 131.107.63.254 (8190 in total).Because the IP address changed from 32.1 to 33.255 and all the way up to 63.254, it is easy to look at the hosts and mistake them for different subnets. When we write out the addresses correctly, we can see that all of the hosts in the example above are on the same subnet, and the first subnet would be 131.107.0.0, which is the zero subnet. We will take a closer look at this shortly.Using subnets means that all the hosts on the same subnet (e.g., the 131.107.32.0 subnet) will have to be attached to one router interface. You cannot decide to put half of your addresses on one side of the router and half on the other. Many engineers have made this mistake and have wasted hours trying to troubleshoot the problem.INSPIRATION: It may take several reviews of this book to understand IP addressing and subnetting. There is no need to get disheartened if it doesn't sink in the first or even the tenth time. Just keep following the examples and re-read the material as needed.Shortcut MethodWriting out IP addresses and subnets in binary is very time consuming, but there is an easier way to do it by following these five simple steps:Step 1: How many subnets? 2 to the power of masked bits (2^n).Step 2: How many hosts per subnet? 2 to the power of unmasked bits minus 2 (2^n - 2).Step 3: What are the valid subnets? 256 - the rightmost non-zero subnet to give us the subnet increment.Step 4: What are the valid hosts per subnet?Step 5: What is the broadcast address of the subnet?Example 1: Which subnet is 131.107.32.1 255.255.224.0 in?255.255.224.0 is 11111111.11111111.11100000.00000000 in binary.We are subnetting in the third octet. We could also write this out with a slash mask of /19 (19 masked network bits, or 1s).Step 1: How many subnets? We have stolen 3 bits (128 + 64 + 32 = 224 subnet), so:2^3 = 8 subnets (2 x 2 x 2 = 8)Step 2: How many hosts per subnet? We have 13 bits left for hosts, so:2^13 - 2 = 8190 hostsStep 3: What are the valid subnets? Take the rightmost non-zero subnet (224) away from 256: 256 - 224 = 32. We now know that we have eight valid subnets and each subnet will be an increment of 32. We can start at 0, if subnet-zero is permitted: 0, 32, 64, 96, 128, 160, 192 and 224. 224 is also permitted if subnet-zero is allowed. This part is crucial. If you get it wrong, then all of your subnetting will be off, so double-check it. Some people make the mistake of doubling the numbers (i.e., 32, 64, 128, etc.).Step 4: What are the valid hosts per subnet? It is best to write out the subnet number and the next subnet number. From this, we can work out our first and valid hosts:First subnet: 131.107.0.0  This is the zero subnet
Second subnet: 131.107.32.0*
 131.107.32.1 is in this subnet Third subnet: 131.107.64.0 Fourth subnet: 131.107.96.0 Fifth subnet: 131.107.128.0 Sixth subnet: 131.107.160.0 Seventh subnet: 131.107.192.0 Eighth subnet: 131.107.224.0So now we know we can use any number, including the 224 subnet, if subnet-zero is allowed. It is fairly clear from the list above that the host address we are looking for is in the second subnet (marked with the * character), so we can look at the available host numbers on this subnet as shown below:Subnet: 131.107.32.0 First host: 131.107.32.1 Second host: 131.107.32.2 Third host: 131.107.32.3(We could keep going but there are over 8000 hosts.)Last host: 131.107.63.254 (take one away from the broadcast to get this value)Broadcast: 131.107.63.255 (take one away from the next subnet to get this value)For the third (i.e., .64) subnet, we follow the same process of writing out the subnet and broadcast address. We can work out the broadcast address by writing out the next subnet. The subnet starting 131.107.64 is the third of our eight subnets. We then take one away from that to determine the broadcast address for the previous subnet, which is shown below:Subnet: 131.107.64.0 (take one away to get the broadcast for the .32 subnet)First host: 131.107.64.1 Last host: 131.107.95.254 Broadcast: 131.107.95.255We could go on, but can you see that we have gone past the IP address we are trying to find, which is 131.107.32.1.Step 5: What is the broadcast address? 131.107.63.255As you can see, it is pretty easy to work out if you write out the subnets first.What just happened there?Without being able to see the whole thing in binary, it does look a little strange. You just have to have confidence that the method works, and if in doubt, go back to binary. We can prove that the broadcast address is such by checking to see whether it is all 1s in binary. The last host will be the last number we can use without having all 1s (255 in decimal), as in the examples below:10000011.01101011.00111111.11111110 (131.107.63.254, one host bit not on)
10000011.01101011.00111111.11111111 (131.107.63.255, all host bits are on)The underlined bits are the subnet bits. The .254 has all the bits apart from 1 turned on. The broadcast address has all the host bits turned on. This tells the network that it is a broadcast packet to the subnet.If we follow the process for each subnet, using a subnet number of 255.255.224.0 and going up in increments of 32, we will get the following host numbers:Subnet 1: 131.107.0.1 to 131.107.31.254
Subnet 2: 131.107.32.1 to 131.107.63.254* (you can see host 32.1 is in this subnet) Subnet 3: 131.107.64.1 to 131.107.95.254 Subnet 4: 131.107.96.1 to 131.107.127.254 Subnet 5: 131.107.128.1 to 131.107.159.254 Subnet 6: 131.107.160.1 to 131.107.191.254 Subnet 7: 131.107.192.1 to 131.107.223.254 Subnet 8: 131.107.224.1 131.107.255.254INSPIRATION: If you still don't understand any of this, be assured that this is perfectly normal. Remember your first driving lesson?Example 2: Which subnet is host 10.20.1.23 255.240.0.0 in?We have taken 4 bits (240 in binary is 11110000, or 128 + 64 + 32 + 16) to make subnets from, since Class A addresses normally have the default 8 bits (255.0.0.0 is 11111111.00000000.00000000.00000000 in binary).Step 1: How many subnets?2^4 = 16 subnetsStep 2: How many hosts per subnet? We have 20 bits left for hosts, so:2^20 - 2 = 1048574 hosts per subnetStep 3: What are the valid subnets?256 - 240 = 16 (increment). Our subnets go up in increments of 16, as shown below:10.0.0.0 (the zero subnet) 10.16.0.0* 10.32.0.0 10.48.0.0 ....all the way up to... 10.224.0.0 10.240.0.0Step 4: What are the valid hosts per subnet?10.0.0.0 (hosts 10.0.0.1 to 10.15.255.254)
10.16.0.0 (hosts 10.16.0.1 to 10.31.255.254)*
 10.20.1.23 is in this subnet 10.32.0.0 (hosts 10.32.0.1 to 10.47.255.254) 10.48.0.0 (hosts 10.48.0.1 to 10.63.255.254) ...and so on to ... 10.224.0.0 (hosts 10.224.0.1 to 10.239.255.254) 10.240.0.1 (hosts 10.240.0.1 to 10.255.255.254)Step 5: What are the broadcast addresses? This is the last address before each subnet, as shown below:10.15.255.254 is the last host on the first subnet
10.15.255.255 is the broadcast address of the first subnet
10.16.0.0 is the next subnet 10.16.0.1 is the first host on the next subnet 10.31.255.254 is the last host
10.31.255.255 is the broadcast address of the second subnet
10.32.0.0 is the next subnet 10.32.0.1 is the first host on the next subnet 10.47.255.254 is the last host
10.47.255.255 is the broadcast address of the third subnet
10.48.0.0 is the next subnet, etc.You will learn how to shorten this last step shortly.Exam QuestionsIn IT exams, you will often have one of two types of subnetting questions.  The first type you have just seen. You have been given a certain network number and subnet mask and you need to determine which subnet the IP address is in. The second type of question involves designing a subnet mask to give a customer a certain number of hosts and a certain number of subnets (we will cover this shortly).We will shorten the five steps above later. For now, it does help to go through them at length to answer any type of subnetting question.Example 1: Which subnet is host 192.168.21.41 /28 in?The first and most important task is to work out how to change the /28 mask into a full subnet mask. You already know that each octet is 8 binary bits and 8 + 8 + 8 = 24 binary bits, which is 255.255.255.0. We need to add 4 to 24 to get 28, which is 128 + 64 + 32 + 16 binary places, or 11110000, or 240. The Subnetting Secrets Chart© (shown later) will make this task so easy you will wonder what all the fuss was about.With 4 bits of masking, we know we have 2^4 = 16 subnets. This leaves 4 bits for the hosts, which is 2^4 - 2 = 14 hosts per subnet.The subnet mask is 255.255.255.240 (4 masked bits on the last octet), so 256 - 240 = 16 (increment).We want to go up in subnets until we find the one where host 41 is (subnet 3 below).Subnet 1: 192.168.21.0 (hosts 1 to 14; broadcast = 15) this is the zero subnetSubnet 2: 192.168.21.16 (hosts 17 to 30; broadcast = 31)Subnet 3: 192.168.21.32 (hosts 33 to 46*; broadcast = 47) (41 is in this range)Subnet 4: 192.168.21.48 (hosts 49 to 62; broadcast = 63)Subnet 5: 192.168.21.64 (hosts 65 to 78; broadcast = 79)...and so on, up to...Subnet 16: 192.168.21.240 (hosts 241 to 254; broadcast = 255)Example 2: Which subnet is host 10.65.2.5 /10 in?Turn the /10 into a subnet mask. 255 is 8 binary bits, so we need to add 2 to get to 10, and 2 binary bits is 128 + 64, which is 192, or 11000000.2 masked subnet bits = 255.192.0.02^2 = 4 subnets2^22 - 2 = 4194302 hosts per subnet.256 - 192 = 64 (increment)Subnet 1: 10.0.0.0 (hosts 10.0.0.1 to 10.63.255.254; broadcast = 255)Subnet 2: 10.64.0.0 (hosts 10.64.0.1 to 10.127.255.254*; broadcast = 255)
(65 is in this range)Subnet 3: 10.128.0.0 (hosts 10.128.0.1 to 10.191.255.254; broadcast = 255)Subnet 4: 10.192.0.0 (hosts 10.192.0.1 to 10.255.255.254; broadcast = 255)Let's use the Subnetting Secrets Chart© to answer the next example.Example 3: Which subnet is 192.168.100.203 /27 in?We know that three binary octets is 24 bits, and to get to 27, we need to add 3. Tick down three numbers from the upper 'Subnets' column on the chart. This will give you the value of 224, so our subnet /27 is 255.255.255.224. We can then tick three across on the 'Bits' row to get the subnet increment, which is 32 (or just take 224 away from 256 if you prefer).Subnetting Secrets Chart©We are subnetting on the third octet, so we just add up the subnets until we get to the one with the number 203 in it. I would prefer to start with a multiple of 32 to save time, 160 for example, but you may prefer to start with 0, 32, 64, etc. for now. Just remember that in the exam time is of the essence.Subnet 1: 192.168.100.0 (hosts 1 to 30; broadcast = 31) Subnet 2: 192.168.100.32 (hosts 33 to 62; broadcast = 63) Subnet 3: 192.168.100.64 (hosts 65 to 94; broadcast = 95) Subnet 4: 192.168.100.96 (hosts 97 to 126; broadcast = 127) Subnet 5: 192.168.100.128 (hosts 129 to 158; broadcast = 159) Subnet 6: 192.168.100.160 (hosts 161 to 190; broadcast = 191)
Subnet 7: 192.168.100.192 (hosts 193
to
222;
broadcast = 223)*
Subnet 8: 192.168.100.224 (hosts 225 to 254; broadcast = 255)The host 192.168.100.203 is in the subnet 192.168.100.192.There are a lot more examples in Part 2 of this book.IN THE REAL WORLD: A special command called 'ip subnet-zero' on Cisco routers (more on this later) allows the use of subnets starting with 0. Cisco never used to ask about this type of subnet in the exam.Working Out How Many Subnets and How Many HostsThe Subnetting Secrets Chart© will enable you to answer any question in the exam. This chart will ensure you can answer any subnetting question in an exam or during an interview within about 15 seconds (after practise!). Here it is again, without the tick marks:Subnetting Secrets Chart©INSPIRATION: The Subnetting Secrets Chart© above will enable you to answer quickly and accurately any subnetting question in the exam. Students on my Cisco CCNA boot camp have saved weeks of study time and valuable exam minutes by using this chart.What the Subnetting Secrets Chart© helps you to do is easily and quickly work out how many bits are being used for subnetting, which subnet the host is in, how many hosts per subnet and how many subnets.Let's look at the following example:How many subnets and hosts does the address 192.168.2.0 /26 give us?First, we need to take an extra 2 bits from the normal 24-bit mask. Tick off two numbers down in the upper 'Subnets' column (128, and then 192), giving us the mask of 192, or, to be more specific, 255.255.255.192.You can work out that it is 2 bits being used if you remember that each octet count is eight. 255.0.0.0 is 8 binary bits, 255.255.0.0 is 16 binary bits and 255.255.255.0 is 24 binary bits. If we have a /26 mask then we need to add 2 onto the 255.255.255.0 mask, which is 24 bits plus 2 more, or 255.255.255.192.We have taken 2 bits for the subnets, so in the 'Powers of Two' column, tick down two numbers (2 and then 4). If subnet-zero is not allowed, you can take away 2 (for the subnet and the broadcast address), but if it is allowed, you do not need to take 2 away. This may cause a little confusion to the novice subnetter, but this is how Cisco wants things for the CCNA syllabus (other vendors may differ). This gives us four subnets (or 4 - 2 = 2 if we can't use subnet-zero).Now we know we have 6 bits left for the hosts (8 - 2 = 6 bits remaining), so tick off 6 places on the 'Hosts - 2' column to get our number of hosts. Six down gives us 64, and taking 2 away for the subnet and the broadcast address gives us 62 hosts per subnet. Easy, isn't it?Subnetting Secrets Chart©Here's another example:You are given an IP address of 192.168.5.0 255.255.255.0. You are the network administrator and need to subnet this address to make six subnets each, with at least 15 hosts per subnet.Go back to the chart and go down the 'Powers of Two' column until you get to a number that gives you the six subnets. Two and four won't be enough but eight gives you six subnets with two extra (it is okay if you have to go just over). So now we know we need to steal 3 bits for subnetting. Tick down three places on the upper 'Subnets' column, starting at 128 and then 192, and we get 224.Stealing 3 bits leaves us 5 bits left for hosts per subnet. If you tick down five places on the 'Hosts - 2' column, you will see that this gives us 30 (32 - 2) hosts per subnet, which is more than enough for our requirements.The answer is you need subnet 255.255.255.224 (or a /27 mask) to get your six subnets. If you tick down three in the lower 'Subnets' column, you can tick down three in the upper 'Subnets' column to determine the correct subnet mask, as shown below:Subnetting Secrets Chart©INSPIRATION: You will also need to work through Part 2 to really understand how it all works. It's like riding a bike - you will soon wonder how you ever struggled.IN THE EXAM: Once the exam starts, you are permitted to write anything you like on the paper provided. Write down the Subnetting Secrets Chart© above and you will be able to answer any subnetting question. (This is the best tip in the whole book, by the way.)IP Subnet-Zero (Again)Since Cisco IOS version 12.0, there has been a default command known as 'ip subnet-zero' turned on automatically. This command allows you to use the all 0s subnet and the all 1s subnet. This has actually been the case since RFC 1918 was released. This means that you no longer have to take away two subnets when calculating your subnetting. The configuration below illustrates this command:RouterA#show run Building configuration...Current configuration: ! ! Last configuration change at 17:22:55 UTC Mon Mar 22 2004 ! NVRAM config last updated at 17:22:55 UTC Mon Mar 22 2004 !
version 12.0
service timestamps debug datetime msec service timestamps log datetime n▫ service password-encryption ! hostname RouterA ! enable secret 5 $1$qtEP$YykBEn/hCaQK3batxzhXc/ !
ip subnet-zero
isdn switch-type basic-net3 --More—Traditionally, Cisco has ignored this feature for the CCNA exam but this has now changed. You should be aware of its existence because of its wide use in the real world of networking. For example, take 192.168.1.0 /26. This time we perform exactly the same steps as usual, and when permitted the use of subnet-zero, we are allowed to use the 0 subnet and last subnet consisting of all 1s, so we arrive at the following:255.255.255.192256 - 192 = 64We have stolen 2 bits for subnetting, which would usually mean we have only two useable subnets. Since we are ignoring this rule this time, we can use all four subnets, as shown below:192.168.1.0  We can now use this subnet 192.168.1.64 192.168.1.128 192.168.1.192  We can now use this subnetSome people do become confused about this issue. Traditionally, when calculating subnets, we have always taken away two because we were not able to use the zero subnet and the last (here, the 192) subnet. We are allowed to use them in the real world, and now for the CCNA exam we should be allowed to use it. If this is not allowed, then you know you just take two away, and you are not allowed to use the zero subnet or the last subnet as usable subnets.Please note however, what Cisco traditionally has had to say on the subject of subnet-zero:"Subnetting with a subnet address of zero is illegal and strongly discouraged (as stated in RFC 791) because of the confusion that can arise between a network and a subnet that have the same addresses. For example, if network 131.108.0.0 is subnetted as 255.255.255.0, subnet zero would be written as 131.108.0.0 - which is identical to the network address."Part 2 covers subnetting in more detail. It will take a few read-throughs to completely understand subnetting and IP addressing in detail.Secondary IP AddressYou are not restricted to using just one IP address on an interface of a Cisco router. You can assign an unlimited number of addresses using the 'ip address ip address subnet mask secondary' command, as illustrated below:Router#config t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#interface serial 0 Router(config-if)#ip address 192.168.1.1 255.255.255.0 Router(config-if)#ip address 192.168.2.1 255.255.255.0 secondary Router(config-if)#You may need to do this because you need to use more than one subnet on the same physical segment of the network. An example of this is an insufficient amount of host addresses available with the subnet you are using.Wildcard MasksWildcards masks are of particular relevance to network engineers who configure access lists (see below examples) on routers or who implement OSPF routing on networks. If neither of these apply to you, then please feel free to skip this section.All the practical examples here pertain to configurations on Cisco routers. If you are working with different vendors, then the command line and syntax will be different. Access lists are used to decide which traffic to permit through a router.The wildcard mask can cause confusion amongst anybody new to access lists. Just remember that the router is looking in binary instead of decimal. The wildcard mask is there to tell the access list which parts of the address to look at. A 1 in binary means that part of the address can be ignored and a 0 means it must match.Example 1: If I want to match all traffic from 172.16.2.x, then I would add the wildcard mask 0.0.0.255, or in binary:10101100.00010000.00000010.00000000 = 172.16.2.0 00000000.00000000.00000000.11111111 = 0.0.0.255    Match        Match       Match       IgnoreIn action, this would mean any host from the network starting with 172.16.2.x would match the wildcard. However, 172.16.3.x would not match the wildcard mask.Example 2: Here we have an access list permitting any traffic from the 10.x.x.x network:access-list 9 permit 10.0.0.0 0.255.255.255There is an implicit 'deny all' at the end of Cisco access lists. When you apply this to an interface, the only permitted network will be 10.x.x.x, as shown below:access-list 9 permit 10.0.0.0 0.255.255.255(access-list 9 deny 0.0.0.0 255.255.255.255)  this is present but you won't see it. It is the 'deny any' command.Example 3: This access list permits three networks and denies traffic from any other network, as shown below:access-list 12 permit 172.16.2.0 0.0.0.255  172.16.2.x allowed access-list 12 permit 192.168.1.0 0.0.0.255  192.168.1.x allowed access-list 12 permit 10.4.0.0 0.0.255.255  10.4.x.x allowedExample 4: When you want to deny a few networks, subnets or hosts and permit the rest, use the logic shown below:access-list 15 deny 172.16.0.0 0.0.255.255 access-list 15 deny 192.168.2.1  you can specify a host address
access-list 15 permit anyWe are denying anything from the 172.16.x.x network, but we can also specify a single host without using a wildcard mask. Just enter the host number and the router will add an automatic 0.0.0.0 to it.Lastly, we have added 'permit any' to the end of the list. This is to prevent the implicit 'deny any' from denying any other traffic. If you forget this line, all traffic will be denied anyway.You can break down wildcard masks from the default subnet boundaries just as you can use VLSM to change the default subnet mask for an IP address.Example 5: If you wanted to deny the 192.168.100.96 255.255.255.224 subnet, you would use the following wildcard mask:0.0.0.31It would make more sense if we write this out in binary:11111111 11111111 11111111 11100000 = 255.255.255.22400000000 00000000 00000000 00011111 = 0.0.0.31The access list is matching the first 27 bits and the last 5 can be any. The simplest way to look at it is to change each on bit to an off bit when you are writing out the wildcard mask.Example 6: If you wanted to permit or deny subnet 10.1.64.0 255.255.192.0, you would need to create a specific wildcard mask to match that subnet. The wildcard mask needs to be the reverse of the subnet mask to permit or deny this subnet, as shown below:11111111 11111111 11000000 00000000 = 255.255.192.000000000 00000000 00111111 11111111 = 0.0.63.255When you add the two columns together and get 255, you know the wildcard mask is correct, as shown below:Example 7: What wildcard mask would deny the subnet 172.16.32.0 255.255.240.0 based on the chart below?The access list would read permit/deny 172.16.32.0 0.0.15.255.Wildcard masks are commonly used with OSPF to advertise specific subnets.FOR THE EXAM: It would be time well spent to practise your wildcard masks for various subnets, such at 192, 224, 240, etc.Practise Questions1. What is 224 in binary?2. How does a Class B begin in binary?3. What is the range for Class C addresses?4. What are the reserved IP addresses?5. What is 255.255.255.252 as a slash address?6. What subnet is host 192.168.2.130 /26 in?7. Which Class C subnet will allow for only two hosts?8. What is the hex value C7 in decimal and binary?9. How many bits are in an IPv6 address?10. What are Class D addresses used for? 







Answers1. 111000002. 103. 192-2234. 10.x.x.x, 172.16.x.x-172.31.x.x, 192.168.x.x5. /306. 192.168.2.1287. 255.255.255.2528. 199 and 110001119. IPv6 uses 16-bit hexadecimal number fields, representing a 128-bit address10. MulticastingConversion Examples1. Convert 1111 to hex and decimal:Hex = FDecimal = 152. Convert 11010 to hex and decimal:Hex = 1ADecimal = 263. Convert 10000 to hex and decimal:Hex = 10Decimal = 164. Convert 20 to binary and hex:Binary = 10100Hex = 145. Convert 32 to binary and hex:Binary = 100000Hex = 206. Convert 101 to binary and hex:Binary = 1100101Hex = 657. Convert A6 from hex to binary and decimal:Binary = 10100110Decimal = 1668. Convert 15 from hex to binary and decimal:Binary = 10101Decimal = 219. Convert B5 from hex to binary and decimal:Binary = 10110101Decimal = 181The Subnetting Secrets Chart©







Subnetting Secrets: Part 2In Part 2, you will apply everything you have learned in Part 1. Part 2 is far more streamlined than Part 1 and is purely aimed at showing you the easy way to subnet. By going through Part 2, you are going to become a subnetting expert.







Part 2 - The Easy Way to SubnetThe Easy Way to SubnetSubnetting is easy, really easy in fact. Even if you don't understand how it all works the first or the hundredth time, if you follow the system outlined in this book, you will come to the correct answer every time without fail.By the end of this book, you will be well on the way to being able to answer most subnetting questions in your head in seconds. Make sure you have read through Part 1 before you launch into Part 2. I am presuming you have read through that at least once and now understand some of the fundamentals, such as powers of 2 and binary mathematics.FOR THE EXAM: When you reach the subnetting questions in the exam - RELAX! Take three deep breaths to get some extra oxygen into your brain and just follow the steps you have learned here.Class C SubnettingHere are the possible Class C subnets:Logic tells us that the more host bits we steal, the more subnets we will have but with fewer hosts available per subnet.We know from Part 1 that we need to follow five simple steps in order to answer any subnetting question. Here are the five steps again:Step 1. How many subnets? 2 to the power of masked bits (and - 2 if subnet-zero is not allowed).Step 2. How many hosts per subnet? 2 to the power of unmasked bits - 2.Step 3. What are the valid subnets? 256 - the rightmost non-zero subnet.Step 4. What are the valid hosts per subnet?Step 5. What is the broadcast address of the subnet?The first subnet of a Class C address we can use involves taking 1 bit of the remaining 8 host bits. If you aren't sure of what is happening with the binary numbers, then go back to Part 1. For the quick method, we won't have time to write things down in binary.Example 1: Which subnet is host 255.255.255.128 /25 in?I know we are not supposed to have 1 bit for subnetting, but there are exceptions. It is slightly awkward to start with the exception, but we need to address it some time and there is no time like the present. You would use this subnet if you wanted two subnets each containing 126 hosts on a Class C subnet.The Subnetting Secrets Chart© works for the IP subnet-zero example. We can use the zero subnet, which is the first bit off, and the second subnet, which is the first bit on, as illustrated below:We have taken 1 bit to use for subnets, so tick down one place on the upper 'Subnets' column, giving us the value 128, which gives us the subnet mask 255.255.255.128 (which is useful if you had only been given the /25 mask). You can then tick down one place on the lower 'Subnets' column to show that we have two subnets. We have 7 bits left for the hosts, so tick down seven places on the 'Hosts - 2' column to reveal that we have 126 (128 - 2) hosts per subnet.Subnetting Secrets Chart©If, in the exam, you were asked which subnet host 192.168.12.68 /25 is in, you would simply follow the steps above and see that host number 68 is within subnet 192.168.12.0, as illustrated below:Subnet 1: 192.168.12.0 (hosts 1 to 126; broadcast 127)Subnet 2: 192.168.12.128 (hosts 129 to 254; broadcast 255)If the above example doesn't make sense at the moment, then leave it for now and come back to it later. It will still be here and will make more sense after you go through the examples below.Example 2: Which subnet is host 255.255.255.192 /26 in?We can rely on the Subnetting Secrets Chart© here as well.Step 1. How many subnets?We know that the default Class C mask is 24 bits, or 255.255.255.0, and that this example is using a /26 mask, which means 2 bits have been stolen after the default mask. We can tick down two boxes on the upper 'Subnets' column to get to the 192 box to determine the subnet mask value of 255.255.255.192.Next, we can tick down two boxes on the lower 'Subnets' column, giving us 4 (and if subnet-zero is not allowed, take away 2 from the answer to cater for the subnet and broadcast addresses).2^2 = 4 subnetsSubnetting Secrets Chart©Step 2. How many hosts per subnet?We have 6 bits at the top of the Subnetting Secrets Chart© left unchecked, so we know we have 6 bits left for the hosts. We can now tick down six host boxes on the 'Hosts - 2' column to get 64 - 2. We have put this next to the original two ticks to save space.You can refer to the Subnetting Secrets© videos if you really want to see how this process works.2^6 - 2 = 62 hostsStep 3. What are the valid subnets?We take the subnet number (in this case, 192) away from 256 (256 - 192 = 64), or we tick two places across the upper 'Bits' row because we ticked down two on the 'Subnets' column. We will use subnet-zero throughout this book, which will allow us to use the 0 and the subnet, which is 192 in this case. We have 0, 64, 128 and 192, so each subnet number would end in the following:x.x.x.0 x.x.x.64 x.x.x.128 x.x.x.192Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?We can actually answer questions four and five at the same time.That was fairly simple, wasn't it? If you follow the Subnetting Secrets Chart©, you can't go wrong.If you were asked in the exam which subnet host 192.16.150.76 /26 is in, you would see that it is within subnet 192.16.150.64 because 192.16.150.0 is too low and 192.16.150.128 is too high. The subnets would be as follows:Subnet 1: 192.16.150.0 (hosts 1 to 62; broadcast = 63) Subnet 2: 192.16.150.64 (hosts 65 to 126; broadcast = 127)* Subnet 3: 192.16.150.128 (hosts 129 to 190; broadcast = 191) Subnet 4: 192.16.150.192 (hosts 193 to 254; broadcast = 255)Remember, the * character in all examples indicates the correct subnet (i.e., the subnet the host address is in).Example 3: Which subnet is host 200.100.206.99 /27 in?We have taken 1 more bit for subnetting. You know that to get to /24 requires a subnet mask of 255.255.255.0 (i.e., 24 binary bits). We need to add 3 to 24 to get to 27, so now you have to tick down 3 bits from the upper 'Subnets' column to get 224. The subnet mask for /27 is therefore 255.255.255.224.Step 1. How many subnets?2^3 = 8 subnetsTick down three boxes on the lower 'Subnets' column, giving us 8.Subnetting Secrets Chart©Step 2. How many hosts per subnets?We have 5 remaining bits for the hosts. Tick down five places on the 'Hosts - 2' column to give us 32, and take away 2.2^5 - 2 = 30 hostsSo we have eight subnets, each with 30 hosts.Step 3. What are the valid subnets?We take 224 away from 256, or tick three across the 'Bits' row.256 - 224 = 32 (increment), so:0, 32, 64, 96, 128, 160, 192 and 224Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?The above boxes represent the last octet, so if you wanted to write the subnets out in full you would have the following:200.100.206.0 200.100.206.32 200.100.206.64 (we still haven't reached the .99 host). 200.100.206.96* (the .99 host must be in here since the next subnet is too high). 200.100.206.128 (we could carry on subnetting but there is no point, as we already have the answer).Can you see how simple the process is? You must be careful to tick the right boxes on the Subnetting Secrets Chart© to start with or your entire subnetting results will be wrong.Example 4: What is the broadcast address for host 190.200.200.167 /28?This question is just a distraction because we simply follow the same process and the correct answer will be revealed.We can see that we have to convert the /28 address into a subnet mask. The subnet mask for /24 is 255.255.255.0, and we need to add 4 to 24 to get 28. We have stolen 4 bits for subnetting, so you need to tick down four boxes (128, 192, 224 and then 240) on the upper 'Subnets' column to get to 240. Our subnet mask is 255.255.255.240.Step 1. How many subnets?2^4 = 16 subnetsYou should know the drill now. Tick down four boxes on the lower 'Subnets' column.Subnetting Secrets Chart©Step 2. How many hosts per subnet?We have 4 bits left for the hosts.2^4 - 2 = 14 hostsSo we have 16 subnets, each containing 14 hosts.Step 3. What are the valid subnets?256 - 240 = 16, or tick across four on the 'Bits' row.So our subnets are going up in increments of 16 (starting at 0), as shown below:0, 16, 32, 48, 64, 80 and up to 240Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?Our subnets are as follows:190.200.200.0 (hosts 1 to 14; broadcast = 15) 190.200.200.16 (hosts 17 to 30; broadcast = 31) Multiply 16 by 10 next to save time (recommended for the exam). 190.200.200.160 (hosts 161 to 174; broadcast = 175)*190.200.200.176, etc.Following the same process, we can see that the broadcast address for host 190.200.200.167 is 192.200.200.175, and the subnet address is 190.200.200.160.Example 5: Which subnet is host 200.100.55.86 /29 in?By now you should be familiar with ticking down and across on the Subnetting Secrets Chart©. Make sure you continue to use it for the examples. We need to work out how many to add to /24 to get to /29; the answer is 5, of course, so tick down five in the upper 'Subnets' column to get your mask of 255.255.255.248.Subnetting Secrets Chart©Step 1. How many subnets?2^5 = 32 subnetsStep 2. How many hosts per subnet?2^3 - 2 = 6 hostsStep 3. What are the valid subnets?256 - 248 = 8, or tick five across the 'Bits' row.So we will go up in increments of 8. We don't have the space to count up all the way to 248 in multiples of 8. In the exam, you won't have time to do it either, so you can skip to the number closest to the subnet you are being asked about, such as 40, 80, 120, etc. Just make sure the number is divisible by 8.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?The subnets are as follows:200.100.55.0 200.100.55.8, etc., (but we really want to get to host 88, so I will multiply 8 by 10 to jump ahead). 200.100.55.80 (hosts 81 to 86; broadcast = 87).* 200.100.55.88Host 200.100.55.86 is in subnet 200.100.55.80.Example 6: Which subnet is host 210.25.200.165 /30 in?We use a 30-bit subnet mask for subnets that need only two hosts. A point-to-point connection is ideal for this.You should now write out your own Subnetting Secrets Chart© to get into the habit you will need for the exam. There is a blank Subnetting Secrets Chart© at the end of Part 2 for you to use but you will need to write it out by hand in IT exams or interviews.We need to get to /30 from the default /24 mask, so tick down six in the upper 'Subnets' column, giving you a mask of 255.255.255.252.Step 1. How many subnets?2^6 = 64 subnetsStep 2. How many hosts per subnet?2^2 - 2 = 2 hostsStep 3. What are the valid subnets?256 - 252 = 4, or tick six places across the 'Bits' row (0, 4, 8, 12, 16, etc., up to 248).FOR THE EXAM: Be careful not to go up to 8 and then double it, (i.e., 4, 8, 16, etc.). This is a very common mistake to make when a person is under pressure.Steps 4 and 5.What are the valid hosts per subnet and what is the broadcast address?Be careful not to spend an age counting up in multiples of 4 in the exam. I always look at the host number (165 in this example) and multiply the subnets 4 or 8 by 10. If we need to get to host 165, I would multiply 16 by 10, giving me the subnet 160 (which is a still a multiple of 4). The subnets are as follows:Subnet 210.25.200.160 (hosts 161 to 162; broadcast = 163) Subnet 210.25.200.164 (hosts 165 to 166; broadcast = 167)* Subnet 210.25.200.168Class B SubnettingThe principles for subnetting Class B addresses are exactly the same as for Class C addresses. You just need to remember that the default subnet mask for Class B addresses is 255.255.0.0, so the subnetting will take place from the third octet onwards.Here are all the possible Class B subnets:Example 1: Which subnet is host 255.255.128.0 /17 In?We need to get the hard one out of the way first. Let's just treat this like a normal subnet. The usual rules do not apply.We can use the 0 subnet in the third octet as long as we have some bits turned on in the fourth octet. Unfortunately, you have to think in binary to understand this example.The /17 indicates that we have added 1 bit to the default /16 mask to use for subnetting. Tick down one in the upper 'Subnets' column, giving us the mask 255.255.128.0.Subnetting Secrets Chart©Step 1. How many subnets?We can have 0 and 128, so we get 2, as in 2^1 = 2. You can see this by the one tick we have added to the lower 'Subnets' column (for the 1 bit we have stolen).Step 2. How many hosts per subnet?We have 7 bits left in the third octet and 8 in the fourth (hence, the '+ 8' in the Subnetting Secrets Chart©), giving us 15 host bits all together:2^15 - 2 = 32766 hostsWe can't really follow the rest of the subnetting questions for the 128 mask because the /17 mask is the exception. We do know, though, that we can have 0 in the third octet as long as we have no bits turned on in the fourth octet.So, if our host address was 120.100.55.86 /17, our subnets would be as follows:120.100.0.0 (hosts 0.1 to 127.254; broadcast = 127.255)*120.100.128.0 (hosts 128.1 to  255.254; broadcast = 255.255)The host above is in subnet 120.100.0.0.Example 2: What subnet is host 150.200.155.23 /18 in?The trick is to remember that we are still subnetting in the third octet. The default mask for Class B is 255.255.0.0, which is 16 binary bits. We need to add 2 to 16 to get to our /18 mask, so tick down two on the upper 'Subnets' column. Our subnet mask is 255.255.192.0.This will leave 6 host bits in the third octet and another 8 in the fourth octet (6 + 8 = 14 host bits).Subnetting Secrets Chart©Step 1. How many subnets?2^2 = 4 (indicated by ticking down two on the lower 'Subnets' column).Step 2. How many hosts per subnet?For this question, you are going to have to use your imagination to extend the Subnetting Secrets Chart©. The bits all represent the octet we are subnetting. If we subnet across two subnets, we will need to remember how many host bits are left.In this example, we have stolen 2 bits from the third octet, which leaves 6 bits in the third octet plus 8 in the fourth octet, giving us 14 bits. Tick down 14 host bits on the 'Hosts - 2' column and you'll arrive at the following:2^14 - 2 = 16382 hostsStep 3. What are the valid subnets?256 - 192 = 64 (or tick two across the 'Bits' row). Increments of 64 give us the following: 0, 64, 128 and 192.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?The numbers above are in the third and fourth octets. You could write out the entire subnet (as below) but this does take a lot longer:150.200.0.0 (hosts 0.1 to 63.254; broadcast = 150.200.63.255) 150.200.64.0 (hosts 64.1 to 127.254; broadcast = 150.200.127.255) 150.200.128.0 (hosts 128.1 to 191.254; broadcast = 150.200.191.255)* our host is in this range 150.200.192.0 (hosts 192.1 to 255.254; broadcast = 150.200.255.255)Host 155.23 is within the host numbers 128.1 to 191.254 in subnet 3.Example 3: Which subnet is host 160.24.67.200 /19 in?Can you write out your own Subnetting Secrets Chart© for this one?What do we have to add to /16 to get the mask of /19, and how many bits do we tick down and across in the upper half of the chart?Step 1. How many subnets?2^3 = 8 subnetsStep 2. How many hosts per subnet?2^13 - 2 = 8190 hostsStep 3. What are the valid subnets?256 - 224 = 32 (or tick three across the 'Bits' row). Increments of 32 give us the following: 0, 32, 64, 96, 128, 160, 192 and 224.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?Can you look at the table above and see which subnet host 67.200 is in?Answer: Subnet 160.24.64.0 contains host 160.24.67.200.What if you had been asked what the broadcast address for this subnet is?Example 4: Which subnet is host 190.50.100.200 /20 in?Write out a Subnetting Secrets Chart© again.How many do we tick down to get to /20 from the /16 default mask? Now tick the same number across the 'Bits' row to get the increment.Step 1. How many subnets?2^4 = 16 subnetsStep 2. How many hosts per subnet?2^12 - 2 = 4094 hostsStep 3. What are the valid subnets?256 - 240 = 16. Increments of 16 give us the following:0, 16, 32, 48, 64 and so on up to 240 (we can't fit them all in below).Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?We are looking for host 100.200, which is in the 96.0 subnet.Host 190.50.100.200 is in the 190.50.96.0 subnet.Example 5: Which subnet is host 180.22.56.65 /21 in?Follow the procedure for the previous examples to determine the correct mask for the /21 subnet.Step 1. How many subnets?2^5 = 32 subnetsStep 2. How many hosts per subnet?2^11 - 2 = 2046 hostsStep 3. What are the valid subnets?256 - 248 = 8 (increment), so:0, 8, 16, 24, 32, 40 ..., etc., 248.Or in full:180.22.0.0180.22.8.0180.22.16.0, etc.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?We can't fit in all of the available subnets, and in the exam, you will just want to find the answer as quickly as possible. Anything before or after the relevant subnet is of no concern to you (apart from working out the correct subnet).The correct subnet for the host 180.22.56.65 is 180.22.56.0.Are you starting to understand how it all works now? You may have understood this in the first go or it may take what seems like an age for it to sink in. How long it takes has nothing to do with how clever you are. Previous IT experience will help, but a lot of it will be down to when you last studied and whether the left or right side of your brain dominates.Don't force it in. Just follow the process over and over and you will get it, guaranteed.One more thing. Don't be surprised if it clicks into place all of a sudden and then goes away again. This is very common and is a sign that the information is passing from short- to long-term memory. It will come back again.Example 6: Which subnet is host 180.100.60.85 /23 in?Use the Subnetting Secrets Chart© to determine the subnet mask, the subnet increment, etc.Step 1. How many subnets?2^7 = 128 subnetsStep 2. How many hosts per subnet?2^9 - 2 = 510 hostsStep 3. What are the valid subnets?256 - 254 = 2 (increment), so:0, 2, 4, 6, 8, etc., 250, 252 and 254Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?You could jump from 6.0 to 60.0, which would hit the 60.85 host straightaway, as the next subnet would be 62.0. Host 180.100.60.85 is in the subnet 180.100.60.0.Example 7: Which subnet is host 130.100.200.121 /24 in?No, your eyes do not deceive you. Don't look at this subnet and think Class C. It is, in this instance, 8 bits of subnetting being used for a Class B address. Do not ponder too long over it, just follow the usual procedure.Use the Subnetting Secrets Chart©.Step 1. How many subnets?2^8 = 256 subnetsStep 2. How many hosts per subnet?2^8 - 2 = 254 hostsStep 3. What are the valid subnets?256 - 255 = 1 (increment), so:0, 1, 2, 3, 4, 5 and so on up to 255.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?If you just keep counting up in increments of 1, you will reach subnet 200.0. Host 130.100.200.121 is therefore in subnet 130.100.200.0.Example 8: Which subnet is host 191.20.56.65 255.255.255.128 in?This one is a bit easier because the (/25) subnet is written out in longhand for you already. Nine bits have been taken for use on the subnet. This is another tricky example that does not fit neatly into the usual formula we use. Instead of taking the 128 away from 256 to get the valid subnets, we use 255.We are also allowed to have a 0 in the third octet, if we have a bit turned on in the fourth octet. For each value such as subnet 10, you get 10.0 and then 10.128. If you remember that, you will be fine.Step 1. How many subnets?2^9 = 512 subnetsStep 2. How many hosts per subnets?2^7 - 2 = 126 hostsStep 3. What are the valid subnets?256 - 255 = 1 (increment), so:0, 1, 2, 3, 4, 5, etc., 255.Because we are subnetting in the fourth octet, we can actually use the 0 subnet in the third octet. This is possible because if we have a bit turned on in the fourth octet, we do not have all the host bits off. We can also use 255 on the last octet.If this doesn't make much sense at the moment, there is no need for concern. It is very doubtful you will come across this in exams or in interviews, but then again, it is a useful subnet for use in the real world, so you never know! You can write this out in binary later when you have time.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?Host 191.20.56.65 is in subnet 191.20.56.0. There isn't room to fill in every subnet value above, but you can see that the subnets would go up as follows:191.20.55.0 191.20.55.128 191.20.56.0* 191.20.56.128 191.20.57.0, etc.Example 9: Which subnet is host 180.100.1.220 /27 in?We have skipped a subnet, but the principles are exactly the same. Remember to use the Subnetting Secrets Chart© to save time and to insure that your answer is correct. You are hitting the fourth octet in this example, so you would just tick down three places in the upper 'Subnets' column (because you can't fit in the 8 bits in the third octet on the chart).Subnetting Secrets Chart©Step 1. How many subnets?2^11 = 2048 subnetsStep 2. How many hosts per subnet?2^5 - 2 = 30 hostsStep 3. What are the valid subnets?256 - 224 = 32 (increment), so:0.0, 0.32, 0.64, 0.96, etc., 255.32, 255.64, etc., 255.192 and 255.224Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?As before, if all of this doesn't make much sense, then let me assure you that this is normal. This is all based upon binary mathematics, but because we are using the fast decimal method, it will never look right. Keep on working through the examples and it will eventually make perfect sense - honest!We can manipulate the third octet because we can have bits on and off in the fourth octet. There are too many subnets to write out, but we can write out some of them.The above example works because as long as we can have bits turned on in the fourth octet, we can have all the bits off in the third octet.Next, we can turn bits on in the third octet.We can continue subnetting until we get to the number 255 in the third octet. We can go all the way up to subnet 255.224, since subnet-zero is allowed, as illustrated below:1.1.1.1.1.1.1.1|1.1.1.1.1.1.1.1|1.1.1.1.1.1.1.1|1.1.0.1.1.1.1.1 Subnet ---------------------------------------------------| Host bitsAll the subnet bits we can turn on are on. We can't have 1.1.1 for the first three subnet bits since this is the number 224, which is our subnet. When we turn on the last five bits (the host bits), this is a broadcast on the 255.192 subnet.Host 180.100.1.220 is in subnet 180.100.1.192.Example 10: Which subnet is host 150.60.200.107 /28 in?Use the Subnetting Secrets Chart© again. (The mask will be 255.255.255.240.) The chart will have to be used to represent the last octet. Taking the 12 masked bits we have stolen, we have to presume we have ticked across the first 8 bits of the third octet and have spilled over to the fourth octet, and ticked the last remaining 4 bits.Subnetting Secrets Chart©Step 1. How many subnets?2^12 = 4096 subnetsStep 2. How many hosts per subnet?2^4 - 2 = 14 hostsStep 3. What are the valid subnets?256 - 240 = 16 (increment), so:0, 16, 32, 48, 64, 80, 96, etc., 208, 224 and 240.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?The same rules apply as in the previous example. We can have all the bits off in the third octet as long as we have subnet bits on in the fourth octet.Here are the first subnets:Here are more subnets:Here are some more subnets:Here are the last subnets:Host 150.60.200.107 is in subnet 150.60.200.96. The full details for the subnet are subnet 150.60.200.96 (hosts 97 to 110; broadcast = 111).www.howtonetwork.net has a handy free subnet calculator you can download. I do not recommend relying on one to learn how to subnet, but it is a useful tool to check your working out of the questions.Subnetting in Your HeadYou can actually do subnetting without writing a thing down. It does take a bit of practice, but you will be able to see the question and know the right answer without even seeing the available answers.Let's use the following example:What subnet is 192.168.10.90 255.255.255.192 in?Can you take 192 away from 256 in your head?You should come to 64. If you start with the first subnet as 0 and then 64, the next is 128 and the last is 192. You can see the host number is 90, which is less than 128 and more than 64, so we know it is in the .64 subnet somewhere.Host 192.168.10.90 is in subnet 192.168.10.64.Here's another example:What subnet is 172.16.20.112 255.255.255.224 in?Take 224 away from 256, giving you 32. We can keep adding 32 until we come to the subnet containing 112 as an address. Not 32, not 64, could be in 96, and 96 + 32 = 128. Bingo! It is in the 172.16.20.96 subnet.Any of the subnets taken away from 256 will come to 2, 4, 8, 16, 32, 64 or 128. The more examples you do, you will remember what taken away from 256 equals what. You will instantly know that 256 - 224 = 32 or that 256 - 240 = 16. Once you have the result of that simple mental calculation, you have everything you need. Simple, isn't it?Subnetting is like riding a bicycle, The more you practice, the more natural it becomes. You will get to a point where you can look at an IP address and subnet mask and know which subnet it belongs to.Class A SubnettingThe principles are exactly the same for Class A subnetting as they are for Classes B and C. We just have more host bits available. We are going to keep this section fairly short since by now you have everything you need to answer any subnetting question.Here are the Class A subnets:Example 1: Which subnet is 10.100.100.93 /10 in?Remember that the default subnet mask for a Class A address is 255.0.0.0 (or /8), so we have 24 bits available for hosts or to use for subnetting. We will need to add 2 host bits to the Subnetting Secrets Chart© to get to the /10 value and to calculate the subnet and hosts per subnet.Subnetting Secrets Chart©Step 1. How many subnets?2^2= 4 subnetsStep 2. How many hosts per subnet?2^22 - 2 = 4194302 hostsStep 3. What are the valid subnets?256 - 192 = 64 (increment), so:0, 64, 128 and 192, or, if you want to write out the last three octets:0.0.0 64.0.0 128.0.0 192.0.0Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?Host 10.100.100.93 is in subnet 10.64.0.0.Note: Exams such as the CCNA are usually pretty fair, so I would be surprised if Cisco give you a subnetting question that will clearly take a considerable time to work out (such as working out powers of 2 to 22 places, as above). It is always better to train using the hard questions, though, and then the exam questions will appear easy to you.Example 2: Which subnet is host 10.210.204.70 /12 in?How many bits are we using for subnetting here? Are we subnetting on the first, second, or third octet?Step 1. How many subnets?2^4 = 16 subnetsStep 2. How many hosts per subnet?2^20 - 2 = 1048574 hostsStep 3. What are the valid subnets?256 - 240 = 16 (increment), so:10.0.0.0 10.16.0.0 10.32.0.0
etc. 10.176.0.0 10.192.0.0 10.208.0.0, etc. 10.224.0.0 10.240.0.0Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?Host 10.210.204.70 is in subnet 10.208.0.0.Example 3: Which subnet is host 10.200.100.107 /20 in?Use the Subnetting Secrets Chart© again. Remember that we will have to use the chart for the overspill bits from the third octet. You would have ticked 8 bits for the subnets in the second octet, leaving 4 bits to tick on the chart for the third octet.Step 1. How many subnets?2^12 = 4096 subnetsStep 2. How many hosts per subnet?2^12 - 2 = 4094 hostsStep 3. What are the valid subnets?256 - 240 = 16 (increment)I have written them out in full this time but I could have just as easily written 0.0, 16.0, 32.0, etc.:10.0.0.0 10.0.16.0 10.0.32.0 10.0.48.0, etc. 10.1.0.0 10.1.16.0, etc. 10.1.240.0 10.2.0.0 10.2.16.0, etc. up to 10.255.240.0Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?We can use 0 in the third octet as before, as long as we turn on a subnet bit in the second octet. We could start with 0 in the second octet if we wished, as long as we turned on a bit in the third octet.There are far too many to write out here so we will have to skip most of the subnets:Some more subnets:Some more subnets:Host 10.200.100.107 is in subnet 10.200.96.0.Subnet 10.200.96.0 (hosts 10.200.96.1 to 10.200.111.254; broadcast = 10.200.111.255).It can get fairly hard when working out class A subnets with what are traditionally thought of as Class B/C addresses. I would recommend working at these examples over and over until they start to make sense.Example 4: Which subnet is host 20.100.55.3 /26 in?Use the Subnetting Secrets Chart© again.Step 1. How many subnets?2^18 = 262144 subnetsStep 2. How many hosts per subnet?2^6 - 2 = 62 hostsStep 3. What are the valid subnets?256 - 192 = 64 (increment), so:20.0.0.0 20.0.0.64 20.0.0.128, etc. 20.0.14.192 20.0.15.0, etc.Steps 4 and 5. What are the valid hosts per subnet and what is the broadcast address?The subnet values need to be added to the second, third and fourth octets. The last octet must be multiples of 64, and 0 is permitted as long as there are bits turned on in the second and third octets. Below are the starting subnets:And more subnets:We can continue counting up but to get to the subnet containing host 20.100.55.3 would take some time. It is to be found in subnet 20.100.55.0.Subnet 20.100.55.0 (hosts 20.100.55.1 to 20.100.55.62; broadcast = 20.100.55.63).How Many Subnets and How Many Hosts?The second type of question you will be asked in the exam is to take a standard IP address and subnet mask and subnet it down further to provide X amount of subnets with X amount of hosts per subnet.Example 1: Your client has been given address 192.168.1.0 /24 and requires four subnets, and each subnet must be able to provide at least 10 hosts.Use the Subnetting Secrets Chart© and tick down the lower 'Subnets' column next to the 'Powers of 2' until you reach a value that will give you a minimum of four subnets.Subnetting Secrets Chart©Ticking down two boxes gives you the required four subnets. You can now tick down two on the upper 'Subnets' column to generate the correct subnet of 255.255.255.192 (or /26). You have stolen 2 bits from the last octet to generate the subnet mask, leaving 6 bits for hosts. Tick down six boxes on the 'Hosts - 2' column to find out how many hosts per subnet you have.You have 62 (64 - 2) hosts per subnet, which more than meets the client's requirements.Example 2: You have address 200.100.20.0 /24 and the client wants to break this down to at least nine subnets, each having at least 10 hosts per subnet.Here you need to generate AT LEAST nine subnets but not waste subnets. Tick down the lower 'Subnets' column until you reach the closest number possible to nine without wasting subnets.Subnetting Secrets Chart©The closest we can get is 16 because 8 is not sufficient. Tick down four places on the upper 'Subnets' column to generate a subnet mask of 255.255.255.240. You have taken 4 bits from the last subnet, leaving 4 bits for hosts.16 - 2 gives us 14 hosts per subnet, which is sufficient.Example 3: Your client has IP address 130.100.0.0 /16 and requires 30 subnets, each having at least 1000 hosts. Generate a subnet mask that meets this requirement.Same deal, but remember that we are taking bits from the third octet.Subnetting Secrets Chart©We have to tick down five boxes in the lower 'Subnets' column to get the value of 32, which is as close as we can get to 30 subnets. This leaves 3 bits in the third octet and 8 bits in the fourth octet for hosts (11 bits total).Five ticks down in the upper 'Subnets' column gives us a subnet of 255.255.248.0.Tick down 11 places in the 'Hosts - 2' column, giving us 2046 hosts per subnet.Easy peasy.







Congratulations!Well done on getting this far and still being here. Subnetting is one of those necessary skills for network engineers, and yet it is also one of the most neglected skills. If you can confidently subnet, you will insure you will be a useful addition to any network team or to prospective clients as a network consultant.Make sure you periodically review both parts of this book and the videos to keep your subnetting skills sharp.One last piece of advice - make sure you can write down the Subnetting Secrets Chart© by hand for use in IT exams or interviews.Paul Browning - February 2012 







Subnetting ResourcesSubnetting calculators:www.howtonetwork.net/public/department78.cfmSubnetting challenge questions: www.subnetting.orgRFCs:RFC 1918 - Address Allocation for Private Internets
RFC 1219 - On the Assignment of Subnet Numbers
RFC 950 - Internet Standard Subnetting Procedure
RFC 940 - Toward an Internet Standard Scheme for Subnetting
RFC 932 - Subnetwork Addressing Scheme
RFC 917 - Internet SubnetsThe Subnetting Secrets Chart©







Appendix A - VLSMVLSMVLSM is the process whereby you take a major network address and then break it down into different subnets, with different subnet masks at various points. In the Cisco CCNA exam, you may well be faced with a scenario where you are required to design an IP addressing scheme to fit certain requirements. It is best to illustrate with the following example, illustrated in Figure 1-A below:Figure 1-A. ACME Company with No VLSMYou may have spotted a few problems with the addressing scheme above. The most important issue is the breach of the conservation of IP addresses. If you are using RFC 1918 addresses (non-routable, such as 10.x.x.x), then perhaps you may not worry about address wastage but this is very bad practise, and for Cisco exams, you can guarantee an expectation that you will conserve IP addresses.With a /28 mask, or 255.255.255.240, you have 14 hosts per subnet. This may be fine for your LAN on either end but for your WAN connection, you only need two IP addresses, meaning you are wasting 12 addresses! We could change the masks to /30, or 255.255.255.252, but then for our LANs, we will obviously need more than two hosts.The first workaround is to buy a separate network address for each network (two LANs and one WAN), but this would prove expensive and unnecessary. The other alternative is to break down our subnet further using VLSM, which is actually what it was designed to do!Figure 2-A. ACME Company with VLSMIn Figure 2-A above, we can see that the WAN link now has a /30 mask, which gives us two usable hosts. In addition, we have a tighter addressing allocation. Should ACME expand (as companies do), we can easily allocate further WAN links and LANs.Figure 3-A. ACME with a New OfficeIn Figure 3-A above, we can see that ACME has now grown and has added a remote office. Because you have taken the time to plan and allocate a carefully thought out VLSM scheme, you can simply allocate the next block of IP addresses.But Won't The IP Addresses Clash?This is a very common question and it's very valid. Let's say we have address 19.16.1.1/28 for one of our LANs; you will not, therefore, be able to use the IP address 19.16.1.1 with any other subnet mask. The IP address can be used only once, no matter which subnet mask is attached to it.It is a bit of a head scratcher for people who are new to networking or subnetting, but it does work. Feel free to think on it some more, or just accept that with VLSM (RFC 950), it is not possible to reuse IP addresses.VLSM in the CCNA ExamIn the CCNA exam, you may be asked to address a network using VLSM and allocate the correct masks to the WAN and LAN links. The following is a network you have been asked to design an addressing scheme for:Figure 4-A. ACME II CompanyIn Figure 4-A, ACME II company has been allocated the network 200.100.100.x, with a default mask of 255.255.255.0. If we keep the standard mask, we are left with one network with 254 usable hosts. If you want to check this for yourself, please use the Subnetting Secrets Chart©. The direct link to download is http://www.box.net/shared/yyx4y8y0zf.If you use the bottom part of the Subnetting Secrets Chart©, you can tick down eight places and see that we have one subnet with 256 - 2 hosts, giving us 254. I don't want to dwell on that part of the calculations because that is covered very well earlier in this book.Our challenge is this then. We have three serial connections and each requires only two usable host addresses. We have four LANs that need anything from 20 to 100 hosts. If we just design a mask to give us anything from 20 to 100 hosts, we are going to be wasting a lot of addresses. To get 100 hosts (using the Subnetting Secrets Chart©), we tick down seven places, giving us a mask of 255.255.255.128 (because we only have 1 bit left to tick down for the subnets portion). This gives us 126 hosts (128 - 2). We would then have two networks, one starting 200.100.100.0 and one starting 200.100.100.128. Not great, to be honest. We need seven subnets (three WAN and four LAN) and some only require 20 hosts, so why waste 108 addresses? What we need to do is refer to the Subnetting Secrets Chart©.If we use the bottom portion and tick down until we find a number close enough to give us the 100 hosts, the only number we can use is 128, which is seven ticks down. We are stealing 7 bits from the host portion, leaving us 1 bit for subnetting.If we use the upper portion of the Subnetting Secrets Chart©, then we will tick down one place to reveal the subnet mask of 128.When we use the 128 subnet with ACME II company's IP address, we get subnet 200.100.100.0 and subnet 200.100.100.128, both with a mask of /25, or 255.255.255.128. For our network needing 100 hosts, we can use the 200.100.100.128 subnet. For the first host, we will use 200.100.100.129 and so on, up to 200.100.100.229. So now we have the following:Large LAN Hosts200.100.100.128/25 - LAN (hosts 129 to 254)200.100.100.0/25 - available for use or for VLSMWe need to allocate hosts to three remaining LAN networks and three WANs. The other three LANs all need anything from 20 to 30 hosts. If you tick down five on the 'Hosts - 2' column, you will get to 32, and taking 2 away gives us 30 hosts. If we steal 5 bits from the host portion, we are left with 3 bits for the subnet (because there are 8 bits in every octet).Tick down three places on the lower 'Subnets' section to reveal a subnet mask of 224. This mask will give us eight subnets (we only need three for the LANs), and each subnet will have up to 30 available host addresses. Can you see how this will fit ACME II requirements?If you tick across three places on the 'Bits' row, you will see that our subnets go up in increments of 32. Our subnets will be 0, 32, 64 and 96, and we can't use 128 because this is used for the large LAN.So now we have the following:LAN Hosts200.100.100.0/27 - Let's reserve this for the WAN links 200.100.100.32/27 - LAN 1 (hosts 33 to 62) 200.100.100.64/27 - LAN 2 (hosts 65 to 94) 200.100.100.96/27 - LAN 3 (hosts 96 to 126)Next, we need IP addresses for three WAN connections. WAN IP addressing is fairly easy because we only ever need two IP addresses if it is a point-to-point link. On the 'Hosts - 2' column, tick down two places to get 4 and take 2 away to get 2 hosts. This leaves 6 bits for the subnet.Tick down six places on the lower 'Subnets' column to get 252 as our subnet mask.Our Network AddressesAs a network administrator, you would keep a record of used IP addresses and subnets. So far, you will have allocated the addresses as follows:WAN Links200.100.100.0 /30 - WAN link 1 (hosts 1 to 2) 200.100.100.4 /30 - WAN link 2 (hosts 5 to 6) 200.100.100.8/30 - WAN link 3 (hosts 9 to 10)LAN Hosts200.100.100.32/27 - LAN 1 (hosts 33 to 62) 200.100.100.64/27 - LAN 2 (hosts 65 to 94) 200.100.100.96/27 - LAN 3 (hosts 96 to 126)Large LAN Hosts200.100.100.128/25 - LAN (hosts 129 to 254)VLSM IIChopping DownVLSM principles will let you take a network and slice it down into smaller chunks. Those chunks can then be sliced into smaller chunks and so on. You reach the limit only when you get to the mask 255.255.255.252, or /30, because this gives you two usable hosts, which is the minimum you would need for any network.Let's take network 200.100.100.0 /24, for example. You change the mask from /24 to /25 and the following happens:Now you have two subnets. If you take the new subnet 2 of 200.100.100.128 and break it down further by changing the mask from /25 to /26, you get the following:If you take the second subnet and break it down further by changing the mask from /26 to /28 (for example), you get the following:In SummaryI hope this has helped you to understand a bit more about VLSM. It is no mystery really. Please take time to go over the above examples again, and then have a go at the challenge illustrated in Figure 5-A below:Reality Press Ltd. has been allocated the address below. It requires you to design an addressing system so that hosts can be given IP addresses and the WAN links can be addressed with no wastage.Figure 5-A. ACME Company II







Appendix B - Route SummarizationRoute SummarizationIntroductionThere are many millions of routes on the Internet. If these routes all had to be stored individually, the Internet would have come to a stop many years ago. Route summarization is also known as supernetting and was proposed in RFC 1338, which you can read online by clicking on the RFC, or if you have printed this document by visiting www.faqs.org/rfcs/rfc1338.html.If you want to read a very comprehensive guide to route summarization, then please grab a hold of Jeff Doyles' excelling Cisco book Routing TCP/IP Volume 1, which is in its second edition now.ZIP CodesZIP codes are used by the United States Postal Service to improve routing of letters to addresses within the USA. The first digit represents a group of US states, and the second and third digits represent a region inside that group. The idea is that letters and parcels can be quickly routed by machine or by hand into the correct state and then forwarded to that state.When it reaches the state, it can be routed to the correct region. From there, it can be routed to the correct city and so on, until it is sorted into the correct mailbag for the local postal delivery person. The system was devised to make routing of mail more accurate and efficient. The sorting office in Atlanta doesn't need to know which street in San Francisco the packet is destined for. Having to store that information would make the sorting process unworkable.Route Summarization PrerequisitesIn order to use route summarization on your network, you need to use a classless protocol, such as RIPv2, EIGRP or OSPF. You also need to design your network in a hierarchical order, which will require careful planning and design. This means that you can't randomly assign networks to various routers or LANs within your network.IP AddressesSee what I did there? I cleverly used the example of letters and will now apply it to IP routes. Well, in fact, I think I have made my point, so I won't labour it. Let's move on to an example of a network and what the problem will look like on your network if you don't use route summarization.Here is an example of how summarization would work with a range of IP addresses on a network. The router has several networks attached. The first choice is to advertise all of these networks to the next-hop router. The alternative is to summarize these eight networks down to one route and send that summary to the next-hop router, which will cut down on bandwidth, CPU and memory requirements.Figure 1-B. Example of SummarizationYou can only really work out a summary route by converting the IP address into binary (sorry). If you don't do this, then you have no way of knowing whether you are advertising the correct summary route, which will lead to problems on your network.Firstly, write out all of the network addresses in full and then the binary versions to the right of that, as illustrated below:I have italicised the bits in each address that match. You can see that the first 21 bits match on every address, so your summarized route can reflect the following 21 bits:172.16.8.0 255.255.248.0One other significant advantage of using route summarization is that if a local network on your router goes down, the summary network will still be advertised out. This means that the rest of the network will not need to update its routing tables or, worse still, have to deal with a flapping route.Exercise 1: Write out the binary equivalents for the addresses below and then determine which bits match. I have written the first two octets for you to save time.What summarized address would you advertise?I would make it 172.16.0.0 255.255.128.0, or /17.Exercise 2: The company below has three routers connected to their HQ router. They need to summarize the routes advertised from London 1, 2 and 3:Figure 2-B. Summarized Routes Advertised from London 1, 2 and 3Let's start with London 1:We have 21 common bits, so London 1 can advertise 10.1.0.0 /21 to the HQ router.And for London 2:London 2 also has 21 common bits so it can advertise 10.1.8.0 /21 to the HQ router.And on to London 3:London 3 has 21 common bits also, so we can advertise 10.1.16.0 upstream to the HQ router.In ConclusionYou will be expected to understand route summarization for the CCNA exam. If you can quickly work out the common bits, then you should be able to answer the questions quickly and accurately. If you want to learn more about route summarization, then please get yourself a copy of Jeff Doyles' book Routing TCP/IP Volume 1, 2nd Edition.Here is the answer to Exercise 1:







Appendix C - More Advanced IPv6There are several advantages that can be gained by transitioning from IPv4 to IPv6. The advantages of IPv6 include, but are not limited to, the following:• The Simplified IPv6 Packet Header• Larger Address Space• IPv6 Addressing Hierarchy• IPv6 Extendibility• IPv6 Broadcast Elimination• Stateless Autoconfiguration• Integrated Mobility• Integrated Enhanced SecurityThe Simplified IPv6 Packet HeaderThe header fields in an IPv4 packet are very detailed and complete. However, not all fields in the IPv4 packet header are used or required - for example, the Type of Service field. Other headers, such as the Checksum, are no longer a necessity, nor are they used, because transmission link quality has greatly improved over the years. In contrast, the header fields of an IPv6 packet are much simpler and contain the bare minimum of information required to route the packet. This allows for greater routing efficiency with IPv6 than is afforded by IPv4.Larger Address SpaceAs was stated earlier in the book, in contrast to the 32-bit addresses used in IPv4, the IPv6 addresses are 128 bits in length. This extended address length allows for billions of host addresses. This sheer amount of address space eliminates the need to perform Network Address Translation (NAT) in IPv6 because a global address can be assigned to each individual host. Because a global IP address can be assigned to each individual device (e.g., computers, laptops and phones), we can return the Internet to a true end-to-end model when using IPv6.IPv6 Addressing HierarchyBecause of the much larger address space provided by IPv6, multiple levels of hierarchy can be used within the IPv6 address space. This allows providers and other organizations to use this hierarchy to better manage the IPv6 address space based on bit-boundaries. The use of an addressing hierarchy allows route summarization in IPv6 to be performed in a more organized manner than is currently performed using the IPv4 address space.IPv6 ExtendibilityWhen using IPv4, because all of the fields of the IPv4 packet header are currently defined, new extensions to the protocol must rely on the variable-length Options field. However, the use of this field makes the IPv4 header size vary from packet to packet. If IP options are specified within an IPv4 packet, internetwork devices must read all the options and decide whether they support them, and if so, they act upon them. If the options are not supported on the router, then it simply forwards the packet. Given that millions of packets may be transiting the router, looking at each packet to determine whether any options in the Options field are supported and must be acted upon can cause serious performance degradation on the router.Unlike IPv4, IPv6 has a fixed-size header field, and additional header extensions are included to support new features. These additional headers are outside the standard IPv6 header and are referenced in such a way that all individual internetwork devices can skip the extension if they don't support it. This reduces the processing overhead of routers routing IPv6 packets.IPv6 Broadcast EliminationIn IPv6, ARP broadcasts are replaced by multicast packets on the local network segment. This prevents devices that do not need to receive these packets from receiving them, and avoids the problems that broadcasts can cause (e.g., wasting host resources and network performance degradation).Stateless AutoconfigurationBoth IPv4 and IPv6 support stateful autoconfiguration, which allows network hosts to receive their addressing information from a network server (i.e., via DHCP). In addition to supporting stateful autoconfiguration, IPv6 also supports stateless autoconfiguration. Stateless autoconfiguration allows hosts to configure their unicast IPv6 addresses by themselves based on prefix advertisements from routers on the local network segment.Integrated MobilityWhile Mobile IP is available for both IPv4 and IPv6, it is built into IPv6, whereas it is an added function in IPv4. IPv6 mobility allows IPv6-capable devices such as PDAs, cell phones and wireless laptops to roam between the IPv6 networks of wireless or cellular providers by using the Mobile IP protocol. This allows any IPv6 host to use Mobile IP as needed, while only IPv4 hosts that have this added functionality can use Mobile IP.Integrated Enhanced SecurityIPv6 uses the inbuilt security mechanisms afforded by the IP Security (IPsec) protocol. The key difference between IPSec in IPv4 and IPv6 is that it is optional in IPv4 but is mandatory in IPv6. As defined in RFC 2460, IPv6 includes the use of the Authentication Header (AH) and Encapsulating Security Payload (ESP) extension headers in a complete implementation. The use of IPSec allows routers to provide security for the following:• OSPF version 3• Mobile IPv6• Tunnels• Network managementAs we already know, IPv6 uses 128-bit addresses. Because the address format is different from the IPv4 address format that we are all accustomed to, it is often confusing at first glance. However, once understood, the logic and structure is all very simple. The 128-bit IPv6 addresses use hexadecimal values. The hexadecimal numbering system uses the numbers 0 through 9 and the letters A through F. While in IPv4 the subnet mask can be represented in either CIDR notation (e.g., /16 or /32) or in dotted-decimal notation (e.g., 255.255.0.0 or 255.255.255.255), IPv6 subnet masks are represented only in CIDR notation due to the length of the IPv6 address. Global 128-bit IPv6 addresses are divided into the following three sections:• The provider assigned prefix• The site prefix• The interface or host IDThe provider assigned prefix, which is also referred to as the global address space, is a 48-bit prefix that is divided into three distinct parts, which are as follows:1. The 16-bit reserved IPv6 global prefix2. The 16-bit provider owned prefix3. The 16-bit provider assigned prefixThe IPv6 global prefix is the prefix that is used to represent the global IPv6 address space. All global IPv6 Internet addresses fall within the 2000::/16 to 3FFF::/16 range. The 16-bit provider owned IPv6 prefix is the prefix that is assigned to and owned by the provider. The assignment of these prefixes follows the same rules as prefix assignment in IPv4. The provider owned prefix falls within the 0000::/32 to FFFF::/32 range.The next 16-bits represent an IPv6 prefix assigned to an organization by the actual provider from within the provider assigned prefix address space. This prefix falls within the range 0000::/48 to FFFF::/48. Collectively, these first 48 bits are referred to as the provider assigned prefix. The provider assigned prefix is illustrated in Figure 1-C below:Figure 1-C. The Provider Assigned 48-bit IPv6 PrefixThe site prefix is the next 16-bits following the provider assigned 48-bit prefix. The subnet mask length for a site prefix is /64, which includes the 48-bit provider assigned prefix. This prefix length allows for 264 addresses within each site prefix. Figure 2-C below illustrates the 16-bit site prefix:Figure 2-C. The 16-bit IPv6 Site PrefixFollowing the site prefix, the next 64 bits are used for interface or host addressing. The interface or host ID portion of an IPv6 address represents the network device or host on the IPv6 subnet. To reinforce what we have learned in this section, Figure 3-C below shows how IPv6 prefixes are assigned:Figure 3-C. Assigning IPv6 PrefixesReferencing Figure 3-C, once the customer has been assigned the /48 prefix by the ISP, they are then free to assign and use whatever site prefixes and host or interface addresses they want within that 48-bit provider assigned prefix. The sheer amount of address space available makes it impossible for any single enterprise customer to require more than a single provider assigned prefix, while still allowing all devices within the enterprise network to be allocated a unique global IPv6 address. NAT, therefore, will never be required for IPv6.IPv6 Address RepresentationThe following are the three ways in which IPv6 addresses can be represented:• The Preferred or Complete Address Representation or Form• Compressed Representation• IPv6 Addresses with an Embedded IPv4 AddressWhile the preferred form or representation is the most commonly used method for representing the 128-bit IPv6 address in text format, it is also important to be familiar with the other two methods of IPv6 address representation. These methods are described in the following sections.The Preferred FormThe preferred representation for an IPv6 address is the longest format and is referred to as the complete form of an IPv6 address. This format represents all 32 hexadecimal characters that are used to form an IPv6 address. This is performed by writing the address as a series of eight 16-bit hexadecimal fields, separated by a colon, as shown below: 3FFF:1234:ABCD:5678:020C:CEFF:FEA7:F3A0.Each 16-bit field is represented by four hexadecimal characters, with each hexadecimal character representing 4 bits. The value of each 16-bit hexadecimal field is between 0x0000 and 0xFFFF, although, as will be described later, different values have been reserved for use in the first 16 bits, and all possible values are not used. When writing IPv6 addresses, each hexadecimal character is not case sensitive. In other words, 2001:ABCD:0000 and 2001:abcd:0000 are the exact same thing. The complete form for IPv6 address representation is illustrated in Figure 4-C below:Figure 4-C. The Preferred Form for IPv6 Address RepresentationThe following IPv6 addresses are examples of valid IPv6 addresses in the preferred form:• 0000:0000:0000:0000:0000:0000:0000:0001• 2001:0000:0000:1234:0000:5678:af23:bcd5• 3FFF:0000:0000:1010:1A2B:5000:0B00:DE0F• fec0:2004:ab10:00cd:1234: 0000:0000:6789• 0000:0000:0000:0000:0000:0000:0000:0000Compressed RepresentationCompressed representation allows for IPv6 addresses to be compressed in one of two ways. The first method allows a double colon (::) to be used to compress consecutive zero values in a valid IPv6 address for successive 16-bit fields comprised of zeros, or for leading zeros in the IPv6 address. When using this method, it is important to remember that the double colon can be used only once in an IPv6 address.When the compressed format is used, each node and router is responsible for counting the number of bits on either side of the double colon to determine the exact number of zeros it represents. Table 1-C shows IPv6 addresses in the preferred form and in compressed representation of those addresses:Table 1-C. Complete IPv6 Addresses in the Preferred Form and in Compressed RepresentationAs previously stated, the double colon cannot be used more than once in a single IPv6 address. If, for example, you wanted to represent the complete IPv6 address 2001:0000:0000:1234:0000:0000:af23:bcd5 in compressed form, you can use the double colon only once, even though there are two consecutive strings of zeros within the address. Therefore, attempting to compress the address to 2001::1234::af23:bcd5 would be considered illegal; however, the same IPv6 address could be compressed to either 2001::1234:0000:0000:af23:bcd5 or 2001:0000:0000:1234::af23:bcd5, depending on preference.The second method of IPv6 compressed address representation is applicable to each 16-bit field and allows leading zeros to be omitted from the IPv6 address. When using this method, if every bit in the 16-bit field is set to 0, then one 0 must be used to represent this field. In this case, all the 0 values cannot be omitted. Table 2-C below shows IPv6 addresses in the preferred form and how they can be compressed using the second method of IPv6 compressed form representation:Table 2-C. Complete IPv6 Addresses in the Alternative Compressed FormWhile there are two methods of representing the complete IPv6 address in compressed form, it is important to remember that both methods are not mutually exclusive. In other words, these methods can be used at the same time to represent the same IPv6 address. This is commonly used when the complete IPv6 address contains both consecutive strings of zeros as well as leading zeros in other fields within the address. Table 3-C below shows IPv6 addresses in the complete form that include both consecutive strings of zeros and leading zeros, and how these addresses are represented in the compressed form:Table 3-C. Complete IPv6 Addresses Using Both Compressed Form MethodsIPv6 Addresses with an Embedded IPv4 AddressThe third representation of an IPv6 address is to use an embedded IPv4 address within the IPv6 address. While valid, it is important to keep in mind that this method is being deprecated and is considered obsolete because it is applicable only in the transition of IPv4 to IPv6.When an IPv6 address is embedded with an IPv4 address, the first part of the IPv6 address uses the hexadecimal notation and the remainder of the address is in the traditional dotted-decimal notation used by IPv4 addresses. However, it is permissible to convert the 32-bit dotted-decimal IPv4 address into hexadecimal notation and embed that into the IPv6 address instead. The IPv6 address with an embedded IPv4 address is comprised of six fields of 16-bit hexadecimal characters and four fields of 8-bit decimal characters. The following two kinds of IPv6 addresses contain an embedded IPv4 address:• IPv4-compatible IPv6 addresses• IPv4-mapped IPv6 addressesWhile these terms sound similar, there are significant differences in these addresses that you should be familiar with. First, IPv4-compatible IPv6 addresses are used in the transition from IPv4 to IPv6. These addresses are used to establish automatic tunnels for IPv6 packets over native IPv4 networks. IPv4-compatible IPv6 addresses have the first 96 bits set to 0 and are then followed by the 32-bit IPv4 address, as illustrated in Figure 5-C below:Figure 5-C. IPv4-compatible IPv6 AddressesReferencing Figure 5-C above, it is important to understand that the compressed form can also be used to represent IPv4-compatible IPv6 addresses. For example, the IPv4-compatible IPv6 addresses for a Loopback interface with the IPv4 address 172.16.255.1/32 would be represented as 0000:0000:0000:0000:0000:0000:172.16.255.1. This same address can then be compressed as 0:0:0:0:0:0:172.16.255.1/32, or simply as ::172.16.255.1/32. Additionally, it is also important to remember that the decimal IPv4 address could be converted to hexadecimal and used to create the IPv4-compatible IPv6 address 0:0:0:0:0:0: AC10:FF01/128, or simply ::AC10:FF01/128.Unlike the IPv4-compatible IPv6 addresses, the IPv4-mapped IPv6 addresses are used locally on devices that are running both IPv4 and IPv6. IPv4-mapped IPv6 addresses are never advertised as IPv6 addresses. These addresses have the first 80 bits set to 0; the next 16 bits are set to a value of all 1s, which is FFFF in hexadecimal notation, and are then followed by the IPv4 dotted-decimal address. Figure 6-C below illustrates the IPv4-mapped IPv6 address format:Figure 6-C. IPv4-mapped IPv6 AddressesUsing IP address 172.16.255.1/32 as an example, this address could be represented in the IPv4-mapped IPv6 address format as 0000:0000:0000:0000:0000:FFFF:172.16.255.1/128. Because it is perfectly legal to represent the address in the compressed form, the same address could also be written as either 0:0:0:0:0:FFFF:172.16.255.1/128 or ::FFFF:172.16.255.1/128. Additionally, the IPv4 address could also be converted to hexadecimal, producing the IPv4-mapped IPv6 address 0:0:0:0:0: FFFF:AC10:FF01/128, or simply ::FFFF:AC10:FF0/128. 







Table of ContentsIMPORTANT COPYRIGHT & LEGAL NOTICESubnetting - What Is It and Why Bother Learning It?What's In Subnetting Secrets?About MeWhat to Expect from This BookHow the Book Is Laid OutWhat You Will Learn in Part 1What You Will Learn in Part 2What You Will Learn in the AppendicesThe WebsiteWhat Others Are Saying about Subnetting Secrets©How to Read This BookPart I - IP AddressingHow Binary WorksHow Hexadecimal WorksConverting ExerciseIP Version 4Powers of TwoIP AddressingClass A AddressesClass B AddressesClass C AddressesClass D and Class E AddressesSummaryIPv6 AddressingConfiguring IPv6Reserved AddressesSubnettingAddress DepletionHow to SubnetHow to Write Out Subnet MasksChanging the Subnet RepresentationVariable Length Subnet Masking (VLSM)Classless Inter-Domain Routing (CIDR)How Many Subnets and How Many Hosts?Shortcut MethodExam QuestionsWorking Out How Many Subnets and How Many HostsIP Subnet-Zero (Again)Secondary IP AddressWildcard MasksPractise QuestionsAnswersConversion ExamplesThe Subnetting Secrets Chart©Subnetting Secrets: Part 2Part 2 - The Easy Way to SubnetThe Easy Way to SubnetClass C SubnettingClass B SubnettingSubnetting in Your HeadClass A SubnettingHow Many Subnets and How Many Hosts?Congratulations!Subnetting ResourcesSubnetting calculators:RFCs:Appendix A - VLSMVLSMVLSM in the CCNA ExamVLSM IIChopping DownIn SummaryAppendix B - Route SummarizationRoute SummarizationIntroductionZIP CodesRoute Summarization PrerequisitesIP AddressesIn ConclusionAppendix C - More Advanced IPv6The Simplified IPv6 Packet HeaderLarger Address SpaceIPv6 Addressing HierarchyIPv6 ExtendibilityIPv6 Broadcast EliminationStateless AutoconfigurationIntegrated MobilityIntegrated Enhanced SecurityIPv6 Address RepresentationThe Preferred FormCompressed RepresentationIPv6 Addresses with an Embedded IPv4 Address















