




Homiar Kalwachwala, Sandeep  Chahal, Santhosh Cheekoti, Antony Isacc, Rajani Khambhampati,
            David Quirk
         
SAP® Master Data Governance
The Comprehensive Guide to SAP MDG










Imprint

            This e-book is a publication many contributed to, specifically:
         
Editor   Meagan White
Acquisitions Editor   Hareem Shafi
Copyeditor   Julie McNamee
Cover Design   Graham Geary
Photo Credit   Shutterstock.com/58802152/© Supertrooper
Production E-Book   Graham Geary
Typesetting E-Book   III-satz, Husby (Germany)
We hope that you liked this e-book. Please share your feedback with us and read the
            Service Pages to find out how to contact us.
         

The Library of Congress has cataloged the printed edition as follows:
            Names: Kalwachwala, Homiar.
            Title: SAP master data governance : the comprehensive guide to SAP MDG /
            Homiar Kalwachwala, Sandeep Chahal, Santhosh Cheekoti, Antony Isacc,
            Rajani Khambhampati, David Quirk.
            Description: 1st edition. | Bonn ; Boston : Rheinwerk Publishing, 2017. |
            Includes index.
            Identifiers: LCCN 2017018378 | ISBN 9781493214334 (alk. paper)
            Subjects: LCSH: Database management--Computer programs. | SAP HANA
            (Electronic resource)
            Classification: LCC QA76.9.D3 K35555 2017 | DDC 005.740285/53--dc23
            LC record available at https://lccn.loc.gov/2017018378

ISBN 978-1-4932-1433-4 (print)
ISBN 978-1-4932-1434-1 (e-book)
ISBN 978-1-4932-1435-8 (print and e-book)
© 2017 by Rheinwerk Publishing Inc., Boston (MA)
            1st edition 2017
         

















Dear Reader,
Master data is the beating heart of your organization. Without it, you're dead in the water. Maintaining your master data, then, is like doing sit-ups and eating kale; you know you should, you know everything will run more smoothly if you do... you may just not have gotten around to actually doing it yet. Enter our guide to SAP Master Data Governance.
Between these pages, you'll find a comprehensive guide to SAP MDG, from central governance and master data consolidation to data, UI, and process modeling. Our expert author team—Homiar, Sandeep, Santhosh, Antony, Rajani, and David—have brought their decades of experience to bear in writing this book. It's hard to imagine a more knowledgeable team, or one more amiable about answering all of my nit-picky questions!
What did you think about SAP Master Data Governance: The Comprehensive Guide to SAP MDG? Your comments and suggestions are the most useful tools to help us make our books the best they can be. Please feel free to contact me and share any praise or criticism you may have.
Thank you for purchasing a book from SAP PRESS!
          
         
         Meagan WhiteEditor, SAP PRESS
         
Rheinwerk PublishingBoston, MA
         
meaganw@rheinwerk-publishing.comwww.sap-press.com









Notes on Usage
This e-book is protected by copyright. By purchasing this e-book, you have agreed to accept and adhere to the copyrights.
            You are entitled to use this e-book for personal purposes. You may print and copy
            it, too, but also only for personal use. Sharing an electronic or printed copy with
            others, however, is not permitted, neither as a whole nor in parts. Of course, making
            them available on the Internet or in a company network is illegal as well.
         
For detailed and legally binding usage conditions, please refer to the section Legal Notes.
         
This e-book copy contains a digital watermark, a signature that indicates which person may use this copy:
         

 
Notes on the Screen Presentation
You are reading this e-book in a file format (EPUB or Mobi) that makes the book content
            adaptable to the display options of your reading device and to your personal needs.
            That's a great thing; but unfortunately not every device displays the content in the
            same way and the rendering of features such as pictures and tables or hyphenation
            can lead to difficulties. This e-book was optimized for the presentation on as many
            common reading devices as possible.
         
If you want to zoom in on a figure (especially in iBooks on the iPad), tap the respective
            figure once. By tapping once again, you return to the previous screen. You can find
            more recommendations on the customization of the screen layout on the Service Pages.
         









Table of Contents

Dear Reader
Notes on Usage
Table of Contents
Preface
1   Introduction to Enterprise Information Management
1.1   Stages of Enterprise Information Management Engagement
1.2   Organizational Drivers for Enterprise Information Management
1.2.1   Enterprise Information Management Benefits and Drivers
1.2.2   Building the Business Case
1.3   Enterprise Information Management Capabilities
1.3.1   Architecture and Metadata Management
1.3.2   Data Integration
1.3.3   Data Quality
1.3.4   Master Data Management
1.3.5   Content Management
1.3.6   Information Lifecycle Management
1.4   Key SAP Solutions for Enterprise Information Management
1.4.1   SAP Data Services
1.4.2   SAP Information Steward
1.4.3   SAP HANA Smart Data Integration and SAP HANA Smart Data Quality
1.4.4   SAP Agile Data Preparation
1.4.5   SAP Information Lifecycle Management
1.4.6   SAP Content Management Solutions by OpenText
1.5   SAP Master Data Governance
1.6   Summary
2   Deploying SAP MDG
2.1   Overview
2.2   Architecture
2.2.1   Overview
2.2.2   Available User Interfaces
2.3   Available Deployment Options
2.3.1   Hub versus Co-Deployment
2.3.2   Limitations and Restrictions
2.3.3   Initial Build
2.3.4   Customizing Synchronization
2.3.5   Reference Master Data Synchronization
2.4   Overview of Data Domains
2.4.1   Material Master
2.4.2   Business Partner, Supplier, and Customer
2.4.3   Customer Vendor Integration
2.4.4   Financials
2.4.5   Custom Domains
2.5   SAP S/4HANA
2.5.1   Architecture and Deployment Options
2.5.2   Master Data Domains
2.6   Summary
3   Data Modeling
3.1   Introduction to Data Modeling in SAP MDG
3.1.1   Master Data Create/Change Process
3.1.2   Entity Types
3.1.3   Attributes
3.1.4   Relationships
3.1.5   Hierarchies
3.1.6   Entity Relationship Model Diagram
3.1.7   Data Model-Related Configurations
3.2   Standard Data Models
3.2.1   Material Master Data Model
3.2.2   Supplier, Customer, and Business Partner Data Models
3.2.3   Financial Data Model
3.3   Summary
4   User Interface Modeling
4.1   Floorplan Manager
4.2   User Interface Framework
4.2.1   Overview
4.2.2   Configuration
4.2.3   Material Master
4.2.4   Business Partner, Customer, and Supplier
4.2.5   Financial Domains
4.3   Summary
5   Process Modeling
5.1   Governance Scope
5.2   Change Requests
5.2.1   Overview
5.2.2   Logical Action
5.2.3   Business Activity
5.2.4   Change Request Type
5.2.5   Change Request Steps
5.2.6   Change Requests Actions and Step Types
5.2.7   User Interface Determination
5.2.8   Editions
5.3   Single-Record Processing
5.3.1   Central Master Data Scenarios
5.3.2   Processing Customer on a Client System
5.3.3   Business Context Viewer Side Panels
5.4   Multiple Object Processing
5.4.1   Mass Change
5.4.2   File Upload/Download
5.4.3   Data Import Process
5.4.4   Hierarchy Processing
5.4.5   Multiple-Record Processing
5.5   Workflow Process Modeling
5.5.1   Standard Workflow Templates
5.5.2   Rule-Based Workflows
5.5.3   Available Business Add-Ins
5.6   Summary
6   Data Quality and Search
6.1   Search Functionality
6.1.1   Overview
6.1.2   Search Help
6.1.3   Match Profiles
6.1.4   SAP HANA Search Setup
6.1.5   SAP HANA Search Extensibility
6.2   Duplicate Check
6.2.1   Search and Duplicate Check
6.2.2   Data Quality Remediation
6.3   Business Rules
6.3.1   Code Lists
6.3.2   Simple Checks in SAP Master Data Governance
6.3.3   Data Modeling-Based Checks
6.3.4   Business Rules Framework Plus-Based Checks and Validations
6.3.5   Business Add-In-Based Validations
6.4   Data Enrichment
6.4.1   Integration with SAP Data Quality Management for Address Standardization
6.4.2   Integration with Third-Party Data Enrichment Tools
6.4.3   Business Partner Screening in SAP Fraud Management
6.5   Summary
7   Data Replication Framework
7.1   Building Blocks and Configuration Objects
7.1.1   Building Blocks
7.1.2   Configuration Objects
7.1.3   Enhance Default Settings for Outbound Implementations
7.2   Material Master Replication
7.3   Customer, Supplier, and Business Partner Replication
7.3.1   SOA-Based Replication
7.3.2   ALE-Based Replication
7.4   Financial Master Data Replication
7.4.1   Account Replication
7.4.2   Company Replication
7.4.3   Cost Element Replication
7.4.4   Profit Center and Profit Center Hierarchy Replication
7.4.5   Cost Center and Cost Center Hierarchy Replication
7.5   Replication Options for Non-SAP Systems
7.5.1   Web Services
7.5.2   Intermediate Documents
7.5.3   File Protocol
7.6   Operations
7.6.1   Logging, Tracing, and Monitoring Tools
7.6.2   Change Pointers
7.6.3   Check Data Replication Framework Customizing
7.6.4   Delete Replication Log
7.6.5   Display Object Replication Status
7.6.6   Delete Replication Status
7.7   Summary
8   Analytics
8.1   Embedded Business Intelligence Content
8.2   SAP HANA-Based Analytics
8.2.1   Architecture
8.2.2   Object-Based Change Request Analytics
8.2.3   Change Document-Based Change Request Analytics
8.2.4   Workflow-Based Change Request Analytics
8.3   Summary
9   Data Migration
9.1   Overview
9.1.1   Technology Options
9.1.2   General Recommendations for Initial Data Load
9.2   Data Migration Strategies
9.2.1   Data Import/Export Framework
9.2.2   Key Mapping and Value Mapping
9.2.3   SAP MDG File Upload/Download
9.3   Summary
10   Integration Scenarios
10.1   SAP MDG Application Programming Interfaces
10.1.1   Governance API
10.1.2   Convenience API
10.1.3   Application Context API
10.2   Integration with SAP Solutions
10.2.1   SAP Product Lifecycle Management
10.2.2   SAP Supplier Lifecycle Management
10.2.3   SAP Hybris
10.2.4   SAP Ariba
10.2.5   SAP Customer Relationship Management
10.2.6   SAP S/4HANA Finance
10.2.7   SAP Information Steward
10.3   Integration with Third-Party Solutions
10.4   Summary
11   SAP Fiori Applications for SAP MDG
11.1   Introduction to SAP Fiori
11.2   SAP Fiori Applications for SAP MDG
11.3   Extensibility Options
11.3.1   Extension of the Data Model (SAP MDG Layer)
11.3.2   Extension of the User Interface layer
11.3.3   Launchpad Extension
11.3.4   SAP Theme Designer
11.4   Summary
12   SAP MDG Extensibility
12.1   Extending Standard Data Models
12.1.1   Adding Attributes to Standard Data Models
12.1.2   Adding New Entities to the Data Model
12.2   Enhancing SAP-Delivered User Interfaces
12.2.1   Customizing
12.2.2   Personalizing
12.2.3   Enhancement
12.2.4   Context-Based Adaptations
12.2.5   Copy Application Configuration (Deep-Copy)
12.2.6   Modification
12.3   Using the SAP MDG Business Add-In
12.3.1   Rule Service BAdIs
12.3.2   Various Replication BAdIs
12.3.3   Change Request User Interface Building Block Enhancement BAdIs
12.3.4   Workflow BAdIs
12.3.5   Other Domain-Specific BAdIs
12.4   Enhancing Master Data Domains with Search Capabilities
12.4.1   Database Search
12.4.2   SAP Enterprise Search
12.4.3   SAP HANA Search
12.4.4   BAdI Enhancements for the Search Functionality
12.5   Summary
13   Building Custom Applications: Data Modeling and User Interface Modeling
13.1   Custom Data Models
13.1.1   SAP ERP Project System
13.1.2   Data Modeling Tools
13.2   Create a Custom Data Model
13.2.1   Concepts and Prerequisites
13.2.2   Creating Entities
13.2.3   Adding Attributes to Entities
13.2.4   Representing the Work Breakdown Structure Hierarchically
13.2.5   Generic Interaction Layer Data Model
13.3   Create a Custom User Interface
13.3.1   User Interface Framework
13.3.2   Design and Develop the User Interface
13.3.3   Develop a Single Object Maintenance User Interface
13.4   Summary
14   Building Custom Applications: Process Modeling and Data Replication
14.1   Process Modeling
14.1.1   Create a New Business Object
14.1.2   Create a New Business Activity
14.1.3   Assign Business Activities and Logical Actions to Business Objects
14.1.4   Maintain Settings for Business Activity Determination
14.1.5   Create Change Request Type
14.1.6   Workflow Settings
14.2   Security and Roles
14.2.1   Authorization Objects
14.2.2   Roles
14.2.3   Home Page
14.3   Translation
14.3.1   Overview
14.3.2   Floorplan Manager Text Tool
14.3.3   Translating Data Element Texts and Floorplan Manager Texts
14.3.4   Translating Text Elements in the Feeder Class
14.3.5   Translating Texts in the PFCG Role
14.4   Data Replication
14.4.1   Customizing Settings for Data Replication
14.4.2   Data Replication Framework Runtime Settings for Project Definition
14.5   Enabling Key Mapping
14.6   Enabling Value Mapping
14.7   Summary
15   Operational Strategies
15.1   Edition Strategy
15.1.1   Create New Editions
15.1.2   Releasing Editions
15.1.3   Monitoring Editions
15.2   Ongoing Data Loads
15.2.1   Creating Mass Change Requests for Mass Loads
15.2.2   Scheduling File Uploads in the Background
15.2.3   Operating with the Data Import/Export Framework
15.2.4   Mass Processing in SAP MDG
15.3   Performance Optimization
15.4   Troubleshooting
15.5   Summary
16   Consolidation
16.1   Overviews and Use Cases
16.2   Process Flow
16.2.1   Prerequisites and Preparations
16.2.2   Creating a Consolidation Process with SAP Fiori
16.2.3   Standardization
16.2.4   Matching
16.2.5   Best Record Calculation
16.2.6   Validation
16.2.7   Activation
16.3   Initial Data Load
16.3.1   Source Tables
16.3.2   SAP Landscape Transformation Replication Server
16.3.3   SAP HANA Studio
16.3.4   CSV Files
16.4   Summary
A   SAP MDG Solution Extensions by Utopia
A.1   Enterprise Asset Management Extension
A.1.1   Equipment Master
A.1.2   Functional Location
A.1.3   Maintenance, Repair, and Overhaul Bill of Material
A.1.4   Work Center
A.1.5   Task List (Equipment, Functional Location, and General)
A.1.6   Maintenance Plan/Item
A.1.7   Measuring Point
A.1.8   Service Master
A.2   Retail and Fashion Management Extension
B   The Authors
Index
Service Pages
Legal Notes










Preface
Welcome to the first edition of SAP Master Data Governance for SAP PRESS. This book has been a long time coming and is intended to be a comprehensive guide to implementing central data governance scenarios using SAP Master Data Governance (SAP MDG). This overview of SAP MDG comes at the topic from both a business and technical perspective, and complements the standard SAP product documentation, including that which is available online and through IMG help. It also explains the inner workings of the solution with reference to real-life examples from SAP MDG projects. This book addresses some of the common questions raised by customers and consultants while implementing the solution.
The book serves as a reference to understand how the SAP MDG solution works. Although not intended to replace the official SAP documentation, the detailed content in this book is balanced for both functional and technical readers. This book has been written based off the authors' personal project experiences. The authors have provided links to the available SAP product documentations to provide you with additional details. The chapters discuss various configuration options for each functionality as well as their corresponding enhancement options. Toward the end of the book, the concept of master data consolidation using SAP MDG is also introduced.
The scope of this book is limited to SAP's standard offerings for governing material master, business partner, customer, supplier, and financial master data domains. This book also uses the framework provided by SAP for extending the above-mentioned models or configuring a completely custom master data object. The solution extension offerings by Utopia for SAP Master Data Governance are discussed in Appendix A of this book.
Who This Book Is For
This book is structured to interest a broad audience, including business analysts, techno-functional analysts, business process experts, master data experts, solution architects, technical developers, and data scientists. It's targeted for anyone who plans to implement or work on the SAP MDG solution. The book provides an overview of the SAP MDG solution and goes in depth to discuss the various enhancement options, with emphasis on central governance scenarios to help you understand the end-to-end capabilities of the solution. 
How This Book Is Organized
This book is based on the SAP MDG 9.0 release. As this book is meant to provide an overview of SAP MDG configuration options, it's organized based on the standard Customizing configuration path. 
If you're interested in learning more about the SAP MDG, central governance scenario and its configuration options, we recommend reading this book sequentially from Chapter 1 through Chapter 7. Chapter 8 through Chapter 15 provides additional information, including specific solution capabilities such as analytics, SAP Fiori apps, and so on, as well as project-specific scenarios based on customer requirements such as enhancement options, integration scenarios, data migration options, custom master data object modeling, operational strategies, and more. Chapter 16 discusses the consolidation scenarios. The following is a summary of how this book is structured with a brief introduction to each chapter:


Chapter 1 This chapter introduces the idea of enterprise information management (EIM) and data governance as a vendor-agnostic concept that requires a strategy. It provides an overview of key EIM solutions offered by SAP. This chapter ends with a high-level overview of SAP MDG.
                

Chapter 2 This chapter discusses various architectural components of the SAP MDG solution and its deployment options. You'll learn about various aspects involved in deploying SAP MDG as a hub versus co-deployed with an operational SAP ERP solution. The key steps required for the initial setup of the SAP MDG solution, including SAP Solution Manager-based Customizing synchronization, are also covered in this chapter. The chapter provides an overview of the key master data domains that come delivered with the SAP MDG solution. You'll also be introduced to the concept of customer vendor integration (CVI). Finally, it concludes by briefly addressing SAP S/4HANA and how it affects SAP MDG.
                

Chapter 3 This chapter introduces various data modeling aspects of SAP MDG such as entity types, attributes, and relationships, it describes how these data model building blocks work together using SAP-delivered data models as examples. 
                

Chapter 4 In this chapter, we go through the user interface (UI) configurations available as part of the standard SAP MDG, central governance solution and the various options available for extending the standard SAP MDG UI configurations. The chapter starts by providing an overview of the Floorplan Manager framework and discusses the application configurations associated with the standard domains. 
                

Chapter 5 Process modeling is an important aspect of SAP MDG. This chapter introduces the essential building blocks of process modeling and then explains how these building blocks are used to design an end-to-end process using various SAP-delivered processes as examples. It then explains how SAP MDG addresses the handling of single-record and multiple-record processing scenarios. After providing a high-level overview of process modeling for each SAP-delivered master data domain, workflow modeling and SAP delivered workflow templates are discussed. This chapter also provides an overview of the rule-based workflow and explains its design aspects with a simple example. This chapter ends with an overview of the various Business Add-Ins (BAdIs) provided by SAP to enable additional enhancements to support workflow processes.
                

Chapter 6 Improving the quality of the existing master data and preventing bad data from entering the systems are top priorities in most data governance projects. This chapter discusses various techniques and options that can be leveraged in improving the master data quality during the governance process. Various search options, duplicate checks, and validations using business rules are discussed. This chapter also provides some instructions on configuring data quality rules using BRFplus and BAdIs. In addition, SAP MDG framework options for integrating with SAP and non-SAP applications for data standardization and enrichment are discussed.
                

Chapter 7 SAP MDG provides functionality for replicating master data in different systems. This chapter provides an overview of replication and the various technology options available for replicating to SAP and non-SAP systems. It provides step-by-step instructions on how to configure data distribution using various replication options available for each master data domain, along with considerations for configuring the replication process for custom objects.
                

Chapter 8 The ability to analyze master data is an important part of keeping it clean. This chapter discusses SAP MDG data sources available for analytics. We focus on both process reporting as well as object-based reporting available as part of SAP HANA-based analytics. Data sources include change document, workflow, custom object, key mapping, and so on.
                

Chapter 9 Accurate and efficient initial data loads are key for the success of any SAP MDG project. Various recommendations and factors that influence and help in choosing the right data migration strategy are explained as part of this chapter. Options for extraction, conversion, and loading techniques are also explained for various master data objects. In addition, step-by-step instructions and recommendations using the data import/export framework and file upload/download options are explained in detail.
                

Chapter 10 Some SAP MDG implementations require advanced customizations. SAP MDG integration options and how they can be integrated with other SAP and non-SAP solutions are discussed in this chapter. An overview of SAP MDG APIs is provided. Some of the common integration requirements such as integration with SAP Product Lifestyle Management (SAP PLM), SAP Ariba, SAP Hybris, SAP S/4HANA Finance, and so on are also discussed.
                

Chapter 11 This chapter focuses on various SAP Fiori apps available as part of the SAP MDG standard delivery. The chapter details the landscape requirements, key capabilities, and extensibility options involving OData service extensions, UI extensions, and so on for these SAP Fiori apps. 
                

Chapter 12 In this chapter, we discuss options and technical development to extend the standard SAP MDG content, including data models and UIs. The chapter also provides information on the commonly used SAP MDG BAdIs. (Chapter 12, Chapter 13, and Chapter 14 detail how to extend SAP MDG components and build custom applications.)
                

Chapter 13 This chapter describes the SAP MDG custom object framework using work breakdown structures (WBS) in SAP ERP Project Systems as a use case. The chapter begins by describing the data model of WBS in SAP ERP PS. The chapter then explains how to build a UI based on the custom data model.
                

Chapter 14 This chapter is a continuation of Chapter 13 in that it explains process modeling and configuring data replication for WBS in SAP ERP PS.
                

Chapter 15 From reading this chapter, you'll understand how to operate SAP MDG after go-live and effectively manage SAP MDG content. The editions concept is explained in detail and recommendations are provided for effective usage of editions after an SAP MDG go-live. This chapter also provides troubleshooting tips for workflow issues and data replication issues, along with a list of commonly used application programming interfaces (APIs) and transactions. A number of mass data loads options that can be leveraged for mass processing are also discussed.
                

Chapter 16 Existing duplicate master data is always a challenge for any organization. SAP has introduced a new module—SAP Master Data Governance, consolidation—that focuses on the deduplication and consolidation requirements. The ability to consolidate master data is introduced with SAP MDG 8.0. This was a much-awaited functionality that was previously only available in SAP NetWeaver Master Data Management (SAP NetWeaver MDM). In this chapter, various use-case scenarios are discussed where SAP Master Data Governance, consolidation can effectively play a role in improving the overall data quality while managing the consolidation requirements. This chapter explains various prerequisites and process steps configurations in SAP Master Data Governance, consolidation and mass processing.
                

Acknowledgments
Getting this SAP MDG book into your hands is a dream come true for us and the culmination of hundreds of days of sweet labor. We had some ups and downs as well as some sleepless nights as we worked hard to create a quality product that we hope will help you take your SAP MDG skills to the next level.
This long but very rewarding and satisfying journey began when Todd Layton met with Kelly Grace Weaver from Rheinwerk Publishing at 2015 TechEd in Las Vegas. Over time, many friends, colleagues, partners, a couple of customers, and even new acquaintances at TechEd offered support and suggestions that played an important role in the final structure of this book. We'd like to thank everyone who contributed in some way in bringing this dream to fruition. 
Many thanks go to our MDG Product Development colleagues at SAP for taking the time to review and provide priceless feedback at such short notice. To Birgitta Bruegel, Frank Damaschke, Markus Ganser, Carsten Koehler, Elke Menninger, Andreas Seifried, Michael Veth, and Kefeng Wang, you all are amazing!
Special appreciation and gratitude goes to Markus Kuppe for his unwavering support, enthusiasm, and guidance. 
Our thanks also go out to Ken MacAlpine, Jose Lozano, and Simer Grewal for proofreading our drafts as the first level of reviewers, as well as many thanks to Ken and Jose for the long hours brainstorming the TOC baseline.
We are thankful to Vikas Lodha for authoring the Appendix on Utopia's solution extension. We are also thankful to Ingo Rothley for reviewing this section.
We'd like to express our gratitude to SAP PRESS and Rheinwerk Publishing for giving us this incredible opportunity. Meagan White, Hareem Shafi, and Kelly Grace Weaver, this journey would not have been possible without you. We appreciate your guidance, recommendations, and, most of all, your patience as we ventured on this journey together. Thank you so much! Thanks to Graham Geary for designing the book cover and to Julie McNamee for copyediting. We also offer a huge thank you to the entire editorial, production, and marketing teams at Rheinwerk Publishing.
We'd also like to thank Eric To, Renny Pannikodu, and Jim Emmitt Jr. for their help in standing up the internal SAP MDG landscape so we could configure and develop the scenarios for screenshots.
Lastly we would be remiss if we failed to acknowledge the support provided by our family members. Without their understanding of the sacrifices that were necessary, this journey would just have remained an unfulfilled dream. 
Conclusion
The intent of this book is to provide you with a comprehensive view of the SAP MDG solution and its capabilities. This foundation-level knowledge will enable you to research and learn to deal with complex requirements. This book is designed to empower you to configure an SAP MDG solution to accommodate the requirements of varying complexities across enterprises and industries. You should use this book in conjunction with the official SAP help documentation and the extensibility how-to guides at the SAP Community site. We're confident that this book will lay the groundwork for you to tackle even the most complex SAP MDG implementations.
For additional resources, we encourage you to visit the following links:


                    SAP Master Data Governance product page: http://help.sap.com/mdg


                    SAP Master Data Governance landing page: www.sap.com/mdg


                    SAP Master Data Governance Community page: www.sap.com/community/topic/master-data-governance.html










1    Introduction to Enterprise Information ManagementEnterprise information management (EIM) capabilities are a required foundation for all businesses in this digital age. SAP offers an integrated set of solutions that provide key EIM capabilities.The essential organizational benefit from implementing an enterprise information management (EIM) foundation within a company is the assurance that trusted information is ready at the point of impact to run and innovate the business. This statement cuts to the heart of what customers need and what SAP is trying to achieve through its EIM portfolio.Let's break this statement down a little further by considering the expression "point of impact," which will vary greatly between different organizations and within the various departments within an organization. For an asset-intensive company, for example, running the maintenance processes efficiently and implementing aspects of predictive maintenance may be the key pain points that need to be addressed. For a telecommunications company, maybe it's getting a 360-degree view into its customers to understand fully what different services their customers are using and what offers might be relevant to a possible cross-sell marketing campaign.Even within a company, the point of impact will vary greatly. For someone working on the factory floor who needs to order materials to keep production lines moving, the point of impact will be having accurate and reliable supplier information available so that the manufacturing process can continue uninterrupted. The CEO might be interested in getting the latest revenue numbers by product line to use when contemplating a new strategic direction for the company. A successful EIM platform needs to support activities ranging from tactical requirements for the day-to-day running of the business through to strategic benefits that will help drive the overall corporate strategy of the enterprise. Fully realizing these capabilities will result in significant organizational benefits.How does SAP Master Data Governance (SAP MDG) fit into the EIM picture? Throughout this chapter, the entire EIM story will be explained by highlighting where the various solutions offered by SAP provide value and clearly showing the place occupied by SAP MDG. The master data management and governance capabilities provided by SAP MDG are critical to any company's EIM strategy.
1.1    Stages of Enterprise Information Management Engagement
Different companies are at different stages of their EIM journey. Some have quite mature, established EIM programs; others recognize the need and are working toward improving the programs in place; and then, of course, there are companies that are just starting down this path or don't even recognize the problem! The good news is that no matter where you currently exist within the world of EIM, there are methodologies and tools to help you move through any existing challenges to a more sophisticated EIM organization. When assessing the current level of EIM sophistication within an enterprise, companies often fall into one of the following categories:


Level 1: Recognition The good news is the number of organizations that don't at least see the need for an EIM program is rapidly diminishing. The market is certainly shifting from a perspective where companies need to be educated regarding the need for EIM capabilities to one where companies are looking for solutions to help them address this enterprise need. Organizations at this level of sophistication are at ground zero for their EIM program. They likely recognize the organizational need in this space but have taken very few meaningful steps to address it. Companies in this space typically are looking for help to get started.
            

Level 2: Reactive At this level, companies have an understanding of the challenges they face and are reacting to issues with their enterprise information as they occur. Some data quality initiatives may have been started, and often there is a heavy reliance on IT groups to help support any activities here. Even if some benefits of an EIM program can be realized, these benefits lack true business self-service capabilities and aren't scalable across an enterprise, perhaps requiring a new "mini-project" every time a problem or need in the EIM space is identified.
                This level involves tasks such as data profiling to help the data stewards and other stakeholders understand the data in the enterprise and where issues exist. After they understand the data issues, the first steps toward a cleansing/data transformation strategy can be made.
            

Level 3: Monitoring Companies here are well on their way. Data quality and process improvement initiatives related to enterprise information have been made with key data issues both identified and remediated. Organizations understand what data problems exist, and they are able to monitor the enterprise and fix issues as they arise. At this level, self-service is starting to become more prominent, and the need for constant IT involvement is diminished. 
                Organizationally, people are empowered to focus on enterprise information and are responsible for data quality across the enterprise. Roles such as data stewards exist across key data domains and within key business units to ensure that defined information management standards are followed.
            

Level 4: Proactive Organizations at this level have established a high level of information quality and are actively taking steps to prevent future issues from occurring. Clear standards exist so that enterprise information is appropriately governed and controlled. In addition, key tools are in place to enforce these data and process standards, going beyond simply monitoring and correcting any detected problems to preventing such issues from even occurring. High-quality information is distributed across all relevant systems in the enterprise, ensuring timely and trusted information for all transactional, analytical, and reporting needs.
                Data stewards and master data specialists will proactively manage and monitor data quality metrics, ensuring that organizational service level agreements (SLAs) related to the maintenance of enterprise information are followed.
                Typically, dedicated data organizations are in place across these companies. This reflects the need to actively address these challenges rather than simply have information management exist as an offshoot of other departments within the enterprise. 
            

Level 5: Strategic At this level of sophistication, organizations are actively addressing all aspects of information management. Continuous improvement programs are in place looking for new opportunities to drive further value. These organizations are well positioned to ensure that the current high level of information quality will be maintained regardless of any organizational change imposed due to internal or external factors. Information is viewed as a key corporate asset, and opportunities to monetize this asset will be exploited. 
                Organizations at this level will have a very mature and well-defined information management organization, led by a chief data officer who will ensure visibility of the EIM program at the highest levels of the company.
            

A clear goal of any successful EIM program is to drive the organization to increasing levels of sophistication across this scale. 









1.2    Organizational Drivers for Enterprise Information Management
To successfully implement an EIM program at your company, key business benefits and drivers must be analyzed and specifically tailored to your organization. Such an analysis will provide a foundation for building a business case to justify this investment.
1.2.1    Enterprise Information Management Benefits and Drivers
As noted earlier, different organizations will be at different points along their EIM journey and will need to determine how they can expand their program to realize the significant benefits from increasing their level of EIM sophistication. In addition, companies will have different key drivers, different pain points, and different types of benefits they want to realize from an EIM program. Even with all these differences, many of the common organizational drivers can be grouped into the following categories:


Improved operational efficiency Well-managed enterprise information drives internal as well as external process excellence within the enterprise. The definition and enforcement of enterprise information standards will ensure high-quality information exists across the enterprise. For example, better customer master data improves the efficiency of sales order processing, allowing a quick turnaround in margin realization, and better material master data enables improved inventory management and production planning. 
                    Cost savings will be realized across many areas of the business. For example, a reduction in duplicate customer master records will lead to fewer incorrect shipments being made, reducing the need for re-shipments while also increasing customer satisfaction. A clear vision and understanding of suppliers and supplier hierarchies will allow for the negotiation of more favorable payment terms and opportunities for significant cost savings by maximizing all possible volume discounts. 
                    IT costs will be reduced across multiple dimensions as well. Empowering the business to retrieve any required information in a timely fashion will lower IT spend by reducing the need for IT involvement in these day-to-day processes. In addition, IT landscapes can be made simpler by consolidating various ERP systems and retiring and archiving redundant databases appropriately.
                    A well-defined EIM process can actually lead to a reduction in cycle times for master data creation. For example, ensuring that throughout a master data creation process, the record is routed to the correct role within an organization at the correct time; that data rules are automatically enforced, reducing the need for re-work; that duplicate checks are automatically performed; and that completed records are quickly replicated throughout a landscape will result in significant gains in process efficiency.
                

Increased regulatory compliance Ensuring that an organization remains compliant with all necessary legal and regulatory requirements is an essential benefit derived from an EIM program. Regulations surrounding data privacy standards mandating the rules for retention of information as well as ensuring appropriate and timely destruction are only increasing. Penalties for noncompliance can be quite significant. 
                    For companies with heavy equipment and manufacturing plants, ensuring that all equipment maintenance is performed on the appropriate schedules will help maintain a safe working environment, reducing liability and lost productivity. Having auditable governance processes in heavily regulated industries (e.g., pharmaceutical companies) is required to demonstrate compliance with government regulations.
                    Better accuracy and reliability of financial reporting can also be achieved. The implications of inaccuracies in this space can be a loss of credibility with customers and stockholders, often along with significant penalties and fines. Financial restatements can be quite lengthy and expensive processes with a huge impact on the company's image.
                

More effective decision-making This is likely to be the most lucrative of drivers for an EIM program within a company. Allowing all key enterprise information to be in the hands of those driving critical strategic decisions will reap significant benefits to an organization. 
                    Business transformation initiatives, identification of a potential new market for an existing product, or creating a new product to address a compelling customer need all rely on accurate enterprise information. For example, obtaining a deep understanding of how existing customers are using your company's products will allow for appropriate targeting of offers and cross-sell or up-sell campaigns. Analyzing feedback through social media channels and rapidly adjusting to address any issues or capitalize on a positive trend will result in a significant competitive edge in the market.
                    Handling corporate restructuring and merger and acquisition activities with a minimal amount of disruption to day-to-day operations is a key driver. The addition of new systems to a landscape and the seamless onboarding of enterprise information from a merging entity while ensuring that this information will meet any existing standards is a challenging process without a solid EIM foundation in place. Consider also the management of strategic divestitures as another significant challenge in this space.
                

As mentioned, these EIM benefits and drivers are many and varied. Some are more appropriate and will bring different levels of benefit for different industries, and all should be looked at against an organization's specific priorities, current pain points, and strategic goals.
Considering this, a one-size-fits-all approach isn't going to work. A phased and iterative approach is often adopted to help focus on these key organizational drivers in a structured fashion instead of trying to simply solve every problem at the same time. Identifying and targeting the biggest current pain point might be the right approach. Alternatively, maybe it's more prudent to address some short-term benefits that might be easier to achieve, building some momentum and showing some clear gains and business benefits with an EIM program and then using these successes to drive an expanded and more widespread program.
1.2.2    Building the Business Case
Whether an organization is just starting out or looking to expand an existing program, building a solid business case for an EIM program is a critical element for success. The most important factors to consider through this process are the following:


Specific, defined value drivers  Generic benefits are typically not enough to justify organizational spend in the EIM space. Most certainly, these generic benefits will build an interest in digging more deeply into this topic but simply stating that "We're looking to reduce duplication across our customer master data" isn't specific enough. What is needed is to look at all of the potential benefits of an EIM program, determine which of these apply to the organization in question, and then determine a defined, measurable, and quantified organizational benefit. 
                    These benefits can then be measured over time and show clearly that the promised successes have been realized. This will then often be used to build and expand an EIM program, driving additional business benefits across all levels of an organization and further targeting the key pain points that exist in an enterprise.
                

Strategic benefits vs. tactical benefits There is significant value to be obtained from more tactical benefits of an EIM program; aspects such as increasing operational efficiency or achieving cost savings on the manufacturing line are great and should be a part of an overall business case. 
                    However, if a business case is to really attract the interest of the C-Suite, whose buy-in is needed to get the necessary funding for such a program, strategic benefits will need to be assessed and defined. Showing how an EIM program will move the needle via organizational innovation, place high-quality information at the fingertips of key executives throughout an enterprise, and help to set and define new markets or new products to bring to market will drive investment into these programs and ensure success.
                










1.3    Enterprise Information Management Capabilities
Having addressed and reviewed the organizational challenges and the benefits of an EIM program, next up is an exploration of the core capabilities needed in the EIM world and how SAP offers solutions to deliver these capabilities to the market.
A great model for showcasing the delivered EIM capabilities is shown in Figure 1.1.
The illustration is intended to be read as a progression, beginning with the architecture and metadata management wedge and progressing around to information lifecycle management. Different companies, depending on their maturity in the EIM space, the complexity of their system landscape, and how much of a priority they have placed in EIM solutions in the past, will be at different stages of this journey or have different compelling needs. However, all companies can derive benefit from all phases of this journey. Let's look at them in a little more detail.

Figure 1.1    EIM Capabilities
1.3.1    Architecture and Metadata Management
During the architecture and metadata management phase, we're looking at companies who could be starting on the EIM path and are looking to truly understand their organization's data, what issues exist, and where improvements can be made. Such an analysis is always quite revealing. Many companies understand that they have data issues but don't understand the scope of these issues and the key discrepancies that are impacting their productivity. Truly looking into this will involve a data profiling exercise that will empirically show what issues exist, where they exist, and how extensive they are. For some companies, this is the first step in a long journey. 
One deliverable that will come out of this process is the building of a clearly defined business case for justifying continued investment in this space. The trends revealed in this part of an EIM journey will drive all of the subsequent steps in an EIM journey.
1.3.2    Data Integration
With data integration, we're talking about capabilities to access, move, and load all data sources that exist in a landscape. Software landscapes are often quite complex, and customers will have multiple, disparate data stores that are necessary to access and derive insight from. These data stores can be both internal and external and will probably include both SAP and non-SAP sources, for example, transactional systems, data warehouses, external enrichment feeds, and big data sources (e.g., Hadoop). These deployments will potentially be a mix of both on premise and cloud deployments.
1.3.3    Data Quality
In the data quality phase, we're looking at correcting the issues discovered during the architecture and metadata management process by both remediating any existing data issues and by putting solutions in place to monitor the data quality of the enterprise in an ongoing fashion. Tasks addressed here include removing duplicate data, correcting inaccurate data, and completing incomplete data. Establishing business rules and providing monitoring capabilities to highlight any deviation from these rules is critical to the ongoing data health of an enterprise. Self-service capabilities are key here; business users need to be empowered to build and run these rules to ensure that organizational data standards are being met. Business users own the data and know the data, so giving them the tools to ensure that it's fit for business use is a critical component in a successful EIM program.
1.3.4    Master Data Management
The capabilities in the master data management part are the key focus of this book and are expanded on significantly in later chapters. The key business need is to manage and govern an organization's master data to ensure data quality across the entire enterprise. By using the previously described capabilities, the data in an organization is now well understood, existing data quality issues have been addressed, and ongoing monitoring rules are in place. However, it's vitally important to ensure that after clean master data has been established, governance processes are in place to keep this data clean. Without this component, an organization will simply return to square one as the quality of this information will degrade over time unless appropriate governance rules and structure are in place.
1.3.5    Content Management
The focus of this book is most certainly on master data; however, there is another important component to an information management strategy that needs to be considered—the need to access and manage all of the unstructured content that exists within an organization. Think for a second how many Microsoft Word documents, Excel files, PDFs, emails, digital media files, manuals, and so on exist in an organization and how much processing is done, both inbound and outbound, that is centered on unstructured content such as invoices, purchase orders, maintenance schedules, delivery notifications and so on. It's increasingly important to have these documents accessible across the entire enterprise, to have governance and approvals around changes or additions to these documents, and to allow this content to be accessed from within existing business processes. All inbound and outbound documents need to be processed efficiently and accurately. Capabilities here allow organizations to digitize their basement, get away from a mountain of paper, and ensure this content is at the fingertips of those who need it within an enterprise.
1.3.6    Information Lifecycle Management
To comply with regulatory requirements and to continue to run efficiently, organizations need to ensure that retention policies for data and documents are enforced and that archiving procedures are in place. Retention policies will differ depending on the industry involved, different government regulations, and the type of information being assessed. Capabilities are needed to apply legal holds to data that should be prevented from being destroyed during any legal proceedings. During any archival process, it should be enforced that data can't be archived that leave behind orphaned associated documents or unstructured content nor can content be archived that leaves the underlying data in place. 









1.4    Key SAP Solutions for Enterprise Information Management
To address all of these capabilities, SAP has a complete set of products that will take a customer through all stages of an EIM journey. This book will dive into the SAP MDG offering in great detail. 

Note
For a more in-depth look at the entire EIM portfolio, Enterprise Information Management with SAP (SAP PRESS, 2014, www.sap-press.com/3666) is highly recommended. 

As an overview to some of the key solutions, the following sections will provide a little more information on the functionality of several of the key offerings in the EIM space.
1.4.1    SAP Data Services
SAP Data Services is a powerful tool allowing organizations to understand and profile their level of data quality, to integrate their data across the enterprise, and to improve and correct issues with this enterprise data.
Extract, transform, and load (ETL) capabilities are a key feature of the solution, which allow a company to take data from any data source and then ensure a high level of data quality by applying rules, transformations, and filters before loading the data into the required target databases, applications, or business warehouses. These data sources will include both big data and cloud sources. Today, SAP Data Services supports many of the most popular big data systems, including Hadoop, SAP HANA, HPE Vertica, NoSQL MongoDB, Google BigQuery, Azure SQL Database, and Amazon Redshift.
All of these data-quality capabilities can be applied to incoming data as well as being integrated with your enterprise systems for ensuring high levels of data quality at the point of entry. 
Text data processing capabilities are also included, deriving meaning and insight from natural language processing on unstructured text sources, such as Word and PDF documents and other text sources.
A graphic of the key capabilities of the SAP Data Services solution is shown in Figure 1.2. 
These capabilities include the following:


                    Access and extract structured and unstructured data—SAP and non-SAP—in batch or real time.
                

                    Transform, cleanse, match, and consolidate data.
                

                    Scale from single to multiple servers for all volumes of data. 
                

                    Support a wide variety of SAP and non-SAP targets.
                


Figure 1.2    SAP Data Services: Key Capabilities
1.4.2    SAP Information Steward
SAP Information Steward takes the power of SAP Data Services and places it in the hands of the business users whose job is to ensure that a high level of data quality is maintained across the enterprise.
Key capabilities of the solution include the ability to profile and monitor data quality across the enterprise; allow key data stakeholders to manage and understand metadata and data lineage across complex landscapes; define business rules, terms, and policies governing data; enhance operational, analytical, and data governance initiatives; and enable collaboration across key roles in a data organization. All of this is achieved through a business-friendly user interface (UI) incorporating powerful dashboards and scorecards, along with event-driven notification when thresholds aren't being met.
A graphic of the key capabilities of the SAP Information Steward solution is shown in Figure 1.3. These capabilities include the following:


                    Discover business glossary and metadata. Formally develop information policies.
                

                    Define business terms, validation rules, and cleansing rules using profiling results.
                

                    Enable workflow for data quality task ownership of data assets.
                

                    Monitor and resolve data quality issues with preloaded templates. 
                

                    Analyze data quality using business value analysis to quantify financial impact.
                


Figure 1.3    SAP Information Steward Key Capabilities
1.4.3    SAP HANA Smart Data Integration and SAP HANA Smart Data Quality
SAP is investing in EIM solutions built natively into the SAP HANA platform. The SAP HANA smart data integration and smart data quality solutions are the foundations of these developments, delivering data integration, data replication, and data quality capabilities to the enterprise.
These solutions allow batch or real-time data replication by applying filters, transformations, and data quality rules as needed across a landscape. Data profiling and data enrichment capabilities are also a key use case.
Along with these benefits comes the ability to develop applications on top of this powerful framework. Some example applications that use these features with the EIM portfolio are SAP MDG and SAP Agile Data Preparation.
A summary of the key features of SAP HANA smart data integration and SAP HANA is provided in Figure 1.4.

Figure 1.4    SAP HANA Smart Data Integration and SAP HANA Smart Data Quality
1.4.4    SAP Agile Data Preparation
A key market driver in the EIM space is the need for providing tools to allow for self-service data preparation. SAP Agile Data Preparation uses the power of the SAP HANA application platform to facilitate self-service data discovery, collaboration, and data preparation, improving both the quality and value of the master data in an enterprise. Organizational benefits will be realized through this trusted data for analytical use cases as well as improving the day-to-day operations of a business. 
SAP Agile Data Preparation can be used by different groups within an enterprise, including business users, data stewards, data scientists, and IT. Business analysts will have the necessary access to a wide variety of data sources across the entire business landscape, allowing for greater visibility into critical enterprise information. IT groups will benefit through the self-service of business users and by allowing for greater control over data standards and security.
The key features and use cases of SAP Agile Data Preparation are noted in Figure 1.5.

Figure 1.5    SAP Agile Data Preparation: Key Features and Usage
These key features and usage scenarios include the following:


                    Ingest data from a variety of sources.
                

                    Use for profile data.
                

                    Combine, shape, enrich, or cleanse data.
                

                    Output data for downstream uses.
                

                    Analyze and optimize user processes (IT governance team).
                

1.4.5    SAP Information Lifecycle Management
Whenever data in an organization reaches the end of its retention period or a system in a landscape is ready to be retired, SAP Information Lifecycle Management (SAP ILM), as depicted in Figure 1.6, will play a critical part in ensuring that these activities are done in a compliant fashion, following all necessary legal regulations and organizational policies. 
Furthermore, data archiving is a key capability of SAP ILM, allowing for data that are no longer needed to support the day-to-day operation of the business to be retired to cheaper, long-term storage. 
Retention management is a vitally important topic that needs to be considered by all organizations if they are to remain compliant in an increasingly complex regulatory environment. Data privacy regulations, such as the General Data Protection Regulation in the EU, apply strict standards around the treatment of personal information by an organization. SAP ILM facilitates the definition of policies which will ensure that enterprise data are blocked from destruction prior to the appropriate expiration data being reached and will manage the destruction of data after a retention period has been met and the data serves no further business value. SAP ILM is the tool to ensure personal/sensitive information is blocked when archived. Finally, SAP ILM provides the ability to apply a legal hold on data that would need to be retained throughout a litigation process, for example.
Legacy system decommissioning is another key aspect of SAP ILM, facilitating the shutting down of any obsolete systems in a landscape and managing the retention rules that need to be applied to any data in those systems. As organizations are moving toward a digital enterprise, the need to shut down legacy systems is only going to increase.

Figure 1.6    SAP ILM Scenarios
1.4.6    SAP Content Management Solutions by OpenText
Another key component of a successful EIM strategy is ensuring that all the unstructured content in an enterprise is managed, governed, and handled in a cost-effective, efficient, and compliant fashion. Consider how many documents, spreadsheets, PDFs, emails, images, videos, and manuals exist in an enterprise. It's vitally important for an organization to ensure that these documents are managed, accessed, and associated with the key enterprise data and processes that relate to them. As organizations move toward a digital core, the need to manage these documents in a controlled fashion is becoming more compelling. 
Being able to manage and process all inbound and outbound communication (e.g., invoices, sales orders, purchase orders, delivery notifications, etc.) and internal documents (e.g., policy documents, employee files, technical drawings, maintenance schedules, etc.) as needed is critical to any enterprise. The SAP content management portfolio from OpenText allows organizations to get out from under a mountain of paper and to digitize their enterprise filing cabinet, providing significant process simplification and organizational benefits and allowing this digital content to be at the fingertips of those in the enterprise who need it where they need it and when they need it.
There are different providers of solutions in this space in the market, but the compelling differentiator for the SAP content management solutions is the fact that these are SAP Solution Extensions, integrating natively with SAP software. This deep content association allows for true enterprise collaboration across both structured master data and unstructured enterprise content. In fact, the SAP Extended Enterprise Content Management by OpenText (SAP Extended ECM) solution can be integrated with SAP MDG, allowing for the governance and control of both enterprise master data and unstructured content within one governance process.
The following key solutions are part of the SAP content management portfolio:


                    SAP Archiving by OpenText
                

                    SAP Document Access by OpenText
                

                    SAP Extended Enterprise Content Management by OpenText
                

                    SAP Invoice Management by OpenText
                

                    SAP Digital Content Processing by OpenText
                

                    SAP Document Presentment by OpenText
                

Figure 1.7 demonstrates how content management capabilities can be made a part of and enhance an EIM strategy.

Figure 1.7    SAP Content Management Solutions: Critical Component of an EIM Strategy









1.5    SAP Master Data Governance
Alongside these other EIM offerings sits SAP MDG. Within the EIM portfolio, SAP MDG is the key master data management offering from SAP and is designed to be complemented by the rest of the portfolio for a complete EIM offering.
Most certainly, understanding your enterprise data is important, and tasks such as cleansing and de-duplicating your records will bring significant value; however, if there isn't a formal mechanism in place to mandate data quality and apply governance standards in an ongoing fashion, the overall quality of the data within the enterprise will degrade quite quickly. As a first step, a company might look to monitor and remediate issues, but ultimately, preventing data quality issues from even occurring is a key step along the path of advancing the level of EIM sophistication within the enterprise. SAP MDG is the key offering from SAP to provide this business value.
SAP MDG allows for both the central creation and maintenance of enterprise master data as well as for the consolidation of data from disparate sources into the SAP MDG application. The SAP MDG solution allows organizations to use delivered content and to leverage a governance framework to build strong governance processes to suit their business requirements. 
One of the strengths of SAP MDG is the alignment that this solution has to SAP systems, data structures, and architecture. However, it's quite clear that there are almost no SAP customers who have a 100% homogeneous SAP landscape. At a minimum, there are likely custom extensions to SAP data models and likely several non-SAP applications that will benefit from having high-quality master data. SAP MDG is absolutely designed to cater to such landscapes. SAP MDG comes with delivered content that gives customers significant out-of-the-box benefits but, most importantly, it provides a framework that is completely extensible to allow for organizations to benefit from these features across the entire landscape.
Originally, SAP MDG was developed to address a central governance use case where companies would establish a set of governance processes and rules to control the creation of their enterprise data before distributing this as needed throughout their landscape. This is still seen as a primary use case for the solution. Organizations understand the clear need for addressing this scenario and want to have this standardization brought to their enterprise master data. However, it should be made clear that a central process with SAP MDG doesn't necessarily mean having one central group operating globally. The central maintenance of master data can most certainly be distributed throughout an enterprise. For example, consider a global company with different regional subsidiaries setting up a governance process for their material master. SAP MDG processes could be established allowing for perhaps an initial creation of core attributes and then have the process distribute to relevant local centers for the creation of, for example, plant or sales organization data. All of these fields would follow global standards, perhaps with regionally approved variations, resulting in one complete, managed, and audited governance process.
Increasingly, it's becoming apparent that there are data management needs beyond this central use case and that organizations are often looking to supplement their central governance processes with the consolidation of data from multiple sources. SAP MDG allows for the consolidation of enterprise data, addressing pure consolidation scenarios such as companies deciding to continue to create data in multiple locations and bringing this together into an SAP MDG system for an analytical use case or consolidation prior to governance, as well as companies looking to initially cleanse their data prior to then centrally governing using SAP MDG. In addition, some of the more interesting use cases for central governance are around a hybrid approach of both consolidation and central governance. For example, you can consolidate data into a central SAP MDG instance that is needed as a result of some merger or acquisition activity or even in a continuous fashion where there could be a need for periodic external updates to SAP MDG from local or third-party systems or data sources. Figure 1.8 summarizes the different processes for both consolidation and central governance in SAP MDG.

Figure 1.8    SAP Master Data Governance: Consolidation and Central Governance
SAP MDG is delivered with enterprise content across key domains of master data to allow an organization to govern their critical enterprise attributes:


Financials Key financial data, including such areas as SAP General Ledger (G/L) accounts/chart of accounts, cost centers, profit centers, and hierarchies are maintained.
            

Material Material master-relevant data are maintained across all key areas, including material descriptions, units of measure, classification data, quality data, sales data, plant data, and storage and warehouse data.
            

Supplier Common business partner attributes are maintained, for example, name, address, bank details, tax numbers, as well as the relevant business partner role. In addition, supplier-specific attributes are also stored such as general data, company code data, and purchasing data. The linkage of business partner data allows for this information to be shared across multiple suppliers with different roles as well as for situations where a supplier might also be a customer.
            

Customer As with supplier, the common business partner attributes are maintained along with the customer-specific attributes such as general data, company code data, and sales area data.
            

Enterprise asset management Enterprise asset management governance content has been developed on the SAP MDG platform by the SAP partner Utopia as a solution extension to SAP MDG. This content is relevant to both SAP Enterprise Asset Management (SAP EAM) and SAP ERP Plant Maintenance (SAP ERP PM) customers and includes such areas as equipment master, functional locations, maintenance, repair and operations bill of materials (BOM), service master, task lists, measuring points, and more.
            

Retail and fashion management  Governance of the article master is provided and is of critical importance to all customers in the retail and fashion industries. Areas covered include listings, purchasing and sales views of the article, and hierarchies. 
            

Custom objects In addition to the preceding delivered content, SAP MDG allows for complete custom domains of master data to be created. These could be for such use cases as governing reference data in an enterprise, industry specific-objects, or complete non-SAP objects. The SAP MDG, enterprise asset management and SAP MDG, retail and fashion management content noted earlier were both developed on the SAP MDG custom objects framework. This allows for any objects to be governed and managed on the exact platform as the standard objects delivered with the solution.
            

Different aspects of content are provided across these domains, such as data models, workflows, UIs (including SAP Fiori content), roles, and validation rules. This architecture and, most importantly, how to extend and customize SAP MDG to suit the specific needs of an enterprise are explained in detail throughout the rest of the book.









1.6    Summary
The background to EIM we've just gone through is key to ensuring that you understand where SAP MDG fits within this context and the overall organizational benefits of an EIM program. We're now going to dig more deeply into the SAP MDG topic to further explore this key solution in the EIM portfolio from SAP.








2    Deploying SAP MDGMaster data management is necessary for business transformation. SAP MDG enables enterprises to consolidate and govern the master data in order to monitor the master data processes and reduce the total cost of ownership. This chapter discusses the deployment considerations and initial system setup of SAP MDG.SAP Master Data Governance (SAP MDG) enables businesses to consolidate and govern master data. Master data are shared across an enterprise to run business operations to add meaning to transactions and help in managing the unstructured data and associated enterprise metadata. The identification of master data varies from industry to industry and across business process definitions. Master data can also be reference data with less frequent definition changes. SAP supports key master data objects such as material master, business partner, customer master, supplier master, and finance master data objects, including SAP General Ledger (G/L) accounts, cost center, profit center, and so on. SAP MDG provides reusable templates and frameworks to extend the standard functionality and to govern custom master data objects. SAP also supports partner-developed solutions for master data objects related to SAP Master Data Governance, enterprise asset management and the article master.SAP MDG provides other data management capabilities such as consolidation, hierarchy processing, process reporting, and so on, which will be covered in this chapter. Section 2.1 discusses the various use cases of SAP MDG, and Section 2.2 details the core architecture components of SAP MDG. We'll be discussing the various deployment options of SAP MDG in Section 2.3. Section 2.4 will elaborate on the domain-specific deployment considerations, and Section 2.5 discusses the SAP MDG deployment options in an SAP S/4HANA landscape and some of the simplifications available with SAP S/4HANA with respect to master data domains.
2.1    Overview 
SAP MDG is the master data management solution for an enterprise. The main use cases of SAP MDG are as follows:


Central governance Create and maintain master data in a central system adhering to the data rules and standards. The maintained master data are then replicated to satellite systems, which use the quality master for the downstream system transactions, as illustrated in Figure 2.1. Up-front governance of master data through a clear and transparent audit trail provides significant business benefits from both process and business operations perspectives. This eliminates error-prone manual master data maintenance processes in multiple satellite systems. Centralized governance and replication of data to target systems delivers consistent data definition and mapping for master data entities across systems.
                
Figure 2.1    SAP MDG, Central Governance


Consolidation  for analytics purpose only Master data are created in separate systems/transactional systems, as needed. The data are then consolidated into a central system by merging and mapping the data to a common data standard, so the data can be used for analytics purposes, as illustrated in Figure 2.2.
            

Consolidation  for initial load before central governance The consolidation functionalities of merging and best record creation can be used for existing data preparation activities for the SAP MDG, central governance scenario. This can be a one-time activity where an enterprise decides to centrally govern the master data and then replicate the data to multiple systems. As part of the initial load, data are extracted, cleansed, and then consolidated using SAP MDG, consolidation, as illustrated in Figure 2.3.
                
Figure 2.2    SAP MDG, Consolidation for Analytics

Figure 2.3    One-Time Consolidation


Consolidation  for mergers or acquisitions When new systems are introduced into the landscape, SAP MDG, consolidation can be used to harmonize and de-duplicate the new data with the existing data.
            

Continues hybrid approach Both consolidation and central governance scenarios can be implemented together to refine master data from the source systems and govern the enhanced data through the central governance process, as illustrated in Figure 2.4.
                
Figure 2.4    Hybrid Approach


To support these use cases, SAP MDG provides the following functionalities:


                Flexible business-driven/oriented workflow and workflow rules framework are provided to automate master data management processes.
            

                Tight integration with the SAP data model for key master data domains helps in reduced total cost of implementation by reusing the data validation and mapping logic. This also helps in providing contextual information on the master data record with the linked transactions.
            

                Frameworks are provided to configure custom master data objects for data management and extension capabilities for standard master data objects.
            

                Built-in master data stewardship tools are provided to monitor data management processes.
            

These functionalities will be discussed in detail in later sections.









2.2    Architecture
This section provides an overview of the SAP MDG solution architecture and discusses various user interface (UI) options to access this solution.
2.2.1    Overview
SAP MDG is an add-on component to SAP ERP and fully integrated with SAP S/4HANA. It leverages the inherent functionalities of the SAP ERP/ABAP application layer, including workflows, BRFplus, replication, value mapping, key mapping, and UI frameworks such as Floorplan Manager.
SAP MDG provides functionalities to support the following:


                    Central governance of material master, business partner master, customer master, supplier master, finance master data, and custom master data objects
                

                    Consolidation scenarios of material master, business partner, and custom objects
                

From a software component installation standpoint, the key software components that are part of SAP MDG are MDG_APPL, MDG_FND, and MDG_MDC with key dependencies on the core components such as SAP_APPL, SAP_BS_FND, and so on. MDG_MDC contains the consolidation functionalities and software components, while MDG_APPL and MDG_FND provide the central governance functionalities. The functionalities are activated as part of the switch framework, thus providing the freedom to activate SAP Master Data Governance, Customers/SAP Master Data Governance, Financials/SAP Master Data Governance, Product (formerly called SAP Master Data Governance, Material) individually, as needed. Each release cycle of SAP MDG has different revisions of business functions. You can choose to activate the specific business functions, along with their dependencies, as required. The system administrator will activate the switches (Transaction SFW5). The key business functions of SAP MDG 9.0 are as follows:


MDG_FOUNDATION_7


MDG_FINANCIALS_7


MDG_BUPA_3


MDG_ERP_SUPPLIER_6


MDG_ERP_CUSTOMER_5


MDG_MATERIAL_6


MDG_CONSOLIDATION_MATERIAL_2


MDG_CONSOLIDATION_CUSTOBJ_2


MDG_CONSOLIDATION_CUSTOMER_2


MDG_CONSOLIDATION_SUPPLIER_2


The key software components and business functions related to SAP MDG are listed in Figure 2.5. Only the key dependencies are shown. Dependencies of switches with the components and business functions of earlier SAP MDG release aren't illustrated. These are taken care of by the system during the installation of software components and activation of business functions. Software components MDG_MDC 200, MDG_APPL 620, and MDG_FND 750 are part of the SAP MDG 9.0 release; MDG_APPL 619 and MDG_FND 749 are part of the SAP MDG 8.0 release. 

Figure 2.5    Key SAP MDG Business Functions (SAP MDG 9.0)
To activate SAP MDG in a system, you need to activate the business functions. MDG_FOUNDATION contains the reusable content used by the central governance functionalities across domains. Thus, this business function is a key dependency for other central governance business functions such as MDG_MATERIAL, MDG_BUPA, MDG_ERP_SUPPLIER, MDG_ERP_CUSTOMER, and so on. The consolidation business functions are independent of the central governance business functions technically, so companies can install the consolidation functionality in a standalone system, if required to support specific use cases.
The key solution components of SAP MDG are illustrated in Figure 2.6. 
The generic services offered include the following components:


Roles/work centers Template roles are provided to align the standard applications with the enterprise-level roles and responsibilities. These domain- and task-specific roles include data specialist, read only, and so on.
                    
Figure 2.6    SAP MDG Core Components


UI framework The SAP MDG UI for central governance is based primarily on Web Dynpro ABAP, and SAP MDG, consolidation UIs are based on SAP Fiori. Additionally, there are SAP Fiori apps available for request and approve scenarios for central governance and for analytics applications. SAP Fiori apps are mobile device friendly and provide the same look and feel in both desktop and mobile devices. The various accessibility options for SAP MDG are discussed in Section 2.2.2. 
                

Workflows Workflow templates are provided out of the box and based on SAP Business Workflow. There are rules-based workflow templates that can be used across domains. The workflow paths can be configured to include serial paths as well as parallel paths. Dynamic workflow paths based on object fields are also possible.
                

Change requests  Submission of a change request triggers the workflow. A change request can be used for the creation or maintenance of a master data record or multiple records. A unique ID, called a change request number, is generated for each change request and used for tracking the request until the workflow process is completed. After the request is approved, master data are created in the underlying SAP ERP master data tables or active area. 
                

Staging areas Data that are in the change request are stored in the staging area until the workflow is successfully completed (discussed in detail in Chapter 3).
                

Search, data quality, and cleansing Master data search is extensive and provides free text and fuzzy search capabilities. SAP MDG also has embedded data quality solution integrations such as address cleansing, duplicate check, and so on.
                

Analytics SAP MDG provides reporting capabilities over the SAP MDG governance processes to track and monitor the SAP MDG change requests and resolve the process bottlenecks.
                

Data replication import/export The data replication framework helps in replication of data to and from the SAP MDG system. It leverages SAP application layer components such as IDocs. In addition, replication can be done through web services, remote function call (RFC), and file transfer. It also facilitates mapping objects across the source and target systems.
                

Validation/enrichment adapter SAP MDG supports the validation and enrichment of data based on rules. It supports the checks at various levels. SAP MDG leverages the rule configurations of the underlying implementation objects. Additional rules/data validation can be configured to be specific to SAP MDG. Checks can be applied at various levels, including a basic data check, security authorization check, duplicate check, validation rules check, and so on. Enrichment adapters are integrated with the SAP MDG framework to support data enrichment such as address data, tax information, bank data, and so on.
                

2.2.2    Available User Interfaces 
SAP MDG applications can be accessed through different UIs and tools. The main UI for SAP MDG, central governance scenarios is based on Web Dynpro technology. These Web Dynpro applications are built using the Floorplan Manager framework and are accessible through a URL. SAP MDG groups these applications based on domains and then assigns them to a role. These role menus contain a list of applications corresponding to the domain and can be accessed at runtime through SAP GUI or the SAP Business Client desktop tool. You can access these applications through Transaction NWBC (SAP Business Client for HTML) or through the desktop client. 
SAP MDG also offers SAP Fiori apps for lean requests and approvals. There are supplementary apps to support SAP MDG analytics. SAP MDG, consolidation apps are based on SAP Fiori apps and can be accessed through SAP Fiori catalog roles as a URL or via an app in a mobile device. 
All these apps can also be linked/embedded in other UI solutions such as SAP Enterprise Portal. The following sections provide an overview of these UI technologies and SAP Business Client.
Floorplan Manager
The Floorplan Manager framework allows you to develop Web Dynpro-based applications with a consistent look and feel following SAP's user experience guidelines. Multiple views can be combined to display the required information using predefined floor plans. There are standard floor plans available to display different types of information. More information on Floorplan Manager and how SAP MDG leverages this framework can be found in Chapter 4. Figure 2.7 shows a screenshot of a UI developed using the Floorplan Manager framework.

Figure 2.7    Floorplan Manager Look and Feel
SAP Fiori Apps
SAP Fiori provides simple and easy-to-use, role-based apps that can be accessed from mobile and desktop devices. SAP MDG offers SAP Fiori apps for request and approval scenarios for central governance processing, consolidation functionality, and analytical apps. Figure 2.8 shows the look and feel of an SAP MDG approval screen. These applications are accessible through the SAP Fiori launchpad. You'll find more information on SAP Fiori apps in SAP MDG in Chapter 11.

Figure 2.8    SAP Fiori Look and Feel
SAP Business Client
SAP Business Client provides a single point of entry for SAP's business applications. It can host a variety of web-based content, including Web Dynpro applications and SAP GUI applications. Both SAP Business Client and the SAP Fiori launchpad can launch and display SAP Fiori apps and Web Dynpro applications in SAP S/4HANA on-premise systems. Figure 2.9 shows the look and feel of SAP Business Client.

Figure 2.9    SAP Business Client









2.3    Available Deployment Options 
SAP MDG functionalities are available to configure after the business functions are activated. There are two deployment options available for SAP MDG. SAP MDG functions can be activated in a separate system (SAP MDG hub) or they can be co-deployed on an existing operational SAP ERP system, provided it meets the prerequisites for the respective SAP MDG release level. The SAP MDG deployment option with SAP S/4HANA is discussed in Section 2.5.
SAP MDG is activated on a central/hub system if multiple SAP ERP systems are in the landscape or some restrictions prevent the activation of SAP MDG functionalities in the core SAP ERP box. The SAP MDG hub versus co-deployed options are illustrated in Figure 2.10. The following sections discuss some of the restrictions and limitations that need to be considered while determining the deployment approach.

Figure 2.10    Hub versus Co-Deployment Approach
2.3.1    Hub versus Co-Deployment
Numerous industry extensions can be deployed on an operational SAP ERP system. You should make sure that co-deployment of the SAP MDG add-on is compatible with those industry extensions. For example, SAP MDG can't be co-deployed if the SRM One Server is deployed in the operational SAP ERP system. Another important aspect to consider when deciding on the co-deployment option is the update strategy of the SAP ERP system. An update to the SAP MDG add-on in an SAP ERP box could lead to an upgrade to the Enhancement Pack (EHP) level  of the SAP ERP system, which might call for end-to-end testing of the SAP ERP scenarios, in addition to SAP MDG regression testing. If any new functional changes to the SAP ERP processes were introduced to the system as part of the upgrade, this would require additional effort in change management processes.
If the landscape already has a single/central SAP ERP system, then it's easier to co-deploy SAP MDG with that system. In a co-deployed system, additional effort to migrate master data and related Customizing configuration isn't required. From an end-user perspective, the UI navigation will be easier as well.
If the SAP MDG system isn't based on an SAP HANA database, additional indexing and search solutions such as SAP Enterprise Search (formerly Embedded Search), TREX, or SAP Data Services are required for handling the material master search. You should deploy SAP MDG on an SAP HANA-based system so that SAP MDG innovations can be leveraged to their fullest capability. The other alternative is to use SAP HANA as a sidecar. SAP BusinessObjects services need to be leveraged for matching and duplicate check functionalities with SAP MDG, consolidation and SAP MDG, central governance scenarios.
If there are multiple systems in the landscape, including SAP and non-SAP systems, but no central system, an ideal approach is to add a new master data hub system for SAP MDG deployment, although the additional effort required to customize configuration transports and master data migration needs to be considered. The major advantage of this deployment approach is that the upgrade cycle of the SAP MDG system is independent of the upgrade path of other systems in the landscape. Additionally, more flexibility is available for integrating the hub system with other client systems and additional systems that could be in scope due to mergers and divestments.
The major restrictions to the SAP MDG co-deploy scenario are as follows: 


                    Time-dependency for business partners isn't enabled.
                

                    SRM One Server isn't deployed.
                

                    Industry solutions (other than limited use of Oil & Gas, Retail, Mining, Discrete Industry and Mill Products [DIMP], and Defense & Security) aren't co-deployed.
                


General Recommendations on Number Range Settings
When SAP MDG is deployed in a hub approach, you should ensure that the master record numbers, such as the material number, business partner number, and so on, are mapped or are the same across the systems so that users can search with the same number found in the client system and SAP MDG hub. If there are multiple client systems, it may be difficult to find a common number range to assign in the SAP MDG system for all the systems. Some of the options to consider are as follows:


External number assignment in the client system External numbers in the client system ensures that the numbers for newly created records are the same as the hub system records. For already existing records, the SAP MDG hub system may be loaded with external numbers (same as the existing record numbers). For newly created records, after go-live, you can choose a fixed number range across the systems. If numbers are different across the systems, the key mapping functionality in SAP MDG must be leveraged so that numbers are mapped with the respective system ID.
                    

Internal number generation in the client system In this scenario, key mapping is required to map the numbers across the system. The chances that all numbers will be in sync are slim. If replication is done through Application Link Enabling (ALE), the ALEAUDIT IDoc may be used to send the internal generated record number back to the hub system.
                    


2.3.2    Limitations and Restrictions
As of this writing, on-premise or private cloud (SAP HANA Enterprise Cloud) deployment is supported for SAP MDG. SAP MDG can be technically deployed on SAP ERP 6.0 or SAP S/4HANA. This section will discuss SAP MDG 8.0 and SAP MDG 9.0 versions in more detail. The general recommendation is to deploy SAP MDG on an SAP S/4HANA system either in a hub or in a co-deployment option. 

Note
Some of the key SAP Notes to refer to are as follows:


                        SAP Note 1690202: SAP MDG and Industry Solutions
                    

                        SAP Note 2375319: S4TWL - SAP HANA-based Analytics for Master Data Governance
                    

                        SAP Note 2214181: SAP Master Data Governance 8.0 and SAP S/4HANA On Premise: Release Information Note (co-deployment of SAP MDG and SAP S/4HANA 1511 is supported)
                    

                        SAP Note 2349002: SAP S/4HANA Master Data Governance 1610: Release Information Note (co-deployment of SAP MDG and SAP S/4HANA 1610 is supported)
                    

                        SAP Note 2103558: SAP Simple Finance, On-Premise Edition 1503: Compatible Add-Ons (co-deployment of SAP MDG and SAP S/4HANA Finance 1503 is supported)
                    

                        SAP Note 2267140: S4TWL - Material Number Field Length Extension 
                    

                        SAP Note 2245651: Distribution of Valuation Data with Different Material Ledger Settings 
                    

                        SAP Note 2204534: Material Master: Impact on Foreign Trade Functional Fields in Transactions MM01/MM02/MM03 
                    

                        SAP Note 2224371: Material Master: Impact on MRP functional fields in Tr. MM01/MM02/MM03 
                    

                        SAP Note 2214213: SAP S/4HANA 1511: Restriction Note
                    

                        SAP Note 2313368: Functional restrictions in MDG for Business Partner/Customer/Supplier with SAP Master Data Governance 9.0
                    

                        SAP Note 2447538: Recommendation for SAP MDG Hierarchy with SAP Master Data Governance
                    

                        SAP Note 2284745: Functional Restrictions in SAP MDG for Material with SAP Master Data Governance 9.0
                    

                        SAP Note 2349002: SAP S/4HANA Master Data Governance 1610: Release Information Note
                    


2.3.3    Initial Build
The initial setup of SAP MDG in an enterprise varies based on the hub or co-deploy option. If it's a hub deployment, SAP MDG is installed in a new system. Customizing configuration data and the master data need to be moved from the client systems to the SAP MDG hub system. If there are multiple client systems/duplicate records, it's best practice to implement a data cleansing project to make sure that duplicate data records aren't loaded into the SAP MDG hub system. Proper record mapping with respect to the system needs to be configured so that the right data are replicated to the right system from the SAP MDG hub. 
If the system landscape has multiple systems, based on complexity and type of system, enterprises may go for a new SAP MDG hub system, or if there is already a central system, SAP MDG functionalities may be co-deployed on it. The SAP MDG co-deployment option is usually chosen if there is only one operational SAP ERP system in the landscape, provided there are no restrictions. The following describes how to set up the systems for these scenarios:


Scenario 1: New install (hub approach) A greenfield implementation (hub approach) of SAP MDG will involve moving the master data configuration elements. The master data records in client/target systems also need to be migrated to the hub system. 
                    The Customizing configuration data can be moved in a number of ways. Transports or Business Configuration Sets (BC Sets) can be leveraged to move the specific Customizing configurations from a system to SAP MDG. The automated options include SAP Solution Manager functionalities such as the Customizing Scout and Customizing Distribution tools. If there are multiple systems, the configurations should be harmonized, or specific value mapping has to be set up in the SAP MDG/target system before the values are moved. Another option is use ALE Customizing distribution.
                    If there is already a central system that governs the Customizing configurations in the landscape, a system/client copy with Customizing data is an option. The major disadvantage with this option is that redundant data that aren't related to master data may also be copied.
                

Scenario 2: SAP MDG co-deployed in a central system The major advantage of the co-deployed scenario is that there is no requirement to move the Customizing and master data transfer, unless there are other systems in the landscape to govern. If there are multiple systems to govern, the delta configuration and data records need to be moved to the co-deployed system.
                

The choice of database is also a key decision for the optimum performance of SAP MDG. An SAP HANA database is recommended for SAP MDG for improved search, standardization, and matching capabilities. SAP MDG, consolidation and SAP MDG, mass processing functionalities in a non-SAP HANA database are restricted and not recommended. SAP MDG running on SAP HANA provides additional benefits of efficient fuzzy search and duplicate check capabilities, address cleansing, real-time analytics, and so on. SAP HANA as a sidecar scenario for SAP MDG, consolidation and SAP MDG, mass processing isn't supported.
The key configuration options after the system setup are as follows:


                    Activation of business functions using Transaction SFW5.
                

                    Activation of BC Sets using Transaction SCPR20. The BC Sets provide preconfigured content for the standard objects. These are domain-specific as well as common BC Sets for both consolidation and governance use cases.
                

                    Set up of workflow settings using Transaction SWU3 (usually done by system administrator). This configuration helps in setting up the basic workflow configuration such as batch user IDs, number ranges for client-specific workflow object instances, and so on. This configuration enables the SAP system to process SAP business workflows.
                

                    Activation of application services using Transaction SICF. These application services are required to access the predelivered SAP MDG applications.
                

                    Set up of user roles based on template security roles provided by the delivered content. 
                

After these initial configuration activities are completed, domain-specific configuration needs to be done for the governance and consolidation processes such as set up of search views, agent assignment for change request processing, process models, and so on. These configurations are done using Transaction MDCIMG and Transaction MDGIMG for consolidation and governance scenarios, respectively.
2.3.4    Customizing Synchronization
When a master data system is deployed as a hub either catering to a single receiving system or as a true central master data governance system, it's important to consider how and where the data that helps maintain master data are maintained. In the context of SAP ERP, such data are known as Customizing data and are defined in a configuration client of a development system and moved to quality and production systems via the transport process. Customizing data are defined as client specific and need to be copied to other clients if the same data are needed in other clients.
The following subsections provide an overview of the importance of synchronizing Customizing data if SAP MDG is deployed as a hub and provides a list of options available to synchronize Customizing data. This section also provides a detailed overview and step-by-step instructions on setting up the most recommended and widely used approach to synchronizing Customizing data using SAP Solution Manager.
Overview
It's very common to have SAP MDG deployed as a hub with at least one or more SAP ERP systems in the landscape. In such scenarios, it's important to define which systems acts as systems of record for Customizing data. In general, Customizing data are defined and reside in a system where an end-to-end process is defined, typically a system where transactional data are created. It's very uncommon, although possible, to define Customizing data in an SAP MDG hub. Some companies prefer to define process-independent Customizing data in a central hub and distribute the data to other systems. Examples of such data are countries, regions, languages, units of measure, and so on. Other companies prefer all Customizing data in a system where end-to-end processes are maintained (e.g., SAP ERP) and then synchronized to the master data hub. This approach provides a single system of record for all Customizing data and is an easier approach instead of setting up multiple systems as sources of Customizing data. However, if any of the Customizing data need to be governed, such data can be modeled as custom objects in SAP MDG and can be sent to the operational SAP ERP system and any other systems that require such data via the replication process. Chapter 13 and Chapter 14 provide step-by-step details on how to model and set up a custom object in SAP MDG. 
As discussed earlier, whenever an SAP MDG hub is set up, it's important to understand that the Customizing data are required and need to be synchronized from a single system or systems where such data are setup. SAP MDG also provides value mapping if the values of a specific Customizing data are different between systems when multiple source systems are involved. The concept of value mapping is explained in Chapter 7. The process of synchronization is a two-step process performed after the SAP MDG system is set up for the first time and as an ongoing process. The SAP Transport Management System (TMS) and BC Sets are important aspects of Customizing synchronization. Following is an overview of initial and ongoing synchronization and various options available to perform synchronization of Customizing data:


Initial synchronization  Depending on how the SAP MDG hub is installed, initial synchronization either occurs during an installation process or after installation is complete. Section 2.3 explained various initial build options, and irrespective of the approach considered, it's important to synchronize Customizing data from the operational SAP ERP system and other source systems initially. Building the system and synchronizing the Customizing data based on a set of Customizing object lists is always much cleaner because the initial synchronization is performed based on the objects relevant to the SAP MDG hub. If the SAP MDG hub is built as a copy from the operational SAP ERP system, then a cleansing of Customizing is required to limit the synchronization only to the relevant Customizing objects. Without such cleansing, certain Customizing is prone to inconsistencies during ongoing synchronization that is enabled only for relevant Customizing. 
                    

Ongoing synchronization After the initial synchronization is performed, setting up ongoing synchronization is a key aspect of the customization synchronization effort. Various options are available; however, compiling the list of synchronization objects that are relevant to the master data domains maintained in SAP MDG hub is key because all options require a list of these objects. Following are some of the options available:
                        

Semi-automatic synchronization A semi-automatic approach exports transport entries from an operational SAP ERP into a BC Set and then imports into the SAP MDG hub manually. The disadvantage of this solution is the manual process involved.
                            

Custom solution A completely custom solution can be developed to pull only the relevant data into the SAP MDG hub. The drawback of this approach is the effort involved in building the solution, but the advantage of this approach is the more controlled extraction of configuration data after the data are available in the production system of the relevant operational SAP ERP systems.
                            

ALE-based Customizing distribution This approach involves setting up ALE between the SAP MDG hub and operational SAP ERP to capture and synchronize relevant Customizing data.
                            

SAP Solution Manager-based  Customizing distribution This approach involves using SAP Solution Manager as a system that helps in the end-to-end Customizing synchronizing process and to monitor after the initial distribution is set up. The following section discusses this option in more detail as this is the recommended approach and is used by several companies.
                            



SAP Solution Manager-Based Customizing Distribution 
Using SAP Solution Manager for synchronizing Customizing data between multiple SAP systems, including the SAP MDG hub, is the recommended approach and widely used. This approach helps in automating the Customizing synchronization process and provides the ability to synchronize only the Customizing data required for maintaining master data for the domains being implemented using SAP MDG. SAP Solution Manager has the following tools to support Customizing synchronization:


Customizing Scout  This tool is used to compare Customizing between two or more systems and helps in analyzing the discrepancies in Customizing between the systems based on a predefined set of Customizing object lists. 
                    

Customizing Distribution  This tool is used to distribute Customizing from source to target systems based on a predefined set of Customizing object lists. This tool can be used to perform initial as well as ongoing distribution of Customizing data. Following is an overview of initial and ongoing synchronization of data:
                        

                                Initial distribution is used to distribute Customizing data from the source to target SAP system, and this process completely overwrites Customizing data in the target system with the data from the source system. Hence, initial distribution is typically used when setting up a new system and customization needs to be distributed from another SAP system. 
                            

                                Ongoing distribution picks up any changes made to Customizing data to any of the objects in the predefined object lists and synchronizes with the target system automatically.
                            



Table 2.1 provides a list of authorizations needed for both system administrators and configurators.




                                Role
                            

                                SAP Solution Manager
                            

                                Component Systems
                            





                                System administrators
                            


S_CD_SYSAC
S_CS_SYST
S_PROJECT
S_PROJECTS
S_RFCACL




S_USER_AUT
S_USER_GRP
S_USER_PRO
S_PROJECT
S_PROJECTS
S_CTS_ADMI
S_TRANSPORT
S_RFCACL





                                Functional configurators
                            


S_CD_SYNC
S_TABU_RFC
S_TABU_DIS
S_TABU_CLI




S_TABU_CLI
S_TABU_DIS
S_TABU_LIN
S_TABU_RFC
S_BCSETS





Table 2.1    Authorization Prerequisites
Sample Processes and Roles
In general, various SAP and non-SAP systems might be involved in managing different types of data (e.g., master data, Customizing/configuration data, and transactional data). SAP MDG is always considered a system of record for master data and any other static data that need to be governed. Transactional data are always created and maintained in an operational SAP ERP. However, configuration data that are defined as part of the end-to-end process setup are also maintained in a system where transactional data are created/maintained. SAP Solution Manager helps in synchronizing such configuration/Customizing data to an SAP MDG hub. 
A three-tier landscape is common in any project implementation. To use SAP Solution Manager for initial and ongoing distribution, it should be part of the implementation project. Figure 2.11 shows a simple process when SAP Solution Manager-based synchronization is used for ongoing synchronization. 

Figure 2.11    SAP Solution Manager-Based Customizing Process for Ongoing Synchronization
Table 2.2 summarizes the steps involved in setting up the Customizing synchronization using SAP Solution Manager. The roles suggested in Table 2.2 are for reference purposes only, and many business implementations have followed various approaches. A best approach based on the implementation project setup needs to be identified and followed.




                                System
                            

                                Activity
                            

                                Transaction Code
                            

                                Role
                            





                                SAP Solution Manager
                            

                                Create RFC connections for Customizing Distribution and Customizing Scout
                            

                                SM59


                                System administrators
                            



                                SAP Solution Manager
                            

                                Create a project
                            

                                SOLAR_PROJECT_ADMIN


                                System administrators
                            



                                SAP MDG development
                            

                                Create synchronization object list
                            

                                SCDT_MAPPING


                                Configurators
                            



                                SAP Solution Manager
                            

                                Create synchronization groups with trusted connections to SAP MDG and SAP ERP systems
                            

                                SCDT_GROUPS


                                Configurators/system administrators
                            



                                SAP Solution Manager
                            

                                Create Customizing distribution for the synchronization groups created
                            

                                SCDT_SETUP


                                System administrators
                            



Table 2.2    High-Level Steps Involved in Customizing Synchronization Setup
The various activities introduced in Table 2.2 are explained in the following steps: 


Create RFC connections for Customizing Distribution and Customizing Scout. The following RFC connections are needed in SAP Solution Manager for the systems involved in the synchronization process:
                        

                                Customizing Scout:
                                
SM_<system ID>CLNT<client>_READ



                                Customizing Distribution:

SM_<system ID>CLNT<client>_TRUSTED
SM_<system ID>CLNT<client>_BACK





Create a project. This step involves creating an SAP Solution Manager project using Transaction SOLAR_PROJECT_ADMIN and is typically performed by system administrators.
                    

Create a synchronization object list. This step is performed in the SAP MDG system by functional configurators responsible for maintaining Customizing synchronization using Transaction SCDT_MAPPING. During this step, functional configurators create a synchronization object in the SAP MDG system and maintain a list of objects that are part of the synchronization objects. These objects are later loaded into SAP Solution Manager during the creation of the synchronization group. When creating the synchronization object, it's important to indicate the relevance of the synchronizing object in the Relevant for dropdown, which indicates the main purpose of the synchronization object:
                        

Relevant for Comparison and Distribution


Relevant for Comparison Only


Relevant for Initial Distribution Only


Relevant for Distribution by Transport


Relevant for Comparison and Initial Distribution Only


Figure 2.12 shows an example of creating a synchronization object in the SAP MDG system along with list of tables added to the synchronization object.
                        
Figure 2.12    Creation of the Synchronization Object


Create synchronization groups. After synchronization objects are created in the SAP MDG system, the following steps are performed in SAP Solution Manager using Transaction SCDT_GROUPS: 
                        

Create the synchronization group and load synchronization objects. This step involves creating a synchronization group by providing the source and target systems and the SAP Solution Manager project. The Load Object Lists button provides the ability to load all synchronization object lists maintained in the SAP MDG system into the SAP Solution Manager system. Figure 2.13 shows an example of synchronization group creation.
                                
Figure 2.13    Synchronization Group


Insert synchronization objects under the newly created synchronization group. After the synchronization group is created, and all object lists are loaded from the SAP MDG system, then the next step involves inserting synchronization objects created in SAP MDG under the synchronization group hierarchy. Figure 2.14 and Figure 2.15 provide an overview of this step.
                                
Figure 2.14    Synchronization Group: Insert Objects

Figure 2.15    Synchronization Group Hierarchy




Create Customizing distribution. As a next step, Customizing Distribution needs to be created in SAP Solution Manager using Transaction SCDT_SETUP. Creation of Customizing Distribution requires the following:
                        

                                Synchronization group created in the previous step
                            

                                SAP Solution Manager transport project if that option is chosen
                            

                                Source system
                            

                                Distribution type:
                                
Timed Distribution: This option is selected if synchronization needs to occur at predefined times.
At Transport release: This option is selected if the synchronization needs to be triggered at the time of releasing the transport in source system.
At Transport recording: This option is selected if the synchronization needs to be triggered at the time of adding entries to the transport request in the source system.
Initial distribution: This option is used to indicate that the distribution type is purely for initial distribution.



                                Target systems
                            

Figure 2.16 shows an example of creating Customizing Distribution. In this example, Distribution Type is set to trigger Synchronization at Transport Recording. Selecting the appropriate distribution type depends on the project requirements. For example, Synchronization at Transport Recording immediately triggers as soon as Customizing objects are added to a transport in the source system. In such cases, any customization changes are synchronized immediately to the target SAP MDG system. This scenario is useful when transports are released after specific test cycles are complete in both the source and target systems.
                        
Figure 2.16    Customizing Distribution


Display distribution logs. The Customizing Distribution process can be monitored using Transaction SCDT_LOG. This transaction provides the ability to select distribution logs with various selection options, including the following:
                        

                                Distributions based on a source system transport
                            

                                Initial distribution based on a synchronization group
                            

                                SAP Solution Manager project
                            

                                Source and target systems
                            

                                Dates when the distribution occurred
                            

Figure 2.17 shows Transaction SCDT_LOG and various selection screen options.
                        After logs are displayed, you can display details of the generated BC Set. You also can navigate to the BC Set in the target system and to the BC Set activation log directly from the distribution log. Figure 2.18 shows a snapshot of an example distribution log.
                        
Figure 2.17    Transaction SCDT_LOG Selection Screen Options

Figure 2.18    Distribution Log Example
                        You can redistribute any transports from the distribution log itself or trigger distribution of a single transport from a source system to a target system manually via Transaction SCDT_FETCH.
                    

Run the Customizing Scout. Customizing Scout enables you to compare customization between source and target systems across the entire system landscape based on the predefined list of synchronization objects. Customizing Scout plays an important role in the synchronization process and helps in analyzing the differences in Customizing objects during the initial distribution as well as the ongoing distribution process. Customizing Scout is accessed via Transaction SCOUT in SAP Solution Manager. Figure 2.19 shows the Customizing Scout - Initial Screen providing the ability to run comparisons across the system landscape for various system roles between source and target systems. 
                        
Figure 2.19    Customizing Scout: Comparing Customization across All System Roles in the System Landscape
                        After a system role is selected, and a project is specified, Customizing Scout enables you to select the synchronization group, source system, and target system for comparison. Figure 2.20 provides an example of such selection.
                        Customizing Scout comparisons can be run online or in the background. Comparison results provide various options such as an overview of the comparison result and individual Customizing object level comparisons to help further analyze the result. Figure 2.21 shows an example of a Customizing Scout comparison result.
                        
Figure 2.20    Customizing Scout Comparison Based on Synchronization Group

Figure 2.21    Example of a Customizing Scout Comparison Result


2.3.5    Reference Master Data Synchronization
Depending on the master data domains being implemented in the SAP MDG hub, it's not always possible to synchronize all data required to maintain master data using the SAP Solution Manager Customizing distribution process. The primary reason for this is that not all such data are maintained as Customizing data. Following are some examples:


                    Bank master
                

                    G/L accounts
                

                    Profit centers
                

                    Material class and characteristics
                

To synchronize such non-Customizing data, it's very common to set up an ALE-based synchronization process. For example, CLSMAS and CHRMAS message types can be used for material class and characteristics, and GLMAST and PRCMAS message types can be used for G/L accounts and profit centers, respectively.









2.4    Overview of Data Domains
SAP MDG enables you to govern the following master data objects out of the box as SAP has delivered the required configurations, UIs, data model, and framework to support the governance process. SAP also provides a framework to create a custom object. 


                Material master
            

                Business partner
            

                Supplier
            

                Customer
            

                Financial master data
            

The following sections introduce these master data objects from an SAP master data perspective as a foundation to understand the later chapters.
2.4.1    Material Master
Material master is a central repository of individual material records stored in the system and contains descriptions of all materials that an enterprise procures, produces, and keeps in stock. Several applications use this single repository of materials, including SAP Purchasing, SAP ERP Inventory Management (IM), material requirements planning (MRP), and invoice verification. Such a central repository of material master records also helps to avoid data redundancy. 
A material master record in SAP ERP can contain the following information and is organized into various material master views:


Accounting Valuation and costing/price calculation information, such as standard price, past price, and future price.
                

Materials planning and control MRP and consumption-based planning/inventory control information, such as safety stock level, planned delivery time, and reorder level for a material.
                

Purchasing Data provided by Purchasing for a material, such as purchasing group responsible for a material, over and under delivery tolerances, and the order unit.
                

Storage Storage information for the material along with warehouse data, such as storage conditions and packaging dimensions.
                

Sales and distribution Sales orders and pricing information, such as sales price, delivering plant, and minimum order quantity.
                

In addition to these views, the material master record also contains information about units of measure, language-specific descriptions, and material classification. Figure 2.22 provides a very high-level overview of the material master, its associated views, and some example fields. The next chapter provides an overview of how the SAP MDG data model is structured and how the general master views are structured in SAP MDG from a data modeling perspective.

Figure 2.22    Material Master Overview
Every material record in SAP ERP requires a material type and is used to define materials with similar attributes. The material type defines what type of material master views and fields are needed for a material record, and it's used for identifying whether the material record can have an externally defined material number of an internally generated number.
Typically, a material master record can go through the following processes, which are supported by SAP MDG via the change request process:


                    Create 
                

                    Update
                

                    Extend to additional views/plants
                

                    Flag a material or part of material data, such as a specific plant data or specific sales extension, for deletion
                

                    Mass update
                

Figure 2.23 shows the Material Governance Homepage screen in SAP MDG.

Figure 2.23    Material Governance Homepage Screen
2.4.2    Business Partner, Supplier, and Customer
This section provides an overview of business partner, customer master, and vendor master data objects, which are all connected to each other. 
Business Partner
A business partner in SAP terminology is an organization, person, or group of persons or organizations in which the enterprise has a business interest. Business partners can play different roles and can expand to other roles over time. This approach helps in defining the general data of a business partner centrally and avoids creating such data redundantly every time the same business partner assumes a different role. Following are the basic elements that define a business partner:


Business partner category  Identifies whether a business partner is a natural person (private individual), organization (legal person/entity or part of a legal entity, such as a department), or a group.
                    

Business partner role Defines various roles played by business partners in an enterprise. The business partner role also drives which views of business partner data need to be maintained. If the business partner is extended to be a vendor, SAP recommends using the vendor (FLVN01) or FI vendor (FLVN00) roles. If the business partner is extended to be a customer, then SAP recommends using customer (FLCU01) or FI customer (FLCU00) roles. 
                    

Business partner group Like a customer or vendor account group, identifies a group of business partners. A business partner group is also used for assigning number ranges and defining whether numbers are generated internally or assigned externally.
                    

Business partner relationship Defines how two business partners are related to each other. A common example in the SAP MDG context is to assign business partners created with business partner category Person as contact persons to the business partner representing an organization.
                    

Business partner group hierarchy  Defines an organization's structure. SAP MDG offers governance capabilities for maintaining business partner data. 
Figure 2.24 shows the Business Partner Governance screen.
                        
Figure 2.24    Business Partner Governance Screen


Customer Master
The customer master is a central repository of data that an enterprise requires to conduct business with by providing goods and services. A customer master record includes address data and terms of payment, for example. It also controls how business transactions are posted to a customer account and how the posted data are processed. The customer master is stored as individual vendor records, and each record contains the following information:


                        Customer's name and address
                    

                        Terms of payment
                    

                        Contact details
                    

                        Customer accounting information
                    

                        Customer sales information
                    

All this data are structured in the customer master in three categories:


                        General data
                    

                        Company code data
                    

                        Sales data
                    

Every customer record must contain a customer account group that determines the role of the customer and other aspects of a customer record. Some examples are as follows:


                        Type of number assignment (internal/external)
                    

                        Number ranges
                    

                        Grouping of customers: sold-to, ship-to, payer, bill-to, and so on
                    

                        Screens that are relevant to maintain the vendor record that belongs to a specific customer account group
                    

                        Partner determination schemas
                    

A customer master record can go through the following processes, which SAP MDG supports by using a change request process: 


                        Create 
                    

                        Update
                    

                        Extend to additional company codes/sales organizations
                    

                        Flag a customer or part of customer data such as a specific company code or specific sales extension for deletion
                    

                        Block a customer, specific company code, or sales extension
                    

                        Mass update
                    

Figure 2.25 shows the Customer Governance screen in SAP MDG. Note that all processes related to customer governance are initiated after an appropriate search for the record is made. This ensures that a user is searching for a record before submitting a request for a new customer record.

Figure 2.25    Customer Governance Screen
Vendor Master
The vendor master is a central repository of vendors that supply goods and services to an enterprise. The vendor master is stored as individual vendor records, and each record contains the following information:


                        Vendor's name and address
                    

                        Currency used for ordering from the vendor
                    

                        Terms of payment
                    

                        Contact details
                    

                        Accounting information required before vendor's invoices are maintained for payment
                    

                        Purchasing information required before ordering items from the vendor
                    

All this data are structured in the vendor master in three categories:


                        General data
                    

                        Company code data
                    

                        Purchasing data
                    

Every vendor record must contain a vendor account group that determines the role of the vendor and other aspects of a vendor record. Some examples are as follows:


                        Type of number assignment (internal/external)
                    

                        Number ranges
                    

                        Grouping of vendors: one-time vendor, invoicing party, and so on
                    

                        Screens that are relevant to maintain the vendor record that belongs to a specific vendor account group
                    

                        Partner determination schemas
                    

SAP MDG uses supplier governance to cover a broader definition than vendor governance to support the entire business suite. A vendor master record can go through the following processes, which are supported by SAP MDG using change requests:


                        Create 
                    

                        Update
                    

                        Extend to additional company codes/purchasing organizations
                    

                        Flag a vendor or part of vendor data, such as a specific company code data or specific purchasing extension, for deletion
                    

                        Block a vendor, specific company code, or purchasing extension
                    

                        Mass update
                    

Figure 2.26 shows the Supplier Governance screen in SAP MDG. Note that similar to customer governance, all processes related to supplier governance are initiated after an appropriate search for the record is made. This ensures that a user is searching for a record before submitting a request for a new customer record.

Figure 2.26    Supplier Governance Screen
2.4.3    Customer Vendor Integration
Customer vendor integration (CVI) is a bidirectional setup that enables you to synchronize business partner data with customer/vendor records and vice versa. However, in the context of SAP MDG, CVI is configured mainly from business partner to customer for SAP MDG, Customers and from business partner to vendor for SAP MDG, Supplier. With the introduction of SAP S/4HANA, SAP has expanded the usage of business partner and made the concept of business partner and CVI mandatory for maintaining customer and vendor master data. After business partner, customer master, and vendor master are configured in the system, CVI configuration can be done by following the IMG path, SAP Customizing Implementation Guide • Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration.
Figure 2.27 shows a high-level mapping of relationships among business partner, customer master data, and vendor master data. 

Figure 2.27    Customer Vendor Integration: Business Partner 
The following instructions provide an overview of the minimum setup needed for CVI for synchronization of business partner with both the customer master and vendor master:


Activate Postprocessing Office for synchronization. This IMG activity is used to define for which platform objects Postprocessing Office should be written in case of a synchronization error. For activating CVI, synchronization object (Syn.Object) BP should be added and activated. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Synchronization Control • Synchronization Control • Activate PPO Requests for Platform Objects in the Dialog.
Figure 2.28 shows the option to activate Postprocessing Office requests.
                    
Figure 2.28    Activation of Postprocessing Office Requests


Activate synchronization options. This IMG activity is used to define the synchronization option among business partner, customer, and supplier. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Synchronization Control • Synchronization Control • Activate Synchronization Options.
                    All the options as shown in Figure 2.29 must be set as active (Act.Ind.) depending on whether both SAP MDG, Customers and SAP MDG, Supplier are being implemented.
                    
Figure 2.29    Synchronization Options


Activate assignment of contact persons. This IMG activity is performed if the processing of contact person data need to be synchronized between business partner and customer/vendor master records. The following attributes for the contact person are synchronized:
                    

                            Department numbers
                        

                            Functions
                        

                            Authority
                        

VIP indicator
                        

                    You can use the following IMG activities for each contact person attribute: Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Attributes • Contact Person • Activate Assignment of Contact Persons. 
Figure 2.30 shows the option to enable contact person assignment.
                    
Figure 2.30    Activation of Contact Person Assignment


Assign department numbers for the contact person. In this IMG activity, departments from the business partner are assigned to contact person departments of the customer master. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Attributes • Contact Person • Assign Department Numbers for Contact Person.
Figure 2.31 shows the assignment of department numbers for a contact person.
                    
Figure 2.31    Assigning Department Numbers for Contact Persons 


Assign functions of the contact person. In this IMG activity, functions from the business partner are assigned to contact person functions of the customer master. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Attributes • Contact Person • Assign Functions of Contact Person.
Figure 2.32 shows the assignment of functions of the contact person.
                    
Figure 2.32    Assigning Functions of the Contact Person


Assign authority of the contact person. In this IMG activity, authorities from the business partner are assigned to contact person authorities of the customer master. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Attributes • Contact Person • Assign Authority of Contact Person.
Figure 2.33 shows the assignment of authority to the contact person.
                

Assign VIP indicator for the contact person. In this IMG activity, the VIP indicators from the business partner are assigned to the contact person VIP indicators of the customer master. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Attributes • Contact Person • Assign VIP Indicator for Contact Person.
                    
Figure 2.33    Assigning Authority to the Contact Person
Figure 2.34 shows the assignment of the VIP indicator for the contact person.
                    
Figure 2.34    Assigning the VIP Indicator for the Contact Person


Some specific CVI settings are needed for customer integration, as follows:


Set the business partner role category in the direction of business partner to customer. This IMG activity is relevant to SAP MDG, Customers governance and is performed to identify the business partner role categories that enable customer integration in the direction of business partner to customer, which is the direction that is relevant for SAP MDG, Customers to enable governance on the customer master. Customer (FLCU01) and FI customer (FLCU00) role categories are relevant for SAP MDG, Customers governance. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Set BP Role Category for Direction BP to Customer.
Figure 2.35 shows the assignment of business partner role categories in the direction of business partner to customer.
                    
Figure 2.35    Business Partner Role Categories for Customer Integration
                    Similarly, the IMG activity Define BP Role for Direction Customer to BP can be used to define business partner roles in the direction of customer to business partner.
                

Define the number assignment in the direction of business partner to customer. In this IMG activity, customer account groups are mapped to business partner groups. If the Same Number option is chosen, then the number entered or generated at the business partner is copied to the corresponding customer record. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Customer Integration • Field Assignment for Customer Integration • Assign Keys • Define Number Assignment for Direction BP to Customer.
Figure 2.36 shows the assignment of customer account groups to business partner groups and the Same Numbers checkbox.
                    
Tip
You should use the same number for the business partner and customer. The following steps need to be considered to enable this in the direction of business partner to customer (same rules apply to SAP MDG, Supplier as well):


                                Set the same number range for the corresponding business partner group and customer account group.
                            

                                Set external numbering for the customer account group, which is mapped to the appropriate business partner group.
                            

                                Select the Same Numbers checkbox in the IMG activity as shown earlier.
                            

                                If SAP MDG is deployed as a hub and the receiving system is required to have the same number, then set both the corresponding business partner group and customer account group as external. This setup ensures that both the business partner and the customer have the same number across the SAP MDG hub and receiving SAP ERP system. If the receiving systems can't be set to external numbering, the key mapping functionality (explained in Chapter 7) can be used.
                            



Figure 2.36    Business Partner to Customer: Number Assignment


Some specific CVI settings are also needed for vendor integration, as follows:


Set the business partner role category  in the direction of business partner to vendor. This IMG activity is relevant to SAP MDG, Supplier governance and is performed to identify the business partner role categories that enable vendor integration in the direction of business partner to vendor, which is relevant for SAP MDG, Supplier to enable governance on the vendor master. Vendor (FLVN01) and FI Vendor (FLVN00) role categories are relevant for SAP MDG vendor governance. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Vendor Integration • Set BP Role Category for Direction BP to Vendor.
Figure 2.37 shows the assignment of business partner role categories in the direction of the business partner to vendor.
                    Similarly, the IMG activity Define BP Role for Direction Vendor to BP can be used to define business partner roles in the direction of vendor to business partner.
                    
Figure 2.37    Business Partner Role Categories for Vendor Integration


Define the number assignment in the direction of business partner to vendor. In this IMG activity, vendor account groups are mapped to business partner groups. If the Same Number checkbox is chosen, then the number entered or generated at the business partner is copied to the corresponding vendor record. The IMG path to perform this activity is Cross-Application Components • Master Data Synchronization • Customer/Vendor Integration • Business Partner Settings • Settings for Vendor Integration • Field Assignment for Vendor Integration • Assign Keys • Define Number Assignment for Direction BP to Vendor.
                

Figure 2.38 shows the assignment of vendor account groups to business partner groups and the Same Number checkbox.

Figure 2.38    Business Partner to Vendor: Number Assignment

Note
As with business partner and customer, you should use the same number for business partner and vendor. The steps to follow are the same.

2.4.4    Financials
Following are some of the important financial master data elements and their associated hierarchies that are used in SAP ERP:


G/L account G/L account data is needed by the G/L to determine the account's function. G/L account master data is divided into two areas:
                    

                            Chart of accounts: Data that is valid across all company codes.
                        

                            Company code-specific G/L accounts: Data that is specific to a company code.
                        



Profit center A profit center is a subunit of an organization that is responsible for revenues and costs. Such an organizational unit is created for internal control of the organization. 
                

Profit center groups and hierarchy Profit centers with similar characteristics are identified as profit center groups. Similar profit center groups can be combined to form another profit center group, which, in turn, creates a profit center hierarchy.
                

Cost center A cost center is an organizational unit that adds cost to the organization and adds profits indirectly. Unlike profit centers, cost centers add to the organization's profitability indirectly.
                

Cost center groups and hierarchy Cost centers with similar characteristics are identified as cost center groups. Similar cost center groups can be combined to form another cost center group, which, in turn, creates a cost center hierarchy.
                

Cost element A cost element is a cost-relevant item in the chart of accounts and is categorized as either a primary or secondary cost element. Primary cost elements are cost-relevant items in the chart of accounts for which a G/L account exists in SAP ERP Financials (SAP ERP FI). A secondary cost element exists in Cost Center Accounting to portray internal value flows. In an SAP system, a secondary cost element can't be created if a primary cost element already exists for the corresponding account. 
                

Cost element groups and hierarchy Cost elements with similar characteristics are identified as cost element groups. Similar cost element groups can be combined to form another cost element group, which, in turn, creates a cost element hierarchy.
                

Financial master data can keep changing over time, and changes must be kept for reporting and valuation needs. Such data can be maintained with validity periods using valid from and to dates.
SAP MDG, Financials uses the concept of editions to manage time dependency of finance master data. By using editions, all planned changes to an existing data or creation of new data are collected and released at a certain date. Objects that use editions inherit the validity dates based on the edition. Chapter 5 describes editions in detail, including how to create and manage them.
SAP MDG, Financials is covered under the following subgovernance areas:


Financial Accounting Governance Financial Accounting Governance provides the ability to govern the company, G/L accounts, and financial reporting structure hierarchy. Figure 2.39 shows the Financial Accounting Governance screen. 
                    
Figure 2.39    Financial Accounting Governance Screen


Financial Controlling Governance Financial Controlling Governance provides the ability to govern the following controlling-related master data: 
                    

                            Profit center
                        

                            Profit center group
                        

                            Profit center hierarchy
                        

                            Cost center
                        

                            Cost center group
                        

                            Cost center hierarchy
                        

                            Cost element
                        

                            Cost element group
                        

                            Cost element hierarchy
                        

Figure 2.40 shows the Financial Controlling Governance screen.
                    
Figure 2.40    Financial Controlling Governance Screen


Financial Consolidation Governance Financial Consolidation Governance provides the ability to govern financial consolidation relevant master data such as consolidation unit, item, and associated hierarchies. Figure 2.41 shows the Financial Consolidation Governance screen.
                    
Figure 2.41    Financial Consolidation Governance Screen


2.4.5    Custom Domains
The SAP MDG framework provides the ability to govern a master data domain that isn't delivered by SAP or by partners as solution extensions. To build a custom domain, end-to-end setup is needed starting with defining the data model. Chapter 13 and Chapter 14 provide a complete step-by-step process for designing and configuring a custom domain in SAP MDG.









2.5    SAP S/4HANA
SAP has simplified the SAP ERP solution with the introduction of SAP S/4HANA. Even though the intention of this book isn't to cover all the simplification aspects of SAP S/4HANA, this section covers some of the simplifications that are relevant to master data.
2.5.1    Architecture and Deployment Options
In terms of architecture and deployment options, there is no change between how SAP MDG is deployed whether it's installed on SAP ERP or SAP S/4HANA. The following deployments options are valid:


                    SAP MDG deployment based on SAP ERP:
                    

                            SAP HANA or any database can be used as the database for SAP MDG application data.
                        

                            A separate SAP HANA system is used for search and matching functionalities.
                        



                    SAP MDG deployment based on SAP S/4HANA
                

In both variations, SAP MDG can be either co-deployed on operational SAP ERP or installed as a separate master data hub based on the company-specific use case. It's important to consider company-specific landscapes and consider the best-suited approach. Refer to the most recent version of the landscape deployment options section of the SAP Enterprise Architecture Explorer (https://eaexplorer.hana.ondemand.com) for the most recent updates. 
2.5.2    Master Data Domains
SAP has simplified various aspects of SAP ERP in SAP S/4HANA. In the following, we'll review some of the relevant simplification aspects from master data domains that are managed in SAP MDG.
SAP publishes a simplification list as a PDF document online as part of the help documentation. Refer to SAP Note 2313884 for the simplification list in the form of a Microsoft Excel document. Refer to SAP Note 2349002, which contains information on SAP S/4HANA 1610 Master Data Governance. The simplification list impacts SAP MDG directly if deployed on SAP S/4HANA. If SAP MDG is deployed on SAP ERP and is being integrated with an SAP S/4HANA system, it's important to analyze the impact of the simplification list on integration with an SAP S/4HANA on premise system. 
Following are some of the simplifications relevant to the material master. Refer to the entire simplification list for additional items.


Material number field length extension From SAP S/4HANA 1511 on-premise edition onward, material number field length has been extended from 18 characters to 40 characters. All database tables have been adjusted to reflect this change in SAP S/4HANA on premise systems. Refer to SAP Note 2267140 for additional details. Extended material functionality can be switched on if an extended material number is needed.
                

Foreign trade fields in the material master From SAP S/4HANA 1511 on-premise edition onward, foreign trade fields on material masters aren't available because SAP Global Trade Services (SAP GTS) caters to the needs of these fields. Refer to the SAP Note 2267225 for additional details.
                

MRP fields in the material master From SAP S/4HANA 1511 on-premise edition onward, MRP fields on material master fields are simplified. Refer to the SAP Notes 2267246 and 2224371 for additional details.
                

Business partner and CVI were already integral parts of SAP MDG, Supplier and SAP MDG, Customers. As discussed in Section 2.4.2, configuration of CVI in the direction of business partner to customer/vendor is required for running SAP MDG, Customers/SAP MDG, Supplier. With the introduction of SAP S/4HANA, a mandatory business partner approach, along with CVI, is expanded to the core SAP ERP solution. The primary UI in the core SAP S/4HANA on premise solution is the business partner transaction, and all the transaction codes related to customer and vendor masters aren't available anymore. Refer to SAP Note 2265093 for additional details on this simplification item. 









2.6    Summary
This chapter introduced an overview of SAP MDG architecture and available UI options for accessing SAP MDG. This chapter also explained various deployment options available for SAP MDG, including known and documented limitations. Customizing synchronization, which is an important aspect of synchronizing Customizing data to the SAP MDG hub, is also covered. This chapter ends with an overview of master data domains and how the simplification list introduced in SAP S/4HANA impacts SAP MDG and master data domains.
The next chapters provide more in-depth details in each of the important areas of SAP MDG, such as data modeling (Chapter 3), UI modeling (Chapter 4), process modeling (Chapter 5).








3    Data ModelingThis chapter provides a view into the SAP MDG data modeling concepts, including different storage areas and storage types, as well as insights into delivered data models. We'll also discuss entities, attributes, and the relationships between entities.In the previous two chapters, we introduced the concept of master data management and SAP's master data management product—SAP MDG—and how it fits into the overall portfolio of enterprise information management (EIM) products. This chapter introduces the concept of data modeling in SAP MDG and provides an overview of SAP-delivered data models. The following data models are delivered by SAP as part of SAP MDG:

            Material master
        

            Business partner, customer, and supplier
        

            Financials
        
Let's begin by exploring the data modeling process in SAP MDG.
3.1    Introduction to Data Modeling in SAP MDG
A key aspect of governing master data is the ability for all roles involved in the end-to-end governance process to manipulate data collaboratively in a staging environment. Hence, a separation is required between data that are currently being used or ready to be used in transactions and data that are involved in a governance process. There are two storage areas in the context of SAP MDG as follows:


Staging area Contains data currently in a governance process and has an associated change request.
            

Active area Contains data ready to be consumed by other applications or ready to be distributed to other systems.
            

In the following sections, we begin with the steps to create or change master data to understand the concept of change requests and staging data versus active data. In the sections that follow, we'll discuss the various elements of data modeling and by going through the related configuration steps.
3.1.1    Master Data Create/Change Process
Figure 3.1 illustrates a simple master data create/change process. 

Figure 3.1    Staging and Active Area Concept for Master Data Create Scenario
First, the requester initiates a change request for creating or changing a master data record. (We'll discuss the concept of change request in detail in the next chapter.) There are two main scenarios that we'll explore, as follows:


Create scenarioIn a create scenario, request details along with data entered by the requester are stored in the staging area after the requester submits the change request. 
                

Change scenarioIn a change scenario, the master data record is copied from the active area into the staging area, and changes made by the requester, along with change request details, are stored in the staging area.
                

Master data experts further maintain, enrich, and validate the record to ensure that the master data record submitted by the requester follows data quality rules. During this process, data are read from the staging area and saved back into the staging area if any changes to data were made. 
The master data steward processes the change request and does the final approval. In this process, the master data record is read from the staging area and is updated into the active area after the final approval step. This process is also known as activation. At this point, the master data record is ready to be consumed by any other applications if SAP MDG is installed in a co-deployment scenario. If SAP MDG is installed as a hub, once activated, data are ready for replication to other SAP or non-SAP systems.
The active areas in SAP MDG can be in either the flex mode or the reuse active area, as described here:


Flex mode In this mode, a new set of database tables are generated when the data model is defined. This mode is used when there are no corresponding SAP ERP tables or when the activated data in SAP MDG are intended to be isolated from SAP ERP tables. If required, data can be replicated to SAP ERP master data tables. An example of such a scenario is standard SAP MDG, Financials objects. All SAP MDG, Financials objects are delivered in flex mode to isolate them from SAP ERP Financials (SAP ERP FI) tables and only replicate when needed to SAP ERP master data tables or to transactional SAP ERP systems if SAP MDG is deployed as a hub.
                

Reuse active area In this mode, existing SAP ERP tables are used. As an example, for a material master, these are reuse active area tables MARA, MARC, MARD, and so on. Figure 3.2 shows the difference between the flex and reuse modes of a data model. Data models for material masters and business partners are delivered in the reuse active area mode, which means that after a change request is activated, the corresponding SAP ERP master data tables are updated. 
                

Data modeling in SAP MDG involves various elements such as entity types, attributes, and relationships. Every master data object that needs to be governed using SAP MDG requires a data model and user interface (UI) built on top of it. Every data model in SAP MDG has several generated database tables that store data during the governance process.

Figure 3.2    Flex and Reuse Modes
3.1.2    Entity Types
Different types of master data in a data model are represented by different entity types. SAP MDG automatically generates required database tables needed for master data processing. Every data model has at least one entity type. An important property of an entity type is Storage/Usage Type, which determines whether entities belonging to an entity type are changeable via a change request or via entities belonging to other entity types, the type of information stored, and whether database tables are generated or reused from the active area. The following four storage or usage types are available:


Type 1: Changeable via Change Request; Generated Database Tables This storage and usage type is used for main entities in the data model that are under governance. These entities are linked to change request types (Chapter 5 describes change request types in detail), and data stored in these can be changed via change requests. These entities have persistence, and SAP MDG automatically generates all necessary database tables, including check tables, text tables, and additional tables needed to store attachments and sets, for example. Key fields of this storage/usage type include the entity type itself, edition (if relevant), and other entity types linked to this entity type via relationships. The MATERIAL entity in the material master data model is an example of a type 1 entity, as shown in Figure 3.3.
                    
Figure 3.3    An Example of Type 1 Entity Type


Type 2: Changeable w/o Change Request; Generated Check/Text TablesThis storage and usage type is used for check tables that have persistence in SAP MDG. Data stored in this storage or usage type can be changed without a change request. SAP MDG generates only the check tables and text tables with the entity type, as well as with the entity types assigned to the entity type, through leading relationships as fixed key fields.
                

Type 3: Not Changeable via MDG; No Generated TablesThis storage and usage type is used for check tables that have no persistence in SAP MDG. Data stored in this storage or usage type can't be changed in SAP MDG.
                

Type 4: Changeable via Other Entity Type; Generated Database TablesThis storage and usage type is used for maintaining dependent data (e.g., plant data for material master and company code, sales data for customer master) and can only be maintained together with an entity of type 1. This entity type needs to be in a relationship with the relationship type leading and assigned as the To-entity type to an entity type with storage and usage type 1. The system generates the check table as described for storage and usage type 1 but also generates the entity types that are assigned through qualifying relationships as key fields. The MARCBASIC entity in the material master data model is an example of a type 4 entity type.
                

An entity type can have the properties listed in Table 3.1.




                            Property
                        

                            Explanation
                        





General Data




Entity Type


                            Represents the name of entity type.
                        



Description


                            Language-dependent description of the entity type.
                        



SU Type


                            Decides the generation of database tables for storage of master data. 
                        



Data Element


                            Determines properties such as Data Type and Length for the entity type to which it's assigned. Data types are restricted to CHAR, NUMC, or CUKY, and length is restricted to 45 characters. Data elements can't be assigned to entity types of storage/usage type 4. Storage/usage types also decide how to represent values if a value table or domain fixed values exist.
                        



Validity of Entity Type


                            Determines whether or not the entity type is edition dependent.
                        



Deletion


                            Determines whether or not deletion is allowed for the entities of this entity type via the change request process.
                        



Attachments


                            When selected, attachments can be stored to entities of this entity type, and the system automatically provides a data store for storing these attachments. This can only be selected for entities with storage/usage type 1.
                        



Sets


                            When selected, sets can be stored to entities of this entity type, and the system automatically provides a data store for this purpose.
                        



Search Help


                            When a search help is assigned to a field, the input help executes the search help instead of reading the data in the check table or the fixed values of the domain of the data element. You should only use search helps as an exception.
                        



Generated


                            Specifies whether entity types were generated or manually created, and those entity types that are generated can't be changed or deleted via the Edit Data Model Customizing activity.
                        



Hierarchies




Is Hierarchy Type?


                            Determines whether an entity type defines a hierarchy. This setting also determines whether hierarchies have versions and are synchronized.
                        



Validity of Hierarchy


                            If the Is Hierarchy Type? option is set to have a version, then this property determines the validity of the hierarchy.
                        



Reuse




Active Area


                            When a reuse active area is specified, the system stores active data solely in this reuse active area. The reuse active area can be assigned either at the data model level or at the entity type. When defined at the data model level, all entity types defined in that data model inherit the reuse active area. However, if a separate reuse active area for an entity type is specified at the entity type level, then it overrides the setting inherited from the data model. 
                        



Structure/Table


                            Used to establish the link between an entity type, attribute, or relationship, and a structure or database table defined in the ABAP Dictionary.
                        



Field


                            Used to establish the link between an attribute or relationship and a field defined in the ABAP Dictionary that is part of a structure or a database table.
                        



Struct. for X-Fields


                            Used to establish the link between an entity type and an associated structure defined in the ABAP Dictionary that contains a checkbox with type CHAR and Length 1, with values space and X for each resolved attribute.
                        



Key Assignment




Type of Key Assignment


                            Following options are available and determine how the key of the entity will be entered during the change request process:
                            

Key Cannot Be Changed; No Internal Key Assignment: In this case, there is no internal key generation possible, and the user needs to maintain the key manually. After it's maintained, the key can't be changed.
                                

Internal Key Assignment Only: SAP MDG automatically assigns an internal number upon activation of the change request. During the change request process, SAP MDG assigns a temporary key.
                                

Key Can Be Changed; No Internal Key Assignment: The key of the entity needs to be explicitly defined. However, it can be changed as long as the change request isn't activated.
                                

Key Can Be Changed; Internal Key Assignment Possible: In this option, either the system can automatically generate a number during the change request activation or the user can define his or her own key.
                                





Number Range Object for Temporary Keys


                            Number range object for specifying temporary keys. For example, the MDG_BS_MAT number range object is specified for the MATERIAL entity type.
                        



Entity Texts




Language-Dependent Texts


                            Indicates whether the entity type can have language-dependent texts. Based on this selection, the system automatically includes Language as a key field when the database tables are generated for this entity type.
                        



Long Text: Length


                            Determines visible length of long text in the UI for this entity type.
                        



Medium Text: Length


                            Determines visible length of medium text in UI for this entity type.
                        



Short Text: Length


                            Determines visible length of short text in UI for this entity type.
                        



Source Fields for Texts




Source Field Long Text


                            Applicable to storage/usage type 3 entity types. Determines the check table field that contains long text.
                        



Source Field Medium Text


                            Applicable to storage/usage type 3 entity types. Determines the check table field that contains medium text.
                        



Source Field Short Text


                            Applicable to storage/usage type 3 entity types. Determines the check table field that contains short text.
                        



Table 3.1    Properties of an Entity Type
The following is a summary of all storage/usage types:


Storage type  1:


                            This storage type is used for entity types that are maintained in SAP MDG.
                        

                            Maintenance is performed via change requests, and these entity types act as entry points for change requests.
                        

                            Data storage is generated.
                        

                            Additional data modeling is possible and can have attributes and references.
                        

                            Data elements such as data type, length, field label, and so on can be assigned.
                        

                            Check that table and domain fixed values associated with the data element are ignored.
                        

(F4) is determined based on entries in generated check tables. 
                        



Storage type 2:


                            This storage type is used for entity types that shouldn't be maintained in SAP MDG and aren't available in the system.
                        

                            Data storage is generated.
                        

                            Additional data modeling isn't possible; associated check and text tables are generated.
                        

                            No maintenance occurs via change requests.
                        

                            Mandatory data element assignment occurs for data type, length, field label, and so on.
                        

                            Check that tables and domain fixed values associated with the data elements are ignored.
                        

(F4) is determined based on entries in the generated check tables.
                        



Storage type 3:


                            This storage type is used for entity types that should not be maintained in SAP MDG and that are available in the system.
                        

                            No data storage is generated. 
                        

                            Additional data modeling isn't possible.
                        

                            No maintenance occurs in SAP MDG.
                        

                            Mandatory data element assignment occurs for data type, length, field label, and so on. 
                        

                            Check that the table and domain fixed values associated with the data element are used. 
                        

(F4) is determined based on entries in associated check/text tables and/or domain fixed values associated with the data element. Nonkey fields in check tables are ignored.
                        



Storage type 4:


                            This storage type is used for entity types that are maintained in SAP MDG in the context of another entity type.
                        

                            Maintenance is performed via change requests, but these entity types can't act as entry points for the change request. Maintenance is possible via owning the storage type 1 entity type.
                        

                            Data storage is generated.
                        

                            Additional data modeling is possible and can have attributes and references.
                        



3.1.3    Attributes
An attribute defines a property of an entity type, and an attribute is defined for each property. Alternatively, an attribute can be defined as a storage/usage type 3 entity and linked to the entity type via a relationship (see the next section for details on relationships). An attribute can be defined only for storage/usage type 1 or 4 entity types. Every attribute can have the properties listed in Table 3.2.




                            Property
                        

                            Explanation
                        





Attribute


                            Name of attribute.
                        



Key Field


                            Indicator to identify attribute as a key field.
                        



Data Element


                            Determines properties such as data type, length, and field label displayed on the UI and field help for input fields for the attribute to which it's assigned. The domain assigned to the data element determines the allowed values for the value help and the validation of values, either from the domain fixed values or from the assigned check table or text table. If there is no check table or fixed values assigned to the domain, then no input help is available, and no validation is carried out.
                        



Required Entry 


                            Indicator to identify whether the attribute is required for data entry.
                        



Currency/UoM 


                            Currency or unit of measure field if the attribute requires a currency or unit of measure.
                        



Search Help


                            When a search help is assigned to a field, the input help executes the search help instead of reading the data in the check table or the fixed values of the domain of the data element. Search helps should only be used as an exception.
                        



No Existence Check


                            Used for deactivating the existence check for attribute values. However, existence checks can't be suppressed for values that are derived from domain fixed values.
                        



Description


                            Description of attribute.
                        



Structure/Table


                            Used to establish the link between an entity type, attribute, or relationship, and a structure or database table defined in the ABAP Dictionary.
                        



Field


                            Used to establish the link between an attribute or relationship and a field defined in the ABAP Dictionary that is part of a structure or a database table.
                        



Generated


                            Specifies whether the attribute was generated or manually created, and those attributes that are generated can't be changed or deleted via the Edit Data Model Customizing activity.
                        



Table 3.2    Properties of an Attribute
3.1.4    Relationships
If more than one entity type is defined in a data model, a relationship between entity types can be established. A relationship represents a link between entity types. Every relationship has a relationship type and cardinality. Relationship types determine whether one entity type (from-entity type) is at a higher level than another entity type (to-entity type) or whether it is to be copied as an attribute of the other entity type in the check table.
The following relationship types are available:


Referencing This relationship type is used to specify from-entity type as an attribute of the to-entity type.
                

Leading If this relationship type is used, then the from-entity type is on a higher level than the to-entity type.
                

Qualifying This relationship type is similar to the leading relationship type with the exception that the qualifying relationship is possible when the to-entity type is of storage/usage type 4.
                

Foreign key relationship This relationship type is used if certain attributes or key fields of the to-entity type use the from-entity type as a foreign key.
                

Figure 3.4 provides a summary of leading, qualifying, and referencing relationship types.

Figure 3.4    Summary of Relationship Types
3.1.5    Hierarchies
SAP MDG offers modeling hierarchies based on configurations of the entity types. The definition of hierarchies includes setting the hierarchies as edition dependent and synchronous. If a hierarchy is set up for an entity type, the system automatically generates database tables for storing hierarchies. Refer to the hierarchy-related properties explained in Table 3.1. The following sections explain each of these hierarchy-related properties in detail.
Is Hierarchy Type?
The Is Hierarchy Type? property of an entity type determines whether the entity type defines a hierarchy. If used, it also determines whether the property is version dependent or synchronized:


Version dependent  Version dependency enables a hierarchy to have multiple versions. Hierarchy versions can be defined under Customizing by following the IMG path, MDGIMG • Process Modeling • Hierarchies • Create Hierarchy Versions.
                    

Synchronized In a synchronized hierarchy, the substructure defined will remain the same throughout. A different structure can't be defined within the same hierarchy or in a different hierarchy for the same entity. 
                    

This property Is Hierarchy Type? allows for a combination of version dependent and synchronous. Following are the available options:


No (hierarchy can't be set up for the entity type)
                    

Yes - Version-Dependent/Synchronized


Yes - Not Version-Dependent/Synchronized


Yes - Not Version-Dependent/Not Synchronized


Yes - Version-Dependent/Not Synchronized


Validity of Hierarchies
This property is applicable in scenarios where the Is Hierarchy Type? property is set to have version-dependent hierarchies. Using the property, an entity type can be set to have Edition or No Edition, and the system uses the edition to delimit the validity of the hierarchy. In such scenarios, an edition needs to be assigned to the hierarchy defining entity type during hierarchy processing.
Apart from the preceding two properties available at the entity type level, there are additional configurations that complete the entire hierarchy setup.
Entity Types for Hierarchies
Using this configuration, you can model the role of additional entity types that are part of a hierarchy setup for a selected entity type. This configuration can be maintained using the IMG path, MDGIMG • General Settings • Data Modeling • Edit Data Model, and then selecting the Entity Types for Hierarchies view under Entity Types.
The following options are available for each entity type in the hierarchy setup:


Hierarchy Name If this usage is selected for an entity type, then such entities act as root nodes for a hierarchy and hence define the hierarchy name. For any entity type, to complete a hierarchy setup, an additional entity type needs to be defined with this usage. Such an entity type can't be used as a to-entity type in a leading relationship.
                    

No Special Use If entity types are defined with this usage, then they can be used as actual nodes and as lower-level hierarchy nodes in a hierarchy.
                    

Ranges Permitted on End Nodes An entity type that is used as a lower node in a hierarchy can have a range of values.
                    

Hierarchy Attribute and Hierarchy Attribute from Reference
Hierarchy attributes can be defined for each relationship between nodes in a hierarchy. These hierarchy attributes are available during hierarchy processing:


Hierarchy Attribute Hierarchy attribute for a relationship between nodes is set using data elements.
                    

Hierarchy Attribute from Reference Hierarchy attribute for a relationship between nodes is set using a reference to an entity type.
                    

Figure 3.5 shows an example of hierarchy attributes defined for entity type consolidation group with an entity type of node consolidation unit from data model 0G.

Figure 3.5    Example: Hierarchy Attribute
See Section 3.2.2 to understand how the business partner hierarchy is set up in business partner data model. Chapter 5, Section 5.4.4, provides details on how to create a hierachy using an example.
3.1.6    Entity Relationship Model Diagram
As basic data model building blocks were explained in previous sections, this section explains how each of the building blocks come together to form a data model. This is explained using an entity relationship model (ERM) diagram, as shown in Figure 3.6. The following are some important aspects of a data model and its associated building blocks:


                    A data model can have more than one entity type.
                

                    A data model can have many relationships defined.
                

                    An entity type can have one or more attributes.
                

                    Many attributes can have the same data element.
                

                    An entity type can occur in multiple hierarchies.
                

                    Two entity types can have many relationships.
                    
Figure 3.6    ERM Diagram of a Data Model


3.1.7    Data Model-Related Configurations
SAP MDG offers all data modeling-related Customizing activities grouped under Transaction MDGIMG. In this section, we'll review all available Customizing nodes under the Data Modeling section of Transaction MDGIMG.
Define Business Type Object Codes
In this Customizing activity, new business object type codes can be added for custom data models. For all standard data models, there is no need to add any new business type object codes because SAP has already delivered these. The IMG path for accessing this activity is MDGIMG • Data Modeling • Define Business Object Type Codes. 
Figure 3.7 shows business object type codes.

Figure 3.7    Business Object Type Codes
Now let's move on to define the entity type to be used by the business object type.
Define Entity Type to Be Used by Business Object Type
If two or more entity types are assigned to the same business object type code, this Customizing activity is used to specify which entity types should be used. The IMG path for accessing this activity is MDGIMG • Data Modeling • Define Entity Type to Be Used by Business Object Type.
Define Prefixes for Internal Key Assignment
In a data model, when an entity type with internal number assignment is used, a temporary key number range assignment is required (refer to the "Key Assignment" in Table 3.1). For example, the MATERIAL entity in the material master data model uses the MDG_BS_MAT number range object for temporary keys. Similarly, the BP_HEADER entity type in the business partner data model uses the MDG_BP number range object.
Using this Customizing activity, a prefix can be assigned to the temporary number generated for internal number assignment scenarios to indicate that the generated number is a temporary number (as shown in Figure 3.8). SAP MDG has $ as the default Prefix, which can be changed if needed. The menu path for accessing this is MDGIMG • Data Modeling • Define Prefixes for Internal Key Assignment.

Figure 3.8    Prefix for Temporary Keys
Edit Data Model
This Customizing activity provides an entry point for the entire list of data models available in the system and also the list of entities, attributes, and relationships. Various views available in this Customizing activity enable you to extend or create new data models and activate them. The system uses the data model to generate database tables.
This activity can be accessed using two different IMG paths, and each path offers a different way to define or edit data models. Both options provide a way to access the list of assigned active areas and associated access classes at the data model level. The two options are as follows:


Edit data model functionality using SAP GUI Figure 3.9 shows the business partner data model as an example using this IMG path. This Customizing activity also provides additional functionalities such as Visualize Data Model and Adjust Staging Area of Linked Change Requests. See the list of reports provided later in this section for additional details. 
                        The menu path for accessing this is MDGIMG • Data Modeling • Edit Data Model.
                    

Configuration Workbench The Configuration Workbench is a Web Dynpro application that acts as an alternative to the Edit Data Model Customizing activity. The Configuration Workbench includes all the functions that the Edit Data Model Customizing activity provides, presents data model details in a tabular format per entity type, and distinguishes relationship information into outgoing and incoming relationships for each entity. 
Figure 3.10 shows the business partner data model using the Configuration Workbench.
                        
Figure 3.9    Business Partner Data Model: Edit Data Model

Figure 3.10    Business Partner Data Model: Configuration Workbench


SAP MDG offers several reports related to data models; the most commonly used are as follows: 


Visualize Data Model (report USMD_DISPLAY_DATAMODEL)This report offers a hierarchical view of entity types and attributes in a data model. This report also offers overview, detail view, and graphical display modes as well. Figure 3.11 shows the output of this report for the business partner data model as an example.
                        
Figure 3.11    Output of Report USMD_DISPLAY_DATA_MODEL for the Business Partner Data Model


Data Model Generated Tables  (report USMD_DATA_MODEL) This report displays data model entity types and generated database tables. It's also possible to display counts of active and inactive records for each of these tables.
                    

Compare Data Model  (report USMD_COMPARE_DATA_MODEL) This report compares active and inactive versions of a data model and provides a list of comparison results.
                    

Delete Data Model  (report USMD_DELETE_DATA_MODEL) This report can be used to delete a data model. This functionality can also be triggered from the Edit Data Model IMG node or the Configuration Workbench. However, you should exercise caution because this report deletes the entire data model.
                    

Adjust Staging Area of Linked Change Requests (report USMD_ADJUST_STAGING) For the selected data model, this report verifies whether there were any changes made to the data model, and, if yes, it adjusts the change requests that are in process per the changes made in the data model. This report needs to be run in all relevant clients and target systems after data model changes.
                    

Define Authorization Relevance per Entity Type
This Customizing activity (as shown in Figure 3.12) is used to determine whether the system uses predefined authorizations from the reuse active area or SAP MDG-specific authorizations using authorization object USMD_MDAT. By default, the system always uses predefined authorizations from the reuse active area. If the option to select SAP MDG-specific attributes is chosen, then configurations for entity type level authorizations and authorization-relevant attributes need to be set up. Note the following:


                        If the reuse active area is used, then settings made under Authorization for Entity Types and Authorization-Relevant Attributes views will be ignored. 
                    

                        For data models business partner and material master, standard SAP ERP authorization checks are always performed, and any additional settings performed under this Customizing activity aren't supported.
                    

The menu path for accessing this activity is MDGIMG • Data Modeling • Define Authorization Relevance per Entity Type.

Figure 3.12    Define Authorizations per Entity Type and Attributes
Generate Data Model-Specific Structures
Each data model and entity type can have the following structures in the Data Dictionary:


                        PDF-based forms
                    

                        Service Mapping Tool (SMT) with structures used for the configuration of enterprise services
                    

                        Mapping between staging area and reuse active area
                    

                        Data replication framework
                    

                        SAP Enterprise Search
                    

                        Field control of attributes
                    

                        Field properties of attributes and key fields
                    

                        Key fields
                    

This Customizing activity is used to generate the preceding data model-specific structures. These structures need to be regenerated whenever a data model is changed. For all standard data models, these structures are delivered as well. The IMG path for accessing this activity is MDGIMG • Data Modeling • Generate Data Model-Specific Structures.
Assign Package for Customizing Include
When an entity type delivered by SAP is enhanced to include additional attributes, the system automatically writes these attributes to Customizing includes during the generation of data model-specific structures explained in the previous section. In this Customizing activity, a package can be assigned for the customizing includes used during data model enhancements. The IMG path for accessing this activity is MDGIMG • Data Modeling • Assign Package for Customizing Include.
This Customizing activity has views for structures as well as mapping for each data model. Figure 3.13 shows the material master data model structures as an example.

Figure 3.13    Data Model Structures for the Material Master Data Model
Figure 3.14 shows SMT Mapping from Active Area and SMT Mapping to Active Area for the material master data model as an example. 

Figure 3.14    Data Model Mappings for the Material Master Data Model
Define Package Groups
Using this Customizing activity, you can define package groups that consist of one or more packages. A package group can be assigned to a mapping (see the next section). The (F4) help of the transformation tool displays only classes that are contained in one of the specified packages.
Figure 3.15 shows an example of a package assignment to a material master package group MDG_BS_MM. The IMG path for accessing this activity is MDGIMG • Data Modeling • Create and Edit Mappings • Define Package Groups.

Figure 3.15    An Example of Package Assignment to Package Group
Service Mapping Tool
You need to understand a bit more about SMT before moving on to the following sections. SMT is a program that enables you to fill target structures using sets of source structures. SMT supports simple and complex mappings, mappings with field transformations, and field checks. The main uses of SMT are to transform SAP internal format to enterprise services format and vice versa.
Figure 3.16 shows an example of mapping for the MDG_BS_MAT_MAP_2STA structure and associated mapping steps. Refer to the earlier "Generate Data Model-Specific Structures" section for details on data model-specific structures and "Define Package Groups" section for details on package groups. 

Figure 3.16    SMT Mapping Example
Figure 3.17 shows mapping step MDG_BS_MAT_MARA as an example along with transformations and field mappings.

Figure 3.17    Mapping Step Example
Following are the configurations available for either create and edit mappings or extend mappings:


Create and Edit MappingsThis Customizing activity is used for creating new mappings and mapping steps, and creating or editing transformations and field checks. The IMG path for accessing this activity is MDGIMG • Data Modeling • Create and Edit Mappings • Create and Edit Mappings.
                    

Extend MappingsThis Customizing activity is used for extending existing and delivered mappings, but it can't be used to create new mappings or mapping steps. The IMG path for accessing this activity is MDGIMG • Data Modeling • Extend Mappings • Extend Mappings.
                    

Check Customizing
This Customizing activity triggers the execution of report RSMT_CHECK, which can be executed for a specific mapping or for the entire configuration and checks the entire mapping Customizing. The IMG path for accessing this activity is MDGIMG • Data Modeling • Create and Edit Mappings • Check Customizing.
Now, let's explore the standard data models provided by SAP.









3.2    Standard Data Models
In this section, we'll go through standard data models (material master; supplier, customer, and business partner; and financial) delivered by SAP at a high level and understand how entities are structured in each data model. This section also covers the scope of each data model. 
3.2.1    Material Master Data Model
With the generally available SAP MDG 9.0 release, the material master data model in SAP MDG covers most of the material master attributes that are commonly used across industries. Figure 3.18 shows an overview of the material master data model.

Figure 3.18    Material Master Data Model
The following are some of the highlights of the material master data model:


                    Four storage/usage type 1 entity types 
                

                    Several type 2 and type 3 entity types acting as check tables
                

                    Several type 4 entity types representing plant data, storage location, valuation, and warehouse data
                

                    No defined hierarchies
                

Table 3.3 lists SU type 1 and 4 entity types of the material master data model.




                            Entity Type
                        

                            SU Type
                        

                            Description
                        





MATERIAL 


                            1
                        

                            Basic Data
                        



DRADBASIC 


                            1
                        

                            Basic Data for Document Link
                        



MATCHGMNG 


                            1
                        

                            Material Change Management
                        



MKALBASIC 


                            1
                        

                            Production Version
                        



BSCDATTXT 


                            4
                        

                            Basic Data Text
                        



CLASSASGN 


                            4
                        

                            Class Assignment (Classification)
                        



DRADTXT 


                            4
                        

                            Document Link Text
                        



INTCMNT 


                            4
                        

                            Internal Comment
                        



MARAPURCH 


                            4
                        

                            Material Purchasing Data
                        



MARAQTMNG 


                            4
                        

                            Material Quality Data
                        



MARASALES 


                            4
                        

                            Material Sales Data
                        



MARCATP 


                            4
                        

                            Plant Data ATP
                        



MARCBASIC 


                            4
                        

                            Plant Data Basic Data
                        



MARCCSTNG 


                            4
                        

                            Plant Data Costing
                        



MARCFRCST 


                            4
                        

                            Plant Data Forecasting
                        



MARCFRGTR 


                            4
                        

                            Plant Data Foreign Trade
                        



MARCFRPAR 


                            4
                        

                            Plant Data Forecast Parameters
                        



MARCMRPFC 


                            4
                        

                            Plant Data MRP Forecast (View Planning)
                        



MARCMRPLS 


                            4
                        

                            Plant Data MRP Lot Size (View Lot Size)
                        



MARCMRPMI 


                            4
                        

                            Plant Data MRP Misc. (View Manufacturing)
                        



MARCMRPPP 


                            4
                        

                            Plant Data MRP Production Planning (View Material)
                        



MARCMRPSP 


                            4
                        

                            Plant Data MRP Stock Planning (View Procurement)
                        



MARCPURCH 


                            4
                        

                            Plant Data Purchasing
                        



MARCQTMNG 


                            4
                        

                            Plant Data Quality Management
                        



MARCSALES 


                            4
                        

                            Plant Data Sales
                        



MARCSTORE 


                            4
                        

                            Plant Data Storage
                        



MARCWRKSD 


                            4
                        

                            Plant Data Work Scheduling
                        



MARDMRP 


                            4
                        

                            Storage Location MRP Data for Material
                        



MARDSTOR 


                            4
                        

                            Storage Location General Data for Material
                        



MBEWACTNG 


                            4
                        

                            Material Accounting Data
                        



MBEWCSTNG 


                            4
                        

                            Material Costing Data
                        



MBEWMLAC 


                            4
                        

                            Material Ledger: Prices
                        



MBEWMLVAL 


                            4
                        

                            Material Ledger: Period Totals Records Values
                        



MBEWVALUA 


                            4
                        

                            Material Valuation Data
                        



MDMABASIC 


                            4
                        

                            MRP Area Basic Data
                        



MEAN_GTIN 


                            4
                        

                            International Article Numbers (EANs) for Material
                        



MLANPURCH 


                            4
                        

                            Tax Classification for Purchasing
                        



MLANSALES 


                            4
                        

                            Tax Classification for Sales
                        



MLGNSTOR 


                            4
                        

                            Material Warehouse Management Data
                        



MLGTSTOR 


                            4
                        

                            Material Storage Type Data
                        



MPGDPRODG 


                            4
                        

                            Material Data for Product Group
                        



MRPTXT 


                            4
                        

                            Material MRP Text
                        



MVKEGRPNG 


                            4
                        

                            Sales Grouping
                        



MVKESALES 


                            4
                        

                            Sales Data
                        



PURCHTXT 


                            4
                        

                            Material Purchasing Text
                        



QINSPTXT 


                            4
                        

                            Material Quality Inspection Text
                        



QMATBASIC 


                            4
                        

                            Parameters for Inspection Type
                        



SALESTXT 


                            4
                        

                            Material Sales Text
                        



UNITOFMSR 


                            4
                        

                            Units of Measure for Material
                        



VALUATION 


                            4
                        

                            Characteristic Valuation (Classification) 
                        



Table 3.3    Material Master Data Model SU Type 1 and 4 Entity Types
Table 3.4 lists the reuse active areas and associated access classes assigned to the material master data model.




                            Active Area
                        

                            Description
                        

                            Access Class
                        





DRAD


                            Document-object link
                        

CL_MDG_BS_MAT_DRAD_ACCESS




DRATYP2CHK


                            Type 2 entities (attributes) for document-object link (DRAD)
                        

CL_MDG_BS_MAT_DRAD_TYP2CHK_ACC




MATERIAL


                            Material master (MM01 - MM03 in active area)
                        

CL_MDG_BS_MAT_ACCESS




MM_TYP2CHK


                            Type 2 entities (attributes) for material master
                        

CL_MDG_BS_MAT_TYP2CHK_ACCESS




Table 3.4    Material Master Data Model: Reuse Active Areas
Now that you understand all the data model building blocks from Section 3.1, we can focus on the material master data model and understand how some of the entities and relationships are modeled. Figure 3.19 shows the MARCBASIC entity type and its associated relationships as an example. Some of the highlights of this example are as follows:


                    The MATERIAL entity has a leading relationship of cardinality 1:N to entity type MARCBASIC.
                

                    The PRCTR entity type has a referencing relationship of cardinality 0:N to entity type MARCBASIC.
                

                    The WERKS entity type has a qualifying relationship of cardinality 1:N to entity type MARCBASIC.
                    
Figure 3.19    Material Master Data Model Example


3.2.2    Supplier, Customer, and Business Partner Data Models
The business partner data model caters to business partner, customer master, and supplier domains in SAP MDG. This helps in having all common attributes in the appropriate business partner-related entity types. As discussed in Section 2.4.3 in Chapter 2, customer vendor integration (CVI) plays an important role in creating business partner and associated customer/vendor records. Business partner relationships are used for creating customer and supplier contacts in SAP MDG. Figure 3.20 shows an overview of the business partner data model and how business partner data and corresponding SAP ERP customer and SAP ERP vendor data are linked. 

Figure 3.20    Business Partner Data Model
Some of the highlights of the business partner data model are as follows:


                    Multiple storage/usage type 1 entity types are available.
                

                    Multiple type 4 entity types are available.
                

                    Business partner hierarchy is possible.
                

                    Business partner and corresponding SAP ERP customer/SAP ERP vendor are linked via the multiple assignments entity type.
                

Table 3.5 lists SU type 1 and 4 entity types of the business partner data model.




                            Entity Type
                        

                            SU Type
                        

                            Description
                        





ADDRNO 


                            1
                        

                            Address Number
                        



BP_HEADER 


                            1
                        

                            Business Partner
                        



BP_HRCHY 


                            1
                        

                            Hierarchy
                        



BP_REL 


                            1
                        

                            Relationships
                        



BP_SUBHRY 


                            1
                        

                            Lower-Level Hierarchy
                        



ADDRESS 


                            4
                        

                            Address
                        



AD_EMAIL 


                            4
                        

                            Email Address
                        



AD_FAX 


                            4
                        

                            Fax Number
                        



AD_NAME_O 


                            4
                        

                            Names of Organizations
                        



AD_NAME_P 


                            4
                        

                            Names of Persons
                        



AD_POSTAL 


                            4
                        

                            Physical Address
                        



AD_TEL 


                            4
                        

                            Telephone Number
                        



AD_URL 


                            4
                        

                            Internet Address
                        



BP_ADDR 


                            4
                        

                            Addresses
                        



BP_ADDUSG 


                            4
                        

                            Address Usage
                        



BP_BKDTL 


                            4
                        

                            Bank Details
                        



BP_CENTRL 


                            4
                        

                            Central Data
                        



BP_COMPNY 


                            4
                        

                            Company Code
                        



BP_CPGEN 


                            4
                        

                            BP Relationship Contact Person General Data
                        



BP_CUSDUN 


                            4
                        

                            Dunning Data (Customer)
                        



BP_CUSFCN 


                            4
                        

                            Customer: Partner Function
                        



BP_CUSGEN 


                            4
                        

                            General Data (Customer)
                        



BP_CUSTAX 


                            4
                        

                            Tax Classification for Customer
                        



BP_CUSWHT 


                            4
                        

                            Customer: Extended Withholding Tax
                        



BP_CUS_CC 


                            4
                        

                            Customer Company Code Data
                        



BP_DUNN 


                            4
                        

                            Dunning Data
                        



BP_IDNUM 


                            4
                        

                            Identification Numbers
                        



BP_INDSTR 


                            4
                        

                            Industry
                        



BP_MLT_AS 


                            4
                        

                            Multiple Assignment of Customer/Supplier
                        



BP_PORG 


                            4
                        

                            Purchasing Organization
                        



BP_PORG2 


                            4
                        

                            Purchasing Data
                        



BP_ROLE 


                            4
                        

                            Role
                        



BP_SALES 


                            4
                        

                            Sales Data (Customer)
                        



BP_TAXGRP 


                            4
                        

                            Tax Groupings (Suppliers)
                        



BP_TAXNUM 


                            4
                        

                            Tax Numbers
                        



BP_VENFCN 


                            4
                        

                            Supplier: Partner Functions
                        



BP_VENGEN 


                            4
                        

                            General Data (Supplier)
                        



BP_VENSUB 


                            4
                        

                            Supplier Subrange
                        



BP_WHTAX 


                            4
                        

                            Extended Withholding Tax
                        



BP_WPAD 


                            4
                        

                            BP Contact Person Workplace Address
                        



CUSCCTXT 


                            4
                        

                            Texts (Customer Company Code Data)
                        



CUSGENTXT 


                            4
                        

                            Texts (Customer General Data)
                        



CUSSALTXT 


                            4
                        

                            Texts (Customer Sales Data)
                        



VENCCTXT 


                            4
                        

                            Texts (Supplier Company Code Data)
                        



VENGENTXT 


                            4
                        

                            Texts (Supplier General Data)
                        



VENPOTXT 


                            4
                        

                            Texts (Supplier Purchasing Organization)
                        



WP_EMAIL 


                            4
                        

                            Workplace Address: Email Address
                        



WP_FAX 


                            4
                        

                            Workplace Address: Fax Number
                        



WP_POSTAL 


                            4
                        

                            Workplace Address: International Versions
                        



WP_TEL 


                            4
                        

                            Workplace Address: Telephone Number
                        



WP_URL


                            4
                        

                            Workplace Address: Internet Address 
                        



Table 3.5    Business Partner Data Model SU Type 1 and 4 Entity Types
Table 3.6 lists the reuse active areas and associated access classes assigned to the business partner data model. Note that the entity types BP_HRCHY and BP_SUBHRY are assigned with SAP MDG as active area, which implies that these entity types aren't defined as reuse entity types and don't use the PARTNER reuse active area defined at the business partner data model level. 




Active Area


Description


Access Class






CUS_TYP2CH


                            Type 2 entities (e.g., tax classification) for customer master
                        

CL_MDG_BS_CUST_TYP2CHK_ACCESS




PARTNER


                            N/A
                        

CL_MDG_BS_BP_ACCESS_MASTER




SUP_TYP2CH


                            Type 2 entities (e.g., plant) for vendor master
                        

CL_MDG_BS_SUPPL_TYP2CHK_ACCESS




Table 3.6    Business Partner Data Model: Reuse Active Areas
Next let's focus on the business partner data model and understand how some of the entities and relationships are modeled. Figure 3.21 shows how some of the important entity types are related to each other in the business partner data model.

Figure 3.21    Business Partner Data Model: Entity Types
The business partner data model also can model hierarchies for business partners. From the persistence perspective, entity types BP_HRCHY and BP_SUBHRY are modeled to be flex entity types (the active area is defined as "MDG" at the entity type level). It is important to note that business partner hierarchy is not related to the SAP ERP customer or vendor hierarchies. Figure 3.22 shows how entity types BP_HRCHY, BP_SUBHRY, and BP_HEADER are modeled to facilitate hierarchy creation for business partner records. The following are some important aspects of modeling these three entity types:


                    Entity types BP_HRCHY and BP_SUBHRY aren't modeled as hierarchies; Is Hierarchy Type? is set to No (as shown Figure 3.22).
                

                    Entity type BP_HEADER is modeled as a hierarchy; Is Hierarchy Type? is set to Yes - Not Version-Dependent/Not Synchronized.
                

                    For BP_HEADER, the Entity Types for Hierarchies customization is maintained as the following:
                    

BP_HRCHY is defined as Hierarchy Name.
                        

BP_SUBHRY is defined as No Special Use.
                        

BP_HEADER is defined as No Special Use.
                            
Figure 3.22    Business Partner Data Model: Hierarchy




Now, let's move on to discuss the final data model delivered by SAP.
3.2.3    Financial Data Model
The SAP standard financial (0G) data model caters to the data governance of various SAP ERP FI objects such as cost center, profit center, cost element, G/L account, and so on. Refer to the previous chapter for a complete list of SAP ERP FI objects.
Table 3.7 shows a list of all SU type 1 and 4 entity types of the financial (0G) data model




                            Entity Type
                        

                            SU Type
                        

                            Description
                        





ACCCCDET 


                            1
                        

                            G/L account (company code)
                        



ACCOUNT 


                            1
                        

                            G/L account (chart of accounts)
                        



BDC 


                            1
                        

                            Breakdown category
                        



BDCSET 


                            1
                        

                            Breakdown category set
                        



CCTR 


                            1
                        

                            Cost center
                        



CCTRG 


                            1
                        

                            Cost center group
                        



CCTRH 


                            1
                        

                            Cost center group hierarchy
                        



CELEM 


                            1
                        

                            Cost element
                        



CELEMG 


                            1
                        

                            Cost element group
                        



CELEMH 


                            1
                        

                            Cost element group hierarchy
                        



COMPANY 


                            1
                        

                            Company
                        



CONSCHAR 


                            1
                        

                            Consolidation characteristic
                        



CONSGRP 


                            1
                        

                            Consolidation group
                        



CONSGRPH 


                            1
                        

                            Consolidation group hierarchy
                        



CONSUNIT 


                            1
                        

                            Consolidation unit
                        



FRS 


                            1
                        

                            Financial reporting structure
                        



FRSI 


                            1
                        

                            Financial reporting structure item
                        



FSI 


                            1
                        

                            Item
                        



FSIH 


                            1
                        

                            Item hierarchy
                        



FSIT 


                            1
                        

                            Text item
                        



PCTR 


                            1
                        

                            Profit center
                        



PCTRG 


                            1
                        

                            Profit center group
                        



PCTRH 


                            1
                        

                            Profit center group hierarchy
                        



SUBMPACK 


                            1
                        

                            Cause for submission
                        



TRANSTYPE 


                            1
                        

                            Transaction type
                        



ACCCCAUDT 


                            4
                        

                            SAP ERP audit information for G/L account (company code)
                        



ACCNTAUDT 


                            4
                        

                            SAP ERP audit information for G/L account (chart of accounts)
                        



BDCSUBSEL 


                            4
                        

                            Assignments of subassignments
                        



CCTRAUDIT 


                            4
                        

                            SAP ERP audit information for cost center
                        



CELEMAUDT 


                            4
                        

                            SAP ERP audit information for cost element
                        



CGGCURR


                            4
                        

                            Entity for currency assignment
                        



CUVERS


                            4
                        

                            Entity related to consolidation unit entity
                        



FRSITXT 


                            4
                        

                            Financial report texts
                        



FSIAUDIT 


                            4
                        

                            SAP ERP audit information for item
                        



FSIVERS


                            4
                        

                            Entity related to item entity
                        



PCCCASS 


                            4
                        

                            Assignments of profit centers
                        



PCTRAUDIT 


                            4
                        

                            SAP ERP audit information for profit center 
                        



Table 3.7    SU Type 1 and 4 Entity Types of the Financial Data Model
Figure 3.23 shows type 1 entity types of the financial data model grouped under three main areas. Note that the financial area also uses profit center, profit center group, and profit center hierarchy.

Figure 3.23    Financial Data Model: Type 1 Entity Types









3.3    Summary
This chapter covered the building blocks of SAP MDG data modeling, including entity types, attributes, and relationships. After introducing the building blocks of data modeling, this chapter covered the customization aspects of data modeling. We covered the standard data models for material master, business partner, and financials, as well as how standard data models are modeled.








4    User Interface ModelingThe main user interface (UI) layer for SAP MDG is based on Web Dynpro and SAP Fiori technology. The UIs provide a clear and concise user experience. This chapter explains how you can configure the standard delivered SAP MDG UIs for standard domains in central governance scenarios.A good user experience is a key requirement for any user-centric software application. As SAP Master Data Governance (SAP MDG) is a business solution involving hundreds of fields per domain, it's very important to display the relevant role-specific information at each governance process step in a user-friendly manner. This will help the data stewards and data analysts to take smart decisions with the help of simple and responsive user interfaces (UI). SAP MDG UI leverages both Web Dynpro technology and SAP Fiori design methodology. The key SAP MDG, central governance scenarios leverage mostly Web Dynpro technology; SAP MDG, consolidation and SAP MDG, mass processing scenarios leverage the SAP Fiori methodology. SAP Fiori apps available as part of SAP MDG are discussed in detail in Chapter 11. This chapter describes the SAP MDG UI configurations, developed using the Floorplan Manager framework, that are available as part of each domain for central governance scenarios. This chapter also provides an overview of the Floorplan Manager toolset.Section 4.1 provides an overview of the Floorplan Manager concept and standard features provided by the framework. Section 4.2 details the SAP MDG UI configurations that leverage the Floorplan Manager framework for each domain and the UI configurations that can be done via the SAP MDG IMG accessed with Transaction MDGIMG. 
4.1    Floorplan Manager
Floorplan Manager is based on the Web Dynpro technology paradigm. It helps developers build UIs on the ABAP application layer with a standardized layout/look and feel. It also provides more flexibility in various configuration options. The Floorplan Manager concept relies on a business object or model for master data object processing. Different types of floorplan templates are available for configuration. These various floorplans display information related to business objects based on the degree of details required and the intended user activity. The Floorplan Manager framework provides the ability to create or adapt the UI configurations in less time. The key components include SAP predefined floorplans, UI building blocks (UIBBs), and the Floorplan Manager configuration editor (flexible user interface designer [FLUID]).
A floorplan can consist of numerous UIBBs. The UIBBs provide a standardized look and feel for form layout, list layout, search, and so on. These UIBBs can be reused across various floorplan applications, which simplifies the development effort of having different variants of the same UI for various roles. The UIBBs can be classified into the following types:


                Generic UIBBs (GUIBBs) 
            

                Reuse UIBBs (RUIBBs)
            

                Freestyle UIBBs


A Floorplan Manager application configuration is assigned to a floorplan configuration that can contain multiple UIBBs, as shown in Figure 4.1. The UIBBs can be displayed in different layouts with sections/assignment blocks/UIBBs presented in a stacked layout or tabbed layout. 
GUIBBs include templates for forms, lists, and so on. RUIBBs include business logic along with UIs. Some examples include notes, attachments, and so on. Freestyle UIBBs are usually generic Web Dynpro components assigned to the Floorplan Manager application using the IF_FPM_UI_BUILDING_BLOCK Web Dynpro interface. 
The predefined UIBBs provide a standard look and feel along with a template ABAP class called as a feeder class to handle the event processing associated with the UIBB. The GUIBBs come with generic events such as add/delete a row to the table list, and the RUIBBs involve specialized events and error handling specifically for the UIBB functions. For example, they can trigger an error when a note is entered or a specific pop-up to browse and attach a document to the attachment UIBB. All RUIBBs need to implement the interface IF_FPM_RUIBB.

Figure 4.1    Floorplan Manager Application Components
There are standard events that trigger the actions in these floorplans. The events are triggered on the initial load of the UIBB and on user action. These events help to perform validations and derivations, as well as to run additional business rules. The feeder classes link the application backend to the generic UIs. Communications between the UIBBs are exchanged using the wiring and SAP MDG communicator settings. Wiring is used to transfer data between UIBBs. The dependency between UIBBs is also defined in the wiring information during the UI configuration. Floorplan Manager provides various enhancement options to cater to different requirements. These enhancement options are discussed in detail in Chapter 12. For a Web Dynpro component to be recognized as a UIBB by the Floorplan Manager framework, the component should implement the Web Dynpro interface IF_FPM_UI_BUILDING_BLOCK. This interface provides the method definitions required for a component to participate in the Floorplan Manager event loop.
SAP provides the following predefined layouts for Floorplan Manager:


                Overview page floorplan (OVP)
            

                Guided activities floorplan (GAF)
            

                Quick activities floorplan (QAF)
            

                Object instance floorplan (OIF)
                
Note
For quick reference, the Floorplan Manager application is implemented using one of the following three Web Dynpro components: 


                            For OVP: FPM_OVP_COMPONENT


                            For GAF: FPM_GAF_COMPONENT


                            For OIF: FPM_OIF_COMPONENTOIF





The OVP provides an overview of the business object information by listing the attribute/field values of the single business object instance such as material master data, business partner master data, cost center data, and so on. The layout can be a single-column or multicolumn layout and can also be hierarchical. The OVP is usually used when the user has to review or edit the details of the object instance. A page can contain multiple sections, and each section can contain multiple UIBBs. 
In addition to these, toolbars can be configured at various levels. This floorplan is implemented using the FPM_OVP_COMPONENT Web Dynpro component, which has numerous personalization options. The component can be configured using the Floorplan Manager configuration editor, FLUID. Based on the number of fields in the UI, performance impacts to load the UI should be taken into consideration. UIBB rendering configuration can be performed to specify whether a UIBB needs to be collapsed (lazy loading) or expanded at runtime. A workaround for a large number of fields could be to provide a hierarchical layout, where the user drills down based on basic information (e.g., from material basic data → list of plants → plant specific details). 
The example OVP shown in Figure 4.2 has a number of stacked UIBBs, with the first section containing tabbed UIBBs. The panel containing UIBBs can be expanded or collapsed per your requirements. You can also personalize the display of fields and the order of stacked UIBBs as required. The personalization and enhancement options of UIs are discussed in Chapter 12.
The guided activities floorplan (GAF) helps when the user has to take multiple actions based on a sequence of activities/steps. The top section of the GAF provides a road map so you know what step of the process you're in. It's usually used to perform complex activities using a series of logical steps involving tasks and subtasks. This floorplan is implemented using the Web Dynpro component FPM_GAF_COMPONENT. An example GAF layout is shown in Figure 4.3.

Figure 4.2    An Example OVP Layout

Figure 4.3    An Example GAF Layout
The object instance floorplan (OIF) was used initially to display the object details and for the object maintenance processes. This has been replaced by the OVP floorplan for the new UIs. This floorplan is implemented using the Web Dynpro component FPM_OIF_COMPONENT.
The quick activities floorplan (QAF) displays the minimum set of required fields of an object. It's usually realized through the OIF component.









4.2    User Interface Framework
SAP MDG leverages Floorplan Manager for most central governance scenarios. The SAP MDG, consolidation UIs and analytics UIs are based on the SAP Fiori design methodology. Details on the SAP Fiori UIs available are discussed in Chapter 11.
In the following sections, we'll start with a comprehensive overview of the SAP MDG UI framework. Then, we'll provide information on the standard Floorplan Manager configurations and applications provided as part of the SAP MDG content specific to each domain. 
4.2.1    Overview
The floorplan applications are linked and grouped under predelivered SAP MDG roles for each domain. These standard applications cater to each master data activity (e.g., create, change, block, delete, mass processing, etc.). Because they are accessible via URL, you can use a web browser. The client tool to access these floorplan application is SAP Business Client. These URL-based Floorplan Manager applications can also be integrated with the SAP Fiori launchpad/SAP Enterprise Portal or any other web application.
In the standard SAP MDG content, these applications are tied to template roles (e.g., customer menu role, material steward role, etc.). Based on the access required for each role, you can assign the required application configurations to the users. For each action or activity, additional SAP authorizations need to be provided for table access, field access, action type, and so on.
The start page of all the domain areas is a home page. The home page provides links to each subapplication within the domain area. The menu configured for the SAP role is displayed in the left navigation panel. In the main central area, you see the application view. To view the contextual information with respect to the main application, you can leverage the side panel area. Side panels provide additional information regarding the main activity that you're working on via the UI. This is enabled using the Business Context Viewer application (BCV). The standard BCV content is available using the Business Configuration Set (BC Set) MDGAF_BCV.
For each UI layout, as discussed earlier, you can have separate templates, including an overview page, search page, guided activity page, and so on. OVP is mainly used for SAP MDG single processing applications, and GAF is mostly used for multistep processing applications. GAF provides a road map view to navigate through multiple steps of a process in a single application. Single processing applications involve the creation or maintenance of a single record at a time, and multiprocessing applications handle multiple records in one instance.
The following key Web Dynpro applications used to process master data can be grouped into several categories:


USMD_OVP_GEN, MDGF_OVP_GEN: Single processing of an entity 
                

USMD_ENTITY: Collective processing 
                

USMD_MASS_CHANGE: Mass change 
                

Each application configuration is defined for respective domains using application parameters. One of the key application parameter is USMD_OTC, which refers to the object type code.
The SAP MDG framework provides the change request UIBB (CRUIBB) and the validity UIBB. CRUIBBs provide the change request header information such as description, priority, created date, created by, and so on. Validity UIBBs display the time validity details of the edition-based entities. These UIBBS are integrated with the object-specific Web Dynpro applications using the SAP MDG communicator settings at runtime.
Each domain area has the following group of like applications that cater to specific functions, as the name suggests: 


Home page The entry page for all the applications associated with a domain area provides links to other applications and gives an overview of the number of requests submitted/approved from a logon user perspective. This is configured using Transaction LPD_CUST (Launchpad Configuration).
                

Worklist  The main activity center of the governance process serves as the workflow inbox for the SAP MDG work items. Data stewards and process approvers access this personal worklist to review the list of change requests to be processed. You can personalize the UI by adding additional predefined attributes as columns. Figure 4.4 shows a sample worklist. Based on the lead selection of a work item, you can see a preview of the change request. The Web Dynpro application related to this functionality is USMD_CREQUEST_POWL with component configuration USMD_WORKCENTER_FMDM.
                    
Figure 4.4    Worklist


Search  Allows you to search records across both the staging area and the active area. The search application (USMD_SEARCH) can leverage different types of search providers such as SAP HANA-based search, database search, SAP Enterprise Search, or an external search provider. The search could be exact search or fuzzy search based on the search provider. The application provides the ability for users to save the search criterion. Multiple search fields can be selected in one single search. The search fields are derived from the respective data model fields of the domain chosen. The toolbar at the search result list provides the key actions that can be taken on the records or to create a new record. Some of the toolbar actions include creating a new record, copying an existing record, performing multiprocessing on a selection of records, checking the status of the records, and more. More details on the search configuration are discussed in Chapter 6.
                

Create Provides the functionality to create a single record request for the governance process. You can create a record from scratch or can copy from an existing records as a template. 
                

Change Changes a single record and has a layout similar to the create application. It also provides the functionality to use templates for some domains such as a material object. Templates can be used to add organizational units such as plant, distribution channel, sales organization, and so on to a material record based on the values of an existing master data record.
                

Mark for deletion/block/unblock Creates a workflow request to mark/unmark the records as obsolete or to block/unblock master data records.
                

Copy Creates a new record request based on an existing record. It can be used to copy based on an existing change request/master data record or parts of them.
                

Multirecord processing  Changes the field values of multiple records in a single change request. It displays records in a tabular format, enabling users to change select field values. The scope of the associated change request can be limited to specific entities of the data model, so that parallel change requests can be triggered for a record to change the different object-specific views of a record. 
                

Mass change Replaces a field value of multiple records with another value. This is similar to the mass change SAP GUI transaction. On submission of the request, a workflow is triggered. The Web Dynpro application related to this functionality is USMD_MASS_CHANGE.
                

Create and edit key mapping Updates key mapping information manually. You can add/update/delete the mapping information by providing the object type, business name, and object ID for an existing record. The Web Dynpro application related to this functionality is MDG_BS_WD_ID_MATCH_SERVICE.
                

Search key mapping Searches the key mapping information by providing the object type, object ID, and business system. The associated Web Dynpro application is MDG_BS_WD_ANALYSE_IDM.
                

File upload Performs an entity-dependent file upload request. The submission of request triggers a workflow process. The Web Dynpro application is USMD_FILE_UPLOAD.
                

File download Performs an entity-dependent file download. The submission of request triggers a workflow process. The Web Dynpro application is USMD_FILE_DOWNLOAD.
                

Import master data Imports data and can be accessed through Transaction DTIMPORT. You can select whether the data import/postprocessing should undergo the governance process. For a large number of records, scheduling and parallel processing settings can be maintained before the execution of the data import. The data file could be in an XML or an IDoc format. If the data file is in an external format, you can select the appropriate custom converter settings. 
                

Convert master data Converts master data from an external format such as an Excel file into XML format.
                

Export master data Exports the data for other data sources. The data export application can be accessed through Transaction DTEXPORT.
                

Monitor data transfer Monitors the data transfer. You can search for the data transfer status based on a number of search attributes such as object type, job run number, date, user, and so on.
                

Replicate by object selection Replicates the data by business object. Single or multiple records can be replicated to selected target systems. The application also displays the replication log information. This application is mainly used for manual replication by data stewards as part of issue remediation.
                

Replicate by replication model  Replicates records based on replication model. You can filter the systems based on the replication model and select the records to be replicated.
                

Monitor replication Monitors the replication of data from the hub system to the client system. You can filter the logs by severity/class, replication mode, and so on. The application provides the functionality to choose the replication mode and business object as well.
                

Define filter criteria Defines the replication filter criterion by replication model, business object, communication channel, and data segments. This configuration helps to filter the replication of data from the hub system to the target systems.
                

My change request Provides the list of change requests associated with the user. You can filter this view based on the date and also by created requests, processed requests, and to-be-processed requests. The Web Dynpro application related to this functionality is USMD_EDITION_CREQUEST with component configuration USMD_EDITION_CREQUEST_OIF.
                

Display change requests  Helps you search for change requests based on change request attributes such as created date, change request type, created on, and so on. This application helps in looking up the status of a change request as well.
                

Display change documents Displays the list of changes associated with an object and its associated attributes. The report provides information about origin of change documents, type of change, count of changes, change request number if the change originated from SAP MDG, and so on. There are additional filters for the view such as overview and changed attributes view with descriptions.
                

Processing time  (list view) Lists the number of change requests processed during a selected time frame with priority. It provides information regarding change request analytics such as service level agreement (SLA) violations based on priority and defined key performance indicators (KPIs). You can drill down the report to view more information based on data model, change request type, and so on.
                

Processing time (graphical view) Provides a graphical representation of the list view.
                

Status report (list view) Provides information on the number of requests created versus approved versus rejected in a time frame. You can drill down this report to view details based on data model and change request type to view the individual change request details.
                

Hierarchy processing Creates and maintains hierarchy levels for master data objects. You can create new hierarchies or additional levels to the existing hierarchy and assign master data objects to the level. This application is part of the mass processing functionality to create a mass change request and trigger a governance workflow. This is mainly applicable for the business partner model, finance model, and custom objects. The Web Dynpro application used is USMD_ENTITY.
                

Edition comparison Compares editions to identify objects and changes associated with each edition. The Web Dynpro application related to this is USMD_EDITION_COMPARE. Editions are mainly used for finance data objects as well as custom objects, if needed. Edition history can be viewed using the Web Dynpro application USMD_EDITION_HISTORY2.
                

Distribution monitor  Monitors the replication of data records based on editions in both a hierarchy view and a standard view. The application lists the edition with the respective replication model and provides the status.
                

Workflow log Provides the status of a workflow work item to let you know the step where the request is pending or the history of the request. The Web Dynpro application related to this is USMD_CREQUEST_PROTOCOL2. 
                

Application log Provides the error, warning, and information messages related to an application based on the object. The Web Dynpro application related to this is USMD_APPLICATION_LOG. 
                

Where-used list  Provides the related information of an object in the system and lists objects related to the object specified. The Web Dynpro application related to this is USMD_WHERE_USED.
                

Remote where-used list Provides the where-used information of an object based on a remote system. Mapping information is used to retrieve the required information. The Web Dynpro application related to this is USMD_REMOTE_WHERE_USED.
                

Cleansing case  Mainly used for merging duplicate business partner object records. You can search for potential duplicates and create cleansing cases.
                

The process analytical UIs available as part of SAP MDG delivery are discussed in Chapter 8.
Other domain-specific UI applications are also available for finance, custom domains, hierarchy processing, and so on. These domain-specific application configurations are discussed in the Section 4.2.3, Section 4.2.4, and Section 4.2.5.
Each of these applications can be enhanced to meet custom requirements. The enhancement options are made using the Floorplan Manager framework. The Floorplan Manager leverages the active SAP MDG data model to get the field properties for the Floorplan Manager UI field catalog. This is enabled using application-specific abstraction layers such as the Business Object Layer (BOL) and Generic Interaction Layer (GenIL) frameworks. The GenIL framework helps abstract the complex data management logic and provides a structure based on the data model defined and the classes assigned. The standard domains have standard classes for search, dynamic query, hierarchy list, and so on. These are created after the data model is activated and the data structures are generated. 
You can view the dynamic GenIL objects using Transaction GENIL_MODEL_BROWSER and can test queries using Transaction GENIL_BOL_BROWSER. These transactions are illustrated in Figure 4.5 and Figure 4.6. GenIL objects are linked to UI fields based on data model definition. After the data model is activated, the GenIL structures are generated based on the entity types and entity-relationship types. These are then assigned to the UIBB configuration. Figure 4.5 and Figure 4.6 display the GenIL content of the material master data model that is generated when the data model is activated. 

Figure 4.5    GENIL_MODEL_BROWSER

Figure 4.6    GENIL_BOL_BROWSER
The material UI leverages a different integration framework and is discussed in detail in Section 4.2.3. However, the BOL and GenIL content are generated nevertheless. The BOL/GenIL content contains entity names, attributes, and relations mapped to root objects, structures, dependent objects, and associated object classes and methods. These provide a uniform interface for the integration between the application layer and presentation layer. Data objects based on the business partner data model, finance data model (0G), and custom objects leverage the GenIL framework. The GenIL data models are dynamically generated by its implementation class on the activation of the data model. They are mapped to the data model structure as follows: 


                    Type 1 entity is generated as a root object.
                

                    Type 4 entity is generated as a dependent object.
                

                    Relationships are generated as GenIL relations.
                

                    Additional queries and query result objects are generated to search on the type 1 entity.
                

                    A dependent object is generated to support the text processing capabilities, if the type 1 entity supports multilingual descriptions.
                

                    Two dependent objects are generated to support the type 1 attachments: one for attachment processing and another for handling pop-ups.
                

                    The entity attributes and related structures are transferred to the GenIL key and attribute structures.
                

Each Floorplan Manager application has the field layout as well as the associated ABAP class to contain the processing logic. The main ABAP class associated with the UIBB is called the feeder class. The feeder class logic helps in dynamically modifying or enhancing the field layout and field properties. With the help of SAP MDG application programming interfaces (APIs), you can retrieve the metadata information of the change request as well as the data model to make complex enhancements.
Each UIBB can have its feeder class and the main entity. The feeder class inherits from the main class provided as part of SAP delivery. 
After the configuration at the process modeling section is done, you can provide the action and change request type as application parameters. You can also have a generic OVP Floorplan Manager configuration and provide the application parameters as necessary, thus, reusing the UI. You can also have different UI configurations based on each workflow/approval step.
4.2.2    Configuration
To help you configure the SAP MDG applications, SAP provides configuration views based on SAP MDG data models to enable and disable fields in the SAP MDG UI. You can perform these configuration activities (see Figure 4.7) via the IMG path in Transaction MGIMG: Master Data Governance, Central Governance • General Settings • UI Modeling.

Figure 4.7    UI Modeling for SAP MDG
These configuration options allow you to change the field properties of the UI, manage UI configurations, modify the field visibility and values using Business Add-Ins (BAdIs), and so on. SAP MDG also allows you to print the UI pages as printable forms. This is especially helpful when you want to print the details of a specific object such as material master/customer details. Each of the IMG configuration activities are as follows:


Define Field Properties for UI You can set whether a type 1 entity defined in the data model can be changed via a change request and set the field-level properties. 
                    The IMG path for accessing this is Master Data Governance, Central Governance • General Settings • UI Modeling • Define Field Properties for UI.
                    On execution of this Customizing activity, you can select the data model for which the properties need to be defined. There are two configuration views with this activity. As illustrated in Figure 4.8, the Hide Entity Types view is used to select the type 1 entities that need not be associated with a change request and to upload/download applications such as other related type 1 entities of the material master data model: DRADBASIC and MATCHGMNG. The root object for the material master model is type 1 entity MATERIAL, which is linked to the change request. As the other type 1 entities are maintained through the MATERIAL entity, they need not be selected and linked to a change request. This configuration also hides these entity fields from applications such as selection screens, mass changes, search results lists, data cleansing, and so on. The configurations of the standard data objects are automatically enabled via activation of standard BC Sets. Custom entities that need not be displayed in these applications need to be listed in this Customizing activity.
                    
Figure 4.8    Define Field Properties of the UI
                    In the Hide Field Names configuration view, you can disable specific fields from the search criterion, search result list configuration, mass change, and data cleansing (for the business partner data model) UIs (Figure 4.9).
                    
Figure 4.9    Field Level UI Adaptations


Manage UI Configurations You can view the standard UI configurations and also create configurations based on standard SAP MDG applications. You can enhance the configurations to meet your needs, as shown in Figure 4.10. Another option is to edit the UI configurations using Transaction SE80.
                    
Figure 4.10    Manage UI Configurations
                    The IMG path for accessing this is Master Data Governance, Central Governance • General Settings • UI Modeling • Manage UI Configurations.
                

Define Available UI Applications This Customizing activity lists the standard UI configurations that are used in the SAP MDG processes as shown in Figure 4.11. If a custom UI configuration needs to be linked to an SAP MDG business activity or a change request, it must be listed in this configuration view. 
                    The IMG path for accessing this is Master Data Governance, Central Governance • General Settings • UI Modeling • Define Available UI Applications.
                    
Figure 4.11    Define Available UI Applications


Create and Assign Print Forms The Define Print Forms for Single Processing and Assign Print Forms for Single Processing Customizing activities are used to create and assign accessible PDF forms. When you click on the Print Preview button in the single processing UI screen, the respective forms are displayed. This Customizing activity allows you to configure the print forms to the respective entity of a data mode. The data from the single processing UI of the entity is mapped to the print form fields. Standard print forms are available for some standard objects. Adding additional forms or enhancements to the custom form can be done using Transaction SFP. Figure 4.12 shows the standard print forms available for the material master data model as an example.
                    The IMG paths for accessing these activities are Master Data Governance, Central Governance • General Settings • UI Modeling • Define Print Forms for Single Processing and Master Data Governance, Central Governance • General Settings • UI Modeling • Assign Print Forms for Single Processing.
                    
Figure 4.12    Assigning Print Forms


BAdI: Adjust User Interfaces for Single Processing This BAdI is used to enhance the single processing UI that uses the Web Dynpro application component USMD_ENTITY_VALUE2. This filter-dependent BAdI can be used to define and adjust the attributes, initialize data field displayed in the UI, restrict the drop down/input help values, dynamically control the field visibility, define navigation target for hyperlinks, check lead selection change in a table UI element, and so on. Figure 4.13 shows the sample implementations of the BAdI. This BAdI is obsolete with the newer SAP MDG releases (SAP MDG on ERP 6.0 EHP 6). Refer to SAP Note 1606341 for more information.
                    
Figure 4.13    Adjust User Interfaces for Single Processing


BAdI: Change Data to be Printed This filter-independent BAdI is used to adjust the field values displayed in the print forms. Data model-specific filter values may be added to separate the implementations. Figure 4.14 shows a sample implementation of this BAdI.
                    
Figure 4.14    Change Data to Be Printed


4.2.3    Material Master
UIs for material master governance leverages the Service Provider Infrastructure (SPI) framework for integration between the UI (Floorplan Manager) and the database layer. The metadata for the material data model can be viewed through the SPI Metadata Browser (Transaction MDB) with application building block ID (ABBID) MDG_MAT. 
The SPI framework is part of the SAP Business Suite foundation (SAP_BS_FND) and connects the application backend with the UI layer. A high-level architecture diagram of Floorplan Manager-SPI integration is depicted in Figure 4.15. The SAP MDG material domain SPI application is identified by the ABBID MDG_MAT. The material data model is exposed via a hierarchical node model. The metadata is defined through the metadata provider class CL_MDG_BS_MAT_MP. The application data flow is handled through the service provider class CL_MDG_BS_MAT_SP. These two ABAP classes encompass the SPI interfaces. These are delivered standard for integrating the data with the Floorplan Manager framework via the feeder classes for each UIBB in the UI layer. The Floorplan Manager-SPI integration (FSI) layer enables this in the UI layer.

Figure 4.15    SPI Framework Integration
The key SPI entities for SAP MDG materials are shown in Figure 4.16. The hierarchical SPI node structure is similar to the data model with entities and attributes. Actions are defined to implement the various events to be triggered in the round trip. Any enhancement to the nodes and attributes needs to be done using the metadata provider class.

Figure 4.16    SAP MDG Material SPI Metadata
ABBID, SPI node name, entity, and so on are passed as the feeder class parameters for each UIBB in the floorplan as shown in Figure 4.17. The communication between UIBBs is implemented through wiring by FSI. 

Figure 4.17    SPI Entities as Feeder Class Parameters
The SAP MDG Material Governance Homepage screen, shown in Figure 4.18, is the starting point for the material master governance process.

Figure 4.18    Material Master Homepage Screen
The Web Dynpro application configurations of key material master governance UI applications (as of SAP MDG 9.0) are listed in Table 4.1.




                            Description
                        

                            Application Configuration
                        

                            Component Configuration
                        





                            Search: Materials
                        

MDG_BS_MAT_SEARCH_06


MDG_BS_MAT_CLS_SEARCH_06




                            Create/Change Material
                        

BS_MAT_OVP_06/06H


BS_MAT_OVP_LAYOUT_06/06H




Table 4.1    SAP MDG Material Master UI Application Configuration
4.2.4    Business Partner, Customer, and Supplier
UIs for business partner governance leverages the BOL and GenIL frameworks for data abstraction. The GenIL objects are automatically generated on activation of the data model. It's forbidden to enhance the generated GenIL objects. This abstraction layer helps in greater flexibility to link the UI/presentation layer to the business data layer via APIs. The feeder classes for the UIBBs implement the BOL interfaces for data transfers associated with the GenIL root object/data model entity. A high-level architecture of BOL and GenIL layer integration is depicted in Figure 4.19.

Figure 4.19    BOL/GenIL Layer Integration
The GenIL objects for the business partner data model can be accessed through Transaction GENIL_MODEL_BROWSER for component BUPA and enhancement BUPA_CUSP, as shown in Figure 4.20. These address the needs for the customer and supplier master data governance along with the business partner master data. 

Figure 4.20    GenIL Root Object BUPA for the Business Partner Model
The UI applications related to the business partner data model are grouped into three roles based on the partner types: business partner governance, customer governance, and supplier governance. These roles provide the respective starting pages for accessing the applications. Figure 4.21 shows the Business Partner Governance screen.

Figure 4.21    Business Partner Governance Screen
The Web Dynpro application configurations of key business partner, customer, and supplier governance UI applications are listed in Table 4.2. The versions of these applications vary with the SAP MDG release.




                            Description
                        

                            Application Configuration
                        

                            Component Configuration
                        





                            Search/Create/Change Business Partner 
                        

BS_OVP_BP


BS_BP_OVP




                            Search/Create Cleansing Case 
                        

BS_OVP_CC


BS_CC_OVP




                            Search/Create/Change Customer
                        

BS_OVP_CU


BS_CU_OVP




                            Search/Create/Change Supplier
                        

BS_OVP_SP


BS_SP_OVP




                            Create Hierarchy Change Requests/Change Requests
                        

USMD_CREQUEST_CREATE


USMD_CREQUEST_CREATE_GAF




                            Hierarchy Processing
                        

USMD_ENTITY


USMD_ENTITY_OIF




                            Mass Change
                        

USMD_MASS_CHANGE


USMD_MASS_CHANGE_GAF




Table 4.2    SAP MDG Business Partner Object UI Application Configurations
The Search Business Partner: Drill Down Search application is a SAPUI5 application based on SAP HANA search.
4.2.5    Financial Domains
UIs for the finance master data object also leverage the BOL and GenIL layers. The generated GenIL objects for the finance data model can be accessed through the components MDGF and MDGFHP. Component MDGFHP is used for hierarchy processing functions in the single processing UIs. The GenIL data for SAP MDG is shown in Figure 4.22.

Figure 4.22    GenIL Root Object MDGF for Finance Master Data Model
The SAP MDG finance UI applications are grouped under three main groups. Each group corresponds to roles such as display role, requester role, menu role, specialist role, steward role, and so on. The role versions are dependent on SAP MDG releases. The requester roles for each group are as follows:


SAP_MDGF_ACC_REQ_07: Financial accounting governance This constitutes the finance objects -such as SAP General Ledger (G/L) accounts, financial reporting structure, and company. 
                

SAP_MDGF_CO_REQ_06: Financial consolidation governance  This constitutes objects such as item, item hierarchy, consolidation characteristic, consolidation group, consolidation group hierarchy, consolidation unit, breakdown category, breakdown category set, cause for submission, and transaction type.
                

SAP_MDGF_CTR_REQ_06: Financial controlling governance  This constitutes objects such as cost center, cost center group, cost center group hierarchy, profit center, profit center group hierarchy, cost element, cost element group, and cost element group hierarchy.
                

The Web Dynpro application configurations of some of the key finance object-related governance UI applications are listed in Table 4.3. The versions of these applications vary with the SAP MDG release.




                            Description
                        

                            Application Configuration
                        

                            Component Configuration
                        





                            Search/Create/Change G/L Account
                        

MDGF_0G_OVP_FI_ACCOUNT


MDGF_0G_FI_ACCOUNT_OVP




                            Search/Create/Change Financial Reporting Structure
                        

MDGF_0G_OVP_FI_REPORT


MDGF_0G_FI_REPORT_OVP




                            Search/Create/Change Company
                        

MDGF_0G_OVP_COMPANY


MDGF_0G_COMPANY_OVP




                            Create Edition
                        

USMD_EDITION


USMD_EDITION_OIF




                            Search/Create/Change Item (Consolidation)
                        

MDGF_0G_OVP_CO_ACCOUNT


MDGF_0G_CO_ACCOUNT_OVP




                            Search/Create/Change 
                            Item Hierarchy
                        

MDGF_0G_OVP_CO_REPORT


MDGF_0G_CO_REPORT_OVP




                            Search/Create/Change Consolidation Characteristic
                        

MDGF_0G_OVP_CONSCHAR


MDGF_0G_CONSCHAR_OVP




                            Search/Create/Change Consolidation Group
                        

MDGF_0G_OVP_CONSGRP


MDGF_0G_CONSGRP_OVP




                            Search/Create/Change Consolidation Group Hierarchy
                        

MDGF_0G_OVP_CONSGRPH


MDGF_0G_CONSGRPH_OVP




                            Search/Create/Change Consolidation Unit
                        

MDGF_0G_OVP_CONSUNIT


MDGF_0G_CONSUNIT_OVP




                            Search/Create/Change Breakdown Category
                        

MDGF_0G_OVP_BDC


MDGF_0G_BDC_OVP




                            Search/Create/Change Breakdown Category Set
                        

MDGF_0G_OVP_BDCSET


MDGF_0G_BDCSET_OVP




                            Search/Create/Change Cause for Submission
                        

MDGF_0G_OVP_SUBMPACK


MDGF_0G_SUBMPACK_OVP




                            Search/Create/Change Transaction Type
                        

MDGF_0G_OVP_TRANSTYPE


MDGF_0G_TRANSTYPE_OVP




                            Search/Create/Change Cost Center
                        

MDGF_0G_OVP_CCTR


MDGF_0G_CCTR_OVP




                            Search/Create/Change Cost Center Group
                        

MDGF_0G_OVP_CCTRG


MDGF_0G_CCTRG_OVP




                            Search/Create/Change Cost Center Group Hierarchy
                        

MDGF_0G_OVP_CCTRH


MDGF_0G_CCTRH_OVP




                            Search/Create/Change Profit Center
                        

MDGF_0G_OVP_PCTR


MDGF_0G_PCTR_OVP




                            Search/Create/Change Profit Center Group
                        

MDGF_0G_OVP_PCTRG


MDGF_0G_PCTRG_OVP




                            Search/Create/Change Profit Center Group Hierarchy
                        

MDGF_0G_OVP_PCTRH


MDGF_0G_PCTRH_OVP




                            Search/Create/Change Cost Element 
                        

MDGF_0G_OVP_CELEM


MDGF_0G_CELEM_OVP




                            Search/Create/Change Cost Element Group
                        

MDGF_0G_OVP_CELEMG


MDGF_0G_CELEMG_OVP




                            Search/Create/Change Cost Element Group Hierarchy
                        

MDGF_0G_OVP_CELEMH


MDGF_0G_CELEMH_OVP




Table 4.3    SAP MDG Finance Objects UI Application Configurations









4.3    Summary
This chapter discussed the UI framework and applications associated with SAP MDG, central governance scenarios. It also provided an overview of the Floorplan Manager framework. The chapter also discussed the various configurations that need to be carried out to set up UIs for each domain. The following chapters will detail how to integrate these UIs with the governance processes.








5    Process ModelingThis chapter explains how an end-to-end master data maintenance process is set up in SAP MDG from a central master data governance point of view. This chapter covers standard workflow templates, explains how rule-based workflows are defined, and provides an overview of multiple record processing available in SAP MDG.After introducing high-level architecture in Chapter 2, we discussed two important aspects of SAP MDG in Chapter 3 and Chapter 4: data modeling and UI modeling, respectively. With the knowledge gained in previous chapters, this chapter discusses the most important aspect of SAP MDG: central master data governance. A key aspect of central master data governance is setting up an end-to-end process to maintain create, read, update, delete (CRUD) operations on master data objects and how workflows are configured to support the end-to-end processes. Various building blocks of process modeling are used to set up the end-to-end process to support SAP MDG, central governance.This chapter begins by introducing the concept of defining governance scope and explaining the concept of the change request and the various building blocks involved in setting up the change request process. Section 5.3 and Section 5.4, respectively, provide an overview of single- and multiple-object processing from a process modeling perspective. Section 5.5 introduces the workflow modeling associated with a change request process and provides an overview of some of the SAP-delivered workflow templates. This section ends with explaining an important aspect of workflow modeling, a generic rule-based workflow template, and the process of designing a rule-based workflow using a simple example.
5.1    Governance Scope
In a master data governance scenario, apart from defining a governance organization, it's also important to define the scope of the governance for each data model. For example, some enterprises may govern only parts of the data that are considered global, whereas other enterprises may bring global as well as local attributes into the scope of the governance process. SAP MDG offers the capability to define the governance scope for each data model; by default, all entity types and attributes are governed. The governance scope for each data model can be configured by following the IMG path: MDG IMG • General Settings • Process Modeling • Define Governance Scope.
When an entity type, attribute, or referencing relationship is set to not be governed, such attributes are made read-only by SAP MDG automatically, and data can't be maintained or derived into those fields via field derivation logic. The following always need to be governed:


                Storage and usage type 1 entity types (attributes and referencing relationships can still be ungoverned)
            

                Key fields of an entity type
            

                Mandatory fields
            

It's highly recommended to remove ungoverned fields from the user interface (UI) to avoid any confusion for the users of the system. It's also important to verify change request step properties for the ungoverned attributes and fine-tune them as needed. Any changes made to the governance scope will impact how the fields are handled during the change request process and during data loads. Following is a summary of the impact:


Single record processing Attributes removed from governance are automatically changed to read-only in the UI, and all related checks are disabled.
            

Mass change Ungoverned fields can't be updated using the mass change process.
            

File upload All ungoverned fields are ignored. 
            

File download Ungoverned fields are included in the download file. However, the comments section in the downloaded file indicates that fields weren't part of the governance scope.
            

Data export Ungoverned fields are included in the exported file.
            

Data import If the data are imported directly into the active area, then governed as well as ungoverned fields are updated. However, if the governance option is selected, and the imported data goes through a change request process, the ungoverned fields are ignored.
            


Note
Business Add-In (BAdI) USMD_GOVERNANCE_SCOPE can be used for setting governance rules.
Method SET_GOV_SCOPE_FORCED can be used to force governance scope.
Method CHECK_GOV_SCOPE can be used to implement application-specific checks on governance scope.


Tip
Changing the governance scope of fields from Yes to No doesn't automatically remove ungoverned fields from the interfaces between SAP MDG and the target systems. Additional steps in the interfaces to suppress ungoverned fields need to be taken to avoid overwriting the values in the receiving system.

Figure 5.1 shows an example of governance scope configuration for the business partner data model.

Figure 5.1    Governance Scope for Business Partner Data Model









5.2    Change Requests
In Chapter 3, we briefly discussed change requests in SAP MDG. A change request, in this context, is a container of changes made to a master data object that contains additional details on the relevant process. A change request supports day-to-day CRUD operations by associating a predefined process, data enrichment, and data quality rules. The data enrichment process can be a manual enrichment of data or can be sourced from an external organization via automated enrichment. Data quality rules can be mandatory field checks, conditional mandatory checks, or the derived value of a field based on the value maintained in another field. Following are the common questions that can arise when a typical CRUD process is initiated:


                What are the next steps involved in the process?
            

                What is the status of the request at each change request step?
            

                Who can process each change request step?
            

                What are the possible actions you can take for each change request step?
            

An SAP MDG change request process supports all of these scenarios. A change request can be created either for a single master data record or can contain multiple master data records, which is defined at the change request type level (explained later in this section).
The following subsections provide an overview of all building blocks involved in configuring an end-to-end change request process, starting with an overview of a change request followed by all configuration steps involved.
5.2.1    Overview
In Chapter 3, we walked through a simple process from a staging and active area perspective. Now, let's revisit the same sample process to understand a simple change request process. Figure 5.2 shows a change request process with two approvals. Existing master data are changed via a change request process and submitted to master data experts for further data enrichment. During the process, data are validated based on preconfigured data quality rules. After the master data experts approve the change request, it's routed to a master data steward for final approval who is going to verify the data changes and approve the change request. Until the change request is approved, all changes made are stored only in the staging area, which means any transactions that consume the master data record don't contain changes made in the change request process. 

Figure 5.2    Simple Change Request Process
Figure 5.3 shows an example of a change request header.

Figure 5.3    Change Request Header: General Details
A change request header can contain the following details:


Change Request ID A unique change request number that is autogenerated by SAP MDG. The number range for change requests is controlled via number range object USMD_CREQ.
                

Description A mandatory field on the change request header that is used to identify the change request. All work items in the change request process display the change request description as part of the work item description, so it's important to identify a change request with a meaningful description. 
                

Priority Priorities are used to indicate the priority of the change request to the processors of the change request. Priorities can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Change Requests • Define Priorities for Change Requests.
                

Due Date Requesters of a change request can indicate a due date for the change request. Adding a due date helps the processors of the change request to sort the change requests accordingly.
                

Reason A reason for requesting a change request can be filled by the requester by selecting a value from a preconfigured list of reasons. Configuring a predefined list of reasons helps in terms of maintaining a uniform set of reasons and in reporting. These are configured per change request type by following the IMG path, MDGIMG • General Settings • Process Modeling • Change Requests • Define Reasons for Change Requests.
                

Status Indicates the status of the change request. A change request can have different statuses based on the current process step. A change request status can be set with one of the following permitted processing options:
                    

No Processing: Objects of a change request can't be changed. With this status, the UI is always set to read-only.
                        

Changing Object List: Additional objects can be added or deleted from a change request.
                        

Execution of Changes: Along with the ability to add or delete objects of a change request, changes to the objects are also permitted.
                        

Figure 5.4 shows a list of SAP-delivered change request statuses and their associated permitted processing. Additional statuses can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Change Requests • Edit Statuses of Change Requests.
                    
Figure 5.4    Change Request: Statuses

Note
Change request statuses 05 - Final Check Approved and 06 - Final Check Rejected mark the completion of a change request and indicate that that change request cannot be processed anymore. Any other status indicates that change request is still open for processing.



Notes The change request header enables you to add notes (Figure 5.5), which can be additional information that will help processors of the change request and also act as a collaboration platform between requesters and processors of the change request during the change request process. 
                    
Figure 5.5    Change Request: Notes


Attachments Attachments to justify the need for initiating a change request or any document to meet any compliance or regulatory needs can be attached under the Attachments tab of a change request (Figure 5.6). Note that the attachments will remain specific to the change request itself but aren't attached to the master data object.
                    
Figure 5.6    Change Request: Attachments


Target Systems If the Target Systems checkbox is enabled at the change request type, then the change request header displays the Target Systems tab. It provides an option to select target systems that are specific to the change request being created.
                

Rejection Reasons Reasons for rejecting a change request can be configured in the system for each change request type and can be selected while rejecting a change request. Later sections in this chapter explain how to enforce selecting the preconfigured rejection reasons when a change request is rejected. Rejection reasons can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Change Requests • Define Rejection Reasons for Change Requests.
                

5.2.2    Logical Action
Logical actions, such as creating, displaying, or changing, are used by the system to choose a UI via linked business activities. We recommend that you use the list of logical actions that SAP provides (see Figure 5.7). If needed, logical actions can be displayed using IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Define Logical Actions. 

Figure 5.7    All of the SAP-Delivered Logical Actions
5.2.3    Business Activity
A business activity is created with a link to a logical action, data model, and business object, which means every business activity is unique to a data model and business object. A few examples are as follows:


                    For the business partner data model and business object type 159 (customer), CUP1 (create customer) is the business activity for creating customers.
                

                    For the business partner data model and business object type 266 (supplier), SUP1 (create supplier) is the business activity for creating suppliers.
                

                    For business partner data model and business object type 147 (business partner), BPP1 (create business partner) is the business activity for creating business partners.
                

We recommend using the SAP-delivered business activities for all standard data models unless a custom data model is created or for processing custom type 1 entity types. If needed, business activities can be configured using the IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Create Business Activity. 
Figure 5.8 shows an example of business activities delivered by SAP for the material master data model.

Figure 5.8    Business Activities for the Material Master Data Model
Chapter 4 explained various aspects of UI modeling and SAP delivered UI applications. These UI applications are linked to logical actions and business activities. The following configurations explain IMG activities related to this:


Link logical actions with a UI application and business activityThe target UI application is derived based on business object type code, logical action, and current UI application. For displaying standard settings, follow the IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Link Log. Actions with UI Application and Bus. Act.: Standard Definition. For defining custom settings for custom applications, follow the IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Link Log. Actions with UI Application and Bus. Activity: Custom Definition.
                

Link logical actions with a business activity For each UI application and logical activity, a business activity is linked. For displaying standard settings, follow the IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Link Logical Actions with Business Activity: Standard Definition. For defining custom settings for custom applications, follow the IMG path, MDGIMG • General Settings • Process Modeling • Business Activities • Link Logical Actions with Business Activity: Custom Definition.
                

5.2.4    Change Request Type
Every change request is associated with a change request type. Either you select a change request type during creation of a change request or the system automatically determines the type based on the action initiated if there is only one change request type associated. A change request type can have the properties listed in Table 5.1.




                            Property
                        

                            Explanation
                        





Data Model


                            Identifies with which data model the change request type is associated. When a data model is assigned, then the change requests created are edition independent.
                        



Edition Type


                            An edition type defines various properties which are valid for all editions of the same type. For example: data model, data specific time period, entity types, etc. (editions and edition types are described later in this section).
                        



Objects Required


                            Indicates whether an entity needs to be specified during change request creation.
                        



Single Object


                            Indicates whether the change request can contain more than one entity of the main entity type specified for the change request type.
                        



Parallel 


                            Indicates whether a parallel change request can be enabled for the storage and usage type 4 entities maintained under allowed entity types.
                        



Main Entity Type


                            Entity type for which change requests are created.
                        



Workflow


                            SAP Business Workflow template that is followed during the change request process.
                        



Target System


                            Indicates whether target systems to which data are replicated can be specified.
                        



Default


                            Indicates the default change request type used by background processes for the combination of logical action and business activity.
                        



UI Application Name & UI Configuration


                            Can be specified if a specific UI needs to be determined based on the change request type. 
                        



Table 5.1    Properties of a Change Request Type
The IMG path for configuring a change request type is MDG IMG • General Settings • Process Modeling • Change Requests • Create Change Request Type.
For each change request type, you can configure the scope of the entity level, linking of business activities, and service level agreements (SLAs), which we'll explore in the following sections.
Scope on Entity Level
For a specific change request type, if the parallel change request option is selected, then the entity types that can be changed using this change request type are specified. An example of such a scenario includes various plant-specific entity types included under this configuration to enable plant-level change request types. Figure 5.9 shows the example configuration of the scope on the entity type level with a material parallel change request.

Figure 5.9    An Example of Scope on Entity for a Parallel Change Request Type
Linked Business Activities
Business activities are linked to a change request. Because the logical action is already linked to the UI configuration and work center links, linking the business activity to the change request type enables you to automatically initiate a change request of a specific type if only one change request type is linked to a business activity. Figure 5.10 shows an example of a business activity MAT1 linked to change request type MAT01.

Figure 5.10    An Example of a Business Activity Linked to a Change Request Type
Service Level Agreement for Change Request Type
SLAs can be defined at the change request type level for each priority, and these defined SLAs are used during status reporting (see Chapter 8 for additional details). Figure 5.11 shows an example of an SLA definition for the MAT01 change request type for each priority we configured earlier.

Figure 5.11    SLA for a Change Request Type

Note
Remembering what you now know about logical actions, business activities, and change request types, the following summarizes how they are linked to each other:


                            A business activity is linked to a logical action.
                        

                            A change request type is linked to a business activity.
                        

Figure 5.12 shows an example of how logical action, business activity, and change request type are used in a material create process.

Figure 5.12    Links between Logical Action, Business Activity, and Change Request Type

5.2.5    Change Request Steps
Change request steps are identified as dialog or background steps in a change request process. The process of configuring change request steps differs based on the workflow template used (workflow templates and rule-based workflow are discussed in Section 5.5). The following subsections provide details on how to configure change request steps based on workflow template and change request step properties. 
Configuring Change Request Steps 
For any change request type that has a standard rule-based workflow template setup, change request steps are configured using the following IMG path: MDG IMG • General Settings • Process Modeling • Workflow • Rule-Based Workflow • Define Change Request Steps for Rule-Based Workflow. 
Figure 5.13 shows an example of change request steps configured for change request type MAT01, which is configured with a rule-based workflow template.

Figure 5.13    Change Request Steps for Change Request Types with a Rule-Based Workflow
For any change request type that has a workflow template setup that is not rule based, the change request steps are configured by following IMG path, MDGIMG • General Settings • Process Modeling • Workflow • Other MDG Workflows • Define Change Request Step Numbers.
Figure 5.14 shows the step configuration for workflow template WS54400001, which is used for change request type CUST1P2 (create customer, parallel workflow) as an example.

Figure 5.14    Workflow Steps for Workflow Template WS54400001
Configuring a change request step involves the following:


Change request type  (for rule-based workflow) or workflow template (for other workflow templates)A CR type denotes the object used for managing changes to master data. A change request contains the objects a user want to create or change along with information about the changes.
                    

Change request step number and description Each change request may have one or more change request steps; each change request step defines the associated processors, checks, entity types, user interface, etc.
                    

KeysIn a change request process, keys for the entity being changed need to be entered. However, the change request process in SAP MDG provides the flexibility to delay entering the key of an entity until the final step in the process. The Keys checkbox indicates the final step in the process by which the key must be entered.
                    

ValidationThe Validation checkbox indicates the final execution of all validations and is a prerequisite for completing all actions for the change request step. Typically, all validation checks must be completed before final activation of the change request occurs.
                    

Properties 
In a change request process, configurations at the change request step can be made to control the following:


                        How various checks and data enrichment are performed
                    

                        Whether entity types and attributes are relevant and required
                    

                        The setup of a different UI for each change request step
                    

Figure 5.15 shows change request steps for change request type MAT01 as an example. 

Figure 5.15    Change Request Steps for Change Request Type MAT01
Change request step properties can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Change Requests • Configure Properties of Change Request Step.
The enhancements and checks triggered for a specific change request step can be controlled. Typically, every change request goes through various checks performed by the system, and for each change request step, you can control the behavior of these checks. Following is a list of checks done by SAP MDG:


                        Basic check
                    

                        Authorization check
                    

                        Duplicate check
                    

                        Validation rules configured in BRFplus
                    

                        Validation rules developed using BAdI
                    

                        Existence check
                    

                        Reuse area check
                    

Along with these checks, the system also performs any additional data enrichments (see Chapter 6 for details regarding enrichment spots and how they are configured). Figure 5.16 shows an example of enhancements and checks for change request type SUPPL1P1 (create supplier) and 00 (submission).

Figure 5.16    Enhancements and Checks per Change Request Step
Following are the options available for every change request step:


Sequence All standard checks are executed always, and it isn't possible to change the sequence of these checks. Hence, SAP MDG defaults the sequence of these steps to 0, which isn't changeable, indicating that they are executed first. Similarly, duplicate check is always performed at the very end, so the sequence for this check is always defaulted to 99 and isn't changeable. For all enrichments, you can change the sequence of execution. It's important to check the dependencies between enrichments and indicate the sequence accordingly. For example, address enrichment need to be performed before determining tax jurisdiction, which depends on address parameters.
                    

Message Output Message type determines whether a processor of a change request step can process the change request without addressing the outcome of the checks performed. As change request process is a collaborative process, and sometimes a requester who is creating a new record may not be an expert in completing various parts of the data. In such scenarios, the change request can't be submitted without addressing the errors. SAP MDG addresses this problem by providing an option to display error messages as warnings for a specific change request step. However, before activation of the change request, all checks are performed. There are two options to choose from:
                        

Standard: Messages are displayed as standard messages on the UI.
                            

Issue Error Messages as Warnings: All error messages are displayed as warnings. Authorization and hierarchy checks are the only exceptions.
                            



Relevant It's possible to select whether a specific check is relevant for the change request step or not. Except the basic check, all other checks and enrichments can be set as not relevant if needed.
                    

Execution Provides an option to trigger checks either as always executed or only when data are changed. For example, duplicate checks don't always have to be triggered and can be triggered only when relevant data are changed.
                    

The following properties can be set for entity types and attributes for each change request step: 


Field Properties Field properties can be defined for each change request step to determine if the entity types and attributes are relevant. This can be configured both at the entity type level and the individual attribute level. Following is a list of available options for Field Properties: 
                        

Standard: System retains the required field settings based on the data model required field setting or based on the check derived from a BAdI or from a reuse active area. If it's set at the entity type, then all the attributes in the entity type inherit the same setting. However, if the property for an attribute is set to be different from the entity type level setting, then the field property takes precedence.
                            

No Required Field Check: All required fields are set to optional for the change request step. If this is set at an entity type level, all attributes inherit the property and can't be changed.
                            

Not Relevant: All system checks are ignored, and the field becomes read-only. If this is set at an entity type level, all attributes inherit the property and can't be changed.
                            



CheckLogic Check logic can be used to determine if all the enhancements and checks are performed for the change request step or if only basic checks are performed.
Figure 5.17 shows an example of entity type level properties for change request type MAT01 and step 00.
                        
Figure 5.17    Entity Type Properties for a Change Request Step


For each change request step, a separate UI can be configured. When configured, the change request step level UI is displayed when the change request process is at that change request step. SAP MDG also displays all changes highlighted in a different color, which can be disabled at the change request step level.
5.2.6    Change Requests Actions and Step Types
In this section we will explain the various change request actions delivered by SAP and how a step type is formed using these change request actions.
Change Request Actions
You can take certain change request actions during a change request step, and these actions correspond to UI buttons for processing a change request when defined as part of a step type (explained in the next section). Actions can be defined with the following:


DescriptionA text description of the action.
                    

Pushbutton TextText to be displayed on a pushbutton.
                    

Quick Info TextText displayed as a quick info or tooltip for a pushbutton.
                    

CheckIndicates whether all checks need to be executed without errors for the action to be completed.
                    

NoteIndicates whether entry of a note is required for completing the action.
                    

ReasonIndicates whether entry of a rejection reason is required for completing the action.
                    

Figure 5.18 shows some of the actions delivered by SAP. Except for Disagree, Reject, Send for Revision, and Withdraw, all checks are implicitly performed for other actions, and the work item can't be completed if the checks return any errors.

Figure 5.18    Definition of Change Request Actions
Change request actions can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Workflow • Define Change Request Actions.
Change Request Step Types
Change request step types are used to assign a set of user actions to workflow tasks that aren't in the background. These step types once associated with actions determine the possible user actions on a UI. For a workflow that isn't rule-based, step types are assigned using a Workflow Builder, whereas for a rule-based workflow, step types are assigned using BRFplus. Save and Check are two actions that are implicitly available in all step types. During the definition of a step type, possible actions, along with the sequence, are configured. The sequence determines the sequence of the corresponding UI buttons. Figure 5.19 shows an example of a standard step type and the associated action assignment. Figure 5.20 shows an example of the same step types and actions from a material approver's UI perspective. 

Figure 5.19    Step Type and Action Assignment

Figure 5.20    Step Types and Actions Represented on a UI
Change request step types can be configured by following the IMG path, MDGIMG • General Settings • Process Modeling • Workflow • Define Change Request Step Types and Assign Actions.
Now that we've discussed all the building blocks of a change request, let's consider how these come together. Figure 5.21 shows individual building blocks of a change request process setup and how they are related to each other.

Figure 5.21    Change Request Process Setup
5.2.7    User Interface Determination
Previous sections explained the end-to-end change request process setup. Some of these building blocks of the change request process include assignment of UI configurations. Based on various configurations, SAP MDG determines the UI. Following is a list of various configurations where UI assignment is configured: 


Change request step level UI assignmentWhen a change request specific step requires a different UI, it's assigned at the change request step level configuration. Refer to Section 5.2.5 for more details.
                

UI assigned at the logical action and business object type combinationRefer to Section 5.2.3 for more details.
                

UI assigned at the change request typeRefer to Section 5.2.4 for more details.
                

UI adaptations such as context-based adaptation, customization, or personalizationRefer to Chapter 4 for additional details.
                

Figure 5.22 shows the sequence of the UI determination process. If the UI is defined at a change request step level, then the specified UI is determined. 

Figure 5.22    Change Request UI Determination
5.2.8    Editions
An edition enables time-dependent maintenance of master data. Financial master data objects such as cost centers and profit centers require time-dependent master data, so editions are used. Such time-dependent master data objects automatically inherit the valid-from date from the edition's valid-from date. Editions are used to schedule changes to master data and in SAP MDG. Editions allow combining either the changes that are logically related or that need to be valid from the same date. It's possible to use editions for custom objects modeled in SAP MDG if the objects are modeled as flex objects. The typical edition-based process follows these steps:


                    Create the edition and provide validity dates.
                

                    Initiate the change request process for all changes that are related to each other or that become active from the validity date of the edition.
                

                    The edition can be released after all change requests are approved, rejected, or withdrawn.
                

                    Change requests can be replicated to target systems after approval, via a manual replication, or after release of the edition.
                

For any master data object being changed, the valid-to date depends on whether there is a next change scheduled or not. If there is no scheduled change, then the validity is till the end of time. However, if there is a next change scheduled, then the valid-to date is changed to the beginning of the next scheduled change. Chapter 15 explains the editions in detail, including the strategies to use while creating editions, and how to release and monitor editions.
Editions are always created with a reference to an edition type, which identifies the data model and entity types that can be processed in an edition. SAP delivers an edition type 0G_ALL, which is defined with all entity types and can be used in the finance (0G) data model.
An edition type is defined with the following:


                    Name of the edition type and description
                

                    Data model to which the edition type is linked
                

                    Whether the edition has period-specific or date-specific validity
                

                    Fiscal year variant
                

                    An indicator to identify if the edition type is retired
                


Note
An edition type can be retired only if there are no open editions. After an edition type is retired, change requests can't be created referencing that edition type. A retired edition type can't be activated or used in consistency checks. 

Figure 5.23 shows the 0G_ALL edition type, and Figure 5.24 shows a list of all entity types assigned to the 0G_ALL edition type.

Figure 5.23    0G_ALL Edition Type

Figure 5.24    Entity Types in the 0G_ALL Edition Type









5.3    Single-Record Processing
SAP MDG provides the ability to manage either a single record or multiple records via the change request process. How many objects a change request can contain is controlled at the corresponding change request type by using the Single Object checkbox. Each of the SAP-delivered master data domains offers various single- and multirecord processing capabilities, as described in the following subsections. You'll get an overview of SAP MDG, central governance scenarios for each domain. Processing a customer master using a remote system as a scenario and SAP-delivered Business Context Viewer (BCV) side panel content are also briefly discussed.
5.3.1    Central Master Data Scenarios
In this section, we'll discuss central master data governance scenarios for each of the SAP-delivered domains. Each of the subsections provides an overview of scenarios, as well as lists of SAP-delivered change request types and associated workflow templates.
Material Master
The material master provides the ability to search, change, and mark a material for deletion. In SAP MDG, it's possible to extend the material to multiple plant and sales extensions in a create or change process. SAP MDG supports the following processes that can be accessed via home page links or work center links:


Search


Create Material


Change Material


Mark for Deletion


The search screen provides the ability to navigate to all available processes in the material master, including multirecord processing. Table 5.2 shows a list of all SAP-delivered change request types, including SAP Fiori-specific change request types.

Note
SAP-delivered change request types and associated configurations, including rule-based workflow links for material, are delivered via BC Set MDGM_MDG_MATERIAL_CREQUESTTYPE_6. This BC Set is valid from SAP MDG 8.0 onwards.
The SAP-delivered BC Set for material change request types can be activated by using Transaction MDG_BS_MAT_CR_BCST06.





                                Change Request Type
                            

                                Description
                            

                                Workflow
                            





MAT01


                                Create Material
                            

WS60800086




MAT02


                                Process Material
                            

WS60800086




MAT06


                                Mark Material for Deletion
                            

WS60800086




MMF1P1


                                Create Material (SAP Fiori)
                            

WS60800086




Table 5.2    Material Master Single-Object Change Request Types
Figure 5.25 shows a list of material master single-object change request types and how they are linked to corresponding UI links, business activities, and logical actions.

Figure 5.25    Material Master Single-Object Change Request Types
Business Partner
Business partner governance provides the ability to search for business partner records for various maintenance activities as well as for cleansing cases. SAP MDG supports a number of maintenance processes that can be accessed directly from a search results view such as mass change, manual replication, mark for deletion, block/unblock, change, etc. This ensures that the user is directed to the search screen and will search for an existing business partner record before initiating a new record. SAP MDG also supports the creation of business partners of type organization, person, and group. The business partner type person is used for creating contact person records. Types organization and group are used for creating a business partner that is an organization or a group (e.g., customer or supplier records). Table 5.3 shows a list of all SAP-delivered change request types, including an SAP Fiori-specific change request type.

Note
SAP-delivered change request types and associated configurations, including rule-based workflow links for business partner, are delivered via BC Set CA-MDG-APP-BP_VC_USMD110_C03. This BC Set is valid from SAP MDG 9.0 onwards.
The SAP-delivered BC Set for business partner change request types can be activated by using Transaction MDG_BS_BP_CR_BCSET4.





                                Change Request Type
                            

                                Description
                            

                                Workflow
                            





BP1P1


                                Create Business Partner
                            

WS60800086




BP1P2


                                Create Bus. Partner w. Hry. Assignment
                            

WS60800086




BP2P1


                                Process Business Partner
                            

WS60800086




BP2P2


                                Process Bus. Partner w. Hry. Assignment
                            

WS60800086




BP5P1


                                Block/Unblock Business Partner
                            

WS60800086




BP6P1


                                Mark Business Partner for Deletion
                            

WS60800086




BPCC1


                                Process Business Partner Cleansing Case
                            

WS60800086




BPCC2


                                Process Business Partner Cleansing Case
                            

WS60800086




BPF1P1


                                Create Business Partner (SAP Fiori)
                            

WS60800086




Table 5.3    Change Request Types for Business Partner
Along with the business partner search, it's possible to search for business partner cleansing scenarios. See Chapter 6 for additional details on how to create cleansing scenarios. Change request type BPCC1 is used for processing cleansing cases.
Customer Master
Customer master governance provides the ability to govern customer master data via various available processes. Search for an existing customer record, create, update, block, and mark for deletion are the single-object change request processes available under customer master governance. Table 5.4 shows a list of all SAP-delivered change request types, including an SAP Fiori-specific change request type.

Note
SAP-delivered change request types for customer are delivered via BC Set CA-MDG-APP-CUS_VC_USMD110_C05 and can be activated by using Transaction MDG_BS_CUS_CR_BCSET6. This BC Set is valid from SAP MDG 9.0 onwards.
SAP delivers SAP ERP customer UI-related change request types via BC Set CA-MDG-APP-CL_VC_USMD110_C02, which can be activated using Transaction MDG_BS_CL_CR_BCSET2. This BC Set is valid from SAP MDG 7.0 onwards.





                                Change Request Type
                            

                                Description
                            

                                Workflow
                            





CUST1P2


                                Create Customer (parallel WF)
                            

WS54400001




CUST1P3


                                Create Customer w. Hierarchy Assignment
                            

WS54300003




CUST2P1


                                Process Customer
                            

WS54300003




CUST2P2


                                Process Customer w. Hierarchy Assignment
                            

WS54300003




CUST5P1


                                Block/Unblock Customer
                            

WS54300003




CUST6P1


                                Mark Customer for Deletion
                            

WS54300003




CUF1P1


                                Create Customer (SAP Fiori)
                            

WS60800086




Table 5.4    Change Request Types for Customer
Supplier Master
Supplier master governance provides the ability to govern supplier data via various available processes. Search for an existing supplier record, create, update, block, and mark for deletion are the single-object change request processes available under customer master governance. Table 5.5 shows a list of all SAP-delivered change request types, including an SAP Fiori-specific change request type.

Note
SAP-delivered change request types for customer are delivered via BC Set CA-MDG-APP-SUP_VC_USMD110_C06 and can be activated by using Transaction MDG_BS_SUP_CR_BCSET7. This BC Set is valid from SAP MDG 9.0 onwards.
SAP delivers SAP ERP vendor UI-related change request types via BC Set CA- CA-MDG-APP-VL_VC_USMD110_C04, which can be activated using Transaction MDG_BS_VL_CR_BCSET4. This BC Set is valid from SAP MDG 7.0 onwards.





                                Change Request Type
                            

                                Description
                            

                                Workflow
                            





SUPPL1P1


                                Create Supplier
                            

WS54300005




SUPPL1P2


                                Create Supplier w. Hierarchy Assignment
                            

WS54300003




SUPPL2P1


                                Process Supplier
                            

WS54300007




SUPPL2P2


                                Process Supplier w. Hierarchy Assignment
                            

WS54300003




SUPPL5P1


                                Block/Unblock Supplier
                            

WS60800059




SUPPL6P1


                                Mark Supplier for Deletion
                            

WS60800068




SUF1P1


                                Create Supplier (SAP Fiori)
                            

WS60800086




Table 5.5    Change Request Types for Supplier
Financial Master Data
SAP delivers separate work centers to manage financial governance subareas. Each of these work centers provides the ability to manage the financial objects that fall under the governance area.
Financial governance for accounting provides the ability to search and create company, G/L accounts, and financial reporting structure hierarchy. Table 5.6 shows a list of all SAP-delivered change request types for financial accounting governance and associated workflow templates.




                                Change Request Type
                            

                                Main Entity Type
                            

                                Description
                            

                                Workflow
                            





ACC1P1


ACCOUNT


                                Create Account
                            

WS75700040




ACC1P2


ACCOUNT


                                Create Account with Hry. Assignments
                            

WS75700040




ACC2P1


ACCOUNT


                                Process Account
                            

WS75700040




ACC2P2


ACCOUNT


                                Process Account with Hry. Assignments
                            

WS75700040




ACC5P1


ACCOUNT


                                Block/Unblock Account
                            

WS75700040




ACC6P1


ACCOUNT


                                Mark Account for Deletion
                            

WS75700040




ACCXP1


ACCOUNT


                                Delete Account
                            

WS75700040




CMP1P1


COMPANY


                                Create Company
                            

WS75700040




CMP2P1


COMPANY


                                Process Company
                            

WS75700040




CMPXP1


COMPANY


                                Delete Company
                            

WS75700040




FRS1P1


FRS


                                Create Financial Reporting Structure
                            

WS75700040




FRS2P1


FRS


                                Process Financial Reporting Structure
                            

WS75700040




FRSXP1


FRS


                                Delete Financial Reporting Structure
                            

WS75700040




Table 5.6    Change Request Types for Financial Accounting Governance
Financial governance for controlling provides the ability to search and create the following controlling-related master data: 


                        Profit center
                    

                        Profit center group
                    

                        Profit center hierarchy
                    

                        Cost center
                    

                        Cost center group
                    

                        Cost center hierarchy
                    

                        Cost element
                    

                        Cost element group
                    

                        Cost element hierarchy
                    

Table 5.7 shows a list of all SAP-delivered change request types for financial controlling governance and associated workflow templates. SAP also delivers SAP Fiori-based change request types for creating cost centers and profit centers.




                                Change Request Type
                            

                                Main Entity Type
                            

                                Description
                            

                                Workflow
                            





CCG1P1


CCTRG


                                Create Cost Center Group
                            

WS75700040




CCG1P2


CCTRG


                                Create CCTR Group with Hry. Assignments
                            

WS75700040




CCG2P1


CCTRG


                                Process Cost Center Group
                            

WS75700040




CCG2P2


CCTRG


                                Process CCTR Group w. Hry. Assignments
                            

WS75700040




CCGXP1


CCTRG


                                Delete Cost Center Group
                            

WS75700040




CCH1P1


CCTRH


                                Create Cost Center Group Hierarchy
                            

WS75700040




CCH2P1


CCTRH


                                Process Cost Center Group Hierarchy
                            

WS75700040




CCHXP1


CCTRH


                                Delete Cost Center Group Hierarchy
                            

WS75700040




CCT1P1


CCTR


                                Create Cost Center
                            

WS75700040




CCT1P2


CCTR


                                Create Cost Center with Hry. Assignments
                            

WS75700040




CCT2P1


CCTR


                                Process Cost Center
                            

WS75700040




CCT2P2


CCTR


                                Process Cost Center w. Hry. Assignments
                            

WS75700040




CCTFP1


CCTR


                                Create Cost Center (SAP Fiori)
                            

WS60800086




CCTXP1


CCTR


                                Delete Cost Center
                            

WS75700040




CEG1P1


CELEMG


                                Create Cost Element Group
                            

WS75700040




CEG1P2


CELEMG


                                Create CELEM Group w. Hry. Assignments
                            

WS75700040




CEG2P1


CELEMG


                                Process Cost Element Group
                            

WS75700040




CEG2P2


CELEMG


                                Process CELEM Group w. Hry. Assignments
                            

WS75700040




CEGXP1


CELEMG


                                Delete Cost Element Group
                            

WS75700040




CEH1P1


CELEMH


                                Create Cost Element Group Hierarchy
                            

WS75700040




CEH2P1


CELEMH


                                Process Cost Element Group Hierarchy
                            

WS75700040




CEHXP1


CELEMH


                                Delete Cost Element Group Hierarchy
                            

WS75700040




CEL1P1


CELEM


                                Create Cost Element
                            

WS75700040




CEL1P2


CELEM


                                Create Cost Element w. Hry. Assignments
                            

WS75700040




CEL2P1


CELEM


                                Process Cost Element
                            

WS75700040




CEL2P2


CELEM


                                Process Cost Element w. Hry. Assignments
                            

WS75700040




CELXP1


CELEM


                                Delete Cost Element
                            

WS75700040




PCG1P1


PCTRG


                                Create Profit Center Group
                            

WS75700040




PCG1P2


PCTRG


                                Create PCTR Group with Hry. Assignments
                            

WS75700040




PCG2P1


PCTRG


                                Process Profit Center Group
                            

WS75700040




PCG2P2


PCTRG


                                Process PCTR Group with Hry. Assignments
                            

WS75700040




PCGXP1


PCTRG


                                Delete Profit Center Group
                            

WS75700040




PCH1P1


PCTRH


                                Create Profit Center Group Hierarchy
                            

WS75700040




PCH2P1


PCTRH


                                Process Profit Center Group Hierarchy
                            

WS75700040




PCHXP1


PCTRH


                                Delete Profit Center Group Hierarchy
                            

WS75700040




PCT1P1


PCTR


                                Create Profit Center
                            

WS75700040




PCT1P2


PCTR


                                Create Profit Center w. Hry. Assignments
                            

WS75700040




PCT2P1


PCTR


                                Process Profit Center
                            

WS75700040




PCT2P2


PCTR


                                Process Profit Ctr. w. Hry. Assignments
                            

WS75700040




PCTFP1


PCTR


                                Create Profit Center (SAP Fiori)
                            

WS60800086




PCTXP1


PCTR


                                Delete Profit Center
                            

WS75700040




Table 5.7    Change Request Types for Financial Controlling Governance
Financial governance for consolidation provides the ability to search and create financial consolidation-relevant master data such as consolidation unit, item, and associated hierarchies. Table 5.8 shows a list of all SAP-delivered change request types for financial governance for consolidation and associated workflow templates.




                                Change Request Type
                            

                                Main Entity Type
                            

                                Description
                            

                                Workflow
                            





BCG1P1


BDC


                                Create Breakdown Category
                            

WS75700040




BCG2P1


BDC


                                Process Breakdown Category
                            

WS75700040




BCGXP1


BDC


                                Delete Breakdown Category
                            

WS75700040




BCS1P1


BDCSET


                                Create Breakdown Category Set
                            

WS75700040




BCS2P1


BDCSET


                                Process Breakdown Category Set
                            

WS75700040




BCSXP1


BDCSET


                                Delete Breakdown Category Set
                            

WS75700040




CCC1P1


CONSCHAR


                                Create Consolidation Characteristics
                            

WS75700040




CCC2P1


CONSCHAR


                                Process Consolidation Characteristics
                            

WS75700040




CCCXP1


CONSCHAR


                                Delete Consolidation Characteristics
                            

WS75700040




CGH1P1


CONSGRPH


                                Create Consolidation Group Hierarchy
                            

WS75700040




CGH2P1


CONSGRPH


                                Process Consolidation Group Hierarchy
                            

WS75700040




CGHXP1


CONSGRPH


                                Delete Consolidation Group Hierarchy
                            

WS75700040




CGR1P1


CONSGRP


                                Create Consolidation Group
                            

WS75700040




CGR2P1


CONSGRP


                                Process Consolidation Group
                            

WS75700040




CGRXP1


CONSGRP


                                Delete Consolidation Group
                            

WS75700040




CRS1P1


FSIH


                                Create Item Hierarchy
                            

WS75700040




CRS2P1


FSIH


                                Process Item Hierarchy
                            

WS75700040




CRSXP1


FSIH


                                Delete Item Hierarchy
                            

WS75700040




CUT1P1


CONSUNIT


                                Create Consolidation Unit
                            

WS75700040




CUT2P1


CONSUNIT


                                Process Consolidation Unit
                            

WS75700040




CUTXP1


CONSUNIT


                                Delete Consolidation Unit
                            

WS75700040




FSI1P1


FSI


                                Create Item
                            

WS75700040




FSI2P1


FSI


                                Process Item
                            

WS75700040




FSI5P1


FSI


                                Block/Unblock Item
                            

WS75700040




FSI6P1


FSI


                                Mark Item for Deletion
                            

WS75700040




FSIXP1


FSI


                                Delete Item
                            

WS75700040




SMP1P1


SUBMPACK


                                Create Cause for Submission
                            

WS75700040




SMP2P1


SUBMPACK


                                Process Cause for Submission
                            

WS75700040




SMPXP1


SUBMPACK


                                Delete Cause for Submission
                            

WS75700040




TTP1P1


TRANSTYPE


                                Create Transaction Type
                            

WS75700040




TTP2P1


TRANSTYPE


                                Process Transaction Type
                            

WS75700040




TTPXP1


TRANSTYPE


                                Delete Transaction Type
                            

WS75700040




Table 5.8    Change Request Types for Financial Consolidation Governance

Note
SAP-delivered change request types for customer are delivered via BC Set CA-MDG-APP-FIN_CR_TYPES_06. This BC Set is valid from SAP MDG 8.0 onwards.
SAP-delivered BC Set for customer change request types can be activated by using Transaction MDG_FIN_BCSET_CR_06.

5.3.2    Processing Customer on a Client System
In SAP MDG, if you need to maintain a customer record directly in a client system with a quick turnaround, rather than initiating changes from a hub system, changes are initiated directly in a client system. Figure 5.26 provides an overview as well as the steps involved in a typical process. The following is a list of steps involved:


                    Search for a record on the client system as well as the SAP MDG hub.
                

                    If the record is found on the hub and isn't available in the client system, the copy process is initiated to copy the record from the hub to the client system.
                

                    Once copied, any changes to the record can be initiated locally in the client system.
                

                    After all changes in the client system are complete, changes can be transferred back to the hub.
                

                    The governance process is initiated in the hub. Once approved, changes are replicated to all client systems.
                


Note
This functionality is activated via business function MDG_CUST_ERPCLIENT_1.
If the client system is moved to SAP S/4HANA, this functionality isn't applicable anymore because the customer data are maintained via the business partner.


Figure 5.26    SAP Master Data Governance for Customer on the Client (SAP ERP)
5.3.3    Business Context Viewer Side Panels
SAP provides BCV side panel content to give you a direct overview of changes or of certain transactional data associated with the master data record. In addition to the side panel for changes overview which is available across all domains, there are certain domain-specific side panels delivered by SAP as follows: 


Material master  


                            Sales overview: Sales orders created for the current material master.
                        

                            Production overview: Production orders created for the current material master.
                        

                            Purchasing overview: Purchase orders created for the current material master.
                        



Customer master


                            Sales overview: Sales orders created for the current customer number.
                        



Supplier master


                            Purchasing overview: Purchase orders created for the current vendor number.
                        



Figure 5.27 shows the side panel for the overview of changes on a material master UI. If SAP MDG is installed as a hub, it's possible to retrieve an overview of transactional data for the selected master data record from the transactional SAP ERP system.

Figure 5.27    BCV Side Panel for Changes Overview 









5.4    Multiple Object Processing
As explained in Section 5.3, the Single Object checkbox in the change request type definition controls whether a change request created for the change request type contains a single object or multiple objects. Following is a list of various processes where multiple objects are changed within a single change request. Some of these are batch processes, whereas others are interactive such as hierarchy processing.


                Mass change
            

                File upload/file download
            

                Data import process
            

                Hierarchy processing
            

                Multiple-record processing
                
Figure 5.28    Multiple Object Change Request Type


Figure 5.28 shows the mass change account (ACCAP1) change request type as an example. For all SAP-delivered change request types, associated logical actions indicate the type of multiple-record processing. Table 5.9 provides a list of various processes related to multiple records and associated logical actions.




                        Process
                    

                        Logical Action
                    

                        Description
                    





                        Mass change and file upload
                    

MASS


                        Mass processing
                    



                        Data import
                    

LOAD


                        Data exchange
                    



                        Hierarchy processing
                    

HIERARCHY


                        Hierarchy processing
                    



                        Multiprocessing
                    

MULTI


                        Multi-object processing
                    



Table 5.9    Logical Actions Associated with Multiple-Record Processing
5.4.1    Mass Change
The mass change process is available for all domains in SAP MDG and enables you to change multiple records with the following options:


                    Update the same value for one field across all selected records.
                

                    Initialize a field across all selected records.
                

This process is very intuitive and enables you to add the mass change process to an already created mass change request. Unlike single record processing, the mass change process involves creating a mass change request before initiating the mass change process. Figure 5.29 shows the UI links for the mass change process using business partner as an example.

Figure 5.29    UI Links for Creating a Mass Change Request and Mass Change
See Chapter 15, Section 15.2.1 for additional details on the mass change functionality.
5.4.2    File Upload/Download
File upload and file download are entity type-based processes that are used for uploading and downloading file entries, respectively. Both the mass change process and the file upload process use change request types with business activities linked to the MASS logical action. Figure 5.30 shows the links involved in a file upload process using business partner as an example. It's very common to use the file download option as an intermediate step to generate a file template for the upload process.

Figure 5.30    UI Links for Creating Mass Change Requests and File Upload
File upload is used for the initial data loads for flex data models, so it's used for financial master data as well as custom objects. Chapter 9, Section 9.2.3, explains the file upload/download functionality in detail. Table 5.10 shows a list of mass change request types that can be used for both mass change and file upload processes.




                            Change Request Type
                        

                            Description
                        

                            Workflow
                        





0G_ALL


0G: All Entities
                        

WS75700027




0G_CO


0G: Controlling Entities
                        

WS75700040




0G_CONS


0G: Consolidation Entities
                        

WS75700040




0G_FIN


0G: Financial Accounting Entities
                        

WS75700040




ACCAP1


                            Mass Change Account
                        

WS75700040




BCGAP1


                            Mass Change Breakdown Category
                        

WS75700040




BCSAP1


                            Mass Change Breakdown Category Set
                        

WS75700040




CCCAP1


                            Mass Change Consolidation Characteristic
                        

WS75700040




CCGAP1


                            Mass Change Cost Center Group
                        

WS75700040




CCHAP1


                            Mass Change Cost Center Group Hierarchy
                        

WS75700040




CCTAP1


                            Mass Change Cost Center
                        

WS75700040




CEGAP1


                            Mass Change Cost Element Group
                        

WS75700040




CEHAP1


                            Mass Change Cost Element Group Hierarchy
                        

WS75700040




CELAP1


                            Mass Change Cost Element
                        

WS75700040




CGHAP1


                            Mass Change Consolidation Group Hierarchy
                        

WS75700040




CGRAP1


                            Mass Change Consolidation Group
                        

WS75700040




CMPAP1


                            Mass Change Company
                        

WS75700040




CRSAP1


                            Mass Change Item Hierarchy
                        

WS75700040




CUTAP1


                            Mass Change Consolidation Unit
                        

WS75700040




FRSAP1


                            Mass Change Fin. Reporting Structure
                        

WS75700040




FSIAP1


                            Mass Change Item
                        

WS75700040




PCGAP1


                            Mass Change Profit Center Group
                        

WS75700040




PCHAP1


                            Mass Change Profit Center Group Hierarch
                        

WS75700040




PCTAP1


                            Mass Change Profit Center
                        

WS75700040




SMPAP1


                            Mass Change Cause for Submission
                        

WS75700040




TTPAP1


                            Mass Change Transaction Type
                        

WS75700040




BPMP2


                            Business Partner Mass Maintenance
                        

WS60800095




MAT0A


                            Process Multiple Materials
                        

WS60800086




Table 5.10    Mass Change Request Types
5.4.3    Data Import Process
Data import, which is part of the data import framework, is used for initial data loads into SAP MDG. Data import is initiated by using Transaction DTIMPORT. By default, the data import framework is designed to import data into the active area directly. However, there is an option to initiate governance during the import process. After the Governance option is selected, a change request type needs to be selected. The system automatically filters change request types based on the object, and those that are linked to logical action LOAD. Figure 5.31 shows an example of the Import Master Data and Mapping Information data import screen with the Governance option selected. Note that the Change Request Type dropdown shows only the MAT0B change request type, which is linked to logical action LOAD via business activity MATB.

Figure 5.31    Data Import: Governance Option
See Chapter 9, Section 9.2.1, for additional details on the data import framework. Table 5.11 shows a list of change request types that can be used for the data import process, which means all change request types listed are linked to the LOAD logical action.




                            Change Request Type
                        

                            Description
                        

                            Workflow
                        





ACCLP1


                            Account Initial Load
                        

WS75700040




CCTLP1


                            Cost Center Initial Load
                        

WS75700040




CELLP1


                            Cost Element Initial Load
                        

WS75700040




CMPLP1


                            Company Initial Load
                        

WS75700040




FSILP1


                            Item Initial Load
                        

WS75700040




PCTLP1


                            Profit Center Initial Load
                        

WS75700040




BPLP2


                            Business Partner Initial Load
                        

WS72100006




MAT0B


                            Import Material
                        

WS60800086




Table 5.11    Change Request Types for Data Import
5.4.4    Hierarchy Processing
SAP MDG allows you to create or edit hierarchies. Entity types need to be defined at the data model level. Chapter 3, Section 3.1.5, explains the configurations that enable an entity type as a hierarchy. Section 3.2.2 in the same chapter provides an example of a business partner hierarchy from a data modeling perspective. With the understanding of the configurations performed at data modeling, we'll now discuss how a hierarchy can be created in SAP MDG. We'll use the same business partner hierarchy as an example. SAP MDG enables you to create a change request type for hierarchies up-front, or the change request type can be created during the hierarchy creation process. Figure 5.32 shows the UI links for creating a hierarchy change request first 1 and then initiating the hierarchy processing 2.

Figure 5.32    UI Links for Hierarchy Processing
Now, let's go through the steps to create a hierarchy using the business partner hierarchy as an example. SAP MDG enables you to create a new hierarchy or insert nodes into an existing hierarchy. Figure 5.33 shows an example of creating a new hierarchy.

Figure 5.33    Hierarchy Processing: Creating a New Business Partner Hierarchy
New structure nodes can be created for the new hierarchy that is created. If unassigned structure nodes have already been created, they can be assigned as well. Figure 5.34 shows a new structure node being inserted into a hierarchy.

Figure 5.34    Hierarchy Processing: Inserting a Structure Node
You can insert nodes as subnodes, and you can move the nodes after they are created. Nodes can be moved up or down at the same level by selecting up or down arrows. Right and left arrows allow you to rank the selected node higher or lower in the hierarchy. Figure 5.35 shows an example of moving node USA as subnode under North America by lowering the rank for the node.

Figure 5.35    Hierarchy Processing: Moving a Node as a Subnode by Lowering the Rank
Figure 5.36 shows a structure node being inserted as a subnode instead of lowering the rank later. In this example, Austria is inserted as a subnode of Europe during the creation process. 

Figure 5.36    Hierarchy Processing: Creating a Structure Node and Inserting as a Subnode
Existing business partner IDs can be inserted into a hierarchy. Figure 5.37, Figure 5.38, and Figure 5.39 show the process of inserting business partner 102 under an existing structure node as a subnode.

Figure 5.37    Hierarchy Processing: Inserting a Business Partner ID

Figure 5.38    Hierarchy Processing: Inserting a Business Partner ID as a Subnode

Figure 5.39    Hierarchy Processing: Business Partner Hierarchy with Business Partner ID
You can create a hierarchy processing change request during the save process and add the new hierarchy under the change request, as shown in Figure 5.40.
Once saved in a change request, the link to pending change requests for the nodes and change documents for all parent nodes are displayed. As shown in Figure 5.41, the Pending CR column provides a link to pending change request for each node in the hierarchy, and the Changes column provides a link to the change documents.

Figure 5.40    Hierarchy Processing: Creating a Change Request upon Save

Figure 5.41    Hierarchy Processing: Pending Change Requests and Change Documents for Hierarchy Nodes
Hierarchy processing change request types are linked to business activities, which are linked to logical action HIERARCHY. Table 5.12 shows a list of change request types that can be used for hierarchy processing for the respective entity types.




                            Change Request Type
                        

                            Description
                        

                            Main Entity Type
                        

                            Workflow
                        





BPHP2


                            Process Business Partner Hierarchies
                        

BP_HEADER


WS60800095




CCGHP1


                            Process Cost Center Group Hierarchies
                        

CCTRG


WS75700040




CEGHP1


                            Process Cost Element Group Hierarchies
                        

CELEMG


WS75700040




CGRHP1


                            Process Consolidation Group Hierarchies
                        

CONSGRP


WS75700040




CRSHP1


                            Process Item Hierarchies
                        

FSI


WS75700040




FRSHP1


                            Process Fin. Rep. Structure Hierarchies
                        

FRSI


WS75700040




PCGHP1


                            Process Profit Center Group Hierarchies
                        

PCTRG


WS75700040




Table 5.12    Hierarchy Change Request Types
SAP MDG also enables you to define scope for hierarchy-specific changes, which dictates the ability to create parallel change requests to a hierarchy belonging to a specific hierarchy type. SAP MDG offers a configurable interlocking that can be used to define the level of interlocking of hierarchy nodes when changes are saved to a change request. The IMG path to define interlocking is MDGIMG • General Settings • Process Modeling • Hierarchies • Define Scope for Changes.
Figure 5.42 shows an example of the scope for changes set for a business partner hierarchy. When a hierarchy or part of the hierarchy is interlocked, then any changes to the locked node need to be added to the pending change request. All other nodes that aren't locked can be changed under a new change request.

Figure 5.42    Scope for Hierarchy Changes for a Business Partner Hierarchy
The options available for Interlocking are as follows:


LooseThis interlocking option only locks the nodes assigned to the parent node of the node currently being changed.
                

StrictThis interlocking option locks all parent nodes up to the root node as well as all child nodes up to the end nodes of the parent node of the node currently being changed. 
                


Figure 5.43    Scope for Hierarchy Changes: Concept of Interlocking
Figure 5.43 shows the interlocking concept with an example. In this example, business partner 103 was added to the hierarchy, and USA is its parent node. In this example, loose and strict interlocking impact the entire hierarchy as follows:


LooseIn our example, because USA is the parent node of 103, all immediate child nodes of USA are locked. In this example, 102 is locked. 
                

StrictIn our example, because USA is a parent node of 103. All nodes upwards of parent node USA are locked and all child nodes downwards of USA are locked.
                

5.4.5    Multiple-Record Processing
SAP MDG enables you to process multiple records via Multi-Processing option available on the search results view for material, customer, and supplier domains. SAP delivers several change request types to support this process. Figure 5.44 shows the Multi-Processing options to initiate multiprocessing from the search results screen for the material master. After one of the available options is selected, SAP MDG provides you with a list of available change request types, as shown in Figure 5.45.

Figure 5.44    Material Master Multi-Processing Option from the Search Results List

Figure 5.45    Material Multi-Processing Change Request Type Selection
Multiprocessing change request types are linked to business activities that are linked to logical action MULTI. Table 5.13 shows a list of change request types that can be used for multiprocessing; this list is also presented while initiating multiprocessing.




                            Change Request Type
                        

                            Description
                        

                            Workflow
                        





MATLMRP


Multi Pro. for Planning Data (select)


WS60800086




MATLPUR


Multi Pro. for Purchasing Data (select)


WS60800086




MATLSAL


Multi Pro. for Sales Data (select)


WS60800086




MATLUOM


Multi Pro. for Dimensions Data (select)


WS60800086




MATMRP


Multi Pro. for Planning Data (full)


WS60800086




MATPUR


Multi Pro. for Purchasing Data (full)


WS60800086




MATSAL


Multi Pro. for Sales Data (full)


WS60800086




MATUOM


Multi Pro. for Dimensions Data (full)


WS60800086




CUSTMRP1


Multi Processing for Customer Financials


WS54300003




CUSTMRP2


Multi Processing for Customer Sales


WS54300003




SUPPMRP1


Multi Processing for Supplier Financials


WS54300003




SUPPMRP2


Multi Processing for Supplier Purchasing


WS54300003




Table 5.13    Multiprocessing Change Request Types









5.5    Workflow Process Modeling
Workflow definition is an integral part of SAP MDG change request processing. SAP MDG uses workflows to manage central governance scenarios; as such, a workflow template is specified as part of the change request type configuration. SAP delivers object type BUS2250 (SAP MDG change request) for workflows associated with change requests. Event type linkage for BUS2250 must be activated for event CREATED with the settings shown in Figure 5.46 by following the IMG path, MDGIMG • General Settings • Process Modeling • Workflow • Activate Event Type Linkage.

Figure 5.46    Event Type Linkage Activation
To ensure that processors of a change request step are selected as current agents at runtime and receive the work item, a dialog task needs to be categorized as a general task. If the task isn't enabled as a general task, and if a processor is assigned to a change request step that isn't assigned as a possible agent, then the workflow will end in an error. To complete the configuration, follow IMG path, MDGIMG • General Settings • Process Modeling • Workflow • Configure Workflow Tasks, and then perform the following tasks:


                For application component CA-MDG-AF, choose Assign Agents.
            

                Set all activities (denoted by TS*) that aren't set as Background Task to be General Task. Follow the steps shown in Figure 5.47.
            

                Follow the same procedure for all nonbackground activities within the components of the SAP MDG application that will be used.
            


Figure 5.47    Configuring Workflow Items

Note
SAP MDG uses workflow system batch user (WF-BATCH) to process background tasks. Hence, it's important to provide required authorizations to WF-BATCH user. Refer to SAP Note 1650993 (SAP MDG: Authorizations for Workflow System User) for authorization requirements for WF-BATCH user.

Section 5.5.1 provides a high-level overview of some of the workflow templates delivered by SAP for each domain. Section 5.5.2 provides an overview and an example of designing a rule-based workflow template. Finally, Section 5.5.3 provides a list of available BAdIs that can be used as part of workflow modeling.
5.5.1    Standard Workflow Templates
SAP delivers several workflow templates along with change request types. During the initial project phase, it's important to review the standard workflow templates delivered by SAP to understand if they fit the project requirements. This section provides an overview of some of the workflow templates delivered by SAP. 
Material Master
All change request types delivered for the material master use workflow template WS60800086, which is a rule-based workflow. We'll go through rule-based workflows in detail in Section 5.5.2.
Business Partner
All single-object change request types delivered for the business partner use workflow template WS60800086, which is a rule-based workflow. Business partner hierarchy and mass maintenance change request types use workflow template WS60800095. Workflow template WS72100006 is used by the business partner initial load change request type. 
Supplier
SAP provides various workflow templates to manage supplier CRUD processes in SAP MDG. As explained in Chapter 2, Section 2.4.2, vendor master data in SAP ERP consists of three parts: central data, purchasing organization data, and company code data. SAP-delivered workflow templates for supplier governance are designed to work on these three individual blocks of data.
The supplier create process uses workflow template WS54300005, which is explained at a high level in Figure 5.48. Following is a summary of how this workflow is designed:


                        The master data requester initiates a change request using SAP MDG, Supplier governance and submits after maintaining central data, company code, and purchasing organization data.
                    

                        The master data specialist reviews and approves the central data.
                    

                        Purchasing specialists responsible for maintaining purchasing data for each purchasing organization enrich the data and submit the change request for purchasing specialist approval.
                    

                        Financial specialists responsible for maintaining company code data for each company code enrich the data and submit the change request for financial specialist approval.
                    

                        After central data, purchasing organization data, and company code data are approved, the change request is activated and, if needed, replicated to the receiving systems.
                    

                        The workflow also provides the flexibility to send back to the requesters of individual blocks of data if the approvers need clarification or rework.
                        
Figure 5.48    Workflow Template for the Supplier Create Process


Like the create process workflow explained in Figure 5.48, workflow templates related to the remaining processes, such as change, block/unblock, and mark for deletion, also follow the principle of three major blocks of data: central, purchasing organization, and company code data. Figure 5.49 provides an overview of these workflows, and the following is a summary of how these workflows are designed:


                        The master data requester initiates a change request using SAP MDG, Supplier governance and submits after making the required changes to central data, purchasing organization data, or company code data.
                    

                        Depending on the data that are changed, the workflow is routed to the appropriate master data specialists for approval.
                    

                        Once approved, the change request is activated and, if needed, replicated to the receiving systems.
                        
Figure 5.49    Workflow Template for the Supplier Change, Block/Unblock, and Mark for Deletion Processes


The agent determination process for these supplier workflow templates is determined using a BRFplus table. Agents are determined for each change request type, change request step, purchasing organization, company code, and central data combination. For the purposes of the supplier workflow template, SAP delivers the BRFplus application MDG_BS_ECC_SUPPLIER_WORKFLOW, along with the AGENT_DETERMINATION function. To assign a processor, follow the IMG path, MDGIMG • Master Data Governance for Supplier • Workflow • Assign Processor to Change Request Step Number in BRFplus for Supplier.
In the GET_AGENT decision table, you'll perform the following tasks:


                        Specify the type of change request and the change request step number.
                    

                        If the change request step requires agent determination based on purchasing organization, company code, or central flag, maintain those values. 
                    

                        Assign a processor by entering the object type and the processor ID.
                    

Figure 5.50 shows an example of how the GET_AGENT entries look, as well as an overview of all the links. As shown, the workflow is determined based on the change request type, and change request steps are assigned based on the workflow in the change request step configuration. In terms of available object types, it's possible to enter a User ID, Job, Position, or Organizational Unit.

Figure 5.50    Example: Agent Assignment for the Supplier Workflow
Customer
The customer master create workflow process is designed like the supplier create workflow. Customer master data in SAP ERP consists of three parts: central data, sales area data, and company code data. SAP-delivered workflow templates for customer governance are designed to work on these three individual blocks of data. The customer create process workflow template is shown at a high level in Figure 5.51. 

Figure 5.51    Workflow Template for the Customer Create Process
Following is a summary of how this workflow is designed:


                        The master data requester initiates a change request using SAP MDG, Customers governance and submits after maintaining central data, company code, and sales area data.
                    

                        The master data specialist reviews and approves the central data.
                    

                        Sales specialists responsible for maintaining sales data for each sales area enrich the data and submit the change request for sales specialist approval.
                    

                        Financial specialists responsible for maintaining company code data for each company code enrich the data and submit the change request for financial specialist approval.
                    

                        After the central data, sales area data, and company code data are approved, the change request is activated and, if needed, replicated to the receiving systems.
                    

                        The workflow also provides the flexibility to send back to the requesters of individual blocks of data if the approvers need clarification or rework.
                    

Like the supplier workflow templates, the agent determination process for these customer workflow templates is determined using a BRFplus table. Agents are determined for each change request type, change request step, sales area, company code, and central data combination. For the purposes of the customer workflow template, SAP delivers the BRFplus application MDG_BS_ECC_CUSTOMER_WORKFLOW along with the AGENT_DETERMINATION function. To assign a processor, follow the IMG path, MDGIMG • Master Data Governance for Customer • Workflow • Assign Processor to Change Request Step Number in BRFplus for Customer.
In the GET_AGENT decision table, you'll perform the following actions:


                        Specify the type of change request and the change request step number.
                    

                        If the change request step requires agent determination based on sales area, company code, or central flag, maintain those values. 
                    

                        Assign a processor by entering the object type and the processor ID.
                    

Figure 5.52 provides an example of the GET_AGENT decision table entries and how the change request type, workflow, and step number are linked.

Figure 5.52    Example: Agent Assignment for the Customer Workflow
Financials
SAP MDG, Financials provides a simple workflow template (WS75700040), advanced workflow template (WS75700027), and an extended workflow template (WS75700043). Following is an overview of these templates:


Simple workflow templateThe change request is created, and required changes are maintained. Simple workflow allows execution and approval of changes at the change request level.
                    

Advanced workflow templateThe change request is created, objects (entity types to be changed) are maintained, and required changes are made. Advanced workflow allows execution and approval of changes on an individual object level.
                    

Extended workflow templateThis template allows execution and approval of changes on an individual object level and allows control of steps by entity types.
                    

Figure 5.53 provides an overview of the simple workflow process.

Figure 5.53    SAP MDG, Financials: Simple Workflow
The high-level steps involved in the simple workflow process are as follows:


                        The requester submits a request to the master data specialist.
                    

                        The master data specialist reviews the request and, if approved, the master data steward receives the workflow task for further approval. The master data steward can then approve the request for final activation or send it back to the requester for rework.
                    

                        The master data specialist or master data steward can send the request back to the requester for rework.
                    

                        The requester can either resubmit after rework is complete or withdraw.
                    

Figure 5.54 provides an overview of the extended workflow, and following are the high-level steps involved:


                        The requester submits a request to the master data specialist.
                    

                        Multiple master data specialists receive workflow tasks. After all specialists review and approve the request, the master data manager receives the workflow task for further approval.
                    

                        The master data manager reviews and approves the request.
                    

                        The master data manager receives the request for final approval, and, once approved, the change request is activated. 
                    

                        During the end-to-end process, any single master data steward, master data manager, or processor can send the request back to the requester for rework. 
                    

                        The requester can either resubmit after the rework is complete or withdraw.
                        
Figure 5.54    SAP MDG, Financials: Advanced Workflow


5.5.2    Rule-Based Workflows
SAP delivers a rule-based workflow template (WS60800086), which is configurable using a BRFplus decision table and can be used for any change request process where SAP-delivered workflow templates don't suit the project-specific requirements. Using a rule-based workflow also helps avoid the effort involved in copying SAP-delivered workflow templates and adapting them to suit the project requirements. If the process deviation is only minor, SAP-delivered templates can be copied and adapted. However, if the process deviates significantly from the SAP-delivered workflow templates, then using a rule-based workflow template is more flexible. The following subsections provide an overview of the rule-based workflow template, associated decision tables, and an example of designing a simple workflow process.
Introduction to Rule-Based Workflows
In a rule-based workflow, the change request process is configured using decision tables for each change request type. Based on the current workflow step and action performed, decision tables determine the next change request step, status, and agents in the workflow process. For each change request type for which rule-based workflow is configured, a separate BRFplus application is generated by the system with an application name that contains the change request type. 
The generated BRFplus application contains required functions, rulesets, and decision tables. The rule-based workflow itself is very generic and isn't specific to a domain, data model, or change request type. The logic built in the template caters to determine the change request process based on the configuration entries maintained in the decision tables of the system-generated BRFplus application. Each decision table has generated input and result columns. For each input column entry maintained in the decision table, result columns determine the output for the process. Each generated BRFplus application contains the following three decision tables:


Single-value decision table Decision table generated by the system has the name DT_SINGLE_VAL_<Change Request Type>. Based on the current change request step, the UI action performed, and a few other parameters maintained as part of the input columns, the results will be returned with values for the next change request step, status, and so on. Table 5.14 provides an overview of the single-value decision table columns.
                        


Column
Column Type
Details




CR Previous Step
Condition column
Previously processed change request step.


Previous Action
Condition column
Previously processed change request action.


Chng. Req. Priority
Condition column
Current change request priority.


Chng. Req. Reason
Condition column
Current change request reason.


CR Rejection Reason
Condition column
Rejection reason for the change request.


CR Parent Step
Condition column
Used for defining parallel workflow process and indicates the step from which parallel processing is initiated.


Parallel Agt Grp No.
Condition column
Used for defining parallel workflow process and indicates agent group number of subprocess.


Condition Alias
Result column
Identifies a unique condition defined in a single-value table. Each condition alias must have at least one corresponding entry either in the user agent decision table or the nonuser agent decision table. 


New Chng. Req. Step
Result column
Next step in the process.


New CR Status
Result column
New change request status.


Hours to Completion
Result column
Expected number of hours for completion of the work item. If not completed, an email notification is sent.


Merge Type
Result column
Used for merging the results after parallel processing into the higher level process. Merge type is B to indicate BAdI implementation.


Merge Parameter
Result column
Used along with Merge Type with a value of the service name used for the BAdI implementation.


Dyn Agt Sel Service
Result column
Service name used for implementation of BAdI: Dynamic Selection of Agent in Rule-Based Workflow.



Table 5.14    Single-Value Decision Columns


User agent decision table Decision table generated by the system has the name DT_USER_AGT_GRP_<Change Request Type>. User agent decision table is used to determine processors and UI actions for a change request step. Table 5.15 provides an overview of the user agent decision table columns.
                        


Column
Column Type
Details




Condition Alias
Condition column
Condition alias maintained in a single-value decision table to identify a condition that requires user action.


User Agt Grp No.
Result column
Value maintained to identify the user agent maintained in User Agent Value. For parallel processing, different user agent group numbers are entered to identify each subprocess with the same condition alias.


Step Type
Result Column
Step type for the condition alias, which defines the UI actions for the change request step.


User Agent Type
Result column
Identifies the type of user agent: user, role, job, organization unit, position, or special user.


User Agent Value
Result column
Depending on the user agent type, either a user or a group value is maintained. Special values such as INIT (initiator of the change request step) and LAST (last processor) can also be maintained.



Table 5.15    User Agent Decision Columns


Nonuser agent decision table Decision table generated by the system has the name DT_NON_USER_AGT_GRP_<Change Request Type>. The nonuser agent decision table is used to determine background steps involved for a change request step. Table 5.16 provides an overview of the nonuser agent decision table columns.
                        


Column
Column Type
Details




Condition Alias
Condition column
Condition alias maintained in a single-value decision table to identify a condition that requires a background action.


Agent Group
Result column
Works along with the Process Pattern column to identify if there are multiple process patterns for a parallel process.


Process Pattern
Result column
Identifies process patterns. (Refer to Table 5.17 for more details.) 


Service Name
Result column
Service name depending on the process pattern.



Table 5.16    Nonuser Agent Decision Columns


Figure 5.55 provides an overview of a BRFplus application and associated decision tables. As you can see, when the corresponding configuration activity is initiated, the first step requires entry of a change request type, which is used by the system to generate the BRFplus application. 

Figure 5.55    BRFplus Application for MAT01 Change Request Type
Following is what is generated by the system:


USMD_SSW_CATA_MAT01: BRFplus application
                    

DT_SINGLE_VAL_MAT01: Single-value decision table
                    

DT_USER_AGT_GRP_MAT01: User agent decision table
                    

DT_NON_USER_AGT_GRP_MAT01: Nonuser agent decision table
                    

Figure 5.56 shows how these decision tables are linked to each other. As shown, the condition alias defined for each row in a single-value decision table becomes a link between the single value decision table and the user agent or nonuser agent decision tables. 

Figure 5.56    Decision Tables and Condition Alias
As discussed in Table 5.16, the nonuser agent decision table uses process patterns to identify background steps involved in a rule-based workflow. We'll now take a look at these process patterns.
Several workflow basic steps are grouped together to form a process pattern used to control the flow of the change request process. Rule-based workflows continue to run in a loop until the process pattern to complete the workflow is found. Table 5.17 provides a list of process patterns.




                                Code
                            

                                Process Pattern Name
                            

                                Comments
                            





                                01
                            

                                UI Dialog
                            

                                Used when user interaction is needed on a change request step, and hence used in user agent decision tables. 
                            



                                02
                            

                                Call Synchronous Method
                            

                                Used to include any operations that aren't provided by SAP.
                            



                                03
                            

                                Call Sub-Workflow
                            

                                Used to initiate a subworkflow with the workflow name maintained in the Service Name column of the nonuser agent decision table.
                            



                                04
                            

                                Call Data Replication
                            

                                Used for initiating the data replication process after the change request is activated.
                            



                                05
                            

                                Activation (do not bypass snapshot)
                            

                                Used for activation of the change request. Any changes made to master data tables while the change request was in process trigger failure of activation process, and the result is set for the Previous Action column.
                            



                                06
                            

                                Activation (bypass snapshot)
                            

                                Used for activation of the change request. Unlike process pattern 05, this process pattern activates and overwrites any master data changes made while the change request was in process.
                            



                                07
                            

                                Validate Change Request
                            

                                Used for validating change request data.
                            



                                08
                            

                                Roll Back Change Request
                            

                                Used for initiating roll back of changes made using a change request process.
                            



                                98
                            

                                Error
                            

                                Used for error handling.
                            



                                99
                            

                                Complete (Sub-)Workflow
                            

                                Use for indicating the completion of the rule-based workflow.
                            



Table 5.17    Rule-Based Workflow: Process Patterns
Figure 5.57 provides an overview of the rule-based workflow template defined with various process patterns and loops through until the 99-complete process pattern is found.

Figure 5.57    Rule-Based Workflow: High-Level Design 
Designing a Simple Rule-Based Workflow
In this section, we'll design a simple process using a rule-based workflow template offered by SAP. Some of the change request types delivered by SAP via BC Sets contain required configuration and decision table entries if the change request type delivered is configured with a rule-based workflow. The main goal of this section is to explain the design aspects involved in a rule-based workflow by using the following simple process (also shown in Figure 5.58):


                        A requester initiates the change request process and submits the change request after entering all required data.
                    

                        The master data reviewer receives the work item, reviews the data, and, if agrees, approves the change request.
                    

                        The master data approver receives the work item, reviews the data, and, if agrees, approves the change request.
                    

                        The system initiates the activation process and activates the change request.
                    

                        If either the master data reviewer or the approver disagrees during the process, they can send the change request back to the requester.
                    

                        The requester receives the work item and submits it back after the rework is done or withdraws the change request. 
                        
Figure 5.58    Sample Process Considered for Rule-Based Workflow Design


To design this process, you need to consider the following configuration items:


                        What are the change request steps involved?
                    

                        What are the UI actions each person in the end-to-end process can have for a specific change request step? For example, what possible UI actions can the master data reviewer take?
                    

                        What is the change request status for each change request step?
                    

                        What change request steps are acted upon by the system or the user?
                    

As a first step, identify all possible steps involved in the process, identify each condition involved in the process, and then name it with a condition alias. Then start identifying the UI actions, step types, and change request status that are applicable to a specific change request step. Figure 5.59 provides an overview of the step types and UI actions we chose based on the standard SAP-delivered step type and action configurations. If needed, you can create additional step types and actions. For additional details, refer to Section 5.2.6 for change request actions and change request step types. 

Figure 5.59    Defining Actions and Step Types for Each User Interaction
Similarly, start identifying the change request steps and statuses for each change request step. It's helpful if the process is drawn by identifying all the design elements discussed earlier. This process makes it easy to translate the design into appropriate decision tables. Figure 5.60 shows how our sample process translates into a change request process with individual design elements, including steps that involve user interaction such as approve and reject, as well as background activities such as activation. As a next step, start designing decision tables based on the change request process. The following are some important aspects you need to consider while designing the process:


                        All identified change request steps and conditions need to be part of single value decision table.
                    

                        The very first step, which is a change request submission, is always considered as step 00.
                    

                        All conditions that involve user interaction will be maintained in the user agent decision table with appropriate agent type and agent value.
                    

                        All conditions that involve background processing will be maintained in the nonuser agent decision table.
                        
Figure 5.60    Change Request Process Design for a Sample Process


Based on the change request process designed, Figure 5.61 shows all three decision tables populated with all conditions.

Figure 5.61    Decision Tables for a Sample Process

Tip
BRFplus provides functionality to export into and import from Microsoft Excel for decision tables, as shown in Figure 5.62. This provides the advantage of manipulating the decision table entries in Excel and importing back into the decision tables.
SAP provides simple rule-based workflow entries for all change request types that are delivered with the rule-based workflow template. Decision tables associated with such change request types can be used as a starting point for designing the required process.

Figure 5.62    Decision Table Export to Excel and Import from Excel Functionalities

5.5.3    Available Business Add-Ins
SAP offers various BAdIs for enhancement of workflow-related functionalities. The following BAdIs are available for rule-based workflows:


Rule Context Preparation for Rule-Based Workflow (USMD_SSW_RULE_CONTEXT_PREPARE)This BAdI is implemented to prepare BRFplus rule context in a rule-based workflow. When you need to enhance decision tables with additional columns, data for such columns need to be passed to the BRFplus rule context. For example, you might need to enhance a single-value decision table with the material type as a condition column. To pass the material type selected in the change request data, method PREPARE_RULE_CONTEXT of this BAdI needs to be implemented.
                

Calling of System Method for Rule-Based Workflow (USMD_SSW_SYSTEM_METHOD_CALLER)This BAdI is used to implement the calling of a system method in a rule-based workflow.
                

Dynamic Selection of Agent in Rule-Based Workflow (USMD_SSW_DYNAMIC_AGENT_SELECT)Using this BAdI, agents can be dynamically determined. 
                

Handling of Parallel Results in Rule-Based Workflow (USMD_SSW_PARA_RESULT_HANDLER)The HANDLE_PARALLEL_RESULT method in this BAdI is used to implement the results of a parallel workflow merge in a rule-based workflow. 
                

Check User Agent/Nonuser Agent Table for Rule-Based Workflow (USMD_SSW_CHECK_AGENT_TABLE)This BAdI can be used to implement dynamic checks on user agent or nonuser agent decision tables.
                










5.6    Summary
This chapter provides the end-to-end modeling aspects of the change request process. The chapter started by introducing the individual building blocks involved in the process and explained how they connect with each other and translate into an end-to-end process. This chapter also provided various processes available for single records and multiple records in a change request, including design aspects of hierarchies.
With the foundation gained in the first half of this chapter, you learned about workflow process modeling capabilities from an overview of some of the standard workflow templates available for each master data domain. This chapter ended with a discussion of rule-based workflows and how to design a rule-based workflow using a simple process as an example. At the end of the chapter, a list of available BAdIs was also provided. In the next chapter, we will discuss about the data quality and search capabilities available in SAP MDG. We will also discuss the SAP MDG framework available for integrating with SAP and non-SAP applications.








6    Data Quality and SearchSAP MDG offers data quality and search options, as well as validation techniques, duplicate check capabilities, and data enrichment functionalities used commonly to maintain and continuously improve the quality of master data in an SAP MDG landscape.Poor master data quality creates many challenges for any organization irrespective of its size, business line, or geographic location. Many challenges due to poor master data quality are visible and measurable, whereas some challenges affect the growth and profitability indirectly. Quantifying the losses and impact of duplicate, inaccurate, and untrusted data may not be an easy task. No department or process remains insulated to the harm caused by poor master data quality. A common challenge includes reduced sales effectiveness due to a missing single version of truth, which in turn may cause situations where business transactions are compromised due to hidden facts. Due to the lack of transparency and duplicates existing in the systems, procurement made by procurement executives also may not be very effective and hence fail to give an advantageous edge while negotiating contracts with suppliers. Lack of real time collaboration with front office may have a visible impact on realizing the go-to-market strategies of the company. In addition, critical business decisions may go wrong if the data aren't reliable and consistent.Following are some of the common challenges that may arise due to poor master data quality:

            Risk of noncompliance to Sarbanes-Oxley Act (SOX), International Financial Reporting Standards (IFRS), Sunshine Act, and so on
        

            Lack of consistent consolidated information in real time
        

            Increased maintenance on master data, that is, rework in identification and correction
        

            Reduced transparency due to missing consolidated view across the company landscape
        

            Loss opportunity to potential benefits through better available facts that can be leveraged during negotiations with business partners
        

            Wrong deliveries to/from business partners due to incorrect master data
        

            Inaccurate reporting resulting in business decisions made on inconsistent data
        

            Increased inventory due to inconsistent or duplicate master data
        

            Production disruptions out of confusion and lack of transparency
        

            Wrong or missed payments to business partners
        
With SAP MDG, central governance, companies get the opportunity to be proactive and up-front in avoiding any inappropriate, invalid, or inconsistent data before that data becomes part of the active database and operationally available for business users, improving the overall accuracy and reliability of the master data. However, remember that master data management isn't a one-time endeavor but an ongoing journey where every opportunity should be leveraged to improve and sustain the quality of master data.Although the SAP MDG staging-active concept plays a crucial role in the ability to be proactive during master data governance, the robust capabilities around search and data quality functionalities are the real backbone of the SAP MDG solution. In this chapter, after discussing various search helps, match profiles, and search setups, various data quality functionalities in SAP MDG are explained for the key areas of duplicate check, business rules, and data enrichment needs.
6.1    Search Functionality
Search capabilities in the SAP MDG user interface (UI) are designed so that users can directly navigate to various business activities from the same screen. 
After an overview on search functionality, this section discusses various search help options and match profile configurations. In addition, the steps involved in the SAP HANA search setup and extensibility of the SAP HANA search in the SAP MDG context are explained.
6.1.1    Overview
As a master data governance best practice, you can initiate most of the business activities by first performing a search in SAP MDG and navigating directly to other business activities from the search screen itself. The business activities that can be performed from the same search screen are as follows:


                    Copy
                

                    Create
                

                    Display
                

                    Change/extend
                

                    Open details
                

                    Mark/unmark for deletion
                

                    Mass change
                

                    Block/unblock
                

To access the SAP MDG search screen, navigate through Transaction NWBC. After selecting a suitable assigned security role, go to the home page and click Search. Figure 6.1 shows a typical search screen for a governed master data object in SAP MDG. Here, you'll find the following fields:


Select search methodsIn the Search Method dropdown, select an appropriate search method to choose the search technology being used. Accuracy and response time may vary based on the search method.
                

Provide search criteriaIn the Search Criteria area, select and input the parameters for the search.
                    
Figure 6.1    Search Screen in the SAP MDG UI


Check result count A value for this attribute signifies the number of successful hits returned by the search method based on the search parameter provided. 
                

Review results Records that result from the successful search hit based on search criteria are displayed in this section, and you can further check the details by clicking the link for each result record. 


6.1.2    Search Help
In SAP MDG, search applications are based on different search providers, which can be deployed in a number of ways. Some commonly used search applications for SAP MDG include the following: 


Exact Search This search is also known as embedded search in SAP MDG, and it works based on a database query. No additional SAP or non-SAP software components are required for using Exact Search. Exact Search is configured in SAP MDG search applications as "DB."
                

SAP Enterprise Search  SAP Enterprise Search is based on TREX, and it uses fuzzy search capabilities. SAP Enterprise Search supports free-text and attribute-based search as well as the capability to search in other databases in the landscape. SAP Enterprise Search is configured with the name "ES" in SAP MDG search applications. 
                

Fuzzy search for address data Fuzzy search provides error-tolerant searches on address fields. Using this technique, the search will find matches even when users misspell words or enter only partial words for the search. 
                    This search is based on Business Address Services (BAS) and requires additional software components, for example, SAP Data Quality Management (SAP DQM). In SAP MDG, this search is configured with the search application name "AD." Refer to SAP Note 176559 for more information on using and implementing BAS. Figure 6.2 shows how a fuzzy search for address data works.
                

Remote client key search In remote client key search, you can search remotely in other SAP ERP systems in the landscape by referring to the keys maintained in SAP MDG key mapping. In search applications, this is configured as "RK." SAP HANA search supports remote client key search.
                    
Figure 6.2    Fuzzy Search for BAS


SAP HANA search  SAP HANA search is the latest and most powerful search. There are delivered SAP HANA search views that can be generated based on requirements. You can also easily extend SAP HANA search. SAP HANA search results are presented with a ranking inside search results using fuzzy search. In SAP MDG search applications, SAP HANA search is configured as "HA." Check SAP Notes 2281401 and 2302716 for implementing SAP HANA search.
                

The IMG activities and configurations related to SAP MDG Search and Duplicate Check are shown in Figure 6.3.

Figure 6.3    Seach and Duplicate Check IMG Activities in SAP MDG
Figure 6.4 shows some standard search applications that are used in SAP MDG. Based on their own requirements, companies may also define custom search applications.

Figure 6.4    Define Search Applications
Some of the search providers require the allocation of one or more search helps; for example, SAP HANA search requires the allocation of search views. Database search requires the allocation of search help through the Data Dictionary. Figure 6.5 shows the allocation of search help to search application HA.

Figure 6.5    Allocation of Search Help to Search Applications
You can configure data model and entity types that need to be considered by each search help as shown in Figure 6.6.

Figure 6.6    Allocation of Entities to Search Help
6.1.3    Match Profiles
Match profiles are used for duplicate checks in SAP MDG. In match profile configuration, you can specify attributes that should be taken into consideration while the system does a comparison with other database records. Although largely it's the same attributes that define a duplicate master data record, different companies may want to have personalized matching strategies and the flexibility to add or remove attributes that contribute to identifying a duplicate. Figure 6.7 shows some examples of match profiles.

Figure 6.7    Matching Profile
In each match profile, many relevant fields are taken into consideration during the duplicate check. Figure 6.8 shows an example of various parameters set for attributes assigned to a match profile, as follows:


WeightThis is assigned to an attribute to determine the importance attached to an attribute during the duplicate check and to prioritize the results being displayed to the user. 
                

FuzzinessThe threshold number may have a value ranging anywhere from 0 to 1, in which the higher the fuzziness threshold, the more the attribute values need to match the reference value to be found during search or duplicate check. 
                

MandatoryThis controls whether there should be a value existing for that field before a duplicate check is triggered.
                

Ex. Attr The exclude attribute means the respective attribute would not be taken into consideration while performing a duplicate check, but the field values are displayed to the users for their information.
                

Parameters are also used to refine the matching strategy to give accurate results. In addition, a sequence can be associated with each of the relevant attributes that signifies the order in which fields should be displayed to the user when the duplicate check pops up on the UI.

Figure 6.8    Matching Profile Relevant Fields
6.1.4    SAP HANA Search Setup 
SAP HANA search is one of the most powerful search technologies available today. It's known for its accuracy and high efficiency. If you have SAP MDG running on your SAP S/4HANA platform, you get out-of-the-box SAP HANA search capabilities, which are easily configurable without significant effort. SAP HANA search views are delivered for all governed objects in SAP MDG, and views can be generated based on the exact scope of the project. If SAP MDG isn't running on an SAP HANA platform, but you have SAP HANA licenses, you can optionally integrate SAP HANA on the side with SAP MDG and leverage its strong search capabilities during the governance process.
To trigger the Web Dynpro application through which the SAP HANA search views can be generated in SAP MDG, navigate to Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Quality Search • Search and Duplicate Check • Create Search View.
Following are the steps involved in generating the SAP HANA search views:


                    Click on Create Search View, and the MDG Search View window appears, as shown in Figure 6.9. Through this screen, you can perform various activities needed for generating SAP HANA search views. 
                    
Figure 6.9    SAP HANA Search View in SAP MDG


                    Select the respective search view for an entity, and click on Edit (pencil icon), as shown in Figure 6.10.
                    
Figure 6.10    Editing an SAP HANA Search View


                    Provide an SAP HANA package name in the Hana Package field. Select the Rule Set checkbox only if a ruleset has to be generated. Click Next as shown in Figure 6.11 to go to the next step for selection of entities and attributes.
                    
Figure 6.11    Maintaining the SAP HANA Package in General Data


                    Select the entities and attributes that should be part of the search view being generated, and then click Next, as shown in Figure 6.12.
                    
Figure 6.12    Selecting the Entities and Attributes in SAP HANA Search View


                    Click Save to save the search view changes in a workbench request. Select an existing workbench transport request using search help or create a new transport request using Transaction SE10. 
                

                    Click the Generate button, as shown in Figure 6.13. After the search view is generated successfully, you can search the properties of an attribute. 
                    
Figure 6.13    Reviewing and Generating the SAP HANA Search View


                    Go to Transaction SE80 in SAP MDG, and select the respective Web Dynpro components. Click on the Start Configurator button, as shown in Figure 6.14. 
                    
Figure 6.14    Configuration for the Web Dynpro Component through Transaction SE80


                    A new Web Dynpro screen opens in a new window. Click the Continue in Change Mode button shown in Figure 6.15. 
                    
Figure 6.15    Editor for the Web Dynpro ABAP Component Configuration


                    In the new window, select the searchUibbs, and populate the respective attributes of the element search user interface building block (UIBB), that is, Search Mode, Incl SearchHelp, Component, and Config ID. An example configuration for cost center groups is shown in Figure 6.16.
                    
Figure 6.16    Maintaining Attributes of the Element Search UIBBs 


                    After completing all these configurations, the search method will be visible in the search screen UI in SAP MDG. You can select the appropriate search method based on your preferences, as shown in Figure 6.17.
                    
Figure 6.17    Search Using SAP HANA Search in SAP MDG


6.1.5    SAP HANA Search Extensibility
Due to various business requirements, SAP HANA search may have to be extended to meet your business needs. Let's explore some scenarios where search extensions might become a requirement for your project, as follows:


Extending the data model with existing attributes from reuse tablesIn this case, the extended attributes are available by default for selection in step 2 of the SAP HANA search view generation, as shown in the example in Figure 6.18. If these attributes need to be included in the search view, then the flag can be set for the respective attribute. The remaining steps for the configurations remain unchanged as already explained for the SAP HANA search setup.
                    
Figure 6.18    Selecting Attributes during the SAP HANA Search View Generation


Extending the data model with custom attributes available in backend reuse tables In this scenario as well, without any complex developments, custom fields are by default automatically available for selection similar to that shown in Figure 6.18. If these attributes need to be included in the search view, then the flag can be set for the respective attribute. Remaining steps for SAP HANA search configurations are the same.
                

Extending the data model with a custom entity in reuse mode To make the new entity fields available for search view, the joins and field mappings configuration needs to be defined for reuse tables. Figure 6.19 shows the configuration screen for defining joins and field mappings for reuse tables. Accordingly, the new entity and its attributes are visible for selection in step 2 of the SAP HANA search view generation. The rest of the steps remain unchanged for this use case.
                    
Figure 6.19    Defining Joins and Field Mappings for Reuse Tables
                    Following is the IMG path for defining the joins and fields mappings for reuse tables: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Quality and Search • Search and Duplicate Check • Define Joins and Field Mapping for Reuse Tables.
                

Extending the data model with a custom entity in flex mode SAP HANA search supports flex entities at the main entity level only. Configuration as explained for the previous scenario needs to be performed for this scenario, and after selection of the flex entity and its attributes, the SAP HANA search view can be saved and generated. 
                

These fields can also be customized in the search attributes dropdown for which it has to be ensured that the new fields aren't disabled for search in IMG activities and UI field properties. The No Selection property should not have a flag set. To meet any requirements to add new fields in the search results, a new enhancement implementation for the UIBB must be created in Floorplan Manager. 









6.2    Duplicate Check
Every organization, irrespective of its size, location, business line, or industry sector, has to deal with the challenges of duplicate records in its IT landscape. These duplicates might be in the system knowingly or unknowingly. With focus on and awareness about the importance of good data quality, companies have done a lot of work in this area in recent years, and with the help of technology innovations, they are in a better position to deal with duplicates in their IT landscape. There are many reasons that duplicate records end up in any company's landscape:


Merger and acquisitions A merger or acquisition between companies can often be the reason behind most of the duplicate master data in the landscape. The new systems in the landscape potentially have similar master data records (e.g., vendors, customers, or business partner entities with whom both companies have been doing business). Normally, consolidation or data quality projects during or after the merger help to overcome such duplicates. However, due to various business and strategic reasons, companies do defer the projects needed for consolidating master data.
            

Search methods and technology An inaccurate, slow, or difficult-to-use search may also contribute to the reasons a business user may not be able to complete the due diligence before submitting a new request and, hence, end up creating a duplicate in the system.
            

Manual errors Several common contributors to duplicate master data are human error, lack of proper training, and ignorance or lack of awareness on the part of the business users working with master data.
            

Deliberate due to business reasons Some business partners use different addresses for their sister companies for performing some of business functions (e.g., delivery, collection, etc.), so separate vendors and suppliers are created in the system based on different addresses.
            

Different entities with some matching attributes In some cases, master data records have many attributes matching but are genuinely separate, independent entities with no relation that fall under the category of potential duplicates due to the defined matching strategies. A system's matching strategies should be intelligent enough to ignore such cases from the list of potential duplicates.
            

Two or more records existing in the database while representing the same entity are termed as duplicates. However, in daily life, it could be a complex job to differentiate between real duplicates and look alike, unrelated records. It's not practical and justified to rely completely on human decisions for 100% accuracy without any human error involved. In addition, for various reasons, it's impossible to lay down a set of business rules and logics that a system can use to determine duplicates with accuracy in all possible scenarios. The following sections describe duplicate check configurations in SAP MDG, as well as data quality remediation to handle duplicates.
6.2.1    Search and Duplicate Check
Considering the challenges explained earlier, it makes sense to use a hybrid approach with multiple human interventions while leveraging the system search and duplicate check capabilities. The SAP MDG search and data quality process is very robust and minimizes the probability of duplicates entering the system to almost a negligible amount. Following are the multiple-step approaches used in SAP MDG, central governance to handle duplicates more effectively and proactively.

Note
As a best practice before creating a new master data record, the requester should always perform a search in the database to determine whether the entity already exists in the database. Intuitive, accurate, and robust search capabilities in SAP MDG will help to ensure that the requester doesn't overlook existing records and submit change requests for potential duplicates.

By using search and duplicate check capabilities, the system identifies and presents the list of potential duplicates with respective scores based on defined attributes and threshold limits. While submitting the change request in SAP MDG, a requester may again get an opportunity to make a decision if the change request carries a potential duplicate. Figure 6.20 shows the SAP MDG UI when a potential duplicate is presented.

Figure 6.20    A Potential Duplicate Identified and Presented by SAP MDG
At this time, you have the option to trigger a cleansing case but only between the potential duplicates found and presented in the lower section of the Duplicate Check screen where a new governance path will help resolve the existing duplicates. For the new record being submitted, results of the cleansing case may end up merging the records, or the experts may reject the proposal of merging the duplicates if the look-alike records are later identified as different entities.
Figure 6.21 shows the screen you'll see after deciding to continue and ignoring the potential duplicate presented by the system.
Additionally, after the SAP MDG change request is submitted in the subsequent approval steps, approvers may also receive a list of potential duplicates from the system and can decide to continue, send the change request back, or trigger a cleansing case.
Note that for duplicate check purposes, the SAP MDG system uses the same search providers as were used for performing the search. Figure 6.22 shows some common search options used during the duplicate check. 

Figure 6.21    SAP MDG Screen Shown after Deciding to Continue Ignoring Possible Duplicate

Figure 6.22    Duplicate Check Configurations
As shown in Figure 6.23, in the Configure Duplicate Check for Entity Types Customizing activity based on the respective data models, a Search Mode is configured as well as the lower threshold (Low Thres) and upper threshold (High Thres) that should be applied. Low threshold signifies that records with a matching score less than the low threshold values won't be considered as duplicates, whereas records that have a matching score greater than the low threshold value will be considered as potential duplicates. Records with matching scores greater than or equal to the high thresholds are considered as identical and are still presented to you for subsequent follow-up actions.

Figure 6.23    Maintenance View of the Duplicate Check Mode of Data Model
Figure 6.24 displays a mandatory process modeling configuration required at each change request type step level. This is a prerequisite for triggering duplicate checks for a workflow step.

Figure 6.24    Duplicate Check Configuration for a Change Request Step
6.2.2    Data Quality Remediation
SAP MDG also offers the data quality remediation functionality to deal with existing duplicates. With data quality remediation, cleansing cases can be created and assigned to master data stewards or specialists from business teams who are authorized to make decisions and take action on duplicates. The subsequent actions could result in the creation of a golden record by merging the records and collecting information from various existing duplicates. Normally, the redundant records are marked for deletion and not used for any further business transactions.
A data quality tool should be installed in the system landscape to leverage this functionality. In addition, a data quality connector is required in the SAP MDG system, which consists of an ABAP class that implements the interface IF_MDG_DQR_DQ_SERVICE. 
Optionally, BAdI MDG_DQR_EVENT_HANDLER (Event Handling for Data Quality Remediation) can also be implemented based on your requirements. This BAdI helps in reacting to events of an external UI embedded into the Web Dynpro component MDG_DQR_DQS_UI. This BAdI comes into play only after a corresponding data quality remediation Web Dynpro configuration contains a UIBB with component MDG_DQR_DQS_UI. Filters on this BAdI can be applied based on the data quality service ID.
Following are some additional activities needed for data quality remediation in SAP MDG:


                    Execute the Define Data Quality Service Customizing activity.
                

                    Copy the Floorplan Manager configuration templates.
                

                    Select a package for the copied configurations. 
                

                    Configure the change request process for data quality remediation.
                










6.3    Business Rules
SAP MDG offers robust capabilities to deal with data quality challenges. It's important to prevent any bad data from entering the system, which can be achieved in SAP MDG in a number of ways, as depicted in Figure 6.25. 

Figure 6.25    Validations in SAP MDG
Business rules in SAP MDG are broadly categorized as inherited rules and custom rules. SAP MDG can reuse some of the SAP ERP validations, which are termed as inherited validations, for example, code lists, simple checks, and so on. There are also frameworks and BAdIs, called custom rules, delivered by SAP that can be very handy in meeting data quality requirements from your business. Various types of rules under these categories are explained in the following subsections.
6.3.1    Code Lists
SAP MDG has the built-in intelligence to check the value range tables and fixed sets of values that are assigned against the domain of the respective data element used for an attribute in SAP MDG. The existence check is performed on the values being maintained by the users in the SAP MDG UI. Regions, company codes, or payment terms are examples of code list validations in SAP MDG.
6.3.2    Simple Checks in SAP Master Data Governance
SAP MDG does reuse some of the core SAP ERP configurations, for example, country-based configurations for address checks. SAP MDG may enforce error, warning, or information messages when users don't adhere to the country-specific address configurations.
In addition, based on the data element properties format, checks are performed automatically in the SAP MDG UI when you're populating master data in the change request. These checks are inherited from the existing standard data elements. Data elements being used for an attribute can be checked in data modeling. You can navigate the properties of the data element via Transaction SE11. 
In Figure 6.26, data element USMDZ1_SIGN2 used in the financial statement item (FSI) object allows only "+", "-", and "*" values. In addition, this data type has a length of 1 character as defined in the Data Dictionary. This means during the governance process on the SAP MDG UI, users can't populate a value larger than the defined length and a value other than "+", "-", and "*", hence automatically enforcing adherence to data standards and formats without the need for any custom rules.

Figure 6.26    Data Element-Driven Simple Check for Allowed Values
6.3.3    Data Modeling-Based Checks
Making certain fields mandatory during master data maintenance is a common requirement in any landscape, and SAP MDG provides many options to meet that need. Required attributes in SAP MDG can be configured easily through data modeling, where without any coding, certain attributes can be configured as mandatory whenever a specific entity level check is triggered.
Figure 6.27 depicts how you can make an attribute in SAP MDG mandatory. After the attribute is configured as mandatory, it's highlighted with an "*" next to it, indicating to users what fields are mandatory for them. Note that any attributes configured as mandatory through data modeling will always be applicable for all workflow steps.
The existence checks shown in Figure 6.27 are editable, and based on the specific requirements, they can be checked or unchecked for respective attributes being governed in SAP MDG. Following is the IMG path where the settings can be checked in SAP MDG: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Modeling • Edit Data Model.

Figure 6.27    Existence Checks in SAP MDG
6.3.4    Business Rules Framework Plus-Based Checks and Validations
SAP has provided the BRFplus framework to build business rules easily with simple configurations and no coding. It's easy to use and simple to understand even for consultants and business users who have limited technical depth. 
Following are some salient features of the BRFplus rule engine:


                    BRFplus is part of the ABAP stack with seamless integration with ABAP-based applications.
                

                    BRFplus enables you to build flexible and customizable business applications with significantly less coding.
                

                    No additional hardware is involved to leverage the BRFplus rule engine.
                

                    No setup costs are involved. 
                

                    There is no separate license for BRFplus because it comes complimentary with general SAP licenses.
                

                    BRFplus can be extended easily by additional custom expressions or action types.
                

                    All modeled expressions, conditions, and decision tables can be tested in BRFplus using an integrated simulator.
                

                    Calling BRFplus from the other ABAP applications is easy with just few lines of code or a remote function call (RFC) web service.
                

Following is the IMG path for configuring business rules in SAP MDG using BRFplus: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Quality and Search • Define Validation and Derivation Rules. Alternatively, Transaction USMD_RULE can also be executed to trigger the Web Dynpro application for defining validation and derivation rules in BRFplus.
After triggering the Web Dynpro-based BRFplus application, an appropriate data model (e.g., financial, material master, business partner, etc.) has to be selected for which the rules have to be configured. Rules built in to BRFplus are specific to a data model. Each data model contains its own BRFplus validation rules. Each application contains a CHECK_ENTITY folder under which all the check-related functions can be built.
Figure 6.28 shows the navigation options through the Catalog view in BRFplus.

Figure 6.28    BRFplus Landing Page
Figure 6.29 shows the navigation options through the Repository view in BRFplus.

Figure 6.29    Repository View in BRFplus
Figure 6.30 shows various navigational options in BRFplus through the Workbench. You can navigate to search a BRFplus object or show objects in a repository. You can also create new applications through this navigational page.

Figure 6.30    BRFplus Workbench Options in SAP MDG
Figure 6.31 displays various tools available in BRFplus. Some of the commonly used tools are Application Administration, Trace, Simulation, and Web Service Generation. 

Figure 6.31    BRFplus Tools in SAP MDG
Figure 6.32 shows the BRFplus view when a new object needs to be searched for.

Figure 6.32    Searching for an Object in BRFplus
Figure 6.33 shows various functions created in application FMDM_MODEL_BP. You can create any number of functions to meet your business requirements. Each of the functions may have one or more rule sets assigned, which you can see by clicking on a function. Views are adjustable, so you can minimize or maximize them. Each object in BRFplus has a unique object ID.

Figure 6.33    Example of a Function: CHECK_BP_COMPNY (Signature Tab)

Note
For the check trigger function, the nodes of a catalog structure should always use the naming convention as CHECK_<Entity Type Name>. 

As shown in Figure 6.34, all rulesets should be in a green Status to be operationally usable during the SAP MDG process.
BRFplus applications consist of rulesets containing rules. Rules can be created using different components, such as decision tables, formulas, conditions, expressions, and so on.
These components are reusable in nature. In the example shown in Figure 6.35, there are two rulesets assigned to function CHECK_AD_POSTAL. You can click on the respective ruleset hyperlinks to drill down and navigate to the details of the rulesets created. 

Figure 6.34    Ruleset Assignment to a Function in BRFplus

Figure 6.35    Assigned Ruleset to the Function in BRFplus
The example implementation shown in Figure 6.36 displays a warning message to SAP MDG users whenever a postal code value isn't populated for change request types CUSTL1P2 and CUSTL2P1 to processors of workflow steps 00, DP, and CD. The message texts and type can be customized based on the business requirement.

Figure 6.36    Example of a Rule Built-in to BRFplus

Note
For the derivation trigger function, nodes of a catalog structure should always use naming the convention DERIVE_<Entity Type Name>. These functions only derive single entities and don't support cross-entity derivations in BRFplus. Cross-entity BAdIs might have to be implemented to achieve complex business requirements. 

Figure 6.37 provides an example of the Signature view as part of the derivation function.

Figure 6.37    Derivation Function Example in BRFplus
The example implementation in Figure 6.38 shows a derivation using a BRFplus rule. In this example based on the change request type ZVENDR01 in SAP MDG, the language code will be automatically derived to value E.

Figure 6.38    Example of a Derivation Rule in BRFplus
Figure 6.39 shows an example of data objects available in the SAP MDG BRFplus rule engine.

Figure 6.39    Data Objects in BRFplus
Every object in BRFplus has a unique object ID that can be navigated to via the General tab, as shown in Figure 6.40.

Figure 6.40    General Header Information about BRFplus Application Objects
6.3.5    Business Add-In-Based Validations
You may have data quality requirements that are company-specific, yet important to realize from the master data governance point of view. However, it's recommended to leverage BRFplus, data modeling, and other options to build validations. In some cases, though, you might need options to enhance the solution to make it suitable to your requirements. In addition, there are some limitations in BRFplus where certain complex data quality requirements are hard to achieve. An example is the cross-entity validations and derivations where cross-entity BAdIs are needed to meet the requirements.
SAP has delivered a number of BAdIs with SAP MDG that you can use to meet your data quality requirements during governance processes. The process steps to define validation rules using BAdI implementations are as follows:


                    Define the data quality rules.
                

                    Choose an appropriate data model.
                

                    Identify an appropriate entity type.
                

                    Implement a BAdI for the business rule
                

                    Define validation rules.
                

Figure 6.41 shows the IMG screens for various BAdIs that can be leveraged for meeting business requirements related to Data Quality and Search.

Figure 6.41    SAP MDG Data Quality and Search BAdIs
In the following subsections, we'll look at the BAdIs delivered by SAP for various purposes related to data quality and search in SAP MDG.
USMD_RULE_SERVICE: Define Validations/Derivations
This BAdI can be applied to entities, change requests, and editions. This BAdI is mainly used for implementing customer-specific checks. Following are the methods used in this BAdI while performing various checks and derivations:


CHECK_ENTITY


DERIVE_ENTITY


CHECK_CREQUEST_START


CHECK_CREQUEST


CHECK_CREQUEST_FINAL


CHECK_EDITION_START


CHECK_EDITION


USMD_RULE_SERVICE_CROSS_ET: Derivations across Entity Types
This BAdI is used for cross-entity derivation scenarios. Data can be changed if the key isn't modified for the associated leading entity with storage and usage type 1. For entity type 4, creation and deletion of data records is possible.
MDG_GW_FIORI_DERIVATIONS: Derivations and Default Values across Entity Types for SAP Fiori
Default values and derivations can be performed for the entity types, which are part of the data model. These values are used in SAP Fiori apps and OData Services. Following are the methods used by this BAdI:


LOAD_DATAThis method loads data for entity types.
                    

DERIVE_DATA_ON_SUBMITThis method derives data from submitted entity types.
                    

BAdI MDG_GW_FIORI_DERIVATIONS can be used in various OData Services as follows:


MDG_PROFITCENTER_SRV


MDG_COSTCENTER_SRV


MDG_CUSTOMER_SRV


MDG_MATERIAL_SRV


MDG_SUPPLIER_SRV


MDG_BP_SRV


BADI_SDQ_PP_SEARCH: Search for Data in Reuse Active Area 
This BAdI is used primarily in the data quality component and helps in searching for business object types that use a search object connector template for the reuse active area that is different from the SAP MDG search object connector template. When a search is executed from SAP MDG, the results are collected by default from the SAP MDG search object connector.
The following methods are used in this BAdI:


IF_USMD_SEARCH_DATA~EXECUTE: Allows the search for object instances to be executed using a separate search object connector template for the reuse active area.
                    

SEARCH_PP: Allows for the search of reuse active area.
                    

BADI_SDQ_PP_INITIAL_LOAD_ES: Used for initial extraction of data from reuse active area. Provides access to data in the reuse active area for search indexing. 
                    

This BAdI is used in the data quality component of SAP MDG when SAP MDG templates are used instead of creating a new search object connector template for the reuse active area. The template is called during the initial extraction of data for the enterprise search indexing so that the data from the reuse active area can also be loaded for indexing, along with the data from the staging area.
This BAdI has two filter parameters:


IV_DATA_MODEL


IV_ROOT_ENTITY


USMD_SEARCH: Search for Entities
This BAdI belongs to the Application Framework component of SAP MDG and can be used in modifying the Web Dynpro Search for Entities application (USMD_SEARCH).
Following are the methods used in BAdI USMD_SEARCH:


INITIALIZEDuring the initialization, you can change the attributes that are available for the search criteria. You can also add or remove search attributes based on the requirements.
                    

PROCESS_EVENTIn SAP MDG, actions can be defined for starting a navigation that is based on logical actions of the framework. These actions can be triggered using this method when registered pushbuttons of the search results table are used.
                    

USMD_REMOTE_WHERE_USED: Remote Where-Used List
This BAdI can be used for displaying a list of values from a remote system. Data model and entity type are the applicable filters for this BAdI. 
The GET_REMOTE_WHERE_USED_LIST method is used by this BAdI with the following import parameters:


IV_ENTITY_TYPESpecifies the entity type that needs to be searched.
                    

IT_ENTITY_SELContains the key values.
                    

IS_REMOTE_SYSTEMSets the remote destination (only one remote system at a time).
                    

IV_MAX_HITSets the maximum number of allowed search results.
                    

The following export parameters are also used:


ET_RESULTDisplays the search results, including business system name, key columns, and so on.
                    

ET_MESSAGEReports error messages.
                    










6.4    Data Enrichment
Data enrichment processes are used to enhance, refine, or otherwise improve the quality of raw data. This idea and similar concepts contribute to making master data a valuable asset for almost any business or enterprise. Although data enrichment can work in many different ways, data enrichment process tools are used with the goal of refining data regarding completeness, accuracy, standardization, verification, and so on. Some examples of data enrichment include spelling correction, auto population of missing attribute values, and address standardization with reference to postal services. Some of the commonly used data enrichment integration options are SAP DQM for address standardization, third-party integrations for data enrichment, and business partner screening using SAP Fraud Management. These integration options are discussed in the following sections.
6.4.1    Integration with SAP Data Quality Management for Address Standardization
Updated, accurate, and complete addresses of business partners, suppliers, and customers are crucial for the smooth operation of any organization. The efficiency of procurement and sales functions may very well get impacted if addresses for master data records in the system aren't reliable or are incorrect. Manual errors during master data maintenance or incomplete information received from the partners can also cause problems. Address formats in which the master data are maintained can also lead to some data quality issues. Sometimes the same word is found stored in different ways; for example, a street name in an address could be populated as "Avenue", "Ave.", "Av", or "Ave", which all mean the same thing. Therefore, it's important to follow some common standards to avoid data inconsistencies.
These addresses and data formats are important criteria during matching, identification, and standardization processes. If addresses aren't correctly maintained or are maintained in nonstandardized formats, then it may directly affect the deduplication efforts and data quality. 
Considering these challenges, SAP has delivered a specialized tool that helps business users during governance to standardize addresses and identify duplicates in real time. SAP Data Quality Management (SAP DQM) is installed as a component on SAP Data Services. You can easily activate and integrate SAP DQM with SAP MDG with some configuration and without any significant coding. 
Following are the SAP MDG steps involved during address standardization in SAP MDG, central governance: 


                    Maintain the address.
                

                    Check the address.
                

                    Validate the result list.
                

                    Perform user selection.
                

                    Correct the address.
                

SAP DQM has address directories and rules in its repositories that can be leveraged in real time to compare, standardize, and identify duplicates with reference to the address data populated in the UI by SAP MDG users. Based on this comparison, SAP DQM offers a valid list of addresses to SAP MDG users who can easily and quickly decide if they want to pick any of the standardized address records presented to them.
The following activities are involved in leveraging SAP DQM for address standardization and duplicate check during the governance process in SAP MDG. Some of these steps are performed outside SAP MDG, so you can refer to the SAP DQM operational guide for additional information.


                    Install the ABAP add-on in the system.
                

                    Setup the access server in SAP Data Services.
                

                    Install SAP DQM data services components. It's important that all the SAP DQM components be at the same service pack level.
                

                    Install the SAP DQM RFC server.
                

                    Define the RFC destinations in SAP MDG.
                

                    Define FL_GDQC_SERVER in Transaction SM59 in the target client, as shown in Figure 6.42.
                    
Figure 6.42    Maintaining RFC Destination FL_GDQC_SERVER for SAP DQM Integration


                    Define FL_GDQC_BATCH in Transaction SM59 of the target client as shown in Figure 6.43.
                    
Figure 6.43    Maintain the RFC Destination FL_GDQC_BATCH for SAP DQM Integration


                    Set up real-time and batch jobs.
                

                    Configure web services.
                

                    Follow these configuration steps to use duplicate check with SAP MDG:
                    

                            Set /FLDQ/namespace to modifiable.
                        

                            Maintain services for the SAP MDG generic duplicate check by following these steps:
                            

                                    Select the business partner data model.
                                

                                    Create a service agreement.
                                

                                    Configure fields for the duplicate check.
                                

                                    Define the match code fields.
                                



                            Configure SAP MDG to use SAP DQM for duplicate checking by following these steps:
                            

                                    Define the search applications.
                                

                                    Configure the duplicate check for entity type.
                                

                                    Configure the standardization and duplicate check for change request step.
                                





It's a prerequisite to define the search applications and match profiles to make the duplicate check work for SAP MDG users. Following is the IMG path for defining the search applications and duplicate checks for entity type: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Quality Search • Search and Duplicate Check.
A change request type being used during the governance process won't trigger a duplicate check unless it's made relevant for duplicate check and address standardization. Following is the IMG path for defining the search applications and duplicate checks for steps of the change request type: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Process Modeling • Change Requests • Configure Properties of Change Request Step.
In addition, Figure 6.44 depicts the configurations needed at the change request step level in process modeling.

Figure 6.44    Address Enrichment and Duplicate Check Configuration for the Change Request Step
6.4.2    Integration with Third-Party Data Enrichment Tools
Companies are increasingly becoming more aware of the advantages and disadvantages of master data quality. As discussed in Chapter 3, the master data record consists of a number of entities and attributes that holds information from various aspects of the business, such as address, tax, organization, characteristics, and so on. Because all this information is stored in the form of various attribute values in the master data, it becomes very important to make sure values stored in the database are complete, accurate, unique, and validated. 
For this purpose, to leverage the specialized tools and applications in improving the quality of master data, SAP MDG, central governance can be integrated with any number of SAP or non-SAP applications synchronously or asynchronously, such as SAP Global Trade Services (SAP GTS), postal services, Dun & Bradstreet (D&B), and so on. Such service calls can be made by users manually or triggered automatically. In addition, background jobs can be used to fetch any such information from external applications. 
SAP MDG provides an enrichment framework that is used for enriching master data during the maintenance and governance process. This framework in SAP MDG is based on ABAP object-oriented programming (OO) and Web Dynpro. Depending on the exact requirements, additional development efforts and skills might be required to use the enrichment framework efficiently for improving data quality.
Figure 6.45 shows the data enrichment framework in SAP MDG.
A number of objects are part of the SAP MDG enrichment framework: enrichment spots, enrichment adapters, enrichment feeders, and enrichment UI, as described here:


Enrichment feeder  Enrichment feeder is an implementation of the interface IF_USMD_ENRICHMENT_FEEDER for a given enrichment. This is primarily used for data transformation from SAP MDG format to the format of the enrichment adapter and vice versa. Data transformation refers to data mapping and structure mapping.
                

Enrichment UI  During the enrichment process, the enrichment can have its own UIs, which are displayed when a user interaction is required. The UI should only be a Web Dynpro ABAP component and should implement Web Dynpro interface MDG_ENRICHMENT_INTF. 
                    
Figure 6.45    Data Enrichment Framework in SAP MDG


Enrichment adapters Enrichment adapters are an implementation of the interface IF_USMD_ENRICHMENT_ADAPTER for a particular enrichment. This enrichment adapter makes a call to the external tools/applications/services to get the necessary data needed for enrichment. A good example of an enrichment adapter is the address enrichment adapter call made to SAP Data Services where it sends the address entered by the SAP MDG requester on the UI and gets the address data enriched. Some commonly used enrichment adapters are delivered by SAP, but you can always create your own based on specific requirement. Figure 6.46 shows some of the SAP-delivered enrichment adapters in SAP MDG.
                    
Figure 6.46    SAP-Delivered Enrichment Adapters in SAP MDG


Enrichment spots  Enrichment spots are used for defining the placeholder where enrichment of certain data in SAP MDG is possible. For example, the address enrichment spot supports the enrichment of addresses for business partners, suppliers, and customers. Figure 6.47 shows some of the SAP-delivered enrichment spots in SAP MDG.
                    
Figure 6.47    SAP-Delivered Enrichment Spots in SAP MDG


6.4.3    Business Partner Screening in SAP Fraud Management
SAP MDG can be optionally integrated with SAP Fraud Management for the purpose of business partner screening. SAP Fraud Management 1.1 SP 07 or higher should be installed to enable the integration between SAP Fraud Management and SAP MDG. SAP Fraud Management and SAP MDG, central governance can be hosted separately or be co-deployed. Business partner screening using SAP Fraud Management can be performed in real time during the SAP MDG, central governance process. Business partner screening can be performed only for business partners that have a maintained address.
The business partner screening system uses information in the screening request to determine the detection strategy and the screening list to use. Based on the detection strategy results, the screening system returns the alert and hit information to SAP MDG. After the alert and hit information is received, the respective SAP MDG processor makes a decision regarding whether any of the hits are accepted and valid. Based on this decision by the SAP MDG processor, the alerts are closed in the business partner screening system with the status Confirmed or False Alarm. Note that business partner screening can't be successfully performed if only names are provided, and addresses are unavailable.
Service users should be specified in the definition of the RFC destination. Users of the address screening feature should also be assigned the SAP_BPCM_SYS_COM role in SAP Fraud Management. To leverage the business partner screening functionality, an ABAP RFC connection has to be set up using Transaction SM59.
ACCESS_GROUP is the authorization check for fraud alerts, which is supported for SAP MDG business partner screening. If an SAP MDG change request specifies a value for ACCESS_GROUP, then this value is attached to any alerts generated by the change request. Any subsequent calls from SAP MDG to change the status of the alert are checked against this value.
To use SAP Fraud Management-based business partner screening in SAP MDG, make sure enrichment spot ADDRESS_SCREENING is configured using the following IMG path: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Data Quality and Search • Validations and Enrichment • Define Enrichment Spots.
Figure 6.48 shows the enrichment spot configuration needed for business partner screening in SAP MDG.

Figure 6.48    Enrichment Spot for Business Partner Screening in SAP MDG
Following is the IMG path for activating the business partner screening in SAP MDG process modeling: Transaction MDGIMG • Master Data Governance, Central Governance • General Settings • Process Modeling • Change Requests • Configure properties of Change Request Step. 
Figure 6.49 shows the business partner screening relevant configuration of the SAP MDG process modeling.

Figure 6.49    Configuring Address Screening in SAP MDG, Central Governance









6.5    Summary 
This chapter gave an overview of data quality and search functionalities in an SAP MDG project. It explained various options available in the framework, which can be used for improving and maintaining the quality of master data in SAP MDG. Detailed instructions were also provided to help you when making design decisions and configuring data quality rules using various techniques for different scenarios. Integration components and options between SAP MDG and other SAP/non-SAP applications and data enrichment tools were also discussed. Additionally, duplicate checks and data quality remediation functionalities were explained in detail. In the next chapter, you will learn about data replication capabilities of SAP MDG and the options available to distribute master data from SAP MDG to various SAP and non-SAP applications.








7    Data Replication FrameworkThe data replication framework is used to replicate master data, distribute it to all systems in the enterprise, monitor and trace data replication, and invoke key mapping and value mapping.In a centralized master data system, it's important to have a robust replication framework to replicate master data to various target systems that consume master data. The data replication framework provides this functionality and solves the key challenges such as standardizing master data across the enterprise, distributing data to all systems in the enterprise, easily monitoring and tracing data replication, distributing target system-specific data, and invoking key mapping and value mapping. This framework caters to design time, runtime, and monitoring requirements to replicate master data objects from SAP MDG to SAP systems and non-SAP systems.Day-to-day business operations of companies are executed on enterprise system landscapes. SAP ERP and SAP S/4HANA are used by top enterprises of the world to run their business processes such as order to cash, procure to pay, record to report, and so on. These enterprise systems consume master data to execute the business processes. For example, order to cash requires customer master data to create sales orders or invoices. Hence, master data forms a critical component of every business process.As master data are shared across all the enterprise systems, it makes more sense to maintain, consolidate, and govern master data in a centralized system with an SAP Master Data Governance (SAP MDG) solution and replicate the master data from SAP MDG to various target system systems in the enterprise. Standardizing master data across the enterprise ensures transactional data integrity.The data replication framework is a solution framework that enables replication of governed master data across the enterprise. SAP provides most of the design-time objects out of the box. Design-time objects such as an outbound implementation class needs to be developed/configured only for custom objects using standard templates.Figure 7.1 shows the various components of the data replication framework. The top part of the diagram shows the different ways you can interact with the data replication framework. You'll primarily interact with the data replication framework for replicating business objects or monitoring the replication that has been triggered already. The middle part of the diagram shows various building blocks of the SAP MDG data replication framework and how they are grouped. Each component in the group interacts with other components of the group to enable replication of active master data from SAP MDG to its target systems.
Figure 7.1    Logical Representation of the Data Replication FrameworkThis chapter is divided into following sections:

Section 7.1 describes the basic architecture of the data replication framework by explaining the data replication framework building blocks and configuration objects.
        

Section 7.2 provides an overview of available replication objects for the material master.
        

Section 7.3 provides a list of out-of-the-box objects provided by SAP to enable replication of suppliers, customers, and business partners.
        

Section 7.4 provides a list out-of-the-box replication objects for finance master data replication.
        

Section 7.5 provides options for replicating master from SAP MDG to non-SAP target systems.
        

Section 7.6 introduces you to the available options in SAP MDG to monitor the replication, as well as various other tools that are helpful during day-to-day operations. 
        

7.1    Building Blocks and Configuration Objects
Each of the various building blocks of the data replication framework is an independent component, but all the building blocks interact with each other to enable replication of active master data from SAP MDG to the target system. Along with the building blocks, we'll discuss various configuration objects of the data replication framework. The configuration objects are used to influence data replication. Finally, we'll look at some steps you can take to enhance the default settings for outbound implementations.
7.1.1    Building Blocks
One of the prerequisites to understanding the data replication framework is to understand the functionality of its various building blocks. This subsection explains each of the building blocks in detail and describes the configuration settings of each building block, which you can use to characterize the building block or influence its behavior.
Business Objects
Business objects are used to represent real-world business entities in the data replication framework. Business objects can represent a business document (e.g., purchase order), a business partner (e.g., suppler or customer) or a controlling object (e.g., cost center or profit center). SAP MDG entities assigned to business objects are replicated together. 
IMG path Master Data Governance, Central Governance • Data Modeling • Define Entity Type to Be Used by Business Object Type is used to define new business object type codes for business objects. 
A business object should be assigned to an SAP MDG entity type. This assignment is used during runtime to decide what entity type data needs to be replicated for a business object. Figure 7.2 shows the configuration activity used for assigning an SAP MDG entity type to a business object.

Figure 7.2    IMG Activity Showing an Entity type Assigned to a Business Object
Common examples of business objects are suppliers, customers, or logical objects such as cost center and profit center. In the SAP MDG context, the business object represents either a type 1 or type 4 entity. You can assign the same entity to multiple business objects.
Filter Objects and Filters
In the real world, the SAP MDG hub needs to replicate master data to multiple target systems. The SAP MDG hub should be able to apply target system-specific filters to replicate relevant data.
A filter object is used to determine which data can be selected and transferred to the target system. When assigned to a business object, the filter object is used to check the relevance of the data to be replicated to the target system both during initial (or full) replication as well as delta replication. In this case, the filter criteria can be configured among any fields of the associated table using simple filters. Filter objects assigned to type 4 entities are called segment filters.

Note
Filter object F_MAT1 represents the plant segment of a material. This filter object directly relates to SAP ERP table MARC. In order to populate the filter values from table MARC, the table is assigned to the filter object directly. Figure 7.3 shows filter object F_MAT1 and its association with table MARC.

Figure 7.3    Associating Filter Objects to SAP ERP Tables

IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Filter Objects is used to define new filter objects and, if applicable, assign an SAP ERP table to the filter object.

Note
Another kind of filter object, F_GLACCASS (see Figure 7.3), isn't associated with any SAP ERP table. For this kind of filter object, either complex filters or implicit filters should be used to determine which business object should be selected for the replication.

Figure 7.4 shows the relationship between a business object and filter objects.
Filters are assigned to filter objects. Filters are used to determine the selection criteria for choosing which business object instance is relevant for replication. It's mandatory to assign at least one filter to the filter object, but you can assign multiple filters if you like.

Figure 7.4    Relationship among Business Object, Filter Object, and Filters
Figure 7.5 depicts the hierarchically different kinds of filters. 

Figure 7.5    Different Kind of Filters
The different kinds of filters are as follows:


Explicit filters  With explicit filters, you can specifically mention filter values for the filter parameters. Explicit filters are further divided into the following: 
                        

                                Simple explicit filters: This filter directly refers to the table assigned to the filter object. The filter parameters for this filter are derived from the structure assigned to the filter. The fields of the structure must be present in the table assigned to the filter object. The SAP-delivered simple explicit filters can be extended using the append structure concept. The extended fields must be part of the table assigned to the filter object. Figure 7.6 depicts the simple explicit filter. F_MAT1 is the simple explicit filter assigned directly to the table MARC in SAP ERP. The fields of the filter structure look similar to table MARC fields.
                                
Figure 7.6    Simple Explicit Filter


                                Complex filters: Complex filters are defined for the filter objects that aren't assigned to the SAP ERP table. The filter parameters of the complex filter are determined by the structure assigned to the filter. The filter class evaluates the filter values and does the actual filtering. The filter class implements ABAP object interface IF_DRF_FILTER. Extensions of this kind of filter are complex. The values for the filter parameter can be changed at any time. A filter class is assigned to evaluate the filter values and perform object filtering. The parameter structure determines which filter parameters are available in Transaction DRFF. Figure 7.7 shows an example of a complex filter configured in the system.
                                
Figure 7.7    Explicit Complex Filter 




Implicit filter and implicit checks  Implicit filters and implicit checks are fixed-implemented within each outbound implementation. You can activate such filters and checks in the Customizing for each outbound implementation, so that the system executes the relevant filter. Implicit filters are designed to be reused in other outbound implementations, if required, whereas implicit checks aren't intended for this purpose.
                    

IMG path DRF IMG • Data Replication • Enhance Default Settings For Outbound Implementations • Define Filter Objects-Assign Filters is used to assign filters to filter objects.
Outbound Implementations
The outbound implementation defines how the replication of business object is executed. Outbound implementation defines the communication channel (Application Link Enabling [ALE], remote function call [RFC], web services) of the business object's replication and outbound implementation class.
The communication channel denotes the means of transmitting data to target systems of the SAP MDG system. The available communication channels are as follows:


                        Replication via web services
                    

                        Replication via IDoc
                    

                        Replication via file
                    

                        Replication via RFC
                    

The outbound implementation is assigned to the business object directly or indirectly. When the business object is assigned indirectly to an outbound implementation that has web services as the communication channel, the business object is assigned to the service operation, and the service operation is assigned to the outbound implementation. For all other outbound implementations, the business object is assigned directly to the outbound implementation. The outbound implementation class is an ABAP class implementing interface IF_DRF_OUTBOUND. Outbound parameters are also assigned to outbound implementations.
Following are the functions of an outbound implementation class:


                        Read the runtime parameters from the outbound controller, and save the parameters in the runtime memory of the outbound implementation class. These parameters are consumed as required during the execution of the outbound implementation class. The outbound implementation class can also decide to excuse itself from further processing by changing the runtime parameters.
                    

                        Enrich the filter criteria irrespective of the Customizing settings. Filter criteria defined in the configuration can be enriched based on runtime data values.
                    

                        Read the complete data of the relevant objects (after filters are applied, and change analysis is performed) for replication.
                    

                        Perform change analysis for direct replication and ad hoc replications.
                    

                        Map the replication data from the SAP MDG format to the replication format.
                    

                        Hold the code line to initiate/trigger the replication based on the communication channel of the outbound implementation.
                    

                        Perform post-replication steps such as identifying success and error messages, updating the data replication framework log, and so on.
                    

Outbound Parameters
Outbound parameters are assigned to outbound implementations. They add more context and conditions to the outbound replication. Following is the list of standard parameters provided out of the box by SAP:


Package Size for Bulk Messages This parameter tells the outbound implementation how many messages (one message corresponds to one instance of a business object) are to be packaged into one package. Use this parameter wisely to optimize the performance of the replication. The value for this parameter is any numeric value.
                    

Send Delta Information Only This parameter is used to tell the outbound implementation to replicate only delta changes to the target system. The values for this parameter are Y (yes, send delta information only) and N (no, don't send the delta information). 
                    

Size of Parallel Task Delta Analysis This parameter is only applicable when manual data replication is initiated by a user and the user has selected parallel processing. This parameter performs change pointer analysis on the filtered objects in a parallel task.
                    

Business System
A business system in the context of the data replication framework is used to represent the physical system in an enterprise landscape to which master data are replicated. A business system can represent both the local system and target system. Business systems for local systems and target systems are defined in the System Landscape Directory (SLD). If the SLD isn't available, then BAdI MDG_IDM_GET_LCL_SYSTEM is defined to determine the local system.
Replication Models
Replication models define what data (through outbound implementation) are sent to which system (through the business system) under what conditions (through outbound parameters). Replication models can be activated and deactivated at will.
Key Mapping
Today's enterprise landscapes are highly distributed. The immediate implication of these kinds of landscapes is that a business process is executed across enterprise systems. 

Note
The vendor life cycle is a very good example of executing a business process across systems. The vendor life cycle involves identifying, onboarding, maintaining, transacting with, and terminating a vendor. In most enterprises, this process is executed across multiple systems. For example, identifying a vendor is done on business network systems such as SAP Ariba. Onboarding and maintenance of vendors is done on a governance system such as SAP MDG. Transacting with vendors occurs on SAP ERP systems such as SAP ERP or SAP S4/HANA.

In these kinds of scenarios, due to system limitations or business constraints, it's not possible to maintain same vendor IDs across all the systems. Therefore, you need a repository that keeps track of vendor IDs used by different systems. The solution for this problem is the SAP key mapping framework.

Note
A business object can be identified by different object identifiers in different systems that aren't harmonized. The key mapping framework provides an aid to store the relationship of different object identifiers of the same business object across different systems.

Figure 7.8 describes key mapping using a cost center as an example. The figure shows how the system maps key values of the cost center in different systems against the key value of the cost center in the SAP MDG hub.

Figure 7.8    Logical Representation of Key Mapping Concept
The key mapping framework is invoked by the outbound implementation using the various key mapping APIs.
The data replication framework automatically doesn't trigger the key mapping. Key mapping consumers such as the outbound implementation class (in case of outbound) or proxy class (in case of inbound) are responsible for invoking the key mapping API to convert the key to a value known to the target system.
The following are the tools provided by the key mapping framework:


Adjust key mapping after client copy A client copy is performed to copy production data to test systems or in order to create a new client out of an existing client. When the client copy is done, key mapping tables are copied as they are. The key mapping tables after the client copy need to be adjusted to reflect the new business system ID for the SAP MDG hub and target systems. Adjusting key mapping to reflect the new business system IDs is done using program RMDG_ADJUST_KEY_MAPPING. This program can also be called using the Transaction MDG_ADJUST_IDM. Figure 7.9 shows the selection screen of the program. 
                        
Figure 7.9    Selection Screen of Program RMDG_ADJUST_KEY_MAPPING
Table 7.1 describes some of the options on the program RMDG_ADJUST_MAPPING selection screen.
                        


Selection Element
Description




Object Type
Select the business object type from the dropdown list.


Old Business System 
Select the business system ID of the old system, which needs to be replaced for the selected business object.


New Business System
Select the business system ID of the new business system, which replaces the old system business object.


Local Registry
Select this radio button to replace the old business system ID with the new business system ID in the local registry for the selected business object type.


Central Registry
If Central Registry is selected, then the same registry might be used by the original client and the new client. Therefore, to cater to both new and old clients, all the selected key mapping entries for the business object are copied first, and then the old business system ID is replaced with the new business system ID in the copied entries.



Table 7.1    Selection Screen Elements of Report RMDG_ADJUST_KEY_MAPPING


Manual maintenance of key mapping Key mapping is usually updated automatically by the response message from the target system, and the response message will have the key of the business object in the target system. Sometimes it's required to maintain the key mapping manually for an object using SAP-delivered Web Dynpro UI MDG_BS_WD_ID_MATCH_SERVIC. This UI can be also called using the Transaction MDG_KM_MAINTAIN. Figure 7.10 depicts the web application to maintain the key mapping manually. Ideally, all SAP-delivered SAP Business Client roles have this UI added to the menu path. To maintain the key mapping UI, you should know the full details.
                        
Figure 7.10    Different Ways to Open the Manual Maintenance of Key Mapping UI
Table 7.2 explains each screen element of the web application.
                        


Screen Element
Description




Business Object Type
This business object value


Business System
The business system ID for which the key mapping entries should be maintained


Object ID Type
The object ID type for the business object


Object ID
The ID value of the object ID type



Table 7.2    Key Mapping Manual Maintenance UI Screen Options


Search key mapping By allowing the use of wild cards, this UI is provided to search for the key mapping when you're not sure about the ID value. SAP provides two interfaces for this: a Web Dynpro UI (MDG_BS_WD_ANALYSE_IDM) and an SAP GUI-based UI, which can be accessed via Transaction MDG_ANALYSE_IDM. Figure 7.11 shows the SAP GUI application and web applications used for searching key mapping.
                        
Figure 7.11    Searching Key Mappings


Value Mapping
Value mapping is a way to handle the conversion of values during replication from a source system-specific value to a target system-specific value. Value mapping is maintained based on a global data type or data element. Value mapping for services-based replication is based on the fact that service-based replication can send the list ID and list agency ID as part of the message. These details are in turn used by the consuming system to convert the values. ALE doesn't have this ability automatically. In this case, the SAP MDG system should perform the value mapping in the outbound implementation class before triggering the actual message.
Value mapping can also be maintained as centralized code lists, which can be accessed by every system in the landscape.
Outbound Controller
The outbound controller is responsible for triggering the outbound replication. The outbound controller is technically represented by class CL_DRF_OUTBOUND, which is instantiated during runtime by the calling application (workflow by calling activation step, manual replication, or ad hoc replication). 
Replication Modes
The following sections describe the different replication modes available in the SAP MDG data replication framework.
Direct or Automatic Replication
Direct or automatic replication takes place after a change request is activated. If a change request isn't edition dependent, replication is triggered after activation by default. For change requests that are edition dependent, automatic replication will depend on the settings of the corresponding edition type. Figure 7.12 shows the logical flow of direct replication until the triggering of the data replication framework outbound controller.

Figure 7.12    Logical Flow of Automatic Replication
Ad Hoc Replication
Ad hoc replication is used when mass replication is required. For example, when a new target system is configured, ad hoc replication is used to replicate all the data to this new system. The process of triggering the replication happens in the background. The ad hoc application for replication is DRF_AD_HOC_REPLICATION. Figure 7.13 shows the technical steps triggered by the ad hoc replication application to determine the relevant objects for replication and the corresponding target systems.

Figure 7.13    Logical Flow of Ad Hoc Replication
Manual Replication
Manual replication is triggered by the user based on object selection. For example, if replication of a business object fails, a master data steward can use this functionality to re-replicate the objects. Manual replication can be done in two ways, as follows:


                            Using Transaction DRFOUT in the SAP GUI
                        

                            Using SAP Business Client (NWBC) to replicate business objects based on the object key
                        

Figure 7.14 shows Transaction DRFOUT in the SAP GUI. This report is used to create one or multiple outbound messages based on the selection criteria. One major difference between ad hoc replication and Transaction DRFOUT is that when executing Transaction DRFOUT, you can maintain the manual filter criteria. This criteria overwrites the filter criteria maintained in Transaction DRFF.

Figure 7.14    SAP GUI Application to Execute the Replication Manually
Table 7.3 describes some of the selection screen fields of Transaction DRFOUT.




                                    Field
                                

                                    Description
                                





Replication Model


                                    Enter the replication model. This field is mandatory.
                                



Outbound Implementation


                                    Enter the outbound implementation.
                                



Replication Mode


Initialization: The system processes all data of the selected outbound implementations that are required for a replication model.
Changes: The program analyzes all data that was changed since the last change run or since the last initialization.
Manual: The program analyzes all data that was changed since the last change run or since the last initialization.
                                



Parallel Processing


                                    Activate the parallel processing for the outbound data replication. 
                                



Table 7.3    Fields of Transaction DRFOUT in the SAP GUI
7.1.2    Configuration Objects
In this section, we'll go into details about various configuration objects that are available as part of the data replication framework.
Define Custom Settings for Data Replication
This configuration node groups the list of configuration activities that you need to perform to enable data replication of the business object to the target system.
Use IMG path DRF IMG • Data Replication • Define Custom Settings for Data Replication for viewing configuration activities required to perform for setting up of data replication, as shown in Figure 7.15.

Figure 7.15    IMG Activity to Define Custom Settings for Data Replication
This Define Technical Settings for Business Systems IMG activity is used to define the business systems from either the SLD or locally defined logical systems (Figure 7.16).

Figure 7.16    Defining Business Systems
IMG path DRF IMG • Data Replication Define Custom Settings for Data Replication • Define Technical Settings • Define Technical Settings for Business Systems is used to define the business system and business system settings.
Table 7.4 describes some of the configuration fields of the IMG activity used for defining the business system. 




                                Configuration Field
                            

                                Description
                            





Business System 


                                Business systems represent a physical or logical enterprise system that needs to be connected to the SAP MDG system either for inbound or outbound replication. Business systems are added in SLD. If SLD isn't available, they can be created locally.
                            



Logical System


                                Logical system is used when the communication channel is ALE/IDoc. This logical system name is passed on to the IDoc framework to determine the partner profile and generate IDocs for further processing.
                            



RFC Destination


                                This destination is used when the communication channel between the SAP MDG system and target business system is through RFC. This RFC destination must be created in Transaction SM59 before entering in this IMG activity.
                            



Logical File Path


                                This value is used when the communication channel is replication via file. This value is passed to the outbound implementation during runtime, and the outbound implementation stores the formatted file in this location. The logical file properties must be configured in Transaction FILE in the SAP GUI before entering in this IMG activity.
                            



Unicode


                                This indicates whether the system accepts Unicode.
                            



Disabled for Replication


                                This option enables user to disable all kinds of replication to the business system. The replication won't happen even though the corresponding replication model is active.
                            



Table 7.4    Configuration Fields for Defining a Business System
Replication Models
A replication model is a configuration object used for defining required settings for replicating master data to target systems. The replication model is used to define which business object data are replicated to which business system. An active replication model is a prerequisite for successful replication of master data to the target system. Figure 7.17 shows various settings that can be defined for a replication model.

Figure 7.17    Overview of Various IMG Activities to Define a Replication Model 
Replication models are used to perform the following actions:


                        Define what data should be considered as relevant for a target system.
                    

                        Define the target system.
                    

                        Define the values for outbound parameters.
                    

Replication models can be activated and deactivated. You can trigger ad hoc replication based on the replication model. The filter values for simple explicit and complex explicit filters are maintained at the replication model level in Transaction DRFF. 
The following sections explain in detail various configuration fields used for defining settings for the replication model and assigning the outbound implementation to the replication model.
Define Replication Model
This section introduces configuration fields that can be used to create a new replication model. Figure 7.18 is shows configuration for a replication model.

Figure 7.18    IMG Activity to Define a Replication Model
IMG path DRF IMG • Data Replication • Define Custom Settings for Data Replication • Define Replication Models is used for defining replication models.
Table 7.5 lists the configuration fields for defining a replication model.




                                    Configuration Field
                                

                                    Description
                                





Replication Model


                                    No standard content for this activity is delivered by SAP. No namespace limitations apply here. A replication model can be created per the target system or per the business object. Configuring the filters per business object limits your ability to maintain the filters per the target system. You're free to model the replication model per your specific requirements.
                                



Description


                                    Provide a description for the replication model. Maintain translations for this description to cater to multilingual users.
                                



Log Days


                                    The data replication framework stores all the messages issued during replication as an application log (Transaction SLG1) under application log object FMDM. The value indicates the expiration duration of the application log for the replication log.
                                



Data Model


                                    Assign a replication model to a data model. 
                                



Active


                                    This field is disabled for user input. The value for this field can be changed using the Activate and Deactivate buttons.
                                    Activate: A consistency check for the replication model is triggered. If the replication model passes the consistency check, then the replication model is activated; otherwise, errors related to the replication model activation are displayed. You can maintain filters only for active data models.Deactivate: The replication model is deactivated, and no business objects associated with the outbound implementations assigned to the replication model can be replicated to the corresponding target systems.




Table 7.5    Configuration Fields for the Define Replication Model Configuration Activity
Assign Outbound Implementation
At least one outbound implementation should be assigned to a replication model. The sequence of outbound implementation must also be maintained. Figure 7.19 shows the IMG activity for this assignment.

Figure 7.19    IMG Activity to Assign an Outbound Implementation to Replication Models
IMG path DRF IMG • Data Replication • Define Custom Settings for Data Replication • Define Replication Models • Assign Outbound Implementation is used to assign an outbound implementation to a replication model.
Table 7.6 explains the configuration fields used for making the assignment.




                                    Configuration Field
                                

                                    Description
                                





Outbound Implementation


                                    Assign the outbound implementation to the replication model. By performing this activity, you implicitly provide the following details to the data replication framework:
                                    What business object is to be replicated?Which primary filters and segment filters are invoked?What is the communication channel for the replication of the business object to the target data?What is the outbound implementation class?




Description


                                    This is a display only field that stores the description of the outbound implementation defined during its creation.
                                



Sequence


                                    This field accepts absolute numeric values. When more than one outbound implementation is assigned to a replication model, sometimes it's required to sequence the outbound implementations. This is true especially when you have separate business objects (and thereby separate outbound implementations) for the main entity (type 1) and a dependent entity (type 4 entity). In this case, the outbound implementation related to the main entity is triggered first, and then the outbound implementation related to the dependent entity is triggered. For example, SAP General Ledger (G/L) account basic and G/L account company code data are represented by two business objects and respective outbound implementations. When replicating these objects to target systems, it makes sense to replicate G/L account basic data first and company code data next.
                                



Communication Channel


                                    This is a display only field. The value for this field is derived based on the outbound implementation. This field indicates what mechanism is used to replicate the business object data to the target system. The available communication channels are Replication via IDoc, Replication via services, Replication via file, and Replication via RFC.
                                



Filter Time


                                    This field is used to configure whether the filter should be applied after change analysis or before change analysis. This applies only if the current replication is a change message, and delta replication is switched on.
                                



Table 7.6    Configuration Fields for the Assign Outbound Implementation Model to Replication Mode Configuration Activity
Your next step is to assign the target system for the replication model/outbound implementation, as shown in Figure 7.20.

Figure 7.20    IMG Activity Depicting How to Assign a Target System to a Replication Model
IMG path DRF IMG • Data Replication • Define Custom Settings for Data Replication • Define Replication Models • Assign Outbound Implementation • Assign Target Systems for Repl. Model/Outb.Impl is used for assigning target systems to outbound implementations.
The only new relevant configuration field is Business System, the target system that receives the business object data assigned to the outbound implementation. The Business System field should be configured as defined in Section 7.1.1.
Finally, you'll need to assign the outbound parameter. The outbound parameter is used to provide more information during runtime to the outbound implementation. Figure 7.21 shows the IMG activity to maintain values for outbound parameters.

Figure 7.21    IMG Activity Depicting How to Maintain the Values for Outbound Parameters
IMG path DRFIMG • Data Replication • Define Custom Settings for Data Replication • Define Replication Models • Assign Outbound Implementation • Assign Outbound Parameter is used to maintain values for outbound implementations.
Table 7.7 describes the configuration fields of the IMG activity.




                                    Configuration Field
                                

                                    Description
                                





Outbound Parameter


                                    This is the outbound parameter name.
                                



Parameter Description


                                    This is the description of the outbound parameter.
                                



Outbound Parameter Value


                                    This field is used to enter the outbound parameter value. The characteristics of the parameter should follow the rules specified during the definition of the outbound parameters. For example, the outbound parameter SEND_DELTA_INFO should only have N (no) or Y (yes) as the outbound parameter value. The outbound parameter PACK_SIZE_BULK should be an integer with a value length as 10. Failure to follow the specifications would result in an outbound parameter not being evaluated during replications.
                                



Table 7.7    Configuration Fields for the Assign Outbound Parameter to Outbound Implementation Configuration Activity
7.1.3    Enhance Default Settings for Outbound Implementations
This IMG node is a grouping of different configuration activities that can be used to either enhance the default settings for outbound implementations or create new settings for outbound implementations (Figure 7.22).

Figure 7.22    IMG Activity Showing Configuration Nodes Available for Outbound Implementations
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations is used to view the list of default settings for outbound implementations. 
This IMG activity is a grouping of all the configurations related to outbound implementations. The following shows how each is linked to outbound implementations:


Parameters (1:N)Used to add more context and replication conditions.
                

Filter objects (1:1)Used by the outbound implementation to evaluate relevant objects for replication.
                

Business object (1:1)Logical representation of a master data object such as supplier.
                

Service operations (1:1)Required only for replication via web services. Defines the enterprise services repository (ESR) name and proxy class.
                

Outbound interface models (1:1)Required only for replication via RFC.
                

In the following sections, we'll discuss the first three of these in detail. The final two have been omitted because they aren't used very often.
Define Parameters
The Define Parameters IMG activity is used to define parameters and their technical characteristics. Parameters are assigned to outbound implementations. You can assign multiple parameters to one outbound implementation, and the same parameter can be assigned to multiple outbound implementations. Values for the parameters are assigned while defining the replication model. Refer to Section 7.1.2 for more details.
The parameters, along with parameter values, enrich the runtime environment of the outbound implementation with target system-specific information. Figure 7.23 shows the IMG activity for defining outbound parameters.

Figure 7.23    IMG Activity to Define Outbound Parameters
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Parameters is used for defining outbound implementation parameters.
Table 7.8 describes the configuration fields of this IMG activity.




                                Configuration Field
                            

                                Description
                            





Outbound Parameter


                                Give a unique identifier to the outbound parameter.
                            



Description


                                Provide a meaningful description.
                            



Data Type


                                Select the technical characteristics of the value that can be entered as an outbound parameter value. The list of available values includes Integer and Character String.
                            



Value Length


                                Describe the length of the outbound parameter value.
                            



Table 7.8    Configuration Fields for the Define Parameters Configuration Activity
You can define a value list for every outbound parameter to help you configure the correct values when assigning the outbound implementation to the replication model. Figure 7.24 shows the IMG activity for defining parameter values for an outbound parameter.

Figure 7.24    IMG Activity Showing How to Configure Outbound Parameter Values for an Outbound Parameter
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Parameters • Define Parameter Value is used for defining outbound parameter values.
Table 7.9 describes the configuration fields of the IMG activity.




                                Configuration Field
                            

                                Description
                            





Outbound Parameter Value


                                This field is used to enter the list of possible values for an outbound parameter. The values must conform to the technical characteristics of the parameter.
                            



Description


                                This is the logical description of the parameter.
                            



Table 7.9    Configuration Fields for the Define Parameter Values Configuration Activity
Define Filter Objects
This section covers the IMG activity for defining filter objects. For more details on filter objects, refer to Section 7.1.1. Figure 7.25 shows the Define Filter Objects IMG activity.

Figure 7.25    IMG Activity Depicting How to Define Filter Objects
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Filter Objects is used for defining new filters or changing the settings for existing filters.
Table 7.10 describes the configuration fields of this IMG activity.




                                Configuration Field
                            

                                Description
                            





Filter Object


                                Enter a unique identifier for the filter object.
                            



Description


                                Enter a short description of the filter object.
                            



Table Name


                                Enter the name of the table from which the value list for the filter criteria is selected. This value list is displayed when defining filter criteria in Transaction DRFF. Entry in this field is mandatory if you're defining a simple explicit filter.
                            



Table 7.10    Configuration Fields for the Define Filters Configuration Activity
Filters are assigned to filter objects and are the actual objects that store settings related to the filtering of data. Figure 7.26 shows the IMG activity to Define Filters Objects.

Figure 7.26    IMG Activity Depicting How to Assign Filters to Filter Objects
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Filter Objects • Assign Filters is used for assigning filters to filter objects and defining settings for filters.
Table 7.11 describes the configuration fields of this IMG activity.




                                Configuration Field
                            

                                Description
                            





Filter


                                Enter a unique numeric value of length 2 as the filter identifier.
                            



Description


                                Provide a logical description of the filter.
                            



Filter Type


                                Specify the type of filter. Refer to Section 7.1.1 for more details.
                            



General Filter Parameter


                                Enter the name of the structure that holds the filter criteria as fields. For simple explicit filters, this structure should be a subset of the table assigned to the filter object. For other types, this structure is used in the filter class to evaluate the filter criteria. This structure is used during filter criteria configuration in Transaction DRFF. This value is used only for the explicit complex filter.
                            



Manual Filter Parameter


                                This value is evaluated only for manual replication. It defines the fields for entering the filter criteria during manual replication. This value is used only for the explicit complex filter.
                            



Filter Class


                                Enter any class that implements interface IF_DRF_FILTER. This value is only considered for explicit complex filters and implicit filters.
                            



Table 7.11    Configuration Fields for the Assign Filter to Filter Objects Configuration Activity
Finally, you can use the Assign Entity Type IMG activity to assign entity types to filter objects. This activity is used mainly in the filter class to read the metadata of the entity to perform data filtering. Figure 7.27 shows an entity being assigned to a filter object.

Figure 7.27    Assigning Entity Type to Filter Object
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Filter Objects • Assign Entity Type is used for assigning an entity to a filter object.
Table 7.12 describes the configuration fields of this IMG activity.




                                Configuration Field
                            

                                Description
                            





Data Model


                                Enter a valid active data model.
                            



EntityType


                                Enter a type 1 or type 4 entity.
                            



Table 7.12    Configuration Fields for the Assign Entity Type to Filter Objects Configuration Activity
Define and Assign Business Objects
For more information on business objects, refer to Section 7.1.1. Business object type codes are defined/created in the IMG activity Master Data Governance, Central Governance • General Settings • Data Modeling • Define Business Object Type Codes. In the same IMG activity path, you can assign a business object to a data model by assigning the business object to an entity. Figure 7.28 shows the IMG activity used for defining the further attributes of a business object in the context of the data replication framework.

Figure 7.28    Configuration Activity to Define a New Business Object
Table 7.13 describes the configuration fields of the IMG activity.




                                Configuration Field
                            

                                Description
                            





BO Type


                                Unique numeric identifier for the business object.
                            



Description


                                Text describing the business object in terms of business semantics.
                            



Data model


                                Data model to which the business object must be assigned.
                            



Entity


                                Type 1 entity of the value entered in Data Model field.
                            



Table 7.13    Configuration Fields for the Definition of a Business Object
After the business objects are defined, they can also have filter objects assigned to them. Filter objects acts as an aid during the runtime of the data replication framework to evaluate the relevant instances of business objects based on the filter criteria. This filter criterion is maintained per outbound implementation. Filter objects are assigned to outbound implementations indirectly via business objects. Filter objects are assigned to business objects, and business objects are assigned to outbound implementations. Figure 7.29 shows the IMG activity to Assign Filter Objects to Business Objects.

Note
A business object can have only one filter object assigned to it, and an outbound implementation likewise can have only one business object assigned to it. A business object, however, can be assigned to any number of outbound implementations.


Figure 7.29    Assign Filter Objects to Business Objects
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Business Objects and Object Identifiers • Assign Filter Objects to Business Objects is used for assigning filter objects to business objects.
Table 7.14 describes the configuration fields of this IMG activity.




                                Configuration Field
                            

                                Description
                            





Business Object Type


                                Enter a valid business object.
                            



Description


                                The text is auto populated from the business object definition.
                            



Filter Object


                                Enter a valid filter object to be assigned to the filter object.
                            



Table 7.14    Configuration Fields for the Assign Filter Object to Business Object Configuration Activity
Define and Assign Object Identifiers
Object identifiers are Data Dictionary structures that hold the key fields of a business object. In the DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Business Objects and Object Identifiers IMG activity, object identifiers are assigned to business objects (see Figure 7.30). This IMG activity is mainly consumed by the key mapping framework. 

Figure 7.30    Define Object Identifiers
Table 7.15 describes the configuration fields of the IMG activity.




                                Configuration Field
                            

                                Description
                            





Object ID Type


                                This unique identifier of the business object key helps in differentiating between multiple keys of a business object.
                            



Description


                                Enter a logical explanation of business object key that describes it accurately. It helps users understand the object ID type when traversing the key mapping UI. 
                            



BO Type


                                Enter the business object whose key field the object ID type represents. A business object can have multiple keys. 
                            



Internal Key


                                This indicates that the object ID type of the business object uses an internal key.
                            



Leading Key


                                For objects that have more than one key, this specifies which key is used for all internal processes such as data retrieval and maintenance.
                            



No Conversion


                                This specifies no conversion from internal key to external key.
                            



Object Type Node


                                This acts as an aid for creating the mapping group. If you assign all the object identifiers that belong to one business object to one object type node, they form one mapping group.
                                You can have multiple mapping groups for the same business object.
                            



Table 7.15    Configuration Fields for the Definition Object Identifier for Business Object Configuration Activity
After object identifiers have been defined, you can assign key structures to them. In the underlying database tables, all the keys that belong to a mapping group are concatenated and stored. To split the concatenated key into individual key fields, the key structures are used. Figure 7.31 shows the IMG activity to assign structures to object identifiers.

Figure 7.31    Assign Key Structures to Object Identifiers.
IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Business Objects and Object Identifiers • Assign Key Structures to Object Identifiers is used for assigning key structures to object identifiers.
Table 7.16 describes the configuration fields of the IMG activity.




                                Configuration Field
                            

                                Description
                            





Object ID Type


                                Unique identifier for the object ID type of a business object
                            



Description


                                Description of the object ID type of a business object
                            



Key Structure


                                A Data Dictionary structure containing key fields of the object ID type
                            



Table 7.16    Configuration Fields for the Assign Key Structures to Object Identifiers Configuration Activity
Define Object Nodes
Object nodes are used to group different object ID types belonging to the same business object under one mapping group. Figure 7.32 shows an example of different object ID types belonging to business object type 147 being grouped under one object node 5368 (business partner root); by this configuration, all the object ID types are grouped under one mapping group. IMG path DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Business Objects and Object Identifiers • Define Object Nodes is used to define object nodes.

Figure 7.32    Object Node 5368
Figure 7.33 shows the screen where you can define object nodes.

Figure 7.33    Configuration Activity to Create Object Nodes
Table 7.17 describes the configuration fields.




                                Configuration Field
                            

                                Description
                            





Object Node Type


                                Unique value to identify object node type.
                            



Object Node Type Description


                                Meaning full description of object.
                            



Table 7.17    Object Nodes Configuration Fields









7.2    Material Master Replication
SAP provides runtime and design-time artifacts for replicating material from the SAP MDG hub to any client system. Currently, SAP only supports ALE-based replication to client systems.
Table 7.18 lists the outbound implementation classes delivered by SAP.




                        Outbound Implementation
                    

                        Description
                    





I_MAT


                        This outbound implementation always sends MATMAS. This doesn't support change analysis.
                    



I_MAT_V2


                        This new outbound implementation performs change analysis.
                        The following IDoc messages are triggered:
                        

MATMAS (material)
                            

DOLMAS (document object links)
                            

ECMREV (revision level)
                            

QMAT (quality data)
                            





Table 7.18    Outbound Implementations for Material Master Replication
The explicit complex filter object assigned to material is MDG_BS_MAT. It provides the following parameters to filter the material during outbound replication, as shown in Figure 7.34:


Plant


Material Number


Material Group


Material Type


Industry sector


Sales Organization


Distribution Channel


Storage Location


Class Type


Class number


Cross-Plant Material Status


Cross-distribution-chain material status

Figure 7.34    Main Filter Criteria of Material for Outbound Implementation I_MAT_V2


Outbound implementations provide the segment filters described in Table 7.19.




                        Filter Object
                    

                        Description
                    





F_MAT1


                        Filter material based on the plant segment filter. This simple explicit filter is based on SAP ERP table MARC.
                        Filter parameters are Plant, Plant-Specific, and Material Status.
                    



F_MAT2


                        This filter object is used to filter materials based on the sales segment of the material. This is a simple explicit filter based on table MVKE.
                        Filter parameters are Sales Organization, Distribution Channel, and Distribution-Chain-Specific Material Status.
                    



F_MAT3


                        This filter object is used to filter materials based on the storage segment of a material. This is a simple explicit filter based on SAP ERP table MARD.
                        Filter parameter is Storage Location.
                    



F_MAT4


                        This filter object is used to filter materials based on the tax class segment of a material. This is a simple explicit filter based on SAP ERP table MLAN.
                        Filter parameter is Departure Country (country from which the goods are sent).
                    



F_MAT5


                        This filter object is used to filter materials based on the valuation segment of a material. This is a simple explicit filter based on SAP ERP table MBEW.
                        Filter parameters are Valuation Area and Valuation Type.
                    



F_MAT6


                        This filter object is used to filter materials based on the class segment of a material. This is a simple explicit filter based on SAP ERP table KSSK.
                        Filter parameters are Class Type, Change Number, and Valid-From Date.




Table 7.19    Filter Objects Available for the Material Master Domain of SAP MDG
Figure 7.35 shows the segment filters for outbound implementation I_MAT_V2. This filter usually corresponds with type 4 entity types such as plant sales and data. The segment filter is applied only after a filter on a type 1 entity is applied.
To update the key mapping, the ALEAUD IDoc should be configured in the target systems, and AUD2 should be configured as the inbound processing code in partner profile configuration for ALEAUD in the SAP MDG hub system.

Figure 7.35    Segment Filters Assigned to Outbound Implementation I_MAT_V2









7.3    Customer, Supplier, and Business Partner Replication
SAP delivers Customizing and runtime objects to enable out-of-the-box replication of business partners and relationships, suppliers, and customers. The replication can take place using service-oriented architecture (SOA) or ALE, as described in the following sections.
7.3.1    SOA-Based Replication
Business partners with their respective vendors or/and suppliers are replicated using the asynchronous point-to-point enabled SOA services described in Table 7.20.




                            Name of SOA Service
                        

                            Description
                        





Businesspartnersuitebulkreplicaterequest_Out


                            This SOA service is used to replicate business partner, supplier, and customer to client systems from the SAP MDG hub system.
                        



BusinessPartnerSUITEBulkReplicateRequest_In


                            This inbound SOA service is used to create a business partner in the SAP MDG hub system from the external system. This service can save data in the SAP MDG staging area or directly save in the active area.
                        



BusinessPartnerSUITEBulkReplicateConfirmation_Out


                            This is the confirmation message triggered by the SAP MDG hub system to the client system.
                        



BusinessPartnerSUITEBulkReplicateConfirmation_In


                            This service is triggered by the client system to the SAP MDG hub system.
                        



Table 7.20    Web Services Available for Replication of Business Partner/Customer/ Supplier
These services take care of creating business partners and their respective customers and suppliers. They also take care of updating key mapping and invoking value mapping APIs.
Following are the SOA services used for replicating business partner relationships from SAP MDG to target systems:


BusinessPartnerRelationshipSUITEBulkReplicateRequest_Out


BusinessPartnerRelationshipSUITEBulkReplicateRequest_In


BusinessPartnerRelationshipSUITEBulkReplicateConfirmation_Out


BusinessPartnerRelationshipSUITEBulkReplicateConfirmation_In


7.3.2    ALE-Based Replication
You can use ALE as a replication mechanism to replicate business partner, supplier, and customer to client systems from SAP MDG hub systems. The difference between SOA-based replication and ALE-based replication is that in ALE-based replication, you have separate message types for business partner, supplier, and customer. ALE messages for business partners won't create suppliers or customers.
The IDoc messages used for replicating customer and supplier are listed in Table 7.21.




                            IDoc Message Type
                        

                            Description
                        





CREMAS, ADRMAS


                            Customer data, customer address data
                        



DEBMAS, ADRMAS


                            Supplier data, supplier address data
                        



Table 7.21    IDoc Messages Used for Replication of Customer and Supplier Master Data with Address Data









7.4    Financial Master Data Replication
Financial master data replication can happen through SOA, IDoc, or file protocols. SAP Master Data Governance, Financials, unlike other domains in SAP MDG, has multiple business objects in one data model. Therefore, this section will discuss the following business object replications: account replication, company replication, cost element replication, profit center replication, and cost center replication.
7.4.1    Account Replication
The entities related to account replication are as follows:


ACCOUNT


ACCCCDET


Table 7.22 shows the outbound implementations relevant for account replication.




                            Outbound Implementation
                        

                            Communication Channel
                        

                            Message
                        





1000_V1 (Financial Accounting Chart of Accounts)
                        

                            SOA
                        

ChartOfAccountsReplicationRequest_V1




1002 (Financial Accounting Chart of Accounts File Transfer)
                        

                            File
                        

                            N/A
                        



1010 (General Ledger Account Master)
                        

                            SOA
                        

GeneralLedgerAccountMasterReplicationBulkRequest




1011 (General Ledger Account Master File Transfer)
                        

                            File
                        

                            N/A
                        



1012 (General Ledger Account Master IDoc)
                        

                            IDoc
                        

GLMAST




Table 7.22    Outbound Implementation for Replicating G/L Accounts via ALE and Web Services

Note
SOA message ChartOfAccountsReplicationRequest_V1 is used for replication ACCOUNT entity attributes and FSI entity attributes; however, this SOA message won't transmit all ACCOUNT attributes. ACCOUNT attributes such as functional area and trading partner are transmitted via SOA message GeneralLedgerAccountMasterReplicationBulkRequest. This is how the SOA messages are designed. 
To overcome this design complexity, the outbound implementation class for ACCOUNT will ensure that both SOA messages are triggered whenever an account is replicated. The sequence of these messages is ensured by the data model due to the business object definition. Business object definition 899(ACCOUNT) is defined as prerequisite for 892(ACCCCDET). It's also a good idea to sequence outbound implementation 1000_V1 first and outbound implementation 1010 as second during configuration of the replication model. This kind of restriction doesn't apply for IDocs because both ACCOUNT entities and ACCCCDET entities are part of the GLMAST IDoc.

7.4.2    Company Replication
The entity related to company replication is COMPANY. Table 7.23 shows the list of outbound implementation available for company replication.




                            Outbound Implementation
                        

                            Communication Channel
                        

                            Message
                        





1140


                            SOA
                        

CompanyReplicationBulkRequest




1141


                            File
                        

                            N/A
                        



Table 7.23    Outbound Implementation for Company Replications
7.4.3    Cost Element Replication
The SAP MDG entity for cost element is CELEM. The target tables in SAP ERP client's systems are CSKA, CSKB, and CSKU. Cost replication is enabled both via IDoc and SOA.
Table 7.24 contains the list of outbound implementations.




                            Outbound Implementation
                        

                            Communication Channel
                        

                            Message
                        





1180 (Cost Element SOA)
                        

                            SOA
                        

CostElementReplicationBulkRequest




1181 (Cost Element File transfer)
                        

                            File
                        

                            N/A
                        



1182 (Cost Element IDoc) 
                        

                            IDoc
                        

COELEM




Table 7.24    Cost Element Replication

Note
The target tables in SAP ERP are table CSKA and table CSKB. Table CSKA holds the chart of account data of the cost element. These data aren't time dependent. Table CSKB holds the controlling area-dependent data of the cost element, which is time dependent. The SOA message CostElementReplicationBulkRequest sends data relevant to both table CSKA and table CSKB. For table CSKA-related data, the corresponding outbound implementation will trigger only that latest data. For table CSKB-related data, the outbound implementation will trigger data related to all the time slices when replication is object-based replication or ad hoc replication. When the replication is change request-based replication or edition-based replication, only data corresponding to the edition are sent.

7.4.4    Profit Center and Profit Center Hierarchy Replication
The SAP MDG entity for profit center is PCTR. SAP MDG supports both ALE-based replication and SOA-based replication. The target tables in the SAP ERP client are CEPC, CEPCT, and CEPC_BUKRS.
Table 7.25 contains the list of outbound implementations for profit centers.




                            Outbound Implementation
                        

                            Communication Channel
                        

                            Message
                        





1120


                            SOA
                        

ProfitCentreReplicationBulkRequest




1121


                            File
                        

                            N/A
                        



1122


                            IDoc
                        

PRCMAS




1130


                            SOA
                        

ProfitCentreGroupHierarchyReplicationRequest




1131


                            File
                        

                            N/A
                        



1132


                            IDoc
                        

COGRP6




Table 7.25    Outbound Implementations for Profit Center and Profit Center Hierarchy Replication
7.4.5    Cost Center and Cost Center Hierarchy Replication
The SAP MDG entity for cost center is CCTR. The target SAP ERP tables are CSKS and CSKT.
Table 7.26 lists the outbound implementations and its corresponding messages.




                            Outbound Implementation
                        

                            Communication Channel
                        

                            Message
                        





1100 (Cost Center)


                            SOA
                        

CostCentreReplicationBulkRequest




1101 (Cost Center)


                            File
                        

                            N/A
                        



1102 (Cost Center)


                            IDoc
                        

COSMAS




1110 (Cost Center Hierarchy)


                            SOA
                        

CostCentreGroupHierarchyReplicationRequest_Out




1111 (Cost Center Hierarchy)


                            File
                        

                            N/A
                        



1112 (Cost Center Hierarchy)


                            IDoc
                        

COGRP1




Table 7.26    Outbound Implementation and Corresponding Communication Channels for Cost Center Replication









7.5    Replication Options for Non-SAP Systems
This section covers how to replicate governed master data to non-SAP systems. Replication options for non-SAP systems are explained in terms of the communication channels supported by SAP MDG: web services, IDoc, and file.

Note
RFC is the standard method of communication between SAP systems and isn't a suitable option for replication to non-SAP systems.

7.5.1    Web Services
Because web services can be consumed by any non-SAP application using open Internet protocols (e.g., HTTP), this is the most appropriate channel for replicating master data to non-SAP systems. Any non-SAP system that can understand Internet protocols can consume a web service provided by the SAP MDG hub to replicate master data.

Note
A web service is a service exposed by an application to other communications. This service can be used by other applications to communicate with applications using HTTP. Web services use simple formats such as XML and JSON to communicate.

7.5.2    Intermediate Documents 
IDoc is a proprietary format of SAP. Many non-SAP systems don't understand the IDoc format. The proprietary feature of IDoc makes it the least desirable option when replicating to non-SAP systems. However, this shortcoming can be overcome by using middleware such as SAP Process Integration, which can transform the IDoc message to any desirable format that a non-SAP client system can understand. Many non-SAP middleware systems also have IDoc adapters to help them understand the IDoc format.
7.5.3    File Protocol
Replication via file protocol is another best-suited technique to replicate master data to non-SAP client systems. This is suitable when replicating data to systems that desire file-based replication and to systems that don't understand Internet protocols.









7.6    Operations
SAP provides various logging and replication monitoring tools as well as other tools for checking the consistency of the data replication framework, customizing the replication model, deleting the replication log, deleting the replication status, and displaying the object-specific replication status.
7.6.1    Logging, Tracing, and Monitoring Tools
The data replication framework triggers replication of business objects to a target system. The actual replication is triggered by the outbound controller, and the outbound controller logs each milestone in the application log. Two of the milestones are filtering and change analysis.
Tracing the data replication process is also recorded as part of the application logs. The data replication framework is integrated to the Computing Center Management System (CCMS), so any application log under the very Important category creates an alert in CCMS.
Logs generated by the data replication framework can be accessed using Transaction SLG1 and FMDM as the object.
The out-of-the-box tools provided for monitoring are as follows:


Monitoring replication  This Web Dynpro UI can be accessed by clicking the hyperlink either on the launchpad or on the navigation pane. This tool is mainly for the master data steward to monitor the replication. Figure 7.36 shows the replication monitoring tools that can be called from the SAP Business Client.
                    
Figure 7.36    Web-Based Replication Monitoring Tool


Table 7.27 describes the fields on the Web UI.




                            Field
                        

                            Description
                        





Replication Model


                            This is a mandatory field in which you can only select only one value.
                        



Business Object


                            This is a table that displays all the business objects assigned through outbound implementations to the selected replication model. You can select multiple business objects.
                        



Date from and Date to


                            These fields are used to filter the logs based on the date range.
                        



User


                            This field is used to filter the logs based on the user who executed the replication.
                        



Log Class


                            This field is used to filter the logs based on the log class.
                        



Replication Mode


                            This radio button is used to filter the logs based on the replication mode. The available options are as follows:
                            

Initialization: Selecting this option will filter the logs that are created when the business object is created through a change request.
                                

Changes: Selecting this option will only display the data replication framework logs that are created when the changes are made to the business object through a change request.
                                

Manual: Selecting this option will filter the logs that are created when a business object is replicated manually either using Transaction DRFOUT or using the Replicate by Object Selection UI.
                                





Table 7.27    Fields of the Replication Monitoring Tools


Analyze log  for outbound implementations (Transaction DRFLOG for outbound implementations (Transaction DRFLOG ) This tool is accessed in the SAP GUI using Transaction DRFLOG, as shown in Figure 7.37. You can use the various fields to enter the selection criteria. Transaction DRFLOG also enables you to filter the log using the object IDs.
                

Transaction DRFLOG provides many more capabilities to monitor and analyze the logs. The tool is used by IT experts for troubleshooting and monitoring. Like the Monitor Replication web application, this tool displays the application log, but it has more capabilities to filter the logs. This tool can filter Transaction DRFLOG based on the object IDs of the business object.

Figure 7.37    Selection Screen of Transaction DRFLOG in the SAP GUI
7.6.2    Change Pointers
SAP MDG change pointers store the changes (old value and new value) made to business objects along with the change request ID, time stamp, and user who made the changes. These change pointers are used primarily to determine the relevant business object instances during delta replication mode based on the last state of replication to a business system.
SAP MDG doesn't manage underlying SAP ERP or SAP S/4HANA change pointers. SAP MDG creates its own change pointers per target system. This kind of storage helps when replicating only delta changes to a target system. Change pointers are created after the save event of the business object. These change pointers shouldn't be confused with the change documents of change requests. Change documents of change requests reuse the existing SAP ERP change pointer framework. 
7.6.3    Check Data Replication Framework Customizing
In the SAP GUI, you can use Transaction DRFCC to access the application to check the correctness of a replication model and business system configuration. Figure 7.38 shows the initial screen of Transaction DRFCC.

Figure 7.38    Transaction DRFCC in the SAP GUI.
This transaction performs the following checks:


                    Check if at least one outbound implementation is assigned to a replication model.
                

                    Check whether languages are assigned to a replication model. If languages are assigned, then the system checks if at least one outbound implementation supports the language filter. This setting is defined when creating the outbound implementation. The language filter is used to filter language-dependent texts of a business object based on the languages configured in the replication model.
                

                    Check whether every business object has a filter object configured.
                

                    Check whether all the mandatory outbound parameters are assigned to an outbound implementation in the replication model. 
                

                    Check whether a business system is configured for every outbound implementation.
                

                    Check that the business object and target system combination is unique across the replication models.
                

                    Check whether the communication channel configured against the outbound implementation and business system is the same. 
                

                    Check whether time dependency and key harmonization settings defined against a business system are consistent with the outbound implementation settings.
                

7.6.4    Delete Replication Log
The report to delete logs can be accessed in the SAP GUI using Transaction DRFLOGDEL. This report is used to delete the logs based on selection criteria. It's advised to schedule this program in the background to delete expired logs of a replication model. A log's expiration date is controlled by the setting when defining the replication model. Figure 7.39 shows the initial screen of Transaction DRFLOGDEL in the SAP GUI.

Figure 7.39    Transaction DRFLOGDEL in the SAP GUI
Table 7.28 explains the selection screen fields of Transaction DRFLOGDEL.




                            Field
                        

                            Description
                        





Replication Model


                            This selection field is used to enter the replication model whose logs need to be deleted.
                        



Replication mode


                            One of the classifying features of data replication framework logs is its replication mode; every data replication framework log clearly shows in the header what the replication mode was when the log was created.
                            Available options are as follows:
                            

ALL


Initialization


Changes


Manual






Expiration date


                            This radio button group allows you to choose whether to delete the logs that have expired or delete all the logs irrespective of the expiry date.
                        



Table 7.28    Fields of Transaction DRFLOGDEL
7.6.5    Display Object Replication Status
Transaction DRFRSD is used to display the object replication status in the SAP GUI based on the object ID of the business object (Figure 7.40).

Figure 7.40    Transaction DRFRSD in the SAP GUI
Table 7.29 explains the selection screen fields of Transaction DRFRSD.




                            Field
                        

                            Description
                        





Business Object


                            Enter the business object ID of the business object. This field is mandatory if you want to enter the object ID by clicking the free selection icon.
                        



Change request


                            Enter the change request ID. 
                        



Business system


                            Enter the target system ID.
                        



Repl Date


                            Enter the date of replication.
                        



Replication status


                            Choose the status of replication.
                        



Table 7.29    Fields for Transaction DRFRS
7.6.6    Delete Replication Status
Transaction DRFRSDEL can be used to delete the replication status of different object IDs per system. This transaction is used when the object status no longer needs to be saved for future reference. Figure 7.41 shows the initial screen of Transaction DRFRSEDEL.

Figure 7.41    Transaction DRFRSDEL in the SAP GUI









7.7    Summary
After reading this chapter, you should now understand the purpose of the data replication framework, as well as the different components that make up data replication framework. This chapter explained the basic building blocks of the data replication framework and how they are interconnected. The chapter then provided domain-specific replication details for material, supplier, customer, and business partner. The chapter then concluded with an overview of the different tools that can be used when operating with the data replication framework. In the next chapter, you will be introduced the various reports available for analytics.








8    AnalyticsThe standard content in SAP MDG provides various analytical applications to monitor both the governance processes as well as the object-specific data for better process efficiency and improved data quality.Companies need to monitor the governance processes continuously and fine-tune the process to reach process maturity. To help with this requirement, you need better analytics tools to identify bottlenecks and critical paths in a process. The governance processes should have the flexibility to adjust to varying business needs without compromising on data quality and data standards. After proper empowerment from data governance councils and active data stewards, a reduced number of errors, and automation of the data quality rules, you may feel the need to remove a process task in your workflow or to add an additional check in your workflow processes. You may be concerned that introducing processes will increase the time to create and process maser records. However, this doesn't take into account the cost savings achieved with the reduction in efforts of data cleansing projects and other parallel projects to create workarounds regarding data quality issues. As the enterprise becomes mature with proven data governance processes, you can reduce the time it takes to create or process master data drastically. To help with the fine-tuning of the process, data stewards need to understand the process bottlenecks. This is where process analytics comes into the picture. The SAP MDG standard content provides various analytical functionalities to report on the process data as well as on the contextual data based on the domain attributes such as number of requests created by a plant/purchase org, and so on. These analytical reports will help the process managers allocate the right number of resources and measure the productivity of the human resources required to manage the master data process and improve data quality.This chapter describes the applications available as part of the SAP MDG analytics functionality. The applications include both business intelligence (BI) embedded content as well as SAP Smart Business content available to monitor key performance indicators (KPIs) and service level agreements (SLAs) of the processes in SAP MDG, central governance. Each section also details how to set up and adapt this content. This chapter also explains the provision to generate generic data sources for custom data models and key mapping. Section 8.1 provides the details on how to use the available embedded BI content. Section 8.2 discusses SAP HANA-based analytics applications that are available as part of SAP MDG 7.0 SP 02 and above. You should use SAP HANA-based analytical views to perform advanced reporting on SAP MDG data.
8.1    Embedded Business Intelligence Content
SAP MDG provides embedded BI content for analysis of central governance processes. This content can be used to analyze the change request data as well as domain-specific object information related to the governance process. This content provides information on the following:


                Change request processing times
            

                Change request statuses
            

                Change requests associated with a user
            

The BI content is available as part of the SAP MDG business functions activation MDG_FOUNDATION. The standard MDG security role associated is SAP_MDGA_MENU. 
The main prerequisites associated with the activation of the BI content is to set up a BI client. Because SAP MDG has embedded BI content, a separate system isn't required. A separate BI client in the SAP MDG system is required to activate the embedded content. The BI content in SAP MDG includes the data stores and queries associated with the central governance analytics. The content bundle for SAP MDG is 0MDG_ANLY_CR_PROCESS, which must be activated using Transaction BSANLY_BI_ACTIVATION. The data stores and InfoProviders can be individually activated using Transaction RSOR (Work Bench), Transaction RSA5 (component APCO-OLTP_MDG) or using report RODPS_LOAD_ACTIVATE_SINGLE. The key prerequisites apart from setting up the BI client are as follows: 


NO_TREX (for AnyDB database systems) or SAP HANA database is set as default for the TREX/SAP BW destination. This can be set using the report program ESH_ADM_SET_TREX_DESTINATION or using the Customizing path, SAP NetWeaver • General Settings • Search and Operational Analytics • Common Settings for Operational Analytics and Embedded Search • Configure Indexing • Set TREX/BWA Destination.
            

                A remote function call (RFC) connection is set up between the SAP MDG client and the BI client of the system. 
            

                The SAP Business Warehouse (SAP BW) destination is set up. This can be verified by checking the entry RODPS_BW_DESTINATION in table RSADMIN.
            

After the BI content is activated, the Business Context Viewer (BCV) queries can be tested using the program /BCV/R_QRM_TEST_QUERY. The query IDs of the SAP MDG, central governance analytics queries are as follows:


1MDG_ANLY_STA_QY (Status Overview)
            

1MDG_EDTN_CR_PART_Q (Query for Change Requests with My Participation)
            

1MDG_EDTN_MY_CR_Q (Query for My Change Requests)
            

The key object type and dependent types activated as part of the BI content activation are as follows:


0MDG_CR_T01 (Change Request Data Source)
            

0MDG_CR_TYPE (Change Request Type)
            

0MDG_CR_REJ (Rejection Reason)
            

0MDG_DM (Data Model)
            

0MDG_CR_PRIORITY (Change Request Priority)
            

The Web Dynpro applications associated with the embedded BI content are as follows:


Processing Time  (List View) This application provides detailed information on the central governance process metrics. The report provides information on the total number of change requests that have met the predefined SLA/due date exceeded/completed on time, as shown in Figure 8.1. You can filter the report based on the request priority and time scale (weekly/monthly/quarterly/yearly). You also can drill down into the report to view additional details based on master data objects, change request types, and so on. By drilling down further, you can view the list of associated change requests. The associated Web Dynpro application is MDG_MONITOR_CR_PROCESTIME.
                
Figure 8.1    Change Requests: Processing Time (List View)


Processing Time (Graphical View) This application provides the graphical view of the list report. It requires the frontend integration with the SAP BusinessObjects Dashboard. The associated technical dashboard is 0XC_MDG_MONITOR_CR.
            

Status Report  (List View) The report provides information on the total number of change requests that have been rejected/approved or created over a selected period, as shown in Figure 8.2. You can filter the report based on the request priority and time scale (weekly/monthly/quarterly/yearly), drill down to view additional details based on the master data object, and change the request type, as shown in Figure 8.3. You also can further drill down to view the list of associated change requests. The associated Web Dynpro application is MDG_ANLY_CR_REJ_REASON.
                
Figure 8.2    Change Request Status Report

Figure 8.3    Status Report Drilldown


For custom data models, analytical sources are generated on activation of the data model. These data sources are generated with the prefixes defined in the Customizing activity Master Data Governance • General Settings • Data Modeling • Edit Data Model for the respective data model. The generated data sources can be activated using Transaction RSA5 under component APCO-OLTP_MDG. The standard data source for the key mapping information is 0MDG_KEY_MAPPING, as shown in Figure 8.4. For analysis on hierarchies, BAdI RSU5_SAPI_BADI should be implemented with the parameter I_DATASOURCE to be filled with the technical name of the data source and table C_T_HIENODE filled with object names corresponding to hierarchy nodes. 

Figure 8.4    Key Mapping Data Source 0MDG_KEY_MAPPING
To view the change requests associated with the user, the application USMD_EDITION_CREQUEST is used.
For the finance domain, BI report templates are available for extraction and Customizing. The InfoObjects associated with these reports are delivered in the following web templates:


                0TPLI_FMD_MP11_Q0002
            

                0TPLI_FMD_MP06_Q0002
            

                0TPLI_FMD_MP05_Q0002
            

                0TPLI_FMD_MP07_Q0002
            

                0TPLI_FMD_MP09_Q0002
            

                0TPLI_FMD_MP08_Q0002
            

                0TPLI_FMD_MP10_Q0002
            

The required Customizing can be done using the Customizing path, Master Data Governance, Central Governance • Master Data Governance for Financials • Reports • Extraction (Direct Access). This Customizing activity, as shown in Figure 8.5, can be used to assign the entity types and attributes to InfoObjects, define selection rules for the virtual InfoProvider, and determine the entity types for hierarchy extraction.

Figure 8.5    Customizing for Finance Reports (Direct Access)









8.2    SAP HANA-Based Analytics 
SAP MDG analytic reports based on SAP HANA views can be used to analyze information on SAP MDG process data along with domain-specific data. With SAP MDG 9.0, the following information is provided through analytical reports:


Object-based change request analytics Provides information based on change requests and associated objects linked with the change request.
            

Change document-based change request analytics Provides information on the changes made as part of a change request.
            

Workflow-based change request analytics Provides workflow information associated with the change requests.
            

Critical attribute-based change request analytics Provides information on attribute-specific changes over a time frame with respect to change requests or master data objects.
            

The following sections describe these reports and how to set them up.
8.2.1    Architecture
SAP HANA analytical content can be leveraged in the SAP MDG system, if it's based on SAP HANA (integrated scenario). If the SAP MDG solution is installed on a non-SAP HANA database, the database tables need to be replicated to a separate SAP HANA database (replication scenario) to generate the content and leverage various reporting tools to consume the data.
The SAP HANA views are exposed as virtual data models (VDMs). For SAP MDG on AnyDB systems, the data needs to be replicated to a side-car SAP HANA system to expose the SAP MDG data through SAP HANA views (VDM) and then can be consumed by any BI reporting tool. For an integrated scenario where SAP MDG resides on an SAP HANA database, the replication via SAP Landscape Transformation Replication Server (SLT) or other mechanisms isn't required. SAP MDG standard content provides programs to generate the SAP HANA view based on the SAP MDG data model, and these views can be enhanced to meet custom requirements. The SAP HANA-based content is generated using a standard delivered report program or accessed via Transaction MDG_GEN_HBA_CR_EXT.
The SAP HANA-based content is generated as VDMs. VDMs contain SAP HANA attribute views as well as calculation views along with other files such as OData Services, xsprivileges, and so on. The calculation views are classified into private views, reuse views, and query views. Private views are basic view on which reuse views are built. The reuse views are combined to form the query views. The analytical applications expose data from query views via OData Services or directly. 
These views can be consumed via any reporting tools that consume data from SAP HANA views. Various BI clients, such as SAP Lumira and SAP BusinessObjects Analysis for Office, can be leveraged to expose the SAP MDG analytical content as well. These standard reports can be modeled using the KPI modeler to display as analytical SAP Smart Business Cockpits. With the SAP S/4HANA release, these views can be created as Core Data Services (CDS) views for consumption. These reports can be modeled to provide drilldown features to navigate to detailed information such as object-specific/attribute-level data. The SAP HANA-based analytics content should be run on the English language.
The standard report MDG_ANA_HDB_GEN_REPO_CONTENT (or Transaction MDG_GEN_HBA_CR) can be used to generate the SAP HANA views and associated artifacts. It includes calculation views, queries, OData Service for change request header and edition data, object-specific views based on change documents and critical attributes, workflow views, and so on. Figure 8.6 shows the selection screen of the SAP HANA content generation report for SAP MDG analytics. SAP MDG administrator privileges are required to run the report.

Figure 8.6    Generation of SAP HANA Content for SAP MDG Analytics
After the content is generated, the message log displays the information on SAP HANA-generated views, as shown in Figure 8.7.

Figure 8.7    Generated SAP HANA View Logs
The generated views can be viewed and enhanced, if needed, via the SAP HANA Studio, as shown in Figure 8.8. Additional views can be modeled to report on additional information.

Figure 8.8    SAP HANA Studio View
The following sections details the database tables that are part of these views based on the report type. 
The change request information is derived from the following database tables for the view generation:


USMD120C: Change request header data
                

USMD110C, USMD110T: Change request types and associated text table
                

USMD211T: Change request reason
                

USMD212T:Change request reject reason
                

USMD210T: Change request priority
                

USMD1102: Change request SLAs
                

USR21, ADRP: User and address mapping information corresponding to the change request user and address service information table
                

USMD1601: Change request type: business activity alignment
                

USMD160C, USMD160T: Business activity definition and associated text table
                

USMD170T: Logical action text table
                

UMD130T: Change request status text table
                

MDGI_OTC_BS, MDGI_OTC_T_BS: Object type codes and associated descriptions
                

USMD001T: Data model text table
                

USMD020C, USMD020T: Edition and associated text table
                

DD07T, T009T: Domain values and long text tables
                

USMD010C, USMD010T: Edition type and associated text table
                

T000: System client table
                

8.2.2    Object-Based Change Request Analytics
Object-based change request analysis allows you to report on change requests associated with a master data object. The views associated with this analysis combine the change request information with the master data object attributes. This allows you to filter the information based on object-specific attributes.
The generated view relies on SAP MDG/SAP HANA search views to link the object-specific information. The main database table used for the generation of related view is table USMD1213.
8.2.3    Change Document-Based Change Request Analytics
Change document-based change request analysis allows you to report on change documents associated with a master data object in a change request process. The views associated with this analysis combine the change request information with the change document information of the master data object attributes. This allows you to filter the information based on object-specific attributes. The standard content supports material and business partner (customer/supplier) objects. 
The main database tables used for the generation of related views are as follows:


CDPOS: Change documents: item information
                

CDPOS_STR: Change documents language dependent items
                

CDPOS_UID: Change documents long table key items
                

DD07T: Change indicator texts
                

MDG_MDF2006: Fieldname language-dependent description
                

8.2.4    Workflow-Based Change Request Analytics
Workflow-based change request analysis allows you to report on workflow parameters associated with change requests. The views associated with this analysis combine change request information with workflow container attributes. This allows you to filter the information based on workflow attributes such as duration, potential processors, open requests, and so on. This information also helps in identifying process-related bottlenecks.
To obtain the work item information, the workflow attributes need to be stored as user attributes because the workflow container information can't be accessed readily. The report RSWD_MAINTAIN_USER_ATTR is used to define user attributes in table SWW_USRATT. These user attributes are required to store the workflow container parameter values so that the workflow-based analytics can use these values to generate the SAP HANA views. The report RSWW_FILL_USER_ATTR is used to re-index the old workflow instances.
The main database tables used for the generation of related views are as follows:


SWWWIHEAD: Work item header data 
                

SWWIRET: Work item return data
                

DD07T: Texts for domain fixed values
                

SWW_USRATT: Workflow user attributes
                

USMD220T: Texts for actions
                

USMD202T_2: Standard workflow step information
                

USMD202T_SSW: Rule-based workflow step information
                

SWWORGTASK: Work items to org unit assignment table
                

T7770: Organization unit type text table
                










8.3    Summary
This chapter provided information on various options for exposing analytical reports on SAP MDG data. The data involves both master data as well as process information related with the change request information. In addition to the standard generated views, custom views can be created to expose additional attributes for reporting and further analysis. This chapter discussed the key tables that can be used to expose this data. The next chapter discusses the data migration options associated with SAP MDG.








9    Data MigrationData migration is an area of vital importance for the success of any master data governance implementation project. This chapter describes the techniques and technology options available in the SAP MDG, central governance framework for initial loads with focus on migrating master data objects from existing SAP ERP to the SAP MDG environment.Master data by nature is shared centrally and exchanged across business applications, business processes, and different business lines. Master data is vital for executing any business process because it includes data about business partners, customers, suppliers, materials, financials (e.g., cost centers and profit centers), hierarchies, and more. Master data is typically shared by multiple users and groups across an organization, so there is an increased possibility of duplicates, obsolete, and inaccurate master data existing in the current source applications.Extract, transform, and load (ETL) of master data can be challenging and time-consuming. In the absence of the right data migration strategy, unexpected hidden data inconsistencies may jeopardize the project timelines and potentially put the whole project at risk. During SAP MDG implementation projects, the biggest challenge can be timely and smooth transition of error-free quality master data. Failure to ensure this may potentially affect the current business processes, procedures, and business transactions in the source application. SAP delivers applications within the SAP MDG, central governance framework in addition to some other already available options that help to successfully migrate the master data from the existing SAP ERP to SAP MDG, central governance environment. SAP MDG, consolidation and SAP Landscape Transformation Replication Server (SLT)-based data migration are covered in Chapter 16 and won't be covered here.
9.1    Overview
Some common use cases where master data migration activities might become a requirement are as follows:


New SAP MDG implementation Master data migration is needed for almost every SAP MDG implementation. Every organization planning to implement SAP MDG will have master data in their existing landscape that must be migrated to the SAP MDG system. However, the scale of the master data migration activities may differ based on the exact scope of the project. Some businesses implement SAP MDG in a phased manner, so not all master data existing in the current application has to be migrated to the SAP MDG environment.
            

Post go-live maintenance in SAP MDG For various business reasons, you might have requirements to create or update multiple records after the SAP MDG go-live. SAP MDG data migration options play an important role in meeting such requirements where governance is expected before creating/updating records in bulk. Updating hierarchy information for financial master data in SAP MDG is a good example in which activities are required such as downloading from SAP MDG and uploading hierarchies back to SAP MDG after necessary updates. 
            

Onboarding new business lines or domains in SAP MDG If your company goes live with SAP MDG or adopts a phased rollout approach based on some regions, business units, master data domains, or applications, you might want to expand the SAP MDG footprint in the landscape for governing master data centrally, requiring the process of data migration.
            

Merger/acquisition A large number of organizations acquire new businesses/companies that might be maintaining master data in their own legacy applications. As a corporate strategy, you can adopt a common strategy for all master data maintenance for the organization. To govern all master data centrally using SAP MDG, such old applications are integrated with SAP MDG to create the system of record that feeds master data to these applications. Initial data loads are required in such scenarios.
            

Data quality initiatives with specialized data quality tools Very often, businesses take initiatives with data quality in focus where they plan to run parallel projects using specialized tools/application during or after the SAP MDG implementation projects. Such projects need to process data on their end to achieve the specified objectives, which requires extraction and loading of master data. 
            

In the following sections, the various technology options available for extraction (from SAP ERP as the source), conversion, and loading into SAP MDG are explained. In addition, some general recommendations for initial data loads are also provided.
9.1.1    Technology Options 
This section explains various options available to extract the master data from SAP ERP. In addition, conversion and load techniques in SAP MDG framework are discussed. We'll focus on options that are used frequently in SAP MDG projects and are specific to the SAP MDG framework.
Data Extraction from SAP ERP
Data extraction from existing SAP ERP applications is an important activity in the process of migrating the master data to the SAP MDG environment. This can be done in a number of different ways. Some of these options are intuitive, whereas some approaches are proven and more traditional. Your choice for extraction of master data will be based on your project requirements. Some of the data extraction options available in SAP ERP are as follows:


                        Remote function call (RFC)
                    

                        Table download
                    

                        SLT
                    

                        Transaction MDMGX-based extraction
                    

                        Service-oriented architecture (SOA)
                    

                        Other ETL extractors
                    

                        Data export framework
                    

                        Application Link Enabling (ALE)
                    

Following are some techniques that are widely tried and tested by the organizations in SAP ERP environments. Remember, SAP MDG is also SAP ERP with SAP MDG as an add-on. Hence, traditional data extraction mechanisms used for SAP ERP can also be used in SAP MDG for extracting master data if there is a requirement to extract data from SAP MDG. Some of these traditional extraction options may not be appropriate in some cases when the SAP MDG flex area is being used as a source for extracting master data. However, in the context of this topic, we'll only discuss in detail the options that are relevant and capable of loading master data directly into the SAP MDG staging area and not in the backend active area:


Application Link Enabling (ALE)  ALE is an SAP-supplied technique for transferring data in and out of SAP systems. ALE is considered a traditional and proven way of migrating data within the SAP ecosystem using IDoc formats. This is still seen as an effective and preferred way of migrating master data for objects, including suppliers, customers, and materials data, from any SAP application to SAP MDG (e.g., objects implemented in reuse mode). However, customer vendor integration (CVI) setup might be needed to generate corresponding business partners for suppliers and customers in SAP MDG.
                    

Service-oriented architecture (SOA) SOA-based communication is becoming increasingly popular for sending data within and outside SAP environments. SAP provides out-of-the-box web services for various master data objects. SOA is capable of efficiently communicating between two SAP ERP systems and the SAP MDG system through point-to-point communication as well as mediated through SAP Process Integration. This interface can be used for migrating master data in the SAP MDG system. 
                    

SAP Landscape Transformation Replication Server (SLT)  SLT is a cornerstone in SAP HANA-based landscapes with real-time data replication requirements. With SLT, you can perform even complex data transformations on the fly in replications from SAP and non-SAP sources. It provides a high-performance technology and methodology that can affectively read, convert, and load the data in the SAP ecosystem. 
                    

Data export framework  The data export framework is provided by SAP for extracting data in XML formats, which are readily acceptable on the SAP MDG data import framework. Various master data objects can be easily extracted using the data export framework via Transaction DTEXPORT. (This option is explained in more detail in Section 9.2.)
                    

Report KBAS_MDGF_SET_DOWNLOAD Extracting hierarchies for SAP MDG, Financials objects can be a very complex and tedious task. Therefore, SAP has provided report KBAS_MDGF_SET_DOWNLOAD, which can be executed to easily extract profit center hierarchies, cost center hierarchies, and cost element hierarchies. The extracted data is in .txt format, which is compatible with the file upload framework in SAP MDG, central governance.
                    

Report FBS_MDGF_FRS_DOWNLOAD For extracting SAP MDG, Financials reporting structures in SAP MDG central governance for accounting, SAP has delivered report FBS_MDGF_FRS_DOWNLOAD. This report can be executed to extract the file repository server (FRS) from the SAP ERP system. Extracted files are in .txt format and can be loaded in SAP MDG, central governance through the file upload functionality.
                    

Generic SAP NetWeaver MDM extractor: Transaction MDMGX Transaction MDMGX-based extraction is provided in the SAP ERP system to extract data in the SAP MDG-supported formats and structures. This extraction is provided by SAP through Transaction MDMGX within an SAP client system. It's available in various SAP systems and can extract master data as well as Customizing data in the XML format. The extracted file can either be downloaded to the local PC or stored within the application server on which the transaction is running.
                    

FTPFTP can also be used to send extracted files to any FTP-based receiver. This method is more successful for extracting financial master data and its hierarchies.
                    

Transaction MDMGX-Based Data Extraction from SAP ERP
As a prerequisite to extracting master data using Transaction MDMGX, you must implement the following SAP Notes on the source SAP systems:


                        SAP Note 1783851 - MDMGX: Adaptions for SAP MDG Initial Load
                    

                        SAP Note 1880169 - MDMGX: New Extraction Content for MDG-F
                    

After you've implemented these SAP Notes, you can execute Transaction MDMGX in SAP ERP. On the screen shown in Figure 9.1, only Start Extraction is relevant. Generate XSD isn't required. 

Figure 9.1    Transaction MDMGX in SAP ERP
You can import this extracted data into SAP MDG using the data import framework. However, to import data into the SAP MDG staging layer, a valid change request type with a workflow is a prerequisite.
The following steps are performed in Transaction MDMGX of the SAP ERP system from which the data has to be extracted:


Check the object types in Transaction MDMGX. SAP MDG object types are predefined by SAP. Check that the object types already exist as shown in Figure 9.2.
                        
Figure 9.2    Transaction MDMGX: Object Types


Define repositories and FTP servers. Figure 9.3 shows all repositories and FTP that must be defined for the extraction of all SAP MDG, Financials objects. It's strictly recommended that you create them accordingly using the same names.
                    

Maintain ports and check tables. Follow these steps to maintain the ports and check tables: 
                        

                                Upload the SAP MDG, Financials ports and check tables text file into Transaction MDMGX (the text file is attached to SAP Note 1882127). Select Upload Ports and Check-Tables.
                            

                                Enter the Object Type, and select the locally stored text file. Ensure that the Remove Header Line checkbox is set. 
                            

                                Execute the upload. After the success message appears, go back to the main menu, and select Maintain Ports and Check-Tables to check the ports. 
                            

                                Choose system type R3, and display the records. 
                            

Figure 9.4 shows where upload ports and check tables are maintained in SAP MDG.
                        
Figure 9.3    Transaction MDMGX: Defining Repositories and FTP Servers

Figure 9.4    Transaction MDMGX: Upload Ports and Check Tables


Define function module parameters for exceptional cases. To overcome the gap between SAP MDG data models and SAP ERP data models, function modules are required while extracting the data from SAP ERP in the SAP MDG expected structure and format. There is no general configuration defined for input parameters. It's mandatory to adjust the parameter according to the desired extraction. The parameter must use the common format of an SQL statement. Figure 9.5 shows the system screen for defining function module parameters for exceptional cases. 
                        
Figure 9.5    Defining Function Module Parameters for Exceptional Cases


Extract the data. Follow these steps to extract the data:
                        

                                In Transaction MDMGX, click Start Extraction.
                            

                                Select a repository using the search help. 
                            

                                If you leave the input fields for Port Name (Code) blank, the system tries to extract data for all ports being maintained. If you enter a port, the system will only extract that port's specific data.
                            

                                Select the Local Download checkbox, and use the search help on File Directory field to specify the destination folder for the extracted files. 
                            

                                Click execute icon to trigger the extraction.
                            



The Transaction MDMGX extraction process from an SAP ERP system is now complete. This extraction method isn't suitable for hierarchy extractions but is normally used for extracting financial master data, such as cost centers, profit centers, and so on. 
Data Conversion Option in SAP Master Data Governance 
Data conversion is an important part of the data migration process. Normally, for any conversions requirements, specialized tools are used for handling any complex transformation requirements, for example, SAP Data Services.
The SAP MDG file import framework supports load files in only certain defined file formats (XML). However, in some instances, files extracted from source applications may not be available in the expected format for the SAP MDG data import framework, and specialized conversion tools aren't being used. Under such scenarios standard Business Add-In (BAdI) BADI_MDG_FILECONVERTER can be used to perform any conversion activities, including formatting the load files in the desired XML formats. This BAdI can be navigated to via Transaction MDGIMG following the path shown in Figure 9.6.

Figure 9.6    Conversion Option in the SAP MDG Import Framework
This BAdI provides converter implementation for different file formats. In addition, for this purpose, the conversion types have to be maintained in the Customizing activity via Transaction MDGIMG. This BAdI is filter-dependent.
While importing the master data in SAP MDG, you can apply converter settings by selecting appropriate converter type via File Import • Custom Converter Settings • Use Search Help • Select Converter Type for the Load • Execute Import after Selecting the Mandatory Parameters.
You can apply file import converter settings from the screen shown in Figure 9.7.

Figure 9.7    Applying Converter Settings during Data Import in SAP MDG
Data Load Options in the SAP Master Data Governance Active Area
SAP MDG works on the concept of staging and active areas where all governance will occur in the staging area before transferring the data to the active area of SAP MDG.
Several proven options, such as ALE and SOA, can be leveraged for the purpose of migrating master data from the SAP ERP system to the SAP MDG system and from on SAP system to another in general. These standard options do have some limitations when it comes to updating the staging area of SAP MDG for the respective master data. objects implemented in the reuse mode of SAP MDG may very well use these options provided the goal is to migrate data directly to the active area.
The data import framework provides the option to choose whether the master data load should happen in the staging area or directly to the active area, skipping the staging area completely while loading the master data. However, when using the file upload option, the data are always loaded in the staging area. Some of the options that can be used for loading master data directly into the active area of SAP MDG include RFC, SLT, SOA, ALE, data import framework, and the Legacy System Migration Workbench (LSMW).
Data Load Options in the SAP Master Data Governance Staging Area
Objects implemented in flex mode of SAP MDG use the same SAP MDG generated tables to store inactive as well as active data. This means for all financial master data objects or other custom objects implemented in flex mode, data resides only in the SAP MDG area for inactive as well as active records; therefore, traditional data load options might not be suitable. This demands a special framework to load data in the staging area of SAP MDG. In addition, other objects implemented in reuse mode might need to go through the governance area for various business reasons. Some of the available options capable of loading data in the staging area of SAP MDG are as follows:


                        Data import framework 
                    

                        File upload framework
                    

                        SAP MDG application programming interfaces (APIs)
                    

                        SAP MDG, consolidation
                    

SAP MDG, consolidation and SAP MDG APIs are out of scope for this chapter hence, so our emphasis is on discussing the file import and file upload options in SAP MDG. Detailed steps about these two options are covered later in Section 9.2.
9.1.2    General Recommendations for Initial Data Load
Every SAP MDG project is unique in itself, and a common strategy usually can't be applied to different projects. Numerous decisions and different factors specific to the projects may influence the choice of data migration strategy. 
Following are some of the common factors that normally influence the selection of options and which can be taken into consideration while making a decision about the right strategy for migrating data to the SAP MDG environment: 


Hub vs. co-deployed  If you have a single SAP ERP instance in the landscape with SAP MDG being implemented on top of the operational SAP ERP system, then data migration isn't needed for some of the objects, including customers, suppliers, and materials. CVI setup is needed to generate business partners for customers and suppliers. For financial master data objects, a data migration is still necessary in the SAP MDG area. In a hub-based SAP MDG environment, all types of master data need to be extracted from the source SAP application and loaded in SAP MDG. CVI setup for customer and suppliers is applicable depending on the technique preferred in the project; that is, ALE/IDoc-based data migration for customer and supplier data requires CVI setup to be in place.
                

Type of master data object  The master data object type is a major influencing factor that plays a role in determining the migration approach. Suppliers, customers, and materials can be loaded using traditional techniques as well as supported by the new data import framework based on XML formats. However, considering the flex mode for the financial (0G) data model in SAP MDG, financial objects, such as cost centers, items, SAP General Ledger (G/L) accounts, profit centers, cost elements, and so on, can't use the traditional techniques and have to rely on the SAP MDG data import framework and SAP MDG file upload framework. Groups and hierarchy data can't be loaded using the data import framework, so the file upload framework is the suitable option.
                

Volume of master data  Like any other data migration project, the volume of master data to be migrated to the new environment could be a compelling factor to choose or not to choose certain available techniques. File upload and data import methods may experience performance issues and challenges beyond certain volumes. The file upload functionality doesn't support queueing or parallelization. Splitting the load files in smaller sizes and parallel processing is recommended to use file import and file upload methods.
                

Number of source applications Landscape complexity and the number of connected systems may determine the overall approach for migrating the data in SAP MDG. Projects involving multiple source systems may have interdependencies in terms of sequencing and decision-making about the loads. Often such large projects may also involve consolidations requirements in large-scale transformation projects, which might need specialist data quality tools such as enterprise information management (EIM) on SAP HANA, SAP Data Services, and so on. However, in this chapter, we aren't covering consolidation and other data quality requirements but focusing only on extracting and migrating the data into the SAP MDG environment.
                

Validity dates  Some of the master data, such as profit center and cost center, are time dependent in nature with validity dates associated with each of the records. Time-dependent master data are governed in SAP MDG using editions, so it's important to extract and load such data with great sensitivity to avoid any impact on the business processes and transactional data in downstream systems.
                

Data transformation needed Although it's recommended to clean data in the source system before extracting and loading it in SAP MDG, there may be requirements that specify data transformation needs, requiring specialized tools to improve the quality of the extracted data. Selection of the ETL tools for such requirements may also influence the data migration strategies. In some cases, data extracted in SAP Data Services can be easily loaded into SAP MDG using the native capability to integrate the two applications using SOA-based communication. 
                

Application technology and version of source system SAP MDG natively integrates with most of the SAP applications, minimizing the need for any custom developments or mappings. Some of the lower versions of SAP ERP applications don't support SOA-based communication, so it may not be viable to use some of the techniques.
                

Data format preferences Due to some existing enterprise strategies in place, you might choose to adhere to a common approach for all data communication within the landscape. Such preferences may also influence the choice of data migration strategy. In addition, some companies try to stick with old and proven techniques (e.g., ALE) because they have the available resource skillsets and are comfortable with these techniques.
                

Governance  needed during migration Not all the available load techniques have the capability to go through the governance (staging) area of SAP MDG. If you're planning to apply business rules built in to SAP MDG and expect workflow approvals before loading the data in SAP MDG, you need to follow the techniques that are capable of populating the master data first in the staging area before activating it. The file upload and file import options are available for loading master data in the staging area. SAP MDG, Financials master data and other custom objects implemented in flex mode must go through the SAP MDG staging area; however, this is optional for the objects implemented in reuse mode.
                

SAP MDG implementation approach  (big bang vs. phased) Scale, objective, and exact use case of a project may also impact the master data migration strategy. Large-scale big bang implementations tend to involve specialized middleware tools that are responsible for preparing the load files for SAP MDG.
                


Tips
Some important considerations during data migration are as follows:


                        Hierarchies aren't supported by the file import framework in SAP MDG, but they can be uploaded using the file upload method.
                    

                        File upload may not be the right option for updating objects with multiple entities and complex relationships.
                    

                        For custom objects with relatively simple data modeling, file upload can be an easy and reliable option because it involves minimum development.
                    

                        For any data model enhancements in SAP MDG, no enhancements are needed to use the file upload functionalities. However, file import does require some development.
                    

                        Using file import, loads can be scheduled, and it does support parallel processing.
                    

                        File upload supports text formats, whereas file import supports only XML formats; however, a BAdI implementation available in the SAP MDG file import method can support CSV files as well.
                    

                        Migrate only cleansed data to SAP MDG. Avoid bringing obsolete master data that can no longer to be used or activated for operational purposes.
                    

                        Data cleansing is a complex and time-consuming activity that involves making thousands of decisions. To be successful, start cleaning the master data early and in your existing applications first.
                    

                        Leverage the key mapping and value functionality for cross-referencing between legacy and SAP MDG values.
                    

                        Identify key mapping and value mapping requirements early in the project.
                    

                        While extracting and loading the time-dependent data, you should use a time slice consisting of the valid-from and valid-to dates as selection criteria. In SAP MDG, the entity type will be stored within an edition that has a time slice, too. At least the valid-from date extracted from the client system should fit into one of the target editions in the SAP MDG hub.
                    

                        For financial master data objects, use the chart of accounts, controlling area, and company codes as selection criteria. This limits the number of records that will be extracted and thus ensures that the change request used for the import in the SAP MDG hub doesn't get too big.
                    

                        SAP recommends the creation of application-specific file directories, which will be bound to unique folders of the application server.
                    











9.2    Data Migration Strategies
With several traditional and new techniques available for migrating the master data into SAP MDG, it's vital that the right strategy is adopted after considering all important factors related to the master data and specific to your project. In this section, SAP MDG-specific data loads are described, along with an overview of key mapping and value mapping uploads are also provided.
9.2.1    Data Import/Export Framework
The data import/export framework is a successful technique to export or import master data, key mapping information, and value mapping information. This technique is designed to suit XML-based master data load files, which can easily be exported from existing SAP ERP systems. The following sections provide more details about and the steps involved in using the data import framework/data export framework.
Data Import Framework
Let's walk through using the data import framework. First, you should be aware that the data import framework requires at least two file directories on the application server to facilitate loads:


                        One directory to store the files to be imported 
                    

                        One directory to store the archived files that have been imported 
                    

Physical directories can be created on the application server and mapped to logical directories using Transaction FILE. The IMG path for configuring the directories in Customizing for SAP MDG is Transaction MDGIMG • General Settings • Data Transfer • Define File Source • Archive Directories for Data Transfer.
The data transfer directories are used for the source files to be imported in SAP MDG. The archive path directories are needed to place the load files after the successful upload of data in the SAP MDG staging area. Figure 9.8 shows the screen to define the file source and archive directories for data transfer.

Figure 9.8    Defining the File Source and Archive Directories for Data Transfer
In this step, the master data have already been extracted in XML format and are available on the application server in the designated folder. Extracted files can be uploaded to the application server through Transaction CG3Z. Enter a path on the application server as the storage location in the Target file on application server field, and click the Upload button to start the upload (see Figure 9.9).

Figure 9.9    Uploading Extracted Files to the Application Server
The four main tasks of the data import process are as follows:


Start the data import framework by following these steps:


                                Log on to the SAP MDG hub. 
                            

                                Run Transaction NWBC.
                            

                                Select the appropriate role to navigate to your work center. The example uses role SAP_MDGF_*.
                            

                                In the tree menu on the left-hand side, select Data Exchange.
                            

                                Within Data Exchange, navigate to Data Transfer.
                            

                                Click on Import Master Data to go to the main screen for executing the load in SAP MDG. 
                            

Figure 9.10 shows the main screen of the data import framework in SAP MDG.
                        
Figure 9.10    The Data Import Framework in SAP MDG


Prepare for the import of master data. The data import framework is a cross-entity type application. It supports importing various entity types for various data models. Entity types are reflected in data import framework object types. Following are the steps required to prepare the upload of master data:
                        

                                Choose an object type from the Object Type dropdown.
                            

                                Enter a Description for the import of master data.
                            

                                On the list of data sources, click the Add button.
                            

                                Select the object type, and confirm by clicking OK.
                            

                                Use the search help for the source directory to select the one option that contains the data to be imported.
                            

                                Check the content of the directory by clicking on the Show Directory Content button.
                            

                                Define a Change Request Type and an Edition for the import, if applicable.
                            

                        Import settings can be selected out of a list of Object Types available in the data import framework, as shown in Figure 9.11.
                        
Figure 9.11    Data Import Framework: Import Settings


Simulate the import. Master data import can be simulated in the data import framework before executing the data import. The simulation processes the files ready to be imported and maps them into the target format but without creating a change request. After the simulation has been started, you can select Display Monitoring to navigate and analyze the logs during simulation.
                    

Execute the import. The import of master data using the data import framework automatically creates a change request in SAP MDG. A direct import of the master data into the active area is also possible by skipping the governance process. Following are the detailed steps to be followed:
                        

                                Click on the Import button.
                            

                                Note the Run Number shown on the user interface (UI).
                            

                                Go to the Display Monitoring button to navigate to the import logs.
                            

                                When the result of the status of the import run is displayed expand the data transfer logs. A change request number will be generated in the logs if the load was successful.
                            

                                If the import fails, check and rectify the data in the file and then process again. After the load is successful, the load files are automatically transferred to the archive directory.
                            



After a successful load run, the master data are loaded in the staging area in the form of a change request that must be processed according to its workflow definition to ensure the creation of the master data in the active area.
File Export Framework
For operational purposes, after the SAP MDG go live, there may be requirements to extract master data from SAP MDG. File export can be useful for extracting data for SAP Data Services or SAP NetWeaver Master Data Management (SAP NetWeaver MDM).
For this purpose, the data export framework can be used for various standard object types. File export can also be performed for key mapping and value mapping information. When SAP MDG is based on various filtering criteria, the master data can be extracted easily in the SOA-based structures in XML format.
You can provide the object type, export description, variant (if any), communication channel, file prefix, target directory, and target system.
Package sizes, target systems selection, and export scheduling to defined directories is also supported. Settings for which selecting a parameter value is mandatory have an asterisk. Master data can be filtered by clicking on Number of Selected Objects. After all settings are completed, click on Export Data to execute and generate the exported file in the desired directory. Figure 9.12 shows the screen used to trigger the data export.

Figure 9.12    Master Data Export Screen in SAP MDG with Necessary Settings
9.2.2    Key Mapping and Value Mapping
The data import/export framework can also be used for mass creation of key and value mappings. The objects are delivered out of the box and don't need any special settings. For using the data import framework like other master data objects, key mapping and value mapping load files also have to be prepared in the right structure for successful loads. In the Object Types parameter, Key Mapping and Value Mappings should be selected for the respective import/export.
Key Mapping Initial Loads
Because SAP MDG is the central master data governance application responsible for all master data maintenance activities for various downstream systems, it's likely that numbers representing the keys for master data in SAP MDG aren't the same as the keys maintained in the downstream system for the same record.
Key mapping cross-referencing information can be uploaded in the SAP MDG framework in bulk uploads. The data import framework in SAP MDG also facilitates importing key mapping information in SAP MDG. This cross-referencing information between SAP MDG and the downstream application can be loaded in SAP MDG using an XML file for various objects in SAP MDG. 
The SAP Basis structure for each of the objects remains the same while different IDs of the objects get an individual universal unique ID (UUID). Following is the structure in which the IDs are maintained in the key mapping framework: 
Group UUID - Object UUID - OTC - OITC - ID value - business system
Transaction MDG_ANALYSE_IDM can be used for analyzing the key mapping information maintained in SAP MDG. Figure 9.13 displays the Import Master Data and Mapping Information screen in SAP MDG, which is used for triggering the key mapping import.

Figure 9.13    Import Key Mapping Information
After import directories are created and visible through Transaction FILE, you can go to the Import Master Data screen and select Object Type Key Mapping in the Select Related Object area, as displayed in Figure 9.14.

Figure 9.14    Selecting the Object Type during the Key Mapping Load
Select the appropriate source directory where key mapping load files are located by selecting the right source directory defined in SAP MDG, as shown in Figure 9.15.

Figure 9.15    Choosing the Source Directory for the Key Mapping Import
Though file import is the recommended option for a key mapping load, there is another option available: program CREATE_MASS_KEY_MAPPING or Transaction CREATE_MASS_ID_MAP. Load files can be in CSV or Excel formats and should have values for the following attributes in the same sequence as mentioned here:


Object Type


Business System


Object ID Type


Object ID


External Object Type


External System ID


External Obj. ID Type


External Object ID


This can be a quick option as files can be prepared easily in Excel. However, this method is more suitable for smaller volumes only.
Value Mapping Initial Loads
Nonharmonized master data maintenance in the landscape is a reality in which it's not unusual that the Customizing values for some reference data are maintained differently between SAP MDG and SAP ERP applications. However, to support downstream processes and transactions, it might be necessary to send only the old legacy values to the respective downstream applications.
In SAP MDG projects, very often it's a requirement to maintain a list of legacy codes referencing new values in the SAP MDG environment. Value mappings can be used to map the code values for Customizing elements that are represented in the system to the code values of a named external list. This external list can be a global code list or a system-specific code list.
Value mappings can be manually maintained in Customizing through the following IMG path: Master Data Governance, Central Governance • General Settings • Value Mapping.
For the purpose of mass creation of value mappings, the SAP MDG data import framework can be leveraged for loading value mapping information. 
Figure 9.16 shows an example of the format in which a load file can be prepared and imported in SAP MDG.

Figure 9.16    Example of a Load File Prepared for Uploading Value Mapping Using Data Import
9.2.3    SAP MDG File Upload/Download
You can perform an entity-based upload/download in SAP MDG without any custom developments or enhancements needed using file upload/download. This technique supports CSV-based load files, and it's more successful for initial loads of custom objects in SAP MDG, as well as hierarchies and objects with comparatively less complex data models. Steps involved in file upload/download are explained in detail in the following sections.
File Upload
File upload is another popular option in the SAP MDG framework that is used for initial loads by uploading a file in the SAP MDG staging area. SAP delivers Web Dynpro application USMD_FILE_UPLOAD, which is used for copying master data from the load file to the SAP MDG staging area. File upload is always specific to an entity type and should mandatorily belong to an edition provided editions are applicable for the entity type.
To avoid reconfiguring the selection parameters each time a file is uploaded using this framework, settings can be saved as a variant. Application logs are updated with each file loaded in the system and can always be accessed via Transaction SLG1 with object FMDM and subobject UPLOAD. Figure 9.17 depicts the upload mode options while specifying the impact of the file upload on existing data.

Figure 9.17    Upload Mode Options: Impact of File Upload on Existing Data
File upload can be navigated through the SAP MDG home page by clicking on the File Upload option under the Processing of Multiple Objects section shown in Figure 9.18.
Following are some prerequisites required before using the file upload functionality:


                        A change request type should exist with a defined workflow to it in process modeling.
                    

                        For uploading data in an already existing change request in process, the person uploading the file should be the current processor of the respective change request. In addition, the change request status should allow changes in process modeling.
                    

                        A data model must have been assigned to you with sufficient security authorizations.
                    

                        The file that is to be uploaded is only a text file (e.g., a CSV file).
                    

                        Separators applicable on field values can be semicolons, tabs, commas, and any character.
                    

                        Files to be uploaded should be available on the application server or presentation server. 
                    


Figure 9.18    File Upload Link from the SAP MDG Home Page
The SAP MDG file upload process includes the following steps:


Determine the entity type. Chose the relevant Entity Type and Type of Transfer to specify which master data of the entity type are to be uploaded (Attributes, Language-Dependent Texts, or Hierarchies). In addition, if applicable for the entity type, select an appropriate Edition. Figure 9.19 shows the File Upload: Step 1 screen.
                        
Figure 9.19    File Upload: Determine Entity Type
                        The Language-Dependent Texts transfer type can be selected only for entity types of 1 that have language-dependent texts.
                    

Define the file structure. Select the available attributes relevant for the file upload by selecting and clicking on Add under the appropriate level, that is, Header or Data Row (see Figure 9.20).
                        
Figure 9.20    File Upload: Define File Structure (Example of Account Entity)


Determine the upload settings. In Step 3 of the file upload process, various settings have to be applied for the load under these categories: Upload Settings, File Store, and File Format (see Figure 9.21). 
                        
Figure 9.21    File Upload: Determine Upload Settings
                        These settings are explained in detail, as follows:
                        

Upload Mode This step should be carefully execute with the right option to make sure only the intended actions are performed via the file upload. Upload Settings options are shown in Figure 9.22.
                                
Figure 9.22    Upload Settings: Options for Upload Modes
                                In the Delete All and Add Records upload mode and the Attributes transfer type, the system deletes all existing master data. The system then re-creates the data records contained in the upload file. Upload mode Delete All and Add Records is only offered if the settings of the entity type in data modeling allows deletion. However, this is permitted only if the following are true:
                                
The master data to be deleted aren't already used as nodes in a hierarchy.
The system automatically deletes master data that is used as leaves in a hierarchy.
The master data to be deleted aren't used in any other entity types.

                                In the Overwrite or Add Records upload mode, the system deletes master data for which there are data records in the upload file. It then re-creates the data records contained in the upload file. This upload mode is only offered if the settings of the entity type in data modeling is defined as Allow For Deletion. If the upload process doesn't include all of the attributes, the system sets the missing attributes to Initial. If attributes that are specified as required entry fields aren't uploaded, the system will issue an error message.
                                In the Overwrite or Add Attributes upload mode, the system deletes attributes for which there are attributes available in the upload file. It then re-creates the attributes contained in the upload file in the following way:
                                
If the upload file contains an attribute with an empty value for an existing attribute of the SAP MDG system, the system overwrites the existing attribute of the SAP MDG system with the empty value of the upload file.
If the upload file contains no attribute for an existing attribute of the SAP MDG system, the system keeps the existing attribute of the SAP MDG system.
If the upload file contains an attribute with a filled value for which there was no existing attribute in the SAP MDG system before, the system adds the attribute from the upload file to the SAP MDG system.



Conversion In some file upload scenarios, it may be necessary to convert the format of data records from external to internal format (date values and figures). To specify that the system is to carry out a conversion, you can select the Execute Conversion option. Conversion options available in Step 3 of the file upload process are shown in Figure 9.23.
                                
Figure 9.23    File Upload: Select Conversion Settings


File Store The file to be uploaded can be stored on either the presentation server (local PC) or on the application server. File Store settings selection can be made as shown in Figure 9.24.
                                
Figure 9.24    File Upload: Select File Store Settings


File Format The file upload framework accepts only text files for the file upload. You can specify whether field values are to be separated by a semicolon, tab, comma, or other printable character. It is also possible for users to select a character that should be used for ignoring a row from the upload file. Figure 9.25 shows the file format separators that can be applied in Step 3 of the file upload process.
                                
Figure 9.25    File Upload: Selecting the File Format Separator


                        After the Upload Settings are chosen, the system provides an option to select if the load being performed should use an already existing change request type or create a new change request after the load is executed in the final step.
                    

Check and execute. In this step, the system uploads the data in the staging area of SAP MDG through a change request, provided there are no failed checks in terms of consistency. This is the final review step before executing and loading the data in the change request. Data can be reviewed and analyzed in this step by easily filtering rows with any messages or rows with hard errors. To fix any data inconsistencies, you can go to the previous step to select the updated load file after the data inconsistencies are fixed, avoiding going through the whole process again. Figure 9.26 shows Step 4 of the file upload process from which the upload is executed.
                        
Figure 9.26    File Upload: Check and Execute


File Download
In addition to exporting master data, SAP MDG provides another simple and easy to use method to extract data out of SAP MDG. This method can easily be navigated to through any SAP MDG domain home page and can be executed using the SAP-delivered Web Dynpro application USMD_FILE_UPLOAD. File download is always specific to a selected entity type only and a selected edition (if applicable on the entity type). Variants can be created and used for recurring downloads to avoid selections and settings each time. SAP MDG file download is a five-step process, as follows:


Determine the entity type. Similar to file upload process, Step 1 of the file download process involves determination of entity types by the user (see Figure 9.27).
                        
Figure 9.27    File Download: Determine Entity Type


Define selection. In Step 2 of the file download process, a selection of records has to be defined by the user so that only intended records can be extracted out of SAP MDG (see Figure 9.28).
                        
Figure 9.28    File Download: Define Selection


Define the file structure. In Step 3, a file structure is defined based on selecting and adding available attributes to the selected attributes (see Figure 9.29). Only the selected attributes will be downloaded accordingly. 
                    

Determine the download settings. In Step 4, the download settings and file formats are selected, as shown in Figure 9.30.
                    

Check and execute. In Step 5 of file upload process, selections parameters can be revised, and the download can be executed by clicking on Execute Download, as shown in Figure 9.31.
                        
Figure 9.29    File Download: Define File Structure

Figure 9.30    File Download: Determine Download Settings

Figure 9.31    File Download: Check and Execute


After executing the download, a screen appears showing the successful download with the number of records. You can now display, save the file, or execute another file upload for this screen, as shown in Figure 9.32.

Figure 9.32    System Message after Successful File Download Execution









9.3    Summary 
This chapter gave you an overview of data migration in an SAP MDG project. It explained the various technology options available for master data extraction, conversions capabilities, and master data loads in SAP MDG. A set of general recommendations were also provided that can help you make the right decisions while adopting a data migration approach for your project. In addition, data migration strategies were discussed in detail with the steps involved with the data export framework, data import framework, file uploads, file downloads, key mapping, and value mapping. In the next chapter we will discuss the application programming interfaces available in SAP MDG and also discuss integration scenarios with other SAP solutions.








10    Integration ScenariosSAP MDG integrates with other SAP and non-SAP solutions to support business processes that enhance or require master data. This chapter discusses various application programming interfaces (APIs) of the SAP MDG application framework and various integration scenarios that are common in SAP MDG projects.Master data can be used for the smooth execution of transactions and associated subprocesses. Harmonized master data supports end-to-end business processes involving various business solutions such as SAP Product Lifecycle Management (SAP PLM), SAP Supplier Lifecycle Management, SAP Hybris, SAP Ariba, SAP Customer Relationship Management (SAP CRM), SAP S/4HANA Finance, and other associated SAP and non-SAP solutions. This chapter provides an overview of various integration scenarios between SAP MDG and business applications or third-party solutions. It also introduces the SAP MDG application programming interfaces (APIs). The SAP MDG APIs enable developers to perform various operations for the SAP MDG data model and the governance process.In this chapter, Section 10.1 discusses various SAP API methods and operations. Section 10.2 covers the integration scenarios between SAP MDG and other SAP solutions, and Section 10.3 explores the integration scenarios between SAP MDG and third-party solutions.
10.1    SAP MDG Application Programming Interfaces
You can build multiple SAP MDG data models in the SAP MDG system. The data models are usually semantically different from each other. Each data model has an active area. Uniform access to the active area of the data model and the SAP MDG staging area is important for good architecture and increased adoptability.
The SAP MDG application framework provides a few APIs to enable uniform access to the active area and staging area, as follows:


                Governance API
            

                Convenience API
            

                Application context API
            

The governance API and convenience API can't be used together. Both of these APIs provide buffering capabilities, automatically updating or invalidating the buffer during various events. In the following sections, we'll look at each of these APIs in turn. 
10.1.1    Governance API
The class ID of the governance API is CL_USMD_GOV_API, and the governance API has a singleton instance. It's typically invoked when the Single Object Maintenance (SOM) UI isn't involved. The governance API is an abstract layer for more complex APIs such as CL_USMD_HRY_API_GOV, CL_USMD_UI_SERVICES, CL_USMD_MODEL, and CL_USMD_WF_SERVICE.
This abstract layer is required to access multiple SAP MDG APIs, and it also has built-in buffering capabilities to improve the performance of the SAP MDG applications. The abstract layer also simplifies developers' jobs because one instance of the governance API can be used to invoke multiple SAP MDG APIs, which means developers don't have to create multiple instances of various APIs. The API protects custom application code from becoming incompatible if any of the underlying complex APIs change. 
Following are the main functions of the governance API:


Perform hierarchy-related actions Beginning from SAP MDG 8.0, the governance API enables you to manipulate hierarchy-related data, such as reading and writing assignments.
                

Perform change request-related actions The governance API can be used to perform change request actions such as adding an attachment, creating a change request, and getting a change request object list.
                

Perform CRUD actions  on an entity locked in a change request The API can be used to perform CRUD actions on entity data in change requests. The governance API can't be used to update data in the active area. Only the activate method of business object BUS2250 can update data in the active area. The methods related to this action hide the complexity of underlying API CL_USMD_MODEL.
                

Perform action related to a process control  The governance API can also be used by an application to control a process by starting the workflow and validating process data.
                

Perform actions related to a transaction control  The SAP MDG application can execute transaction-wide actions such as Save by invoking the governance API.
                

10.1.2    Convenience API
The convenience API is specifically triggered for all UI-related scenarios (e.g. when the SOM UI or multi-records processing are called). The instance of this API is created during runtime by the framework. The convenience API is one level above the governance API, and it provides all the functionalities of the governance API. The convenience API internally calls the governance API. The convenience API offers additional value by bundling multiple features of the governance API into comprehensive methods (e.g. lock handling) for the various use cases.
The convenience API can be called only for one change request. This is the reason SAP forbids the coexistence of convenience API and governance API instances. The class ID for the convenience API is CL_USMD_CONV_SOM_GOV_API.
10.1.3    Application Context API
The application context API is used during application programming to access various pieces of context information. The application context API provides methods to save application context information as static variables in the context API class.
This context information is stored temporarily in the application memory. Any component that needs the context information invokes this API and consumes the context information. For example, SAP MDG Communicator would need business activity and data mode to determine the navigation to the target application. SAP MDG Communicator calls the context API to retrieve the information.
The following context information is available:


                    Data model
                

                    Business activity
                

                    Workflow information
                

                    Change request
                

                    Change request type
                

                    Change request step
                

                    Change request index (relevant for parallel processing)
                

                    Workflow item
                

                    Application parameter data
                

The API can also be used to update application context data in the workflow container. The application context API class ID is CL_USMD_APP_CONTEXT.









10.2    Integration with SAP Solutions
SAP MDG provides various technical integration options via web services, IDocs, remote function calls (RFCs), file transfer, APIs, and so on, to interface with other SAP solutions based on their compatibility. 
Integration of SAP MDG with other solutions varies based on the master data governed and how the governed data fits into the overall enterprise business process/system landscape. Some of the common integration scenarios, with respect to the standard master data objects such as material master, customer master/supplier master, finance master data objects, and the corresponding data flow, are discussed at a high level in the following sections. Infrastructure considerations, such as on premise or on demand (cloud based), firewall, service users, and so on, need to be checked with respect to how the technical landscape is set up in the enterprise. It's assumed that the integrated solutions are deployed with the latest or a recent release.
10.2.1    SAP Product Lifecycle Management
The SAP PLM solution helps in the management of an organization's product lifecycle processes in product ideation, design, manufacturing, service, and beyond. It has associated interfaces with suppliers via SAP Supplier Relationship Management (SAP SRM), distributers via SAP Supply Chain Management (SAP SCM), and so on. When a new product/change to an existing product is requested, an engineering change record (ECR) is created to maintain the associated product components (assembly) and make changes to the bill of materials (BOM). This ECR is analyzed and validated by various groups such as sourcing, manufacturing, marketing, partners, and so on. After this is approved, the change is implemented in the SAP PLM system and replicated to the SAP Business Suite system. 
When SAP Master Data Governance, Product (formerly SAP MDG, Material) governs the material master in an enterprise, the changed information (from ECR) need to be updated in the SAP MDG system, and then the change needs to be synced with other SAP MDG client systems, including the core SAP ERP system. 
In this scenario, because the need for change is triggered from the SAP PLM system, SAP PLM would be the leading system and would interface with the SAP MDG system to update the master data fields or to create new material. This avoids the requirement to map the SAP PLM-specific (nonmaster data) fields to the SAP MDG system. After the SAP MDG subworkflow is completed, all the records are updated in the client systems.
The SAP PLM system can leverage SAP MDG APIs to trigger the SAP MDG change request, and the SAP MDG system can update the SAP PLM system via the SAP PLM interface to update the information back to complete the ECR workflow process. The material number can be generated in SAP MDG and sent back to the SAP PLM application before the final SAP MDG workflow approval, so the SAP PLM process is continued. This scenario is illustrated in Figure 10.1.

Figure 10.1    SAP PLM to SAP MDG Integration
10.2.2    SAP Supplier Lifecycle Management
SAP Supplier Lifecycle Management is used to manage the supplier information in an organization starting from supplier registration to supplier phase out. It can be deployed as a standalone system or as part of SAP ERP. With SAP S/4HANA, similar functionality is available as part of the supplier and category management functionality and SAP Master Data Governance, Supplier is used for enhanced validations, enriching the data (e.g. purchasing organization and company code data) as well as distribution of suppliers.
For an organization with an SAP Supplier Lifecycle Management system in the landscape, SAP MDG, Supplier helps in supplier management workflow processes and in the associated distribution of qualified suppliers to the client systems.
When a potential supplier becomes a qualified supplier or bidder, the supplier information is sent to SAP MDG to trigger the SAP MDG, Supplier maintenance workflow process. Thus, the potential supplier information is maintained in SAP Supplier Lifecycle Management, and the bidders/suppliers are managed by the master data system. 
When there is a change to the bidder or supplier information, the change is maintained in the SAP MDG system and then replicated back to the SAP Supplier Lifecycle Management system. With the supplier client maintenance scenario activated, any change in the client systems can also trigger the SAP MDG change request process, and the information can be sent to the connected systems to integrate with the operational processes in procurement for supply chain, finance, product development, cost accounting, and so on. This integration scenario is illustrated in Figure 10.2. The client maintenance scenario for suppliers isn't supported in an SAP S/4HANA system, as suppliers are maintained through the business partner in SAP S/4HANA.

Figure 10.2    SAP Supplier Lifecycle Management to SAP MDG Integration
10.2.3    SAP Hybris
SAP Hybris Product Content Management is used for management of product-related content, including catalog products and managed products. It helps to classify and categorize product versions and manage catalog versions, including supplier product catalogs. The product-related content, including unstructured data, is sourced from multiple sources and managed in the SAP Hybris Product Content Management solution. 
SAP MDG, Product and SAP Hybris Product Content Management complement each other in managing the product data. The managed product master data can be fed from SAP MDG, Product to the SAP Hybris Product Content Management solution, and the catalog-only products can be consolidated directly in SAP Hybris (see Figure 10.3). 

Figure 10.3    SAP Hybris Product Content Management and SAP MDG Integration
Another option is to have all the product content consolidated in the SAP Hybris system and the managed product data replicated to the SAP MDG system for governance; thus, any updates are made in sync between the two systems and other client systems. 
10.2.4    SAP Ariba
SAP Ariba Supplier Management solutions help in the on-boarding and management of suppliers in an enterprise by managing supplier data across all SAP Ariba solutions. It encourages supplier self-registration/maintenance, and after the information is approved, the information is available for sourcing and contracts. 
With SAP MDG, Supplier in the landscape, the supplier master data can be transferred between the SAP MDG system and the SAP Ariba solution using middleware (e.g., SAP Process Orchestration) with web services (service-oriented architecture [SOA]) as the communication mechanism. In the supplier creation process, either the SAP Ariba Supplier Management solution or SAP MDG can be the leading solution.
With SAP MDG, Supplier as the leading system, a duplicate check with the SAP Ariba data needs to be done before creating the supplier. The data are then replicated to the client systems, including the SAP ERP and SAP Ariba network. Any updates from the SAP Ariba network need to be routed through the SAP MDG, Supplier solution for data sync and further replication to other client systems. The communication between SAP MDG and SAP Ariba goes through SAP Process Integration (SAP PI) (middleware) using web services.
For any new suppliers or updates maintained through the SAP Ariba supplier self-registration process, the data are sent to SAP MDG system for further replication. The ID needs to be mapped for duplicate check process, further updates, and replication. 
SAP PI helps in the periodic polling of the SAP Ariba system to check for any updates. If any updates are found, they are then governed through an SAP MDG change request process. SAP Ariba RESTful APIs are used for supplier master data integration by retrieving messages from the SAP Ariba network as well as to update the supplier profile in the SAP Ariba Supplier Management solution. This scenario is illustrated in Figure 10.4.

Figure 10.4    SAP Ariba and SAP MDG Integration
10.2.5    SAP Customer Relationship Management
For an organization with an SAP CRM system in the landscape, SAP Master Data Governance, Customers helps in customer management workflow processes and in the associated distribution of customer master data to the client systems.
When a prospective customer or lead is enrolled as a customer, the customer information is sent to SAP MDG to trigger the SAP MDG, Customers maintenance workflow process. Thus, the potential customer information is maintained in SAP CRM, and the customers are managed by the master data system. When there is a change to the customer information, the change is maintained in the SAP MDG system and then replicated back to the SAP CRM system. In this scenario, the SAP CRM middleware connection between SAP CRM and the SAP ERP system needs to be deactivated for the replication of business partner data. The replication of data can be through web services.
With the customer master client maintenance scenario activated, any change in the client systems can also trigger the SAP MDG change request process, and the information can be send to the connected systems to integrate with the operational processes (see Figure 10.5). The communication between the system can be achieved through web services (service-oriented architecture [SOA]). 

Figure 10.5    SAP CRM and SAP MDG Integration
10.2.6    SAP S/4HANA Finance
Central Finance can be considered one of the deployment approaches when starting the transformation to adopt SAP S/4HANA. It enables replication of finance documents into a Central Finance instance (SAP S/4HANA Finance). In a multisystem landscape, Central Finance adds value through a nondisruptive implementation approach to consolidate the systems over time. The Central Finance deployment approach delivers harmonized data for consolidated financial and management reporting.
Data from multiple source systems need to be mapped to the Central Finance system. SAP MDG can be leveraged to maintain key master data mappings (e.g., chart of accounts, controlling areas, plant, material, cost center, etc.) across various system to have a harmonized data set for reporting. Hence, when an SAP ERP Financials (SAP ERP FI) posting is pushed from the source system to the Central Finance instance, corresponding master data key values are retrieved with respect to the systems (source system and Central Finance instance mapping in SAP MDG). Additionally, SAP Master Data Governance, Financials functionalities can be used to govern the SAP ERP FI master data objects such as SAP General Ledger (G/L) accounts, hierarchies, and so on. Thus, SAP MDG adds value to the Central Finance deployment scenario, along with the management of other master data domains and their respective mappings.
For use of SAP Credit Management with SAP S/4HANA in the Central Finance scenario, refer to SAP Note 2337298 for a sample implementation for the BAdI UKM_CONV_TO_PARTNER to convert customer numbers between systems.
10.2.7    SAP Information Steward
SAP Information Steward mainly helps in analyzing and monitoring the data quality and data integrity across the enterprise. It also helps in metadata management, match review, definition of cleansing packages to parse and standardize the data, and so on. 
SAP Information Steward can be used to analyze data for the SAP MDG data load as well as for continuous monitoring of master data in the SAP MDG system. It can complement other data load and consolidation solutions to understand the data quality and help in taking remediation steps.
Ongoing data monitoring is a key part of the master data management process cycle. It helps to validate the existing data rules and identify/refine new data rules with respect to changing Customizing, business rules, enterprise structures, and so on. The data errors need to be fixed through a data quality remediation process. 
SAP MDG helps in the data remediation process by leveraging the embedded data quality remediation framework. Data quality scorecards in SAP Information Steward provide insights into the failed data records that didn't meet the predefined data rules. SAP Information Steward also provides match review functionality to check on the data records that match based on configured match rules and derived scores. These records can be reviewed in the SAP MDG data quality remediation UI, and the data stewards can trigger a change request to correct the data. A new business rule can then be configured in SAP MDG to make sure that records are corrected as they go through the data management process in SAP MDG. A sample use case for integration with SAP Information Steward is illustrated in Figure 10.6.

Figure 10.6    Data Remediation Using SAP Information Steward
For integration with a data quality tool, a data quality connector class is implemented with the interface IF_MDG_DQR_DQ_SERVICE. The UI is based on the application MDG_DQR_OVP. The data quality remediation service is configured using Customizing path (Transaction MDGIMG), MASTER Data Governance, Central Governance • General Settings • Data Quality and Search • Data Quality Remediation • Define Data Quality Service. The change request process is defined to remediate the failed records through an SAP MDG process.









10.3    Integration with Third-Party Solutions
In system landscapes, where the SAP MDG system should integrate with other solutions, including non-SAP solutions, many options are available. As discussed in previous chapters, master data information can be replicated to or from the SAP MDG system using web services, files, RFCs, business application programming interfaces (BAPIs), or APIs. 
If the standard data model is to be enhanced with additional entities or attributes, and this information needs to be exchanged with other solutions, the interfaces need to be extended accordingly.
Some of the use cases include integration with address libraries for address check, tax jurisdiction code validation with third-party tax software, integration with non-SAP PLM solutions, SAP CRM solutions, material pricing solutions, and so on. Most of these third-party solutions provide proprietary SAP interfaces to support these scenarios. SAP MDG can be integrated via open standard interfaces such as web services for real-time communication or via file mechanism for batch communication. SAP interface mechanisms such as RFCs and IDocs can be used though middleware, preferably SAP PI, for third-party communication and transformations.
Additionally, an enrichment framework can be leveraged to enrich the SAP MDG data fields. The data can be enriched using an internal or external service. The standard delivery provides the address enrichment logic to integrate with external address libraries and provides the ability to integrate the enrichment UI with the SAP MDG UI. The key components that need to be defined are the enrichment adapter, enrichment feeder, and enrichment UI. The enrichment adapter should have the implementation of interface IF_USMD_ENRICHMENT_ADAPTER. It makes a call to the external or internal service to get the data for data enrichment. The enrichment feeder class implements interface IF_USMD_ENRICHMENT_FEEDER and converts the data from the adapter format to the SAP MDG format and vice versa. The enrichment UI should be a Web Dynpro ABAP component with Web Dynpro interface MDG_ENRICHMENT_INTF. A service can have only one adapter implementation and the associated feeder class. The enrichment spots can be leveraged for enrichment of address data, tax jurisdiction data, and so on.
SAP key mapping and value mapping frameworks can be used for mapping the data consumed by both SAP and non-SAP solutions during replication and consolidation processes.









10.4    Summary
This chapter provided an overview of various APIs and a high-level view of common integration scenarios with other solutions. The following chapters will give more information on extending the standard SAP MDG content and other SAP MDG functionalities.








11    SAP Fiori Applications for SAP MDG With the goal to simplify the user experience for SAP users, the new SAP Fiori UX technology provides the same look and feel across all devices and is easy to adopt. This chapter provides an overview of SAP Fiori apps available as part of SAP MDG 9.0.The ability to access any application seamlessly via a mobile device is a key need, particularly for casual business application users. To meet the need for accessing SAP MDG applications via mobile devices, SAP provides SAP Fiori apps. Several SAP Fiori apps are available as part of the standard content. This chapter provides an overview of the SAP Fiori apps available for the SAP MDG solution. The chapter details the landscape requirements, key capabilities, and extensibility options for the SAP Fiori apps for SAP MDG.Section 11.1 provides an overview of SAP Fiori and helps you understand key terminologies used in SAP Fiori development such as SAP Gateway, OData, and so on. Section 11.2 provides details on SAP Fiori apps across all standard domains. Section 11.3 provides the extensibility options for SAP Fiori apps.
11.1    Introduction to SAP Fiori
SAP Fiori is an HTML5-based user interface (UI) technology using SAPUI5 add-ons. SAP Fiori is the next-generation UI technology allowing users the same look and feel across all kinds of devices—mobile, tablet, and desktop. This provides a consistent user experience across all SAP solutions. It adapts to various form factors based on the device. The key criteria for SAP Fiori UI are as follows:


Role-basedUIs are task specific to a role.
            

Responsive/adaptiveThe same user experience is provided across all types of devices.
            

SimpleThe user experience is maintained for a specific user type, specific use case, and minimum screens/navigation.
            

CoherentThe UI is easy to understand.
            

DelightfulThe UI is easy to use.
            

The SAP Fiori launchpad provides access to SAP Fiori apps. The apps are role based with a common role definition. The launchpad is context aware and connects related apps, supporting easy bookmarking and collaboration. The SAP Fiori search enables you to search and list recently used/searched apps. You can personalize the home page based on your preferences. Apps are displayed in the form of a tile in the launchpad, so you can have access to multiple apps, and the corresponding tiles are assigned or grouped in a catalog or group.
Different SAP Fiori app types include transactional apps, analytical apps, fact sheets, and SAP Smart Business apps. Transactional apps provide task-based access with guided navigation to perform tasks such as creation or maintenance of objects, and so on. Analytical apps provide insights to processes or key performance indicator (KPI) information. Fact sheets help you search and explore information related to specific objects. SAP MDG standard content involves transaction apps. The analytical and SAP Smart Business apps associated with SAP MDG are discussed in detail in Chapter 8. SAP Fiori apps can also be accessed via the SAP Fiori Client mobile app.
A high-level architecture diagram of the SAP Fiori system landscape is shown in Figure 11.1.
The master/transaction data in the backend system is exposed as Open Data Protocol (OData) Services via RESTful application programming interface (API) implementation, and the HTML5/SAPUI5-based SAP Fiori screens consume these services. To expose the data via OData Services, the SAP Gateway server or corresponding add-ons are required. Usually with system landscapes, where different types of SAP applications are involved, an SAP Gateway hub is required, so that it's independent of the version level of the underlying SAP ERP systems. With an SAP MDG system in the landscape, the SAP MDG data can be exposed via the SAP Gateway hub. An SAP Gateway hub is nothing but a vanilla SAP ERP system with SAP Gateway add-ons. Each application-specific, standard-delivered SAP Fiori UI is also provided via UI add-ons/software components. 

Figure 11.1    SAP Fiori Landscape
Similarly, the SAP MDG UI add-on needs to be installed in the SAP Fiori frontend. The two main frontend software components for SAP Fiori apps in SAP MDG are UIMDC001 and UIMDG001. The UIMDC001 component deals with the Consolidation and Mass Processing apps, and the UIMDG001 component deals with the Central Governance apps. 









11.2    SAP Fiori Applications for SAP MDG
The key installation components for SAP Fiori apps, as of SAP MDG 9.0, are as follows:


                Frontend server requirements:
                

                        SAP NetWeaver 7.31 SP 04 or above
                    

                        SAP Fiori frontend server 2.0 (e.g., containing components SAP NW GATEWAY FOUNDATION, USER INTERFACE TECHNOLOGY, SAPUIFT, and UI FOR BASIS APPLICATIONS for SAP NetWeaver 7.5)
                    

                        SAP Fiori for SAP MDG 2.0 (containing components UIMDC001 and UIMDG001)
                    



                Backend server: SAP MDG 9.0 (containing component MDG_UX)
            

                SAP Fiori apps reference library provides technical and implementation information on various SAP Fiori apps. The SAP Fiori apps reference library can be accessed via https://fioriappslibrary.hana.ondemand.com/sap/fix/externalViewer (e.g., search using application component CA-MDG to view the SAP Fiori app information). 
            

The standard content also provides the framework to customize/implement new UIs based on the generated data sources for analytics (for standard data model/custom model).
After the landscape requirements are installed, the key administrative actions to set up the SAP Gateway system and the connection to the backend server need to be executed. These tasks can be performed individually or by executing the predefined task list via the task manager for technical configuration (Transaction STC01). The OData Services and Internet Communication Framework (ICF) services corresponding to each SAP Fiori app (SAPUI5 application) can be activated using the task list or Transactions /IWFND/MAINT_SERVICE and SICF, respectively. The key SAP Fiori apps for SAP MDG are as follows:


Request Business Partner  (SAP MDG) This app can be used to trigger a request for the creation of a business partner containing basic data. The key implementation objects of the app are as follows: 
                

                        OData Service: MDG_BP_SRV


                        SAPUI5 application: MDG_REQ_BP


                        Business role: SAP_MDG_BCR_REQUESTER_T


                The Request Business Partner app is shown in Figure 11.2.
            

Request New Cost Center  (SAP MDG) This app can be used to trigger a request for the creation of a cost center containing basic data. The key implementation objects of the app are as follows: 
                

                        OData Service: MDG_COSTCENTER_SRV


                        SAPUI5 application: MDG_REQ_CC


                        Business role: SAP_MDG_BCR_REQUESTER_T


                A screenshot of the Request New Cost Center app is shown in Figure 11.3.
                
Figure 11.2    Request Business Partner App

Figure 11.3    Request New Cost Center App


Request Customer  (SAP MDG) This app can be used to trigger a request for the creation of a customer master containing basic data. The key implementation objects of the app are as follows:
                

                        OData Service: MDG_CUSTOMER_SRV


                        SAPUI5 application: MDG_REQ_CUST


                        Business role: SAP_MDG_BCR_REQUESTER_T




Request Customer Change  (SAP MDG) This application can request changes to a customer master data. The key implementation objects of the app are as follows:
                

                        OData Service: MDG_EDIT_CUSTOMER


                        SAPUI5 application: MDG_EDIT_BP


                        Business role: SAP_MDG_BCR_REQUESTOR_T




Request New Material  (SAP MDG) This app can be used to trigger a request for the creation of a material master containing basic data. The key implementation objects of the app are as follows: 
                

                        OData Service: MDG_MATERIAL_SRV


                        SAPUI5 application: MDG_REQ_MAT


                        Business role: SAP_MDG_BCR_REQUESTER_T


                The Request New Material app is shown in Figure 11.4.
                
Figure 11.4    Request New Material App


Request Profit Center  (SAP MDG) This app can be used to trigger a request for the creation of a profit center containing basic data. The key implementation objects of the app are as follows:
                

                        OData Service: MDG_PROFITCENTER_SRV


                        SAPUI5 application: MDG_REQ_PC


                        Business role: SAP_MDG_BCR_REQUESTER_T




Request Supplier  (SAP MDG) This app can be used to trigger a request for the creation of a supplier containing basic data. The key implementation objects of the app are as follows:
                

                        OData Service: MDG_SUPPLIER_SRV


                        SAPUI5 application: MDG_REQ_SUPPL


                        Business role: SAP_MDG_BCR_REQUESTER_T




Track My Requests  (SAP MDG) This app can be used to track the requests submitted. The key implementation objects of the app are as follows:
                

                        OData Service: MDG_MYCR_SRV


                        SAPUI5 application: MDG_MY_REQ


                        Business role: SAP_MDG_BCR_REQUESTER_T




Master Data Governance Consolidation  These apps can be used to consolidate and harmonize business partner/material master data. The key implementation objects of the app are as follows:
                

                        OData Services: MDC_PROCESS_SRV, MDC_PROCESS_SRV_194, MDC_PROCESS_SRV_147, MDC_PROCESS_SRV_BP, MDC_PROCESS_SRV_MD_147 


                        SAPUI5 application: MDG_CONS


                        Business role: SAP_MDC_BCR_MASTERDATA_SPEC_T


                More information on consolidation and mass processing apps will be discussed in Chapter 16.
            

Approve Master Data/Extended  This app is used to approve or reject the change requests submitted. It supports both single-object change requests and multi-object change requests. It also displays information on the data changed as part of the change request. The key implementation objects of the app are as follows:
                

                        OData Services: MDG_APPROVE_CR, MDG_CUSTOMER_GENIL_SRV, MDG_FINANCIALS, MDG_GL_ACCOUNT, MDG_MATERIAL_APPROVE_CR_SRV, MDG_SUPPLIER_GENIL_SRV


                        SAPUI5 application: MDG_APPROVE_CR2


                        Business role: SAP_MDG_BCR_APPROVER_T




Master Data Governance Mass Processing  These apps can be used to mass process master data records. The key implementation objects of the app are as follows:
                

                        OData Services: MDC_PROCESS_SRV, MDC_CUSTOM_OBJECT_SRV, MDC_PROCESS_SRV_194, MDC_PROCESS_SRV_147, MDC_PROCESS_SRV_BP, MDC_PROCESS_SRV_MD_147 


                        SAPUI5 application: MDG_CONS


                        Business role: SAP_MDC_BCR_MASTERDATA_SPEC_T




The Request and Approve apps are linked to the central governance workflows. They have separate change request types. The predefined change request types can be imported by activating the following Business Configure Sets (BC Sets) for each domain (as of SAP MDG 9.0):


CA-MDG-APP-BP_CR_ODATA_05: Business partner
            

CA-MDG-APP-CUS_CR_ODATA_05: Customer
            

CA-MDG-APP-FIN_CR_ODATA_05: Financials
            

CA-MDG-APP-SUP_CR_ODATA_05: Supplier
            

MDGM_MDG_MATERIAL_CR_ODATA_05: Material
            

From an end-user perspective, the SAP Fiori apps are accessed via the SAP Fiori launchpad (Transaction /UI2/FLP). Additional field-level derivations for SAP Fiori UIs can be defined using the Business Add-In (BAdI) MDG_GW_FIORI_DERIVATIONS. The standard BAdI USMD_RULE_SERVICE, if already implemented, takes precedence over this BAdI.









11.3    Extensibility Options
The requirement for extending the standard SAP Fiori apps can be triggered through the requirement to personalize the user experience of the SAP Fiori apps or an addition of new entity/attribute to the data model. The key steps/dependent steps in extending an SAP Fiori app at a high level are as follows:


                Extension of the data model (SAP MDG layer) 
            

                Redefinition of OData Service (SAP Gateway layer)
            

                Extension of the UI layer
            

                Launchpad extension 
            

                Use of SAP Theme Designer to enhance the app user experience
            

Some of these steps can be optional based on the use case. These steps are discussed in the following sections. A technical overview of the various dependencies in an SAP Fiori app is given in Figure 11.5.

Figure 11.5    Technical Overview of SAP Fiori Components
11.3.1    Extension of the Data Model (SAP MDG Layer) 
To display custom fields in the SAP Fiori app, extension of the SAP MDG data model is required. This is explained in detail in Chapter 12, Section 12.1. The data model extension approach varies with respect to the storage type of entities and related attributes. 
Redefinition of OData Service (SAP Gateway Layer)
The main use cases for redefinition of the OData Service are as follows:


Add new fields to an existing entity Additional custom attributes to the data model entity or additional fields for display or calculation could trigger this requirement to add new fields to an existing entity.
                    

Add new entities When the SAP MDG data model is enhanced with a new entity, if those fields are to be used or displayed in the UI, the OData Service corresponding to the UI should be extended as well.
                    

Add new navigations If two entities need to be linked through relationships, navigation properties are defined, and the respective association sets are configured with the respective cardinality.
                    

The key steps in the redefinition of an OData Service are as follows. Some of them are optional based on the requirement. Additional information on the extension of OData Service in SAP Gateway Service Builder can be found in SAP Note 1919388.


Create a new extensibility project using Transaction SEGW.  OData Service is based on an entity data model (EDM). The create, read, update, delete (CRUD) methods are used to access and maintain the data. These methods are implemented and defined using two main classes: model provider class (MPC) and the data provider class (DPC). MPC is used to define the model involving the entity and related properties. DPC is used to implement the CRUD methods as well as function imports. 
                        The SAP MDG OData projects in SAP Gateway Service Builder are displayed in Figure 11.6. The leading MPC and DPC class names associated with each project can be viewed from the property details of the respective data model and service implementation.
                        
Figure 11.6    SAP Gateway Service Builder Projects for SAP MDG Scenarios


Redefine the OData Service. On redefinition of the service using the SAP Gateway Service Builder (Transaction SEGW) and generation, the provider classes are created that inherit from the base class. Additional logic to pass the data is written in the new provider classes.
                    

Add the custom entity/property.On addition of a new entity, the associated query methods for CRUD operations need to be implemented.
                    

Add the association and navigation property.On addition of an association or a navigation property and referential constraint, the associated query methods need to be updated for the associated entities.
                    

Redefine methods (DPC).For the extensions, the inherited methods of the DPC source service needs to be redefined.
                    

Generate the OData project. After the service is redefined, the project is generated to be exposed for consumption.
                    

Register and test the new OData project as a new service using Transaction /IWFND/MAINT_SERVICE.After the OData Service is extended, it's recommended to clear the cache at both the SAP Gateway and SAP MDG system using Transactions /IWFND/CACHE_CLEANUP and /IWBEP/CACHE_CLEANUP, respectively.
                    

11.3.2    Extension of the User Interface Layer
SAP Fiori apps for SAP MDG, especially the request apps, are lean apps meant for casual users. It's recommended to limit the UI extensions to be modification free, so that future upgrades don't affect the extensions. The various ways of enhancing a standard SAP Fiori app are as follows:


View modification This involves hiding an UI element in the standard view.
                

View extension This involves adding additional UI elements to the standard view through the extension points available in the view.
                

Controller extension using a hook method This involves adding additional logic at specific places in the controller through the hook methods available as part of the standard view.
                

i18n resource extension This involves changing the label texts of the UI elements. 
                

View replacement (if required) This involves replacing the standard view.
                

Controller extension (if required) This involves changing the logic of the controller methods.
                

Custom view (if required) This involves creating a custom view and adding this additional view to the app.
                

These extension/enhancements can be implemented at the view level and fragment level through the controller hook methods or enhancement of files storing the metadata information such as i18n internationalization strings, bootstrap Component.js files, and so on. A SAPUI5 page may include multiple fragment files.
An extension application is created during design time. At runtime, the custom extended application is merged with the standard app that is referenced in the bootstrap Component.js metadata file. It's recommended to adopt a view extension, view modification, or controller extension via a hook method or i18n resource extension before considering other extension/UI Customizing options.
The recommended approach to extend the SAP Fiori UI is to use the SAP Web IDE tool shown in Figure 11.7. SAP Web IDE is the web-based integrated development environment for creating and enhancing HTML5/SAPUI5-based UI applications. To access an SAP Web IDE tool in the SAP Cloud Platform and connect to an on premise system, a cloud connector needs to be installed. 

Figure 11.7    SAP Web IDE 
The key steps involved in the extension of an SAP Fiori app are as follows:


Create an extension project. You can create an extension project in SAP Web IDE by going to the menu path File • New • Extension Project, as shown in Figure 11.8.
                    
Figure 11.8    Creating a New Extension Project


Select the application to extend from the SAP Gateway server. Import/select the application from the SAPUI5 ABAP repository as shown in Figure 11.9. On selection of the system, it lists all the SAPUI5 applications that can be extended. You can filter the required applications from the list. After the base application is selected, SAP Web IDE proposes the extension project name and enables you to import the base application if you choose.
                

View the project in the extensibility pane. After the extension project is created, view the extensibility pane by navigating to Tools • Extensibility Pane as shown in Figure 11.10. This view allows you to preview the application in both preview mode and extensibility mode.
                    
Figure 11.9    Import Project

Figure 11.10    Viewing the Extensibility Pane


Select and extend the extension option. The Outline section displays the UI elements of the extension project as shown in Figure 11.11. You can filter this view by extensible elements, extension points, or extended elements. Thus, you can easily identify the extensible options, such as view extensions, controller hook methods, and so on, of an SAP Fiori app through this view. Detailed documentation on each extension option of an SAP Fiori app is available with the associated documentation in the SAP Fiori apps reference library as well as in the SAP Help documentation. 
                    
Figure 11.11    Extensibility Pane Outline Options
                    After an extension point is selected from the Outline section, you can extend it by opening the code view to add the additional logic in JavaScript or XML, based on the artifact selected. An example of the MDG_REQ_BP application is shown in Figure 11.12. You can also select the extension option from the UI preview. The respective extension method is auto selected in the Outline section. SAP Web IDE also provides additional extension options, such as hiding a UI element by selection in the context menu, without writing a piece of code because the system automatically generates the required code. 
                    Extension logic can be written in the controller hook methods as shown in Figure 11.13. After the required elements are extended, you can view the extended elements via filtering in the Outline section.
                    
Figure 11.12    Extensible Elements of MDG_REQ_BP

Figure 11.13    Controller Hook Methods


Deploy the extended application to the ABAP repository. After the required enhancements and extensions are performed, you can deploy the application to the SAPUI5 ABAP repository of the SAP Gateway system, as shown in Figure 11.14.
                    
Figure 11.14    Deploying the Extension Application


11.3.3    Launchpad Extension 
To link the extended app to the SAP Fiori launchpad for user access, the launchpad should be extended. An overview of various contents of the launchpad configuration is shown in Figure 11.15. A catalog is a set of apps that a user can add to the home page, and a group is a set of tiles a user sees on the home page. A tile corresponds to an application. Target mapping defines the navigation target based on the user authorizations. This intent-based navigation is achieved by specifying the corresponding semantic object, action, and related parameters of an application. 
Thus, an application can be configured to behave differently based on the intent specified in the target mapping definition. This helps in providing the right user access as well as providing the right functional/business scope. The definition of catalogs, tiles, and so on is performed using the launchpad designer. The launchpad designer of a configured frontend server can be accessed using the URL http://<host>:<port>/sap/bc/ui5_ui5/sap/arsrvc_upb_admn/main.html?.

Figure 11.15    Launchpad Content Model
The steps required to define a catalog as part of the launchpad are as follows:


                    Create the launchpad app using Transaction LPD_CUST.
                

                    Create a catalog with a new tile and target mapping using the launchpad designer. Provide the intent information of the extended app for navigation.
                

                    Add the catalog in the Menu tab of a new role or to an existing custom role using Transaction PFCG, and assign the role to the user ID.
                

                    Add the new catalog and tile to the user's home page using the SAP Fiori launchpad (Transaction /UI2/FLP).
                

Semantic objects delivered by SAP can be accessed via Transaction /UI2/SEMOBJ_SAP, and custom semantic objects can be accessed via Transaction /UI2/SEMOBJ.
11.3.4    SAP Theme Designer
SAP Theme Designer is the browser-based tool used to customize the themes of the SAP Fiori launchpad and SAPUI5 applications. You can also create custom themes for SAP UI applications. The SAP Theme Designer can be accessed using Transaction /UI5/THEME_DESIGNER, as shown in Figure 11.16. 

Figure 11.16    UI Theme Designer
You can access the custom theme using Transaction /UI5/THEME_TOOL, as shown in Figure 11.17. This application is also available as part of the SAP Cloud Platform. You can export and import the configured custom themes. The launchpad theme can be defined in Transaction /UI2/NWBC_CFG_SAP, and the user-specific theme can be defined in Transaction /UI2/NWBC_CFG_CUST. For more information, refer to SAP Note 1852400.

Figure 11.17    Custom Themes









11.4    Summary
This chapter gave an overview of SAP Fiori and details about the SAP Fiori apps available as part of SAP MDG 9.0. The chapter also discussed various extensibility options available for the standard SAP Fiori apps. The consolidation and mass processing SAP Fiori app functionalities will be discussed in more detail in Chapter 16. The next chapter discusses various extensibility options available with the standard SAP MDG, central governance content.








12    SAP MDG ExtensibilitySAP MDG provides various options to enhance the standard functionality based on business needs. This chapter discusses those options and use cases to enhance the SAP MDG, central governance scenarios.Master data management processes vary from one organization to another, and SAP MDG can be enhanced to meet the specific needs of your organization. Various options are available to extend or enhance the standard content. The key enhancement options available for the SAP MDG, central governance solution are as follows:

            Data model enhancements
        

            User interface (UI) enhancements
        

            Process enhancements
        
The data model enhancements involve addition or enhancement of entities and attributes to the standard model. UI enhancements involve updating the UI with additional fields, change of layout, and so on. Process enhancements involve creation of new change request types/business activities, workflow configurations, and so on.In addition to these three key areas, other functionalities such as data import, replication, search, services, and so on can also be enhanced. The options, specific to SAP MDG, will be covered in this chapter. This chapter discusses the extensibility options of the standard delivered content. The framework and development requirements of a custom master data object governance process are discussed in detail in Chapter 13 and Chapter 14. Section 12.1 of this chapter discusses various options to extend the data model, and Section 12.2 discusses various options to extend the UI. Section 12.3 discusses the various Business Add-Ins (BAdIs) available as part of the standard SAP MDG content, and Section 12.4 discusses the search enhancement options. Further information about these topics can be found in Chapter 3, Chapter 4, and Chapter 5. 
12.1    Extending Standard Data Models
The data that needs to be managed and governed via a governance process is determined by the data model definition. The standard content provides the option to configure what data need to be governed based on the available data entities and attributes of the data model. It also provides the option to add additional entities or attributes that aren't part of the standard data model. 
Some of the common use cases for data model extension are adding industry-specific master data attributes, adding enhanced data fields that already exist in the master data repository tables (extended SAP ERP tables), adding process-specific attributes, adding fields that need to exist only in SAP MDG staging tables and not in SAP ERP tables (flex option), among others. These requirements can be achieved by adding additional entities or extending the standard entities with new attributes. These new entities can be mapped to the reuse area or be flex entities. The relationships between the new entities and the existing entities need to be maintained to validate the data. The most common use cases for a data model extension include the following:


Adding existing standard fields  (reuse option) This involves the requirement to extend the standard SAP MDG data model with standard fields that aren't part of the SAP MDG data model. Examples of such fields include those that come with industry-specific solution add-ons, fields related to standard database tables that aren't in the SAP MDG standard scope, and so on. Based on the number of fields and the type of fields (check tables, text fields, etc.), these fields could be added as attributes to the standard entities or custom entities in the standard data model.
            

Adding custom fields  (reuse option) This involves the requirement to extend the standard SAP MDG data model with custom/enhanced fields that were added to the standard SAP ERP tables or custom tables that are linked to the standard tables. Based on the number of fields and the type of fields (check tables, text fields, etc.), these fields could be added as attributes to the standard entities or custom entities in the standard data model.
            

Adding custom fields (flex option) This involves the requirement to extend the standard SAP MDG data model with custom fields that need not be mapped to the active area. Examples of such fields include process-specific fields that are used to determine process flows, fields based on user entry, extending data model with additional flex fields, and so on.
            

The following sections discusses various steps to implement these data model enhancements, from adding attributes to the standard data model to adding new entities to data models. 
12.1.1    Adding Attributes to Standard Data Models
Adding attributes to the standard data model can be accomplished by adding attributes to the existing entities or defining an entity relationship. Attributes can be added only to storage type 1 or type 4 entities. The new entities can be flex entities or reuse entities, based on the entity definition and type of data (master, reference, process-specific, etc.). If the newly added field is part of a check table or has foreign keys, then a storage type 3 entity is defined, and a relationship is configured with the linked entity. If the field already exists in the SAP ERP tables (reuse option), mappings between the staging and active area need to be maintained through Service Mapping Tool (SMT) mapping. The definition of entities, relationships, and usage are discussed in detail in Chapter 3.
For the business partner data model, if the business partner-related field needs to be part of the customer or vendor UI, customer vendor integration (CVI) mapping needs to be defined to map the field from the business partner model to the corresponding customer or vendor field. Because the finance data model (0G), unlike the material master or business partner data model, is based on the flex option, SMT mapping isn't required.
The customer namespace for adding fields is ZZ or YY. A namespace and custom package need to be provided on configuration; the structures are generated on activation of the data model. They can be visualized in the configuration view to display the graphical model. The generated tables can also be verified by Transaction MDG_DATA_MODEL. 
After the data model is extended, the data model is activated and generated, so that the extended fields can be used in the governance process. The staging area need to be adjusted by running report USMD_ADJUST_STAGING, which helps in adjusting the staging area for the linked change requests. The generated structures are used to configure and extend the UIs, based on the entity/attribute relationships. 
After the attributes to be enhanced or added are identified, the various steps to extend a standard data model are as follows. The configuration paths and detailed navigation for each of these steps are described in Chapter 3, Section 3.1.7. For the business partner data model enhancements, CVI mapping needs to be updated if the business partner fields need to be mapped to the customer/supplier structure, as discussed in Chapter 2 (Section 2.4.5). 


                    Extend the SAP ERP table (for new reuse fields), if it doesn't already exist (reuse option for business partner and material master data models).
                

                    Using Transaction MDGIMG, select the data model, and extend it with the new attributes in the corresponding entity definition associated with the SAP ERP table or with a referencing relationship.
                

                    Activate the date model.
                

                    Generate data model-specific structures. Structures for mapping between staging and active areas (for reuse area models) and field properties are mandatory. Other structure usage types (structures for PDF-based forms, for SAP Enterprise Search, and for field control) may be added as required. Additional metadata structures may need to be extended based on the domain (e.g., for the material domain, extend structure MDG_BS_MAT_S_MAT_DATA, check/adjust corresponding table type structures MDG_BS_MAT_S_<table>* and CMD_BS_MAT_S_<table>*, as needed. For more information check the help documentation.).
                

                    For the reuse option, enhance the access and respective handler classes (for the business partner model) to read and write in the reuse area. Access classes control the handler class calls. Handler classes need to be enhanced to read and save data for custom entities and attributes. A single handler class is responsible for a single object operation. 
                

                    Define SMT mapping (for reuse fields). This defines the field mapping between the staging area and primary persistence area in both directions so that, upon activation of the change requests, the data is saved to the reuse area (active area).
                

                    Adjust the staging area for linked change requests.
                

12.1.2    Adding New Entities to the Data Model
The data model can be extended with additional entities. The data associated with these entities can be stored in SAP MDG or in SAP ERP tables upon activation of the change request. The newly defined entities need to be linked to other entities via relationships as defined in Chapter 3, Section 3.1.4. The cardinality of the relationship is determined based on the data set.
The steps to extend the standard data model with new entities are the same as those mentioned in Section 12.1.1. For the material data model, the MDG_BS_MAT_API_SEGMENTS_EXT Business Add-In (BAdI) is also implemented.
After the data model is extended, the UI needs to be enhanced. For the business partner model, the Generic Interaction Layer (GenIL) model is also extended to connect the data model with the GenIL model, which integrates the model fields to the UI. The mapping of the GenIL model to the data model is done through view cluster VC_MDG_BS_GENIL_C (Transaction SM34).









12.2    Enhancing SAP-Delivered User Interfaces
The Floorplan Manager-based UIs provides greater flexibility in enhancements based on requirements. Each component of a Floorplan Manager application, discussed in Chapter 4, can be adapted to custom requirements. These adaptations can be made to all UIs, including single-object processing UI, multirecord processing UI, search UI, and so on. For more information, refer to SAP Note 1619534. 
Multiple adaptation options—both configuration and coding—exist for a Floorplan Manager application. Because the Floorplan Manager applications are based on Web Dynpro ABAP, the same enhancement options can be adopted here as well. The various UI adaptation options are as follows:


                Customizing
            

                Personalizing
            

                Enhancement
            

                Context-based adaptations
            

                Copy application configuration (Deep-Copy)
            

                Modification
            

These are discussed in detail in the following sections.
12.2.1    Customizing
The changes made to the component customizing layer are stored as delta to the original component, so it's modification-free. This is client specific. Future upgrades won't affect the customizing changes made. The component customizing affects all users of the Web Dynpro application. Customizing can be done both during runtime and design time. 
To open an application in the customizing layer during runtime as show in Figure 12.1, a URL parameter sap-config-mode=x needs to be added to the application URL, or the system parameter FPM_CONFIG_EXPERT must be set in the user profile to provide the customizing options for the user. 

Figure 12.1    Customizing at Runtime
A developer can make changes during design time in the Customizing layer through the flexible user interface Designer (FLUID) (Web Dynpro application CUSTOMIZE_COMPONENT). Figure 12.2 shows the option to create Customizing in FLUID. The other options shown, such as Enhance and Deep-Copy, will be discussed in the following sections. Some of the examples for client-wide Customizing changes include hiding the standard user interface building blocks (UIBBs)/fields, changing the page title, making changes to the application layout (column layout), and so on.

Figure 12.2    Adaptation Options (Design Time): Create Customizing, Deep-Copy, and Enhance
12.2.2    Personalizing
User-specific personalization can be done at the personalization layer only during runtime by the end user through the context menu entry User Settings in the application (see Figure 12.3). It can be used to hide fields/UIBBs, to default field values, to rearrange table layouts, to change application layouts, and so on. The changes made to this layer are stored in the personalization layer and are retrieved each time the user accesses the application. 
No code changes can be done in the personalization layer by the user. 

Figure 12.3    User Personalization Example
An end user can enhance the UI via personalization options. These changes are visible only to the specific user who made the changes. Some examples of personalization include rearranging the table columns, reducing the number of rows to be listed in a table layout, defaulting field values, and hiding fields that aren't used frequently. The personalization settings of a component/configuration can be viewed using the WD_ANALYZE_CONFIG_USER application or using Transaction FPM_WB (Floorplan Manager Workbench). The personalization option can be disabled for specific applications using the application configuration settings.
12.2.3    Enhancement
Floorplan Manager enhancement changes include both code and configuration changes, which can take effect across clients. These enhancements aren't overwritten on upgrades. The changes are effective across the system for all users. Some of the examples of enhancement changes include adding a new button, making changes to/adding a UIBB, and configuring custom feeder classes.
Search helps for the UI fields can be derived from the domain/data element definition or through the feeder class implementation, as part of the UI configuration. You should implement search helps and filters in the UI configuration. You can also create custom UIBBs, and the corresponding wire configuration need to be assigned with respect to relationships with other UIBBs.
12.2.4    Context-Based Adaptations
Context-based adaptations (CBAs) can be used to change the UI based on the application data chosen during runtime. They can be configured based on conditional logic and field values. The adaptation schema can be enhanced to add additional fields/dimensions to dynamically display the UI based on application runtime parameters. This configuration isn't overwritten on future upgrades. The adaptation schema and related dimensions can be maintained through the Floorplan Manager view cluster FPM_VC_ADAPT_SCHEMA. The application parameters are mapped to the schema dimensions and evaluated for adaptations at the start of the application load. The CBA can be configured for each UIBB in the FLUID, as shown in Figure 12.4. Examples of CBA dimensions include business object type code, action, change request type, workflow step, and so on.

Figure 12.4    CBA Configuration
12.2.5    Copy Application Configuration (Deep-Copy)
Another option to customize the UI application is to copy the standard application configuration and make enhancements on the copied application configuration. This method isn't a preferred way as future upgrades (corrections/improvements) to the standard application won't be implemented in the copied application. The copied application remains in the custom namespace. Either both the delivered application configuration and dependent UI configuration layout can be copied (deep-copy) or just the application configuration can be copied with the reuse of the standard delivered UI configuration layout. This could also lead to creation of a custom SAP MDG communicator configuration. SAP MDG communicator configuration requires a configuration with the same name as the Web Dynpro application configuration. 
The new application configurations need to be linked with the logical action and business activity associated with the change request type. The Customizing paths to do this task are in Transaction MDGIMG: Master Data Governance, Central Governance • General Settings • Process Modeling • Business Activities • Link Log. Actions with UI Application and Bus. Activity: Custom Definition and Master Data Governance, Central Governance • General Settings • Process Modeling • Business Activities • Link Logical Actions with Bus. Activity: Custom Definition. Figure 12.5 and Figure 12.6 illustrate these custom material master UI configurations.

Figure 12.5    Link Logical Actions with UI Application and Business Activity: Custom Definition

Figure 12.6    Link Logical Actions with Business Activity: Custom Definition
12.2.6    Modification
This option leads to configuration changes to the standard application, but it isn't recommended. Changes through modification will be overwritten on further upgrades.
The Web Dynpro application configurations can be edited by using the application configurations WD_ANALYZE_CONFIG_COMP and WD_ANALYZE_CONFIG_APPL. It's recommended to use a common approach to adapt the UI, instead of mixing the various approaches. This helps in performance as well as management of the application. SAP Screen Personas can also be used to enhance the look and feel of the Web Dynpro application.
Different UI configurations can be configured for each central governance workflow step using the Customizing activity in the path of Transaction MDGIMG: Master Data Governance, Central Governance • General Settings • Process Modeling • Change Requests • Configure Properties of Change Request Step. The various UI configurations can be adapted using CBA instead of creating separate application configurations for each workflow step. 
The home pages can also be customized or configured to rearrange the layout, to hide the sections, and so on. Additional configurations can be done through Transaction LPD_CUST.
In addition to the previously mentioned major UI enhancement approaches, other possible areas include enhancement via code (feeder classes, transient fields, handler classes, BAdIs, etc.) and configuration of application settings (application parameters to control application behaviors such as input field history, defer participation of collapsed UIBBS on initial load, etc.).
In short, the actual UI displayed to the user is determined by the following adaptations or enhancements:


                    Personalization (user dependent)
                

                    Enhancements (client/system-wide for all users)
                

                    CBA (in the start of the application based on dynamic runtime parameters)
                

                    Base configuration
                

To perform the UI configurations, an active data model with an entity of storage type 1 should exist, and the active data model should be assigned to the user personalization object R_FMDM_MODEL using Transaction SPERS_MAINT.
The right approach to enhance the standard UI configuration is determined based on the amount of changes as well as the type of changes, as discussed earlier.









12.3    Using the SAP MDG Business Add-In
SAP MDG provides various BAdIs to add additional business logic to the standard functionality. The standard SAP MDG functionality can be enhanced at various levels such as UIs, validations and derivations, search functionality, replication, and so on. Some of the key BAdIs in the central governance scenario are detailed in the following sections.
12.3.1    Rule Service BAdIs
In addition to configuration of BRFplus-based validations and derivations, additional logic can be implemented using BAdIs. There are two main BAdI definitions provided to achieve this enhancement under enhancement spot USMD_RULE_SERVICE, as shown in Figure 12.7.

Figure 12.7    Enhancement Spot USMD_RULE_SERVICE
BAdI definition USMD_RULE_SERVICE can be used to add additional validations and derivations to the UI screens based on the entity. It uses interface IF_EX_USMD_RULE_SERVICE. The implementation can filter based on the entity type and data model. The checks can be based on the entity or change request. Sample implementations are provided as part of the standard delivery. This BAdI can be implemented to make validations for an entity, a hierarchy, an edition, and a change request, and it can be used to derive an entity field value. 
BAdI definition USMD_RULE_SERVICE_CROSS_ET can be implemented to derive field values across the entity types. This BAdI uses interface IF_EX_USMD_RULE_SERVICE2 and can filter based on the data model.
12.3.2    Various Replication BAdIs
As part of the data replication framework, many enhancement options are available to enhance the message processing as part of the data communication between the SAP MDG system and the target/source systems. As discussed in Chapter 7, master data can be replicated to the client systems via IDocs, services, files, and so on. BAdIs are available to enhance these communication channels. Some of the key BAdIs related to data replication can be accessed through Transaction MDGIMG. The Customizing path is Master Data Governance, Central Governance • General Settings • Data Replication • Business Add-Ins (BAdIs), as shown in Figure 12.8.

Figure 12.8    IMG Path for Data Replication BAdIs
The most important BAdIs in this area are as follows:


                    BAdI definition DRF_ALE_AUDIT_GET_KM_DATA (Inbound Processing of ALE Audit Messages) can be used to retrieve and update the key mapping information from the target systems. ALEAUD message type (ALEAUD01 IDoc) can be configured to send the processing status of the replicated master data IDocs, based on message type/object code, back to the SAP MDG system from the target systems. The method GET_KM_INFO_FROM_AUDIT_IDOC needs to be implemented to update the key mapping information for the respective object type code. The BAdI implementation uses object type code as the filter.
                

                    BAdI definition DRF_SERV_OUT_TEXT_LANGUAGE (Definition of Language-Dependent Texts) can be used to manage the transfer of language dependent texts. It uses the interface IF_DRF_SERV_OUT_TEXT_LANGUAGE to filter the language dependent texts.
                

                    BAdI definitions USMD_DATA_TRANSFER (Prepare Data for Download File) and USMD_DATA_TRANSFER_UPL (Prepare Upload Data) can be implemented to convert the data from/to the required external format for the file upload and download functionalities, respectively. The file upload/download functionalities can be used to upload and download master data, hierarchy data, and language-dependent texts. It's mostly used for hierarchy data and limited sets of master data rows for testing purposes.
                

                    BAdI definition BDCP_BEFORE_WRITE (Creation of SAP MDG Change Pointers from ALE Change Pointers) can be used to update SAP MDG change pointers based on the Application Link Enabling (ALE) replication. The BAdI implementation uses the message type as the filter. Sample implementations are provided as part of the standard delivery. This BAdI isn't specific to SAP MDG, but it can be leveraged for SAP MDG change pointers.
                

12.3.3    Change Request User Interface Building Block Enhancement BAdIs
BAdI USMD_CREQUEST_INTEGRATION can be used to enhance the change request UIBB. Its implementation is filter-based on the data model. It uses interface IF_EX_USMD_CREQUEST_INTEGR with methods to filter change request types, auto-fill the change request attributes, and set the change request field properties.
This BAdI implementation can be used to auto-populate/derive change request header attributes such as description, notes, reason code, and due date based on data model, entity, edition, change request type, and so on. The implementation also helps in setting the field properties of these header attributes such as setting the reason or priority of a change request to a required field. The BAdI definition is shown in Figure 12.9. This is in addition to the possibilities to check and derivations that can be configured using BRFplus, based on the data model.

Figure 12.9    BAdI USMD_CREQUEST_INTEGRATION
12.3.4    Workflow BAdIs
Several SAP MDG workflow BAdIs can be used to enhance the workflow configuration dynamically. These BAdI definitions could be implemented for use cases such as dynamic agent determination, addition of context parameters to the workflow decision tables, making additional system calls, merging of parallel workflow paths, and so on. These BAdIs are listed in the SAP MDG configuration path, Master Data Governance, Central Governance • General Settings • Process Modeling • Workflow • Rule-Based Workflow • Business Add-ins. These BAdI definitions are as follows:


USMD_SSW_PARA_RESULT_HANDLER This can be used to merge parallel workflow paths of BRFplus-based workflow configuration. This BAdI implementation helps in determining the next step and step type after all the parallel workflow paths of a workflow instance are processed. Its implementation is filter-based on the service name, which is assigned in the workflow decision tables. The service names for the rule-based workflow are defined via Transaction MDGIMG. The configuration path is Master Data Governance, Central Governance • General Settings • Process Modeling • Workflow • Rule-Based Workflow • Define Service Names for Rule-based Workflow. The BAdI uses interface IF_USMD_SSW_PARA_RSLT_HANDLER with methods to define the merge step, action, and type. The BAdI definition is shown in Figure 12.10.
                

USMD_SSW_DYNAMIC_AGENT_SELECT This can be used to determine the workflow agents (approvers or workflow processors) dynamically. This BAdI implementation helps in determining the workflow processor based on the change request or master data object field values. The business logic required to determine the workflow agent is implemented. A use-case scenario for this requirement could be to route the workflow dynamically based on the material type or division during the creation of material change requests. Its implementation is filter-based and uses the service name assigned in single-value decision table of the rule-based workflow. For steps using this BAdI implementation, the user agent decision table need not be prepopulated. It uses interface IF_USMD_SSW_DYNAMIC_AGT_SELECT with a method to select the dynamic agent based on the change request number and service name.
                    
Figure 12.10    Workflow BAdI Definitions


USMD_SSW_RULE_CONTEXT_PREPAR This can be used to add additional context parameters to the rule-based workflow. These context parameters can be used to add additional routing configuration for the rule-based workflow. Examples for additional context parameters include company code, material group, and so on. The BAdI implementation is filter-based on the service name assigned in the single-value decision table of the rule-based workflow. It uses interface IF_USMD_SSW_RULE_CNTX_PREPARE with a method to add additional parameters.
                

USMD_SSW_SYSTEM_METHOD_CALLER This can be used to make additional system calls, for example, triggering a follow-up change request. The BAdI implementation is filter-based on the service name assigned in the single-value decision table of the rule-based workflow. It uses interface IF_USMD_SSW_SYST_METHOD_CALLER with a method to make additional calls.
                

USMD_SSW_CHECK_AGENT_TABLE This can be used to check on the user assignment and agent determination logic of a rule-based workflow instance to help in error logging and follow up on error processing. The BAdI implementation is filter-based on the data model and change request type. It uses interface IF_USMD_SSW_RULE_CHK_AGENT_TAB with a method to check the user agent tables.
                

USMD_WF_AGENTThis can be used to determine the workflow agent for standard workflow steps defined in the SAP MDG Customizing path, Master Data Governance, Central Governance • General Settings • Process Modeling • Workflow • Other MDG Workflows • Define Change Request Step Numbers. It uses interface IF_USMD_WF_AGENT with methods to determine the workflow processor step and to determine the number of parallel processing steps that follow a step.
                


Enhancing Workflows
Most of the workflows for SAP MDG are BRFplus-based. They can be configured as discussed in Chapter 5. Some of the BAdIs used to dynamically route the workflow are mentioned in this section. For troubleshooting tips related to the rule-based workflow, refer to SAP Note 2029128. Custom workflows can also be defined and linked to the change request process.

12.3.5    Other Domain-Specific BAdIs
In addition to the previously mentioned BAdIs, domain-specific BAdIs can be used to enhance the SAP MDG functionality. Most relate to data processing during inbound/outbound replication scenarios. These include data import as well as data replication using IDocs and web services. Two of the key BAdI definitions are as follows: 


USMD_SERVICE_INBOUNDThis can be implemented to change the inbound SMT name and inbound mapping steps to the SAP MDG-generated structures during data import. The BAdI implementation is filter-based on the data model and entity type. The method MODIFY_SMT_NAME of the BAdI interface is implemented for this purpose.
                

USMD_SE_COMPANYRPLCTNBRQThis definition of enhancement spot USMD_SE_SPOT_COMPANYIN can be used to enhance the company data during the data import process using service interface CompanyReplicationBulkRequest_In (method INBOUND_PROCESSING) or CompanyReplicationBulkConfirmation_Out (method OUTBOUND_PROCESSING).
                

Several BAdI definitions are available to support the enhancement of data during both inbound and outbound service replication based on object type. These BAdI definitions can also be accessed through the Customizing path, Master Data Governance, Central Governance • Master Data Governance for Financials • Replication • Enterprise Services. Some of these BAdI definitions are shown in Figure 12.11.

Figure 12.11    Replication-Related BAdIs for the Finance Domain
Similarly, replication-related BAdIs for the business partner domain can be accessed through the Customizing path, Master Data Governance, Central Governance • Master Data Governance for Business Partner • BAdIs for Data Replication, as shown in Figure 12.12.
Some of the additional key BAdI definitions are as follows:


                    The supplier or customer data associated with a business partner can be adapted using the BAdI definition MDG_BS_ECC_BP_MLT_AS_OBJ_DATA of enhancement spot MDG_BS_ECC_BP_MLT_AS_OBJ_DATA. The implementation of this BAdI isn't filter dependent.
                

                    The BAdI definition MDG_SE_BP_SEARCH of enhancement spot MDG_SE_SPOT_BP_SEARCH can be used to enhance the service-oriented architecture (SOA)-based search criteria and result list of the business partner search service. The implementation of this BAdI isn't filter dependent.
                

                    For the material domain, the BAdI definition MDG_BS_MAT_API_ENRICH_BADI of enhancement spot MDG_BS_MAT_API_ENRICH can be used to enrich the change request data with fields that aren't part of the governance scope. BAdI interface method ENRICH is used to implement this enhancement logic.
                

                    The BAdI definition MDG_BS_MAT_API_SEGMENTS_EXT of enhancement spot MDG_BS_MAT_API_SEGMENTS_EXT can be used to extend the standard material master tables with customer-defined database tables. This BAdI implementation provides the methods to read, check, and save the customer-defined structures, thereby extending the API with customer-specific segments.
                

                    The BAdI definition MDG_BS_MAT_DRF_SEARCH of enhancement spot ES_MDG_BS_MAT_DRF can be used to define alternate data replication framework filter providers for material master data replication. This implementation enhances the data replication framework search based on the filter criteria.
                


Figure 12.12    Replication-Related BAdIs for Business Partner









12.4    Enhancing Master Data Domains with Search Capabilities
SAP MDG supports different search providers to search on master data, including database search, SAP Enterprise Search via TREX, and SAP HANA-based search. Custom search providers can be configured as well. Database search provides exact search results as stored in the database. There are other search capabilities such as address search, remote key search, and so on. More details on the search capabilities are discussed in Chapter 6.
When the data model is extended with new fields based on the field storage type (reuse vs. flex options), the search criterion as well as the search result list need to be extended. The SAP MDG search functionality searches on both the staging area and the active area. Thus, for extended fields, the search logic needs to be enhanced to include the newly added fields in the staging area as well as the active area. In a flex option, both the staging data and active data are stored in the same table.
Each of the mentioned search providers are discussed in the following subsections, along with BAdI enhancements.
12.4.1    Database Search
Database search searches the SAP MDG and active area tables to retrieve the data based on the search criterion. This exact search method is recommended if there are fewer records to avoid the search performance impacts. With the extension to the database tables and generated tables and structures, the database search UI needs to be enhanced to display additional columns in the search result list. 
12.4.2    SAP Enterprise Search
SAP Enterprise Search uses TREX connectors to search data. Standard search connectors are provided to extract data, schedule the indexing, and run the search logic based on the search criterion. Both the reuse area connector and SAP MDG connector for the specific domain should be configured to search on the active area as well as the staging data. It supports both free-text search and fuzzy search. The search connectors need to be extended with the extended attributes in the data model. The access class used is CL_SDQ_USMD_SEARCH_DATA_IMPL. To search on custom objects, the custom search object connector template need to be created using the Customizing path (Transaction MDGIMG), Master Data Governance, Central Governance • General Settings • Data Quality and Search • Create Search Object Connector Templates. A search object connector is then created based on the template. This helps in indexing, scheduling, and searching the data. The data are then retrieved using the access class for the search application. 
To implement custom search providers, an access class and search application need to be defined. The access class should use standard search interface IF_USMD_SEARCH_DATA. The search application should be defined via the Customizing path (Transaction MDGIMG), Master Data Governance, Central Governance • General Settings • Data Quality and Search • Define Search Applications.
To display the newly added fields in the search application, the Customizing settings for the UI field properties need to be set via the Customizing path (Transaction MDGIMG), Master Data Governance, Central Governance • General Settings • UI Modeling • Define Field Properties for UI. The No Selection and No Results List checkboxes need to be unchecked accordingly (see Figure 12.13).

Figure 12.13    Field Properties for the UI
12.4.3    SAP HANA Search
SAP HANA search is based on SAP HANA search views and supports both free-text search and fuzzy search. The extended attributes in the data model need to be added to the views so that the enhanced fields can be added to the search application. For the new entities and extended attributes, joins and field mappings need to be maintained via the Customizing path (Transaction MDGIMG), Master Data Governance, Central Governance • General Settings • Data Quality and Search • Search and Duplicate Check • Define Joins and Field Mapping for Reuse Tables. This enables SAP HANA search on the extended fields.
The generated data attributes can be manually set to be included in the search view definition (Transaction MDG_HDB_GEN_UI) as part of search view generation (see Figure 12.14). Additional search parameters such as fuzzy value, weight of an attribute for match score, and so on can be set through SAP HANA Studio. Report MDG_HDB_DELETE_SEARCH_VIEWS can be used to delete the marked for deletion search views, if needed.

Figure 12.14    SAP HANA Search View
The search UI application can be enhanced using FLUID Customizing.
12.4.4    BAdI Enhancements for the Search Functionality
SAP MDG provides BAdIs to enhance the search functionality in SAP MDG as shown in Figure 12.15. They can be accessed through the Customizing path (Transaction MDGIMG), Master Data Governance, Central Governance • General Settings • Data Quality and Search • Business Add-Ins.

Figure 12.15    Search Enhancement BAdIs
The relevant BAdIs are as follows:


BADI_SDQ_PP_SEARCHThis BAdI definition is used in cases where separate enterprise search connectors are used for the reuse area search. This BAdI implementation helps in combining the search results from the reuse area with that of SAP MDG staging data to populate the search result list. It uses interface IF_BADI_SDQ_PP_SEARCH. The BAdI filters include data model and entity to identify the business object.
                

BADI_SDQ_PP_INITIAL_LOAD_ESThis BAdI definition is used to load the reuse area data for indexing. It uses interface IF_BADI_SDQ_PP_INITIAL_LOAD_E and is also part of enhancement spot BADI_SDQ_PP_SEARCH.
                

USMD_SEARCHThis BAdI definition is used to enhance Web Dynpro application USMD_SEARCH. The implementation is based on interface IF_EX_USMD_SEARCH, and on the data model filter. It can be used to enhance the search attributes as well as process events triggered from the buttons in the search result table.
                

USMD_REMOTE_WHERE_USEDThis BAdI definition is used to search the remote system for the related entities. The BAdI implementation is filter-based on the data model and entity. Based on the remote system configured and provided in the method import parameter, the related data are retrieved from the remote system. Data can be fetched using remote function calls (RFCs), Operational Data Provisioning (ODP) method calls, SAP Enterprise Search APIs, or other supported API calls. It uses interface IF_EX_USMD_REMOTE_WHERE_USED.
                

Custom search helps can be added to the UI of SAP MDG applications by redefining the feeder class methods.









12.5    Summary
This chapter discussed various options to enhance the central governance functionality for the standard domains. The following chapters will discuss further details about the development of custom master data objects for central governance. Many of the enhancement capabilities discussed in this chapter can be leveraged in the following two chapters for custom data objects as well.








13    Building Custom Applications: Data Modeling and User Interface ModelingThis chapter uses SAP ERP Project System as an example of building custom SAP MDG applications using the SAP MDG custom object framework.The SAP MDG custom object framework is provided to help you model and build SAP MDG applications for the master data objects specific to your business. It can also be used for standard SAP master data objects for which SAP hasn't provided any standard SAP MDG applications. For example, no out-of-the-box data model and SAP MDG user interface (UI) application are delivered for locations, so you can use the custom object framework to build an SAP MDG application for locations.The custom object framework ensures that the applications you build are consistent in look and feel with standard applications provided by SAP. The framework also ensures that custom applications meet SAP guidelines and conform to SAP MDG architecture. The key objective of the custom object framework is to help customers concentrate on modeling the application and without worry about architecture and the technical design under the hood. The custom object framework should also reduce a lot of work by reusing existing SAP MDG components. For example, customer/partner can reuse existing generic search UI (USMD_SEARCH) to configure any kind of search UI.In this chapter, we'll explain the SAP MDG custom object framework using SAP ERP Project System (SAP ERP PS) as an example. This chapter starts by explaining the background and context of SAP ERP PS and providing a quick overview of custom data models. Next, we describe sequentially the steps to model work breakdown structures (WBS) in SAP ERP PS as a data model object in SAP MDG. Finally, we end this chapter by describing how to build UI applications on SAP MDG data models for SAP ERP PS. The next chapters will cover process modeling and data replication of SAP ERP PS as an SAP MDG custom object.
13.1    Custom Data Models
In this section, we first introduce you to how SAP ERP PS uses the custom data model and then provide an overview of data models themselves.
13.1.1    SAP ERP Project System
SAP ERP PS is a project management tool that provides you with support in all phases of an enterprise project. SAP ERP PS provides structures that can be used to model and organize projects flexibly.

Note
We recommend a little refresher on SAP ERP PS from publicly available documentation at http://bit.ly/2eLvY40.

SAP ERP PS provides two structures for mapping an enterprise project: WBSs and networks. WBSs are used to organize a project in the form of a hierarchy and to map the structure of a project. Networks are used to represent project activities and logical relationships between the project activities. WBSs consist of WBS elements that are arranged in various levels to produce a hierarchical model of the project activities to be carried out. 
The following elements are considered master data for the SAP ERP PS application:


                    WBS elements
                

                    Networks
                

                    Activities 
                

Depending on the requirements, you can use WBSs, networks, or both to map your project in the SAP system. However, the scope of this book only includes project definition, WBSs, and WBS elements, not networks and activities.

Note
We're limiting the scope here to concentrate on explaining the SAP MDG custom object framework. 

You can have only one WBS assigned to a project. Each WBS can contain multiple WBS elements, as shown in Figure 13.1.

Figure 13.1    Project Definition and the WBS
Following are the different components of SAP ERP PS:


Project definition  The project definition is used to define the common attributes that are shared across the structures (WBS/network) and structure elements (WBS elements/activities) assigned to the project. Project definition is a mandatory component for creating a project with a network, WBSs, or both. The project definition holds the data that affects the whole project. For example, a controlling area entered in the project is applicable for the whole project. Project definition is also used to define organizational data such as company code, business area, profit center, and plant. This organizational data is defaulted across the WBS elements.
                

WBS The WBS is the model of the project and shows the work packages in a hierarchical structure. Each work package in an enterprise project is represented by WBS elements.
                

WBS elements WBS elements represent a work package in an enterprise project. WBS elements are actual elements that are used as account assignment objects to record costs, and they can also be used as planning elements. WBS elements are arranged in a hierarchical manner, allowing the data to be summarized at any level.
                

We also need to take a brief look at the data modeling architecture in the SAP Business Suite layer for SAP ERP PS. Figure 13.2 shows the various tables that together form the data model for SAP ERP PS in the SAP Business Suite and SAP S/4HANA core. All the data are saved in the tables. This database architecture will be the basis for the SAP MDG data model. It doesn't make sense to reengineer an already proven and established data model.

Figure 13.2    Database Architecture of SAP ERP PS in the SAP Business Suite and SAP S/4HANA Core
13.1.2    Data Modeling Tools
The SAP MDG application framework has its own data modeling tools. SAP MDG applications are built on top of this data model. An SAP MDG data model is an abstract model that organizes semantically similar elements of data as entities and attributes, along with relationships between the entities. The SAP MDG data model acts implicitly as a source of metadata for UI modeling.
The SAP MDG foundation framework uses the SAP MDG data model entities, attributes of entities, and relationships between entities to generate the staging area. The staging area is an exclusive persistence layer for SAP MDG, generated from an active SAP MDG data model. The staging area is used to store both active data and inactive data. Technically, the SAP MDG staging area is a set of generated database tables, and the SAP MDG data model is an abstract layer for this staging area. The goal of the data model is to generate these staging area tables correctly and be the single source of information for relationships between various SAP MDG entities. The SAP MDG data model is also a source of metadata required for UI modeling.
Before creating the data model in the system, an SAP MDG data modeler should first answer the following two basic questions as prerequisites for starting SAP MDG data modeling activities:


                    What is the active area of the data model? 
                

                    How many business objects are required to represent the SAP MDG data model?
                

There aren't guidelines to answer these questions, and the answers to these questions will vary based on the characteristics of the master data object, business requirements, and how the data modeler perceives the corresponding real-world entities of the master data object. For example, in the current scenario, a data modeler can choose to represent the project definition as one business object and WBS as another dependent business object, whereas another data modeler might choose to represent the project definition and WBS as one single business object. Both approaches are correct, but which approach is adopted depends on the data modeler's perception of the real-world entities and other factors.
To answer the first question, as described in the previous chapters, the active area is the persistence layer used for storing active master data. The two active areas are the reuse area (reuse mode) and the staging area (flex mode), as follows:


Reuse mode This mode is used if a data model (tables) already exists in the underlying SAP Business Suite layer or in the SAP S/4HANA core. Usually these are the master data objects that are available as part of the SAP Business Suite data model or SAP S/4HANA core data model but aren't delivered as out-of-the-box SAP MDG data models.
                    To use the reuse active area for the custom data models, you must create an active area and assign the access class to the active area. Figure 13.3 shows how to create the active area and access class in the Transaction MDGIMG. 
                    The access class acts as a bridge between MDGAF (SAP MDG application framework) and the reuse area. 
                    
Figure 13.3    Active Area and Access Class




                    The SAP MDG access class implements the interface IF_USMD_PP_ACCESS. Table 13.1 provides a brief overview of important access class methods.
                





                            Method Name
                        

                            Method Description
                        





READ_VALUE


                            This method is used to read the master data from the active area (SAP ERP) tables. 
                        



CHECK_DATA


                            This method is used to perform active area checks. For example, this method can be used to check UI data against SAP ERP configuration.
                        



SAVE


                            This method is used to save the data into the SAP ERP table by calling SAP ERP APIs.
                        



CHECK_AUTHORITY


                            This method is used to perform authorization checks using SAP ERP authorization objects.
                        



ENQUEUE


                            This method is used to set the lock on the objects.
                        



DEQUEUE


                            This method is used to remove the locks on the objects.
                        



Table 13.1    List of Important Methods in a Reuse Class


Flex mode  This mode is used if no tables are available in the underlying SAP Business Suite layer or the SAP S/4HANA core. Usually these are the master data objects that aren't available as part of the standard SAP Business Suite data model or SAP S/4HANA core.
                    Ideally, the flex option is preferred for business objects that require edition management. SAP Business Suite and SAP S/4HANA don't have the edition concept; instead these layers enforce time dependency by using valid-from or valid-to dates or both as key fields in the table. It would be tedious for the developer to translate these valid-from and valid-to dates to an edition and prepare data slices in terms of editions.
                    The data model with flex mode saves the active data in the SAP MDG staging area. The SAP MDG framework fully understands the metadata of these tables. Therefore, a developer needs to develop the access class, which is automatically handled by the framework.
                

In our current example of WBS in SAP ERP PS, we'll choose flex mode because the flex model doesn't require the creation of an active area access class and our current data model involves a hierarchy.
Now let's move on to our second question, which if you'll remember refers to how many business objects are required. Configuring the business object type code is required to integrate the SAP MDG data model with the SAP MDG UI model, SAP MDG data replication framework, and key mapping and value mapping frameworks.

Note
A type 1 entity must always be assigned to a business object.

The criteria to choose business objects are as follows:


                    Each real-world entity should be represented as one business object. For example, the standard business partner data model is represented by three business objects (business partner, customer, and supplier). All three business objects use the same data model (business partner), but their functions are different and represent real-world physical entities. These three business objects represent different business semantics for the same SAP MDG data model.
                

                    If each business objects needs to be replicated independently of the others, then you need to create corresponding business object type codes in SAP MDG. The business object is a key differentiator in the data replication framework.
                

In our example, we'll only have one business object type code. The root entity of the business object is the project definition. The reason behind this decision is as follows:


                    Project definition and WBS are integral business objects. We would likely have created two business objects if we had networks in the scope: one business object for project definition + WBS and another business object for project definition + networks. 
                

                    The project definition and the WBS are represented in the real world by business semantic "project." The purpose of the project definition is to store data that applies to the underlying WBS and WBS elements such as organizational data and project profile. 
                

                    The aim is to replicate the project definition and WBS together so we need to create only one business object.
                










13.2    Create a Custom Data Model
The first step toward building custom SAP MDG applications is to create a custom data model. The Generic Interaction Layer (GenIL) provides uniform application programming interface (API) services to access and manipulate underlying business data. The Business Object Layer (BOL) consumes the GenIL API. The following sections explain how to create the custom data model, entities, and relationships in detail.
13.2.1    Concepts and Prerequisites
The process of creating entities and attributes for our custom data model ZW will be described via the following:


                    Conceptual data model
                

                    Logical data model
                

                    Physical data model
                

The conceptual data model is a high-level representation of the data model architecture. The conceptual data model is created with nontechnical names so that project stakeholders such as executives, business users, and business subject matter experts (SMEs) can easily understand the architecture of the data model. The conceptual data model acts as the basis for the creation of the logical data model.
Figure 13.4 shows the conceptual data model for the WBS in SAP ERP PS data model. Note that we didn't include all of the fields. The purpose of this diagram is to introduce you to the idea of the conceptual data model, which doesn't require the full details of the data model.

Figure 13.4    Example of Conceptual Data Model for WBS in SAP ERP PS 
Next, the logical data model is a representation of the conceptual data model in terms of entities, attributes, and relationships. The logical data model is normalized by specifying field-level details such as data type and data length. 
Figure 13.5 is a logical representation of the WBS in SAP ERP PS data model. The figure shows two entities—project definition and WBS elements—along with detailed attributes. The figure also shows the cardinality and foreign key relationship between the two entities. The target audience for the logical data model is made up of business SMEs, expert modelers, and application (SAP MDG in this case) experts.

Figure 13.5    Representation of WBS in SAP ERP PS Logical Data Model in the Form of Entities and Attributes
During this process step, business SMEs describe various attributes (including field length and data type) and how the attributes are grouped. 
Expert modelers and application experts translate the input from the business SMEs into entities and attributes. After the entities and attributes are designed, the relationships and navigation between the entities are defined. 
During this step, the stakeholders also define other data semantics such as the source of value list of the fields. Stakeholders may also determine, if applicable, some of the example attribute dependencies, such as the following:


                    The value list of plant is the subset of plants that are assigned to the company code.
                

                    The value list of region is the subset of values assigned to a country.
                

Finally, the physical data modeling is the process of creating the actual data model in the system. During this step, you take the outcomes (e.g., design document) from the preceding two steps and implement them in the system. The physical data model is system specific and deeply technical in nature. The actors who perform roles in physical data modeling are usually SAP MDG data modeling experts and developers.
At this process step, we dig deeper into SAP MDG and start implementing the logical data model in the system. Figure 13.6 shows that the Data Model ZW has been created to represent WBS in SAP ERP PS. Here the active area is called MDG, which means that all the active data of this data model will be persisted in the SAP MDG staging areas. Ensure that the data model name is created in the proper name space of X*, Y*, and Z*. 
Following are the steps to create a data model:


                    Go to IMG path Master Data Governance, Central Governance. General Settings • Data Modeling • Edit Data Model.
                

                    Click on New Entries.
                

                    Enter the values as shown in Figure 13.6.
                

                    Click on Save, and activate the data model.
                    
Figure 13.6    Data Model Created for the WBS in SAP ERP PS Custom Data Object in SAP MDG


Following are the steps necessary to create business object code ZPS, as seen in Figure 13.7:


                    Go to IMG Path Master Data Governance, Central Governance. General Settings. Data Modeling. Define Business Object Type Codes.
                

                    Click on New Entries.
                

                    Enter "ZPS" as the BO Type and "Project Structure" as the Description.
                

                    Click Save to save your entries.
                


Note
This chapter doesn't explain the SAP MDG data model concepts and definition of data model artifacts. For more information on those topics, refer to Chapter 3.


Figure 13.7    Creation of Business Object Type Code ZPS
13.2.2    Creating Entities
In the following sections, we'll look at creating entities for your custom data model, starting with type 1 entities before moving on to type 3.
Project Definitions
Every data model should have at least one type 1 entity. In the current example, the project definition is one of the type 1 entities. Figure 13.8 shows the creation of project definition as a type 1 entity with Entity Type PSPID.
The relevant features of the entity settings are as follows:


                        Edition management has been disabled. In the underlying SAP Business Suite data model, SAP ERP PS isn't a time-dependent entity.
                    

                        Every type 1 entity needs a key assigned. We've selected external key for the type 1 entity in accordance with the underlying SAP Business Suite settings for the project definition.
                    

                        The project definition can have language-dependent texts.
                    

                        The Active Area field has been left blank; when left blank, the active area of the data model is adopted. 
                        
Figure 13.8    Creation of the Project Definition as a Type 1 Entity


Figure 13.9 shows the all the list of attributes added to entity type PSPID.

Figure 13.9    Attributes Added to the Type 1 Entity PSPID
Entity Type PSPID is a type 1 entity, and needs to have business object type code ZPS, which you created in Section 13.2.1, assigned to it. This association is used for UI modeling and data replication.
Following are the steps to assign business object type code ZPS to Entity Type PSPID, as shown in Figure 13.10:


                        Go to IMG path Master Data Governance, Central Governance • General Settings • Data Modeling.
                    

                        Select Data Model ZW.
                    

                        Click on Entity Types and open the entity type view for data model ZW 1.
                    

                        Select Entity Type PSPID 2.
                    

                        Open Business Object Type view.
                    

                        Click on New Entries. 
                    

                        Set the BO Type to ZPS.
                    

                        Select the Root check box.
                    

                        Click the Save button to save your entries.
                        
Figure 13.10    Assigning Business Object ZPS to Entity PSPID (Project Definition)


Notice that we've designated entity PSPID as the root object for the business object type ZPS. 
Work Breakdown Structure Elements 
We'll be creating a WBS element as another type 1 entity, but we'll assign it the same business object as the project definition (PSPID). By assigning it to the same business object as the project definition, we're ensuring that a WBS element can't be replicated alone, and it needs to be replicated through the project definition. Figure 13.11 shows the creation of a type 1 entity for a WBS element.

Figure 13.11    Creation of a Type 1 Entity for WBS Element and Addition of Project Definition as an Attribute
If you look at Figure 13.12, you'll notice that in the underlying reuse active area, there is a foreign key relationship between the tables PROJ and PRPS. We need to replicate a similar kind of relationship in the SAP MDG data model as well between entities POSID and PSPID. For this purpose, we've added an attribute called PROJ_DEF to entity POSID. This field is used to store the project definition ID of the project to which the WBS element is assigned. This attribute needs to have a foreign key relationship with entity PSPID. 

Figure 13.12    Foreign Key Relationship between Tables PROJ and PRPS
The foreign key fields are project definition internal IDs. Because we don't have a project definition internal ID in the data model, we'll establish a similar kind of relationship on the external ID of the project definition. Figure 13.13 shows the modeling steps to implement foreign key relationships between entities PSPID and POSID.

Figure 13.13    SAP MDG Data Modeling Steps to Implement a Similar Foreign Key Relationship
Entity POSID is also a type 1 entity. We therefore need to assign business object type code ZPS to entity type POSID, as follows (see Figure 13.14):


                        Go to IMG path Master Data Governance, Central Governance • General Settings • Data Modeling.
                    

                        Select Data Model ZW.
                    

                        Click on Entity Types and open the entity type view for data model ZW 1.
                    

                        Select Entity Type PSPID 2.
                    

                        Open Business Object Type view.
                    

                        Click on New Entries. 
                    

                        Set the BO Type to ZPS.
                    

                        Click the Save button to save your entries.
                        
Figure 13.14    Assigning Business Object ZPS to Entity POSID (WBS Element)


Notice that we have not enabled PSPID as a root object.
Controlling Areas
If you revisit the logical data model, you'll find the following distinct features in the data model:


                        The controlling area is present as an attribute both in the project definition and in the WBS element. Therefore, it makes sense to create just one type 3 entity and then assign the same entity as an attribute to the project structure and WBS element entities using referencing relationships. 
                    

                        The controlling area is one of the key fields in the check tables assigned to other attributes of the data model (e.g., profit center); therefore, it's imperative that we create the controlling area as a type 2 or type 3 entity so that the entity can be used to establish a leading relationship.
                    

Figure 13.15 shows the creation of a controlling area as a type 3 entity and its assignment as an attribute to entity PSPID using a referencing relationship.

Figure 13.15    Creation of a Controlling Area as a Type 3 Entity under Data Model ZW

Why a Type 3 Entity and Not a Type 2 Entity?
The controlling area is a configuration entity, and the value list of this attribute is maintained in the Reuse Active Area (SAP Business Suite or SAP S/4HANA core). We do need a separate set of check tables generated in SAP MDG, and we want the SAP MDG framework to use the underlying check tables in the Reuse Active Area.

Profit Centers
The project definition (entity PSPID) has profit center as one of the attributes. The profit center has data element PRCTR, which has table CEPC as a check table. Table CEPC has profit center ID, valid to, and controlling area as key attributes. We can't add profit center as an attribute directly under the type 1 entity PSPID (project definition) because the SAP MDG data model rules dictate that a check table of an entity's attribute can't have more key fields besides the client (field MANDT) and key field referring to the attribute. Figure 13.16 shows the error message that appears when adding profit center as a direct attribute to type 1 entity PSPID.

Figure 13.16    Error Message When Trying to Add Profit Center as a Direct Attribute with PRCTR as a Data Element to Entity PSPID

Note
This validation makes sense because the SAP MDG framework performs a default existence check of the attribute value against the underlying check tables. This check works correctly only if the underlying table has just one key referring to the attribute itself besides the MANDT field. If it has more keys, then the SAP MDG framework can't perform the check accurately because the SAP MDG foundation can't populate the full key of the table as it doesn't have sufficient information (metadata) to derive the value of key fields other than the key field referring to the attribute. 

To tackle this kind of modeling challenge, we must perform the following actions:


                        Create the attribute (in our example, it's PRCTR) as a type 2 or type 3 entity.
                    

                        Create the other key fields of the underlying check table as type 2 or type 3 entities (in our example, the controlling area and valid-to fields).
                    

                        Create a leading relationship between all the type 2/type 3 entities of the key fields and the type 2/type 3 entity of the attribute.
                    

                        Add all the keys and attribute entities as attributes to type 1 or type 4 entities using a referencing relationship.
                    

Figure 13.17 shows all these activities in detail.

Figure 13.17    Modeling of the PRCTR Entity and Check Table Dependencies
Company Codes
We'll next create a company code as a type 3 entity and add the type 3 entity as an attribute to the PSPID entity using a referencing relationship. We're adding the company code as a type 3 entity because we must establish a leading relationship later with the plant entity. This relationship is required to ensure that only plants assigned to the project company code are entered.
Figure 13.18 shows the creation of a type 3 entity type for company code. The figure shows how we've added the company code as an attribute to entity PSPID using the referencing relationship from entity type BUKRS to entity type PSPID.

Figure 13.18    Creating Company Code as a Type 3 Entity and Assigning as Attribute to PSPID Using a Referencing Relationship
Plants
Plant is used to define organization data during project definition. In the next section, you will learn about creation of the location entity type. The underlying check table of the location entity has the plant as a key field. To ensure that the SAP MDG framework understands this relationship between plant and location we'll be creating plant as a type 3 entity because we need it to be part of the leading relationship for the location attribute. Figure 13.19 shows the steps to create plant as type 3 entity.

Figure 13.19    Creation of a Plant and Assigning Plant as Attribute Using a Referencing Relationship
Locations
The check table (T499S) assigned to location has plant and location as key fields. Therefore, as explained before, we need to perform the following activities to be compliant with the SAP MDG data model rules:


                        Create plant as a type 3 entity. This has already been done in previous steps.
                    

                        Create location as a type 3 entity, as shown in Figure 13.20.
                    

                        Create a leading relationship between the entity for plant and the entity for location.
                    

                        Create a referencing relationship between the entity for location and entity PSPID.
                        
Figure 13.20    Creating an Entity for Location and Its Relationships


Figure 13.21 shows the final list of attributes for entity type PSPID.

Figure 13.21    Final List of Attributes of Entity PSPID
13.2.3    Adding Attributes to Entities
Among the list of attributes to be added to entity POSID, there are simple attributes and modeled attributes. Simple attributes can be added directly as attributes to entity POSID. Figure 13.22 shows the list of simple attributes. 

Figure 13.22    Simple Attributes That Can Be Easily Added to Entity Type POSID
The controlling area, company code, and plant of WBS make up the modeled attributes. During previous steps, we already created type 3 entity CON_AREA for the controlling area. We'll now reuse the same entity in a different referencing relationship to entity POSID to add it as an attribute to entity POSID. A similar kind of modeling will be done for company code and plant.
The process of adding company code, controlling area, and plant as attributes to entity POSID using existing type 3 entities is shown in Figure 13.23. The screen on the left is the final visualization of entity POSID, and the screen on the right shows the list of relationships added to data model ZW.

Figure 13.23    Adding Company Code, Controlling Area, and Plant as Attributes to Entity POSID 
13.2.4    Representing the Work Breakdown Structure Hierarchically
Before we begin, it's important to emphasize that WBSs and WBS elements are different. WBS is a hierarchical representation of WBS elements, whereas the WBS element represents a work package in WBS. The entity PSPID represents the project definition, and entity POSID represents the WBS element and not WBS. In this section, we'll walk through representing the WBS in SAP MDG using the SAP MDG hierarchy concept.

Note
Figure 13.24 shows a theoretical hierarchy model, which we're going to build under data model ZW. The purpose of this section is to introduce you to how to enable and build a hierarchy for a custom data model. You shouldn't attempt to implement the hierarchy model and its design in real-world projects without proper analysis.

Figure 13.24    Conceptual Data Model for the WBS Hierarchy

The following describes the various hierarchy settings to enable the hierarchy for data model ZW:


Hierarchy leading entity The hierarchy leading entity is the type 1 entity in which the hierarchy setting is activated. In our example, we'll configure the POSID entity as the leading entity. Figure 13.25 shows the required settings to enable the POSID entity type as the hierarchy leading entity.
                    
Figure 13.25    Configuring Entity POSID as the Hierarchy Type


Hierarchy nameEvery hierarchy in SAP MDG must have a single hierarchy name. This hierarchy name is technically a separate type 1 entity. Here, we'll try to replicate the hierarchy model in SAP ERP PS. The top node in the underlying SAP Business Suite layer is project definition. The hierarchy name in SAP MDG is really the top node, so we designate our entity PSPID as the hierarchy name. 
                

Additional entity typesEntities configured as additional entity types are used for grouping or end nodes (leaves). You can configure type 1, 2, and 3 entities as additional entity types. Following are two different use types for additional entities:
                    

                            No special use: The entity can be used for both grouping and as an end node.
                        

                            Ranges permitted on the end node: This entity is an end node with ranges. 
                        

Figure 13.26 shows the additional entity type configuration for the leading entity POSID. In our entity, we won't use any additional entity types nor add any attributes to the additional entities. As shown in the figure, we'll add "PSPID" as Hierarchy Name.
                    
Figure 13.26    Adding Additional Entity Types to the Leading Hierarchy Entity POSID



Note
After creation of every entity and relationship, it's good practice to save your content and activate. 

Figure 13.27 shows the entity relationship diagram for data model ZW. It shows a list of entities created so far and relationships (with direction) between the entities.

Figure 13.27    Entity Relationship Diagram for Data Model ZW
13.2.5    Generic Interaction Layer Data Model
Every active data model has corresponding Generic Interaction Layer (GenIL) models generated. For custom objects, you'll have at least two GenIL models generated. Following are the list of GenIL models generated for an active SAP MDG data model:


                    GenIL model for single processing: ZSP_<Data Model>; in our current example, it's ZSP_ZW. This GenIL model is used in the Single Object Maintenance (SOM) UI.
                

                    GenIL model for multiple records processing: ZMP_<Data Model>; in our current example, it's ZMP_ZW. This GenIL model is used in the multiple record processing UI.
                

                    GenIL model for hierarchy processing: ZHP_<Data Model>; in our current example, it's ZHP_ZW. This GenIL model is used for the hierarchy processing UI.
                

The GenIL model for hierarchy processing is generated if a hierarchy is activated on an SU (storage use type) type 1 entity in the SAP MDG data model.
This GenIL models and its object types (root object, access object, dependent object, query object, and DQuery object) and relationship types (aggregation and associations) are used extensively in the SAP MDG UI modeling. 
The GenIL model is generated based on the SAP MDG data model. Following are some of the generic guidelines followed by SAP MDG to generate the GenIL model automatically:


                    Each SU type 1 entity is created as a root object in the GenIL data model. Figure 13.28 shows the corresponding root object generated for type 1 entities POSID and PSPID. In both models, POSID and PSPID are superior objects.
                    
Figure 13.28    SU Type 1 Entities Project Definition (PSPID) and WBS Elements (POSID)


                    Each SU type 4 entity in the SAP MDG data model is created as a dependent object.
                

                    Relations in the SAP MDG data model are created as relations in the GenIL model.
                

                    SU type 2 and SU type 3 entities haven't impact on the GenIL model. They can be related to GenIL objects via their superior objects (type 1 or type 4 entities).
                

                    For entities that have language-dependent texts settings activated, dependent objects are generated in a GenIL model. In our data model ZW, both type 1 entities POSID and PSPID have language-dependent texts activated. Therefore, dependent object DtxTPOSID is generated for POSID, and DTxTPSPID is generated for PSPID (see Figure 13.29).
                


Note
The generation of the GenIL model depends on the SAP MDG data model, but this book doesn't dive deep into how SAP MDG entities and relationships are translated into GenIL objects and relationships. This section only provides comparisons specific to current data model ZW. 


Figure 13.29    Language-Dependent Structures Generated as Dependent Objects









13.3    Create a Custom User Interface
This section introduces the concept of building the SAP MDG application UI using the SAP MDG, custom object UI framework.

Note
The focus of this chapter is on the SAP MDG, custom object UI for single object processing and hierarchy processing. The multiple object processing UI and cleansing UI aren't in the scope of this chapter.

In the following sections, we first explain the UI architecture of the custom object framework. We then move on to build a search UI and a SOM UI for project definition and WBS (elements and hierarchy).
13.3.1    User Interface Framework
The major building blocks of the SAP MDG, custom object UI framework are shown in Figure 13.30.

Figure 13.30    Runtime Architecture and Building Blocks of SAP MDG, Custom Object UI Framework
These building blocks are as follows:


User interface The UI technology for the SAP MDG, custom object UI is Web Dynpro-based Floorplan Manager. Floorplan Manager enforces consistency in the UI and compliance with UI guidelines by providing generic UI building blocks (GUIBB) and predefined floorplans (e.g., overview page floorplan [OVP] and guided activities floorplan [GAF]). The SAP MDG UI framework supports SAP Business Client, SAP Enterprise Portal, and SAP Fiori launchpad as UI clients. UI clients are the point of entry to web-based applications such as SAP MDG applications.
                    More details on the SAP MDG UI application framework are discussed in Chapter 4. In the current chapter, we'll focus on the SAP MDG UI framework for custom objects.
USMD_OVP_GEN is the generic Web Dynpro application delivered by SAP to build the UI for the SAP MDG, custom object application. Some of the features of the application are as follows:
                    

                            Based on the OVP floorplan
                        

                            Implements component FPM_ADAPTABLE_OVP, which enables context-based adaptations
                        



GenIL and Business Object Layer (BOL)  The purpose of GenIL is to provide uniform access to the underlying data persistency layer. It encapsulates business object-specific implementation and provides a uniform interface to access data from the persistency layer.
                    BOL interfaces with the UI framework to provide the following:
                    

                            Simple, easy-to-use, object-oriented APIs to access GenIL
                        

                            A built-in buffer that automatically decides if data is to be accessed from the buffer or from GenIL (buffering improves the performance of the UI)
                        



The loose coupling of the various building blocks guarantees minimum disruption. For example, if the SAP OData framework has a BOL adapter, then we can easily replace the Floorplan Manager with SAP Fiori without changing the code in the underlying GenIL and BOL framework. This feature is sometimes referred to as "timeless software." We'll never make changes in the BOL because it's just a bridge between the UI and GenIL. We've already discussed in detail the list of GenIL components that are generated for our custom data model ZW.
13.3.2    Design and Develop the User Interface
UIs are very important because they are used directly by end users of an enterprise. A great user experience is a must to increase the business value of SAP MDG custom applications and can provide the following: 


                    Gains in productivity via reduced number of clicks, maximum information in the least number of screens, and personalizing the UI to end user roles 
                

                    Increased user adoption
                

                    Decreased user errors
                

A bad user experience is the source of user frustrations, low user adoptions, and decreased productivity.
The characteristics of a good UI are as follows:


Role basedPersonalize the UI per job function of the user, and hide the fields/screens that the user should not see.
                

Simple UIKeep clicks to a minimum, and only show what the user needs to see.
                

Low cost of adoptionTraining requirements are minimized.
                

The following sections explain the basic concepts behind the UI design and the development of a search UI.
Design the User Interface 
Every SAP MDG, custom object UI should respect and follow the data semantics of the underlying SAP MDG data model. The features of data model ZW are as follows:


                        Project definition and WBS elements are the leading objects. 
                    

                        A WBS element can't exist independently. It always must be created under the project definition.
                    

                        Project definition and WBS elements have language-dependent texts.
                    

                        Project definition is the top node of the WBS hierarchy. 
                    

Taking these features into consideration, we'll design the UI as follows:


Search screen  as initial pageMost SAP-delivered SAP MDG applications have the search screen as the initial screen that allows users to search for existing business objects. If the object is found, the user opts for changing the business object data or for creating a new business object. We'll adopt a similar design for our custom application as well. The initial screen will be a search screen that provides the option to create a new project. To limit the scope, we won't extend the search screen to search for WBS elements.
                    

Main pageThe main page will have the following components:
                        

                                Project definition: The first UIBB is form based and will be used for maintaining attributes of the project definition.
                            

                                Language-dependent texts for project definition: The second UIBB will be a list UIBB for maintaining language-dependent texts.
                            

                                WBS elements: The third UIBB will be a list UIBB for creating a WBS element under the project definition. The first column in the list UIBB will be an action column that contains buttons to direct the user from the main page to the edit page.
                            



Edit pageThe edit page is used exclusively for maintenance of WBS element data and arranging the WBS elements into the project hierarchy. The edit page will also have buttons to edit the page and to return to the main page. The list of UIBBs in the edit page is as follows:
                        

                                WBS maintenance: The first UIBB will be a form UIBB for maintaining WBS element data.
                            

                                Language-dependent texts for WBS elements: The second UIBB in the edit page will be a list UIBB used for maintaining language-dependent texts.
                            

                                Hierarchy maintenance UIBB: The last UIBB in the edit page is a hierarchy UIBB used for assigning WBS elements to the project hierarchy.
                                
Note
At the UI design stage, it's a good idea to design your wiring between various Floorplan Manager UIBBs. For example, you can decide which will be the root UIBB and what kind of port will be used to connect a search UIBB and the main page (lead selection or collection).





Develop the Search User Interface
SAP MDG provides a generic search application called USMD_SEARCH, which can be used to search any data model and type 1 entity using any search provider (database search, SAP HANA, SAP Enterprise Search). There are many scenarios on how to use this generic search UI, and some of them require copying the generic search UI and creating a new one. For some scenarios, you can use it as-is just by maintaining the URL parameters.
In our use case, we'll be copying the application configuration of the USMD_SEARCH application only to default the application parameter values. To enable the generic search UI, follow these steps:


Step 1: Create search help. The first step toward enabling the generic search UI is to create a search help. The generic UI generates search criteria and a search results area based on the search help. Therefore, assigning search help is mandatory for the generic search UI.
                        In the current example, we'll create a search help with SAP HANA as the search mode. Navigate to IMG activity MDG IMG • Master Data Governance, Central Governance • General Settings • Data Quality and Search • Search and Duplicate Check • Create Search View.
                        This IMG activity is used to create SAP HANA-based search help. Figure 13.31 shows the sequence of actions that need to take place to create an SAP HANA search view. After the SAP HANA search view is created, then a search help entry with the same name as the SAP HANA search view will be created in the IMG activity. 
                        
Figure 13.31    Sequence of Steps for Creating an SAP HANA-Based Search Help

Note
Remember to create an SAP HANA package in the SAP HANA database before proceeding with the activity to create the SAP HANA search view.

                        The SAP MDG search framework creates SAP HANA artifacts such as an attribute view and a ruleset under the SAP HANA package. The framework also creates database procedures to invoke SAP HANA artifacts from the application server.
                    

Step 2: Open the manage UI configurations  application from the IMG. Go to MDG IMG • Master Data Governance, Central Governance • General Settings • UI Modeling • Manage UI Configurations.
                        This IMG activity is used to manage all the object maintenance-related UIs (e.g., SOM UI, multiple processing UI, search UI). It provides options to copy application configurations and check the status of the SAP MDG communicator settings. This tool is helpful for users who have no knowledge of navigating the ABAP Workbench for copying and maintaining the SAP MDG UI applications.
                        
Note
SAP MDG communicator technically is an application controller. It plays a key role in integrating the SAP MDG change request framework with SOM/multiple processing UIs. For example, it's responsible for adding the change request UIBB in runtime to the SOM/multiple processing UIs.
Not every SAP MDG application uses the SAP MDG communicator. SAP MDG communicator settings are not relevant for material master applications built using the Service Provider Infrastructure (SPI) framework. However, the communicator is relevant for SAP MDG applications built using the SAP MDG custom object framework.



Step 3: Create a new generic search application. In the UI, select the application configuration USMD_SEARCH_TEMPLATE and click on the Copy button to create a new generic search application configuration. Figure 13.32 shows how to copy the existing template configuration and create a new one. It also shows how we've assigned data mode, type 1 entity, search help, and search mode as application parameters.
                        The application parameters are used during runtime by the generic search UI to determine the right search help. The application parameters have the following runtime significance:
                        

                                When no application parameters are entered, the search control area is rendered in the search UI. The search control area provides an option to select the data model, entity, and search method. These values will be used by the generic search UI to automatically render search criteria and search results.
                            

                                The search control area won't be rendered if all the application parameters, such as USMD_MODEL, USMD_ENTITY, and USMD_SEARCH_MODE, are entered. 
                                
Figure 13.32    Steps to Create a Copy of the Generic Search Template Configuration




Figure 13.33 shows the screenshot of a fully functional search UI application. Note the way the search UI has been rendered, as follows:


                        The title of the UI appears as Search: Project definition. This title has been generated automatically based on the description of the entity assigned in application parameter USMD_ENTITY.
                    

                        The Search Criteria area is derived automatically from the search help configuration.
                    

                        The Result List area is nothing but keys and attributes of the type 1 entity assigned in application parameter USMD_ENTITY.
                    

One very important step that needs to be performed after copying the generic search template configuration is to create the SAP MDG communicator (MDG_BS_GOV_COMMUNICATOR) configuration. The name of the communicator configuration and the search UI application must be the same; if they aren't, then the search UI application won't be rendered correctly. SAP MDG communicator is responsible for rendering the search criteria and search results areas based on the search help configuration. Therefore, if you find that your search UI doesn't display search criteria and search results correctly, the first thing to check is the communicator settings for the search UI application configuration. Figure 13.34 shows how to configue the SAP MDG communicator.

Figure 13.33    A Fully Functional Search UI Application

Figure 13.34    Steps to Create the SAP MDG Communicator Configuration
To begin, click Details. On the next screen, change nothing and click Save. In the next section, we'll discuss how to create the actual SOM UI for maintaining the project definition and WBS hierarchy. We'll discuss how the navigation from the search UI to the SOM UI happens in Chapter 14.
We now have a fully running search UI application. This is the advantage of the SAP MDG custom object UI framework. We haven't written a single line of code until now. All we've done is performed data modeling, configured search help, and copied a template search UI configuration. 
13.3.3    Develop a Single Object Maintenance User Interface 
In the previous section, we created a search UI; now we'll proceed to create a SOM UI for the project definition and WBS hierarchy.
SAP provides template configurations for UI application USMD_OVP_GEN. The details of the template application configuration and component configuration are as follows:


                    Application name: USMD_OVP_GEN


                    Application configuration name: USMD_OVP_GEN_TEMPLATE


                    Component configuration: USMD_GEN_OVP_TEMPLATE

Figure 13.35    Steps Required to Copy the Template Configuration for SOM and Create a New Configuration


Figure 13.35 shows how to copy the template SOM UI configuration. On the Manage UI Configurations screen, click Copy. On the next screen, enter the Target Configuration ID and click Start Deep-Copy. Finally, assign your Web Dynpro component. We've also assigned value ZPS to application parameter USMD_OTC. ZPS is the business object type code, which is used to derive the data model and main entity during runtime. We've also created an SAP MDG communicator configuration; for more information on the steps to create the SAP MDG communicator configuration, refer to Figure 13.34.
The SAP MDG communicator is responsible for adding the change request UIBB and corresponding wiring during the runtime to the SOM UI. 

Note
Wiring in Floorplan Manager refers to transferring data from the source UIBB to the target UIBB. 

When component configuration Z_ZW_OVP_COMP_POSID is opened, by default a main page will be created. You can change the main page ID or retain the default ID, and then you can enter the title of the main page. Ensure that USMD_GEN_OVP is configured as the application controller. Figure 13.36 shows how to create a main page and configure the application controller. The steps we'll need to perform in this area are as follows:


Main page: Configure the technical UIBB. We start the UI configuration of the main page by creating a technical UIBB. The technical UIBB is never shown in the UI, but it participates in the Floorplan Manager event loop. This UIBB will be the root UIBB in the wire schema. The UIBB will just contain the key fields of entity PSPID.
Figure 13.37 shows how to add the technical UIBB to the OVP floorplan. Notice that at 1, we've enabled the attribute that makes this UIBB hidden but still participates in the event loop.
                    
Figure 13.36    Creation of the Main Page and Configuring Application Controller Settings
                    At 2 in Figure 13.37, we've added a wire, which has the technical UIBB as the target UIBB but doesn't have a source UIBB. This makes it the root UIBB, which can be instantiated independently.
                    
Figure 13.37    Adding the Technical UIBB to the OVP Floorplan
Figure 13.38 shows how the technical UIBB is configured in the flexible user interface designer (FLUID), as follows:
                    

                            Class CL_MDG_BS_GUIBB_FORM  1 is used as a feeder class in the UIBB. This is a generic feeder class provided by SAP MDG for forms. Every form GUIBB used in the SAP MDG application should have CL_MDG_BS_GUIBB_FORM or its subclass as the feeder class.
                        

                            Click Edit Parameters  2 to add the parameters for the UIBB as Component = ZSP_ZW  3 and Object Name = PSPID  4 (see Figure 13.38). ZSP_ZW is the GenIL component for single object processing for data model ZW. 
                        

                            Select the Editable checkbox 5.
                        

                            This UIBB will only have Project definition  6 as an input field. 
                        


Figure 13.38    Configuring the Technical UIBB in the FLUID


Main Page: Configure form UIBB  for project definition for project definition. We now add the first visible UIBB of the SOM UI; this UIBB will be a form UIBB and will hold the project definition. We'll also configure a wire with port type as the lead selection from the technical UIBB to form the UIBB of the project definition. Apart from data transfer, this wire will ensure that the technical UIBB is instantiated first.
                    The feeder class and feeder class parameters will be the same as those of the technical UIBB. Figure 13.39 shows the configured form UIBB with UI elements related to the project definition. Figure 13.40 shows the wiring between the technical UIBB and the form UIBB for the project definition. 
                    
Figure 13.39    Configuring Form UIBB for the Project Definition

Figure 13.40    Wiring between the Technical UIBB and the Form UIBB for Project Definition

Note
The transaction handler class is used by the UI for handling transaction events such as save, check, and so on. We'll use SAP-delivered transaction handler class CL_MDG_BS_BOL_TRANSACTION. Ideally, the only reason you would have a custom transaction handler class inheriting a standard class is if you want to influence the transactional events or if you want to influence the messages on transactional events such as save. Note: When creating a custom transaction handler class, the subclass calls the corresponding superclass methods. If not called, then the delegation from GenIL to MDGAF won't happen. 



Main page: Configure the list UIBB  for language-dependent texts for language-dependent texts.As shown in Figure 13.8 in Section 13.2.2, the type 1 entity for the project definition (PSPID) has language-dependent texts activated, allowing the description for the project definition to be maintained in multiple languages. To enable this functionality in the UI, you need to add a list UIBB and create a wire between the form UIBB for the project definition and the list UIBB for language-dependent texts. We use CL_MDG_BS_GUIBB_LIST as the feeder class, which is the generic feeder class provided by SAP for list UIBBs in SAP MDG applications. Figure 13.41 shows the steps to create a list UIBB for language-dependent texts for entity PSPID. Figure 13.42 shows the UIBB settings.
                    
Figure 13.41    Creation of the List UIBB for Language-Dependent Texts and Connection via Wire with Technical UIBB

Figure 13.42    List UIBB Configuration for Language-Dependent Texts


Main page: Configure the list UIBB  for creating and changing WBS elements for creating and changing WBS elements. A project definition can have multiple WBS elements assigned to it. Each WBS element has its own set of attributes and is assigned to the WBS hierarchy. To meet these requirements, we first create a list UIBB in the main page and then create an edit page; this edit page is tagged as the default edit page for the list UIBB.
                    The first column in the list UIBB is the action column. This column holds the button that triggers navigation to the default edit page to maintain the WBS element-specific attributes and assign the WBS element to the hierarchy.
                    It's very important to note that, per the SAP MDG data model, both WBS elements and the project definition are type 1 entities. In the GenIL model, these two entities are related via an association relationship. Figure 13.43 shows the steps to create the list UIBB for WBS element maintenance. Figure 13.44 shows the UIBB settings and steps performed to add elements to the list.
                    The figure also shows how the standard Floorplan Manager event is configured as one of the actions in the Actions column.
Figure 13.45 shows the wiring that has been done to transfer the PSPID entity data to the list UIBB. These data are required to default the key of the POSID entity. To do so, we've created a subclass for connector class CL_MDG_BS_CONNECTOR_BOL_ASSOC. We've redefined method CREATE_REL_ENTITY_FROM_TEMPL, which creates an entity based on a relationship and fills up the collection of entities. 
                    
Figure 13.43    Creating the List UIBB for Maintenance of WBS Elements and Assigning the Edit Page as the Default

Figure 13.44    Configuring the UI Elements in the List UIBB for WBS Element Maintenance

Figure 13.45    Wiring between the Technical UIBB and List UIBB for WBS Maintenance


Figure 13.46 shows the final look of the main page. It's important to note here that we've created a functional UI almost without writing any code. The only code that we've written is in the redefined method of the connector class described earlier. This code could have been easily avoided if we didn't have any relationship in the GenIL model of the association type. This again reemphasizes the reusability of the SAP MDG custom object framework.
Throughout this chapter, we've only discussed how to create a data model and develop a UI. We haven't needed to concern ourselves with architecture or best practices, as these are provided by the SAP MDG custom object framework.

Figure 13.46    Final Look of the Main Page
Per the UI design discussed in previous sections, navigation to the edit page will happen from the Action column of the WBS list UIBB in the main page. This edit page will be used to maintain the WBS attributes and assign WBS elements to the hierarchy. Figure 13.47 shows the edit page for maintaining WBS element attributes.

Figure 13.47    Edit Page with WBS Element Attributes and Hierarchy Assignment UIBB









13.4    Summary
The chapter explains the SAP MDG custom object framework using WBS elements as an example. In the current chapter, we've used data modeling and UI modeling to build a UI application.
In the next chapter, we'll continue to use the SAP ERP PS as an example to explain process modeling and data replication for custom objects.








14    Building Custom Applications: Process Modeling and Data ReplicationThe previous chapter covered data modeling and user interface modeling for a custom object. In this chapter, we deal with process modeling, data replication, and other topics such as roles and authorizations, value mapping, key mapping, and translations for custom object content to any regional language other than English. This chapter continues the work breakdown structure (WBS) in SAP ERP Project Systems (SAP ERP PS) use case to describe the concepts.This chapter is a continuation of Chapter 13, in which we built an SAP MDG custom data model and an SAP MDG user interface (UI) application. This chapter completes the SAP MDG custom application by describing how to build governance processes around the application and how to replicate master data from the custom data model to the target systems.Section 14.1 explains how to induce governance into SAP MDG custom applications using process modeling. Section 14.2 explains the available security roles and objects for custom objects and how to configure them. Section 14.3 explains how to translate custom SAP MDG applications into local languages. Section 14.4 explains how to configure replication custom object data to target systems. Section 14.5 and Section 14.6 explain how to enable key mapping and value mapping to the custom object. 
14.1    Process Modeling
In SAP MDG, every change (including creation) of master data is initiated using a change request, which is roughly a carrier of changes to the master data. After change requests are initiated, they need to be processed before activation/rollback by applying governance rules and collaboration.
The process model provides the required input (metadata) for change request creation and processing of change requests (e.g., workflow for collaboration, list of change request steps, and list of objects that can be processed as part of change request). The process modeling configuration node in SAP MDG is a group of semantically similar configuration activities required to execute the change request process.
A change request process is a list of sequential or parallel change request steps. The sequence of the change request steps is defined by SAP Business Workflow and assigned to the change request process through the change request type.

Note
Submit and activation/rollback are mandatory change request steps in a change request process. Without the submit step, you can't initiate a change request. It's illogical not to activate/rollback the initiated master data changes through the change request. The SAP MDG change request framework doesn't explicitly impose this rule.

SAP MDG reuses the SAP Business Workflow component of the underlying SAP Business Suite. Technically, the SAP MDG workflow is an instance of business object BUS2250.

Note
If a change request has parallel processing, then each parallel step of the change request will have one BUS2250 instance. Therefore, a change request can have multiple BUS2250 instances.

For process modeling, the first step is to create a new business activity to tie an action with the business object and then maintain navigation settings of the custom UI application using business activities and actions, as covered in the following sections. These sections will also explain the steps to create a change request type and the corresponding workflow settings.
14.1.1    Create a New Business Object
The business object is mandatory in SAP MDG, Every type 1 entity, UI application, and outbound implementation in the data replication framework should be assigned to a business object. 
The IMG path for creating the business object is Master Data Governance Central Governance • General Settings • Data Modeling • Define Business Object Type Codes. Click on New Entries, and enter the values as shown in Figure 14.1.

Figure 14.1    Creation of Business Object ZPS to Represent the Custom Data Object for SAP ERP PS
14.1.2    Create a New Business Activity
To design a business activity, you start by asking the business user what kind of actions (create, change, etc.) he/she intends to perform and on which business object.
Each combination of logical action and business object becomes one business activity. In our case, we'll create two business activities:


ZBA1: Create project definition and WBS elements
                

ZBA2: Change project definition and assign WBS elements to the project hierarchy 
                


Note
In Transaction CJ20N, you can create the project definition and WBS elements and then assign them to the hierarchy. This can't happen in SAP MDG because the SAP MDG framework requires the hierarchy name entity (PSPID) to be active. Therefore, we have to create the project definition first, and then we can create WBS elements and assign hierarchies in change mode.

Figure 14.2 shows the list of business activities we've created in the IMG for SAP MDG. Following are the list of steps for creating business activities and assigning business activities and actions to the business object:


                    Go to IMG path Master Data Governance, Central Governance • General Settings • Process Modeling • Business Activities • Create Business Activity  1.
                

                    Click on New Entries  2, and enter values for your business activities 3 and 4, as shown in Figure 14.2.
                


Note
In Chapter 13, Section 13.3.2, we've assigned ZPS as the value for the application configuration parameter USMD_OTC. This value is used in runtime by SAP MDG AF to derive the business activity based on the configuration performed in Section 13.3.2.


Figure 14.2    Creation of Business Activities for WBS in SAP ERP PS
14.1.3    Assign Business Activities and Logical Actions to Business Objects
A logical action represents the operation to be performed on the master data by an actor in the process (e.g., create, change, or delete). Business activities add business context to logical actions by linking them with business objects such as create supplier, change material, and delete account. Business activities are defined by assigning an action, data model, and business object. 
For our use case, we don't need to create a new action. We'll reuse SAP-delivered actions such as create and change. This is important because we're using the generic search UI, which defaults the create action when the New button is clicked.
14.1.4    Maintain Settings for Business Activity Determination
During runtime, the SAP MDG application framework needs to determine the business activity for various purposes such as determining change the request type and determining the navigation targets during cross-application UI navigation. Figure 14.3 highlights the list of IMG activities that must be performed to determine the right business activity at runtime. 

Figure 14.3    IMG Activities Required to Correctly Determine Business Activities at Runtime 
Every SAP MDG application UI—both the Single Object Maintenance (SOM) UI and the multiple object processing UI—requires action to be configured as a URL parameter. Action along with business object (parameter USMD_OTC) will be used to determine the business activity. Figure 14.4 shows the settings to determine the business activity for data model ZW.

Figure 14.4    Settings for Business Activity Determination for Data Model ZW
In SAP MDG, we have different kinds of navigation between the UIs:


In-place navigation This kind of navigation usually happens within the application and includes navigating from the main page to the edit page, navigating from a dialog box to the main page, and vice versa. This navigation is handled by the feeder class and UI configuration.
                

Cross-application navigation This kind of navigation happens from one application to another, such as from a generic search UI to the SOM application UI and from the my change requests UI to the SOM UI. This kind of navigation is usually handled by configuration, which can be accessed using the path, Master Data Governance, Central Governance • General Settings • Process Modeling • Business Activities • Link Log. Actions with UI Application and Bus. Activity: Custom Definition.


Figure 14.5 shows the list of configurations created for cross-application navigation between the generic search UI and the custom object UI for actions create, change, and display. In the figure, the second set of highlighted entries are triggered whenever a New button is clicked on the search UI. The first set of highlighted entries are triggered whenever an Edit button is clicked on the SOM UI. The last set of entries are triggered whenever a UI is opened to view the active data.

Figure 14.5    Settings for Navigation from a Generic Search UI for Action Create and Action Change
14.1.5    Create Change Request Type
The change request type is the key characteristic of the change request that determines how a change request is processed. The change request type links a change request to the workflow, data model, and business activities.
In this example, we'll create one change request type for one business activity. Figure 14.6 shows the change request types we've created. 

Figure 14.6    Change Request Type Configuration
We've created two change request types, as follows:


ZPS_01This change request is used for creation of the project definition and WBS elements. We've assigned simple workflow template WS75700040 to the change request. The main entity type for this change request type is PSPID (project definition). The other entity is POSID. Remember that although POSID is a type 1 entity, PSPID is a superior entity to POSID by virtue of the leading relationship from PSPID to POSID. The business activity ZBA1 is assigned to the change request type. This assignment is used at runtime for change request type determination. Following are the steps to create change request type ZPS_01:
                    

                            Go to IMG activity Master Data Governance, Central Governance • Process Modeling • Change Requests • Create Change Request Type.


                            Click on the New button.
                        

                            Enter Type of Chg Request as "ZPS_01".
                        

                            Enter Data Model as "ZW".
                        

                            Enter Description as "Create Projects". 
                        

                            Select Single Object Check Box.
                        

                            Enter Main Entity Type as "PSPID".
                        

                            Enter the workflow ID "WS75700040" in the workflow field.
                        

                            Press (Enter).
                        

                            Select the row for change request type ZPS_01, and click on Entity Types.
                        

                            Add entity POSID to the list of entity types.
                        

                            Select Business Activity. 
                        

                            Add Business activity ZBA1 created as part of Section 14.1.2.
                        

                            Click on Save.
                        



ZPS_02This change request type is used for changing the project definition, changing WBS elements, creating new WBS elements, and assigning WBS elements to the project definition hierarchy. This change request type, like ZPS_01, also has PSPID as the main entity and POSID as the other entity. Business activity ZBA2 has been assigned to the change request type. Both change request types don't have parallel processing enabled. Following are the steps to create change request type ZPS_02:
                    

                            Go to IMG activity Master Data Governance, Central Governance • Process Modeling • Change Requests • Create Change Request Type.


                            Click on the New button.
                        

                            Enter Type of Chg Request as "ZPS_02".
                        

                            Enter Data Model as "ZW".
                        

                            Enter Description as "Create Projects". 
                        

                            Select the Single Object checkbox.
                        

                            Enter the Main Entity Type as "PSPID".
                        

                            Enter workflow id "WS75700040" in the Workflow field.
                        

                            Press (Enter).
                        

                            Select the row for change request type ZPS_02, and click on Entity Types.


                            Add entity POSID to the list of entity types.
                        

                            Select Business Activity. 


                            Add business activity ZBA2 created as part of Section 14.1.2.
                        

                            Click on Save.
                        



14.1.6    Workflow Settings
We've assigned simple workflow template WS75700040 to both change request type ZPS_01 and ZPS_02. 
Following are the steps to assign processors to the simple workflow:


                    Go to IMG activity Master Data Governance, Central Governance • General Settings • Process Modeling • Workflow • Other MDG Workflows • Assign Processor to Change Request Step Number (Simple Workflow).
                

                    Click on New Entries. 
                

                    Enter values in the IMG view as shown in Figure 14.7. We've used agent type as US (user). You also have the option to use roles or organization units.
                    
Figure 14.7    Assignment of Processors to Workflow Step Number











14.2    Security and Roles
This section explains the concept of security and roles for custom applications. Section 14.2.1 provides an overview of authorization objects delivered by SAP and how to use to them to control the security of an SAP MDG custom application. Section 14.2.2 explains how to create new menu roles and authorization roles. Menu roles are used to configure roles-based home pages. Finally, Section 14.2.3 explains how to create a home page. The home page that we'll create is based on Transaction PFCG roles created in Section 14.2.2.
14.2.1    Authorization Objects
Authorization objects provided by SAP are used to restrict access to the SAP MDG application during runtime and design time. Configuring access to SAP MDG using authorization objects is highly specific to each company. Therefore, we won't explain this concept in detail in terms of the use case.
The SAP-delivered SAP MDG application comes with sufficient authorization checks that reuse the underlying SAP Business Suite authorization objects. This reuse essentially means that if you have supplier master data maintenance roles in an existing SAP ERP system, then this role can be used as-is in the SAP MDG system as well.
For SAP MDG custom objects, you can choose to implement authorization checks on existing authorization objects in the access class (if the data model has a reuse active area, and you want to reuse the reuse area authorization objects) or in Business Add-In (BAdI) USMD_RULE_SERVICE (if the data model is in flex mode). 
SAP delivers the following generic authorization objects that you can use irrespective of the data model:


USMD_MDATThis authorization object is used to configure restriction on maintenance of master data. The permitted activities for the authorization object are create, change, display, and delete. The authorization fields for this object are USMD_MODEL (data model), ENTITY (entity type), and KEY_FLD1 ... KEY_FLD7. The key fields are interpreted depending on the way the configuration is done. If you flag only entities as authorization relevant, then, by default, the key fields of the entities are defined as key fields. Apart from key fields, you can also define attributes of an entity type as authorization relevant. You can only define seven fields as authorization relevant per entity type. These seven fields include the key fields of the entity type. You can configure type 1, 2, and 3 entities as authorization relevant.
                

USMD_MDATHThis authorization object is used to configure restriction on the maintenance of the hierarchy. The permitted activities are create, change, and display. Table 14.1 lists the authorization fields for the object.
                    



                                    Authorization Field
                                

                                    Description
                                

                                    Usage
                                





USMD_MODEL


                                    Data model
                                

                                    Active data model.
                                



ENTITY


                                    Entity type
                                

                                    Specifies entity type for which the hierarchy is defined. The entity type for which the field Is Hry Type is configured as Yes.




HRYVERS


                                    Hierarchy version
                                

                                    Enter the hierarchy version. This field is relevant only if the hierarchy is version enabled in the hierarchy entity type.
                                



H_KEY_FLD1


                                    Value for key field of ENTITY


                                    Enter the value for the key field of ENTITY.
                                



H_KEY_FLD2


                                    Value for key field of ENTITY


                                    Enter if you have another key field of the entity.
                                



ENTITY_NOD


                                    Entity type of the node
                                

                                    Enter your own ENTITY or entity configured as additional nodes.
                                



N_KEY_FLD1 - N_KEY_FLD1


                                    Value of node key
                                

                                    Enter value of the node key.
                                



Table 14.1    Authorization Fields for Authorization Object USMD_MDATH


For data models with a reuse active area, you can use authorization objects from the reuse active area; however, you can choose to deactivate the usage and choose to use only USMD_MDAT authorization object. Figure 14.8 shows the configuration settings to activate SAP MDG-specific authorization (USMD_MDAT) for the business partner data model. This configuration activity can be accessed through via Master Data Governance, Central Governance • General Settings • Data Modeling • Define Authorization Relevance per Entity Type • Data Model • Authorization from Reuse Active Area. If you activate this setting, the authorization from the reuse area won't be invoked by default; only USMD_MDAT will be invoked. 

Figure 14.8    Settings to Activate SAP MDG-Specific Generic Authorization for the Business Partner Data Model
Our data model ZW is configured in flex mode. Even though it's in flex mode, the authorizations USMD_MDAT and USMD_MDATH aren't invoked by default. You have to mark these entities explicitly as authorization relevant in the configuration path Master Data Governance, Central Governance • General Settings • Data Modeling • Define Authorization Relevance per Entity Type • Data Model • Authorization for Entity Types.
Figure 14.9 shows the settings made in the system to enable entity types PSPID and POSID as authorization relevant. 

Figure 14.9    Enabling Settings to Make Entities POSID and PSPID Authorization Relevant
14.2.2    Roles
Roles are used for configuring authorization profiles and menus for users. Roles are directly assigned to the user master and can also be used to configure personalization values for users.
The role design guidelines are established differently for every organization. We'll adopt one such approach here. To bring in more flexibility in the role assignment, we'll create separate roles for the menu and authorization profile but group these two roles into a composite role.
SAP delivers a template role called SAP_MDGX_MENU_04 for custom objects. We'll copy this role to create two new roles for authorization and menu.
Role for Menu
The role for menu is used exclusively to configure the menu entries in the SAP Business Client. This role won't have any authorization maintained.
First, we copy role SAP_MDGX_MENU_04 and create a custom role. Be sure to use your own naming convention here. Figure 14.10 shows the list of steps to create custom menu role ZSAP_MDGZW_MENU_04.
After the role is created, we adjust the menu entries in the role. We configure the USMD_SEARCH UI we created in Chapter 13. Figure 14.11 shows the list of adjustments made to the copied role.

Figure 14.10    Steps to Copy Role SAP_MDGX_MENU_04 into Custom Menu Role ZSAP_MDGZW_MENU_04

Figure 14.11    Adjusting the Menu Entries of the Copied Role
Role for Authorization
The role for the authorization is used only for maintaining the authorization objects and values for authorization object fields. We won't maintain any menu entries in the role. Here you create one role for one persona. For example, if in your governance process, you have a persona for requester and approver, then you'll create two authorization roles. In this chapter, we'll only create one role for admin persona for simplicity. You can choose to use an authorization object from the object class FMDM and SAP MDG. SAP delivers a template role SAP_MDGX_MENU_04 for custom objects; this role should copied and used as foundation to build custom object-specific roles. Figure 14.12 shows the steps required to copy the template roles. Figure 14.13 shows how to add the authorization objects to the custom object role for admin. 

Note
We've only used USMD_MDAT and USMD_MDATH authorization objects in the role. You have many other authorization objects delivered by SAP that haven't been used to keep this chapter short and concise. Refer to object class FMDM and SAP MDG for a list of more authorization objects.


Figure 14.12    Copying the Template Role to the Admin Authorization Role

Figure 14.13    Configuring the Authorization Objects for the Admin Role
14.2.3    Home Page 
A home page is a landing page that is displayed as soon as a user opens the menu role in SAP Business Client. We'll build this home page using the Page Builder. To create the page configuration, perform the following actions:


                    Go to the ABAP Workbench (Transaction SE80). To create an application configuration as shown in Figure 14.14, display Web Dynpro component WDR_CHIP_PAGE  1, select application WDR_CHIP_PAGE  2, and choose Create/Change Configuration  3 from the context menu. Specify a unique Configuration ID  4.
                    
Figure 14.14    Steps to Create Page Configuration for Application WDR_CHIP_PAGE


Figure 14.15 shows the steps to start the Page Builder in configuration mode. Call the Page Builder by selecting application configuration ZMDG_ZW_HOME_APPLN_CONF  1, and choose Test  2 from the context menu. The Page Builder is started. Choose the Adapt Page button 3 on the top-right corner of the page, and click on Configuration  4. 
                    
Figure 14.15    Steps to Start the Page Builder in Configuration Mode


Figure 14.16 shows the steps to define the page layout. Click on the Page Settings  1 button on the application toolbar, and enter the title of the page in the Page Title field 2. Click on the CHIP Catalog  3 button on the application bar, and a side panel for CHIP Catalog opens. Search for "PFCG" 4, and select chip PFCG Link List  5. Drag and drop the chip in a row in the Page Builder.
                

                    After the chip is added, change the title of the chip and define the link list. Use the application alias configured in the menu role. Figure 14.17 shows the steps. Repeat this step for all the folders in the role. 
                    
Figure 14.16    Setting Up a Page: Adding the Title and PFCG Link List Chip to the Page Builder

Figure 14.17    Configuring the PFCG Application Alias


                    After the home page is configured, add the home page to the PFCG role (see Figure 14.18).
                    
Note
We can add two kind of chips: PFCG link list and launchpad link list. The second requires configuration of the launchpad in Transaction LPD_CUST. In this chapter, we're using the PFCG link list.


Figure 14.18    Adding the Home Page to the PFCG Role











14.3    Translation
Often SAP MDG applications are used across the world, and English may not be the language of communication in all regions; for example, countries such as China and Japan use corresponding local languages for communication and so require the SAP MDG application to be displayed in local languages. SAP delivers the standard SAP MDG application in various languages, and you have to activate the SAP MDG add-on to display the standard SAP MDG application in the preferred language. The SAP MDG translated content will be effective even when you copy the SAP MDG application and create custom applications via the application hierarchy browser or configuration editor. SAP delivers translations for generic UIs such as my change requests, personal object worklist (POWL), change documents, and data exchange UI.
SAP MDG applications for custom object are developed by companies, so it's the company's responsibility to translate the custom application UIs to the preferred languages. This section deals with translating SAP MDG custom object UI content to any activated language in the system. We'll describe the Floorplan Manager text tool, which can be used to find all the texts of a UI in an Floorplan Manager application, and then we'll cover how to translate each Floorplan Manager text.
14.3.1    Overview
As of this writing, the languages supported as of SAP MDG 9.0 includes Catalan, Czech, Danish, German, English, Spanish, Finnish, French, Hebrew, Croatian, Hungarian, Italian, Japanese, Korean, Dutch, Norwegian, Polish, Portuguese, Russian, Slovakian, Slovenian, Swedish, Thai, Turkish, Traditional Chinese, and Chinese. Refer to the installation guide to get the latest list of languages supported by SAP MDG.

Note
For releases until SAP NetWeaver 7.31 SP04, you have to explicitly run report WDR_CFG_TEXT_COPY to copy the nonoriginal language content from the standard Floorplan Manager configuration to the copied Floorplan Manager application.

Texts in the SAP MDG application (technically, the Floorplan Manager application) can be stored in the following ways:


Texts in data elementsWhen an attribute of an entity type refers to a data element, SAP MDG by default will display the texts maintained in the data element as label text in the UI. To translate these texts, the data element texts just need to be translated. Figure 14.19 shows an example of texts derived from data elements.
                    
Figure 14.19    Derivation of Texts on the UI from Data Element Texts


Texts in menu rolesSAP Business Client is role based, so the menu rendered in the navigation panel will be based directly on the corresponding menu in the PFCG role assigned to the user. Figure 14.20 shows how the PFCG role texts are displayed in the navigation panel of SAP Business Client. 
                

Text elements in the feeder class The feeder class can influence the displayed texts during design time (by changing field catalog) or during runtime (by changing field properties). It's recommended that these texts should be stored as text elements in the feeder class to facilitate translation. For example, in the cost center SOM UI under the cost center address assignment block, the postal code and city have the common label text Postal Code/City. During runtime, the feeder class populates the tooltip text for each field when the cursor is hovered over the field. This text is maintained as a text element in the feeder class. Figure 14.21 shows how the text elements of the Floorplan Manager feeder class are displayed in the UI.
                    
Figure 14.20    Derivation of Texts on the Navigation Panel of NWBC from Folder Texts of the Role Menu in the PFCG Role

Figure 14.21    Text Element 002 Used by Feeder Class CL_MDGF_GUIBB_CCTR to Populate Tooltip Text on the Postal Code Field during Runtime


Texts directly maintained in flexible user interface designer (FLUID)  editor for Floorplan Manager componentsThe title of the Floorplan Manager page, the title of a user interface building block (UIBB), label texts of fields in generic UIBBs (GUIBBs), and tool tip text are some examples of these texts. Figure 14.22 shows the list of texts that are maintained in the component configuration of the overview page floorplan (OVP) page and GUIBB. Figure 14.22 shows how different texts are maintained on the FLUID editor of the Floorplan Manager.
                    
Figure 14.22    Different Texts Maintained in the Component Configurations of Pages and GUIBB



Note
If a UI element has label texts maintained in the FLUID editor, feeder class, and data element, the label text will be displayed based on the following prioritization:


                        Text maintained in FLUID
                    

                        Text element in the feeder class
                    

                        Text maintained in the data element
                    


14.3.2    Floorplan Manager Text Tool
The Floorplan Manager text tool is used to determine the static texts in a component configuration. This tool can be accessed using Transaction FPM_TEXT_TOOL.
This tool can be used by translation experts and content developers to view the list of available static texts in the original/master language and their corresponding translations in the target language/selected language.
This tool is only for visual purposes; you can't perform actual translations in this tool. Figure 14.23 shows the selection screen and result screen of the Floorplan Manager text tool.

Figure 14.23    Floorplan Manager Text Tool Selection Screen and Result List
14.3.3    Translating Data Element Texts and Floorplan Manager Texts
There are a couple of ways to find text and translate it. In this chapter, however, we'll discuss translating by entering the transport entry of object, which can be used uniformly for both Floorplan Manager texts and data element texts.
Following are the steps to find the object entry of a Floorplan Manager text stored as data element text or Floorplan Manager text. The steps are also shown in Figure 14.24.


                    Locate the object in Transaction SE80 1.
                

                    Click on the Goto  2 button in the application toolbar.
                

                    Click on Object Direct Entry  3.
                

                    Copy the transport object entry from the dialog box.
                    
Figure 14.24    Finding the Transport Entry for an Object


After finding the transport object entry, we now have access to the translation editor using Transaction SE63 to translate the texts.
Following are the steps to translate the texts using the transport entry of an object in the translation editor (Transaction SE63). The steps are also shown in Figure 14.25.


                    Go to Transaction SE63 1.
                

                    Choose Translation • ABAP Object or press (ALT)+(T) 2.
                

                    Then choose Transport Object  3.


                    Enter the transport entry in the Object field.
                

                    Enter the Source Language and Target Language for translation.
                

                    In the next screen, click on Sequentially Process Objects  4.
                

                    When the Translation Editor opens, enter the content in the target language for each text 5.
                    
Figure 14.25    Translating Texts Using the Translation Editor (Transaction SE63)


14.3.4    Translating Text Elements in the Feeder Class
Text elements in the feeder class can be translated directly from the Class Builder (Transaction SE24) or ABAP Workbench (Transaction SE80). Following are the steps to translate feeder class texts (also shown in Figure 14.26):


                    Go to Transaction SE24.
                

                    Enter the class name in the Object Type field 1, and click on Display  2 or press (F7).
                

                    On the menu bar, choose Goto • Translation  3 and 4.


                    Enter the Source Language and Target Language for translation.
                

                    When the Translation Editor opens, enter the texts in the target languages.
                    
Figure 14.26    Translation of Text Elements in the Feeder Classes


14.3.5    Translating Texts in the PFCG Role
As discussed in the preceding section, the role menu configured in a PFCG role displays as links on the navigation panel of SAP Business Client. The texts of these roles should be translated as well.
Following are the steps to translate PFCG role texts (also shown in Figure 14.27):


                    Go to Transaction SE63 1 to open the Translation Editor screen.
                

                    Choose Translation • ABAP Objects • Short Texts • A5 • ACGR Roles  2 and 3.
                

                    In the next screen, enter the role name in the Object Name field, Source Language, and Target Language. Click on Edit  4. The role texts are displayed in the Translation Editor for translation.
                    
Figure 14.27    Translating PFCG Role Texts











14.4    Data Replication
Replicating master data to target systems is the final outcome of the SAP MDG, central governance process. The change request framework and data replication framework are integrated natively. This integration helps in triggering the data replication soon after a change request is activated or an edition is released. SAP MDG custom objects can also use this integration to trigger replication automatically.
Before proceeding with setting up the data replication, we should first choose the communication channel for the replication. In our use case, we're using SAP-delivered IDoc type PROJECT01 and message type PROJECT; therefore, our communication channel is IDoc. The IDoc type PROJECT01 is capable of replicating the project definition, WBS elements, and WBS hierarchy.
The next step is to create the outbound implementation class by implementing interface IF_DRF_OUTBOUND.
In the outbound implementation class, it's mandatory to implement the following four methods:


INITIALIZEThis method is used to create an instance of the current outbound implementation and send back the instance in exporting field EO_IF_DRF_OUTBOUND to the data replication framework (outbound controller). This method is also used to pass the table type of the main entity back to the framework; this table type will be filled with keys of objects that are relevant for replication.
            

READ_COMPLETE_DATAThis method is used to read the complete data based on importing parameter CT_RELEVANT_OBJECTS, which contains object keys relevant for replication. It's good to save the data that is read here in the context of the class. 
            

MAP_DATA2MESSAGEThis method is used to transfer the data from SAP MDG structures and tables to the message structures and table. It's recommended to use the Service Mapping Tool (SMT) for this purpose. During transformation of data from SAP MDG structures to message structures, you should invoke the key mapping and value mapping application programming interface (API) if required.
            

SEND_MESSAGEThis method is used to trigger the actual message transmission process.
            

In this section, we don't go deep into how to write the code in the methods of the object implementation class. 
14.4.1    Customizing Settings for Data Replication
This section introduces a list of customized settings that need to be performed to enable replication of custom object data. First, we describe how to define filter objects and assign them to business objects to enable filtering of data based on the target system. Second, we describe how to define object identifiers and outbound implementation. 
Define Filter Objects
Filter objects are design-time objects that are used to generate filters. They are used during runtime to filter the data before replication. Refer to Chapter 7 for more information on this topic.
For the current use case, we'll define filter-to-filter projects based on the project definition ID. We'll also reuse the SAP standard filter class CL_USMD_DRF_FILTER. When the data model is activated, the SAP MDG application framework generates key structures for every type 1 entity; for example, in our use case, key structure ZMDG_S_ZW_KF_PSPID is generated for entity PSPDI. We'll reuse this key structure as a parameter structure. Figure 14.28 shows the definition of Filter Object ZF_PSPID and simple explicit Filter 81. 

Figure 14.28    Defining Filter Object ZF_PSPID
The IMG activity to define a filter object can be accessed using the following IMG path: DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Filter Objects.
Assign the Filter Object to the Business Object
We need to assign the filter object to the business object to implicitly assign the filter to the replication model via the business object.
Following are the required steps, as shown in Figure 14.29:


                        Go to IMG activity DRF IMG • Data Replication • Enhance Default Settings For Outbound Implementations • Define Business Objects And Object Identifiers • Assign Filter Objects To Business Objects.
                    

                        Click on New Entries.
                    

                        In the Business Object Type column, enter "ZPS". (This business object was created in Section 14.1.1.)
                    

                        Enter Filter Object "ZF_PSPID". (This filter object was created in the previous section.)
                        
Figure 14.29    Assigning the Filter Object to the Business Object


Define and Assign the Object Identifier
The object identifier defines the structure of the business object key. This information is used by the data replication framework for logging purposes and for updating key mapping during the posting of inbound IDoc message type ALEAUD. The Customizing activities to define and assign the object identifier are as follows:


Define Object IdentifiersIn this Customizing activity, we define an object identifier code for the object identifier and assign a business object to the object identifier code. Figure 14.30 shows the Object Id Type ZPROJ_DEF and assignment of Business Object Type code ZPS to the identifier. Following are the steps to define the object identifier:
                        

                                Go IMG menu path DRF IMG • Data Replication • Enhance Default Settings For Outbound Implementations • Define Business Objects And Object Identifiers • Define Object Identifiers.
                            

                                Click on New Entries.
                            

                                Enter Object ID Type as "ZPROJDEF_CODE".
                            

                                Enter Description of Object ID Type as "Object Identifier of ZPS".
                            

                                Enter BO Type as "ZPS".
                                
Figure 14.30    Defining the Object Identifier




Assign Key Structures to Object IdentifiersAfter the object identifier is created, we need to assign a structure to the object id type. Usually, we assign the key structure generated after activation of the data model to the object ID type. It's recommended to always use the structure generated during data model activation because the structure is always updated by the framework based on changes to the data model. Figure 14.31 shows assignment of key structures to the object identifier. Following are the steps to create this assignment: 
                        

                                Go to IMG menu path DRF IMG • Data Replication • Enhance Default Settings For Outbound Implementations • Define Business Objects And Object Identifiers • Assign Key Structures to Object Identifiers.
                            

                                Click on New Entries, and enter Object ID Type as "ZPROJDEF_CODE".
                            

                                Enter Key Structure as "ZMDG_S_ZW_DRF_PSPID". 
                            

                                Click on Save.
                                
Figure 14.31    Assigning the Object Identifier to the Key Structure




After the object identifier type code is created, and the settings for the code are maintained, we assign the object identifier to BO Type ZPS (Figure 14.32).
The IMG to assign the object ID type to the business object is DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Business Objects and Object Identifiers • Define Business Objects.

Figure 14.32    Assigning the Object Identifier Type to the Business Object Type
Create Outbound Implementation
The IMG activity for creating the outbound implementation can be accessed using DRF IMG • Data Replication • Enhance Default Settings for Outbound Implementations • Define Outbound Implementations.
In this IMG activity, click on the Create button, and enter the data given in Table 14.2.




                                Field Name
                            

                                Field Value
                            

                                Explanation
                            





Outbound Implementation


ZPROJ_DEF


                                Unique ID for outbound implementation 
                            



Description


Project Definition IDoc


                                Meaningful description for project definition
                            



Communication Channel


Replication Via IDoc


                                Means of data transfer to target system
                            



Outbound Implementation class


ZCL_ZW_OUTBOUND_IMPL


                                Name of the outbound implementation class
                            



BO Type


ZPS


                                Business object type
                            



Table 14.2    Values to Maintain while Creating Outbound Implementation
Figure 14.33 shows the definition of the outbound implementation.

Figure 14.33    Definition of New Outbound Implementation
14.4.2    Data Replication Framework Runtime Settings for Project Definition
When the transfer of data is initiated, the responsibility of transferring is passed on to data replication framework by the initiator (change request framework during activation, user through ad hoc replication or edition release, or batch program such as DRFOUT). The data replication framework will then consume the Customizing settings to process the data transfer of objects. These settings are called runtime data replication framework settings.
The ultimate aim of the data replication framework is to replicate the right data to the right system in the right channel. The runtime settings are consumed by the data replication framework to achieve this goal.
In this section, we'll perform settings to define the business system and replication model. We'll also link the business system and outbound implementation with the replication model.
Determination of the Local System Name
The data replication framework needs to know the local system name or its own system name. This is used in the runtime by the key mapping framework to populate the source system ID in the outbound message (control record in IDocs and message header in service-oriented architectures [SOA]).
You can define the local (source) system name in the following ways:


System Landscape Directory (SLD) You can define the business system ID for the local system in which SAP MDG is hosted in SLD. This will be consumed automatically by the data replication framework.
                    

BAdI MDG_IDM_GET_LCL_SYSTEMIf your system doesn't have an SLD connection, you can use this BAdI to determine the local system name. Refer to the IMG documentation of the BAdI before implementing it.
                    

Define Target Systems 
Each target system for replication from SAP MDG is defined as a business system in the IMG path Data Replication • Define Custom Settings for Data Replication • Define Technical Settings • Define Technical Settings for Business Systems.
Figure 14.34 shows the addition of Business System ZSYSTEM1; in our case, it's mandatory to enter the Logical System name because our communication channel is IDoc. If an SLD connection exists, then choose the business system from the value help.

Figure 14.34    Adding ZSYSTEM1 as a Business System
We now have to determine what data can be sent to this target system (business system) by assigning business objects to the business system. These settings are used in runtime to validate whether object data can be replicated to a business system. In Figure 14.35, the BO Type is assigned to the Business System.

Figure 14.35    Assigning Business Object ZPS (Project Structure) to Business System ZSYSTEM1
Along with the list of valid business objects for the target system, we also need to determine the communication channel between the local system and the target system. In addition to the communication channel, we also need to define more context about key mapping. The data replication framework needs to know if object keys between the local system and the target system are harmonized; if they aren't harmonized, then key mapping should be performed.

Note
The outbound implementation plays a major role in implementing the Customizing settings. For example, if the setting for the field key harmonization is defined as not harmonized, then it's the responsibility of the outbound implementation class to read this setting and decide whether key transformation should be done by invoking the key mapping API. The data replication framework doesn't perform key mapping automatically.

In our example, the project definition has an external number range, so the project definition and WBS will be created with the same ID as the SAP MDG hub. Figure 14.36 shows the communication channel settings and key harmonization settings for Business System ZSYSTEM1 and Bus. Obj. Type ZPS.

Figure 14.36    Definition of the Communication Channel and Key Harmonization Settings for Business System ZSYSTEM1
Define Replication Model
A replication model is used to group semantically similar outbound implementations and can be defined flexibly depending on the requirements. 
You can create a replication model in either of the following ways:


Outbound implementation specificYou can create one replication model for one outbound implementation, and you can assign multiple business systems to the outbound implementation.
                    

Business system specificYou can create one replication model for one business system and assign multiple outbound implementations to the replication model. All the outbound implementations will have the same business system assigned.
                    

Which approach is better is based on your requirements and landscape; however, many consider a replication model specific to an outbound implementation as highly flexible. Therefore, in our use case, we'll create a replication model specific to an outbound implementation. Figure 14.37 shows the definition of replication model ZPROJ_DEF.
The Customizing activity to define the replication model can be accessed using the following path in Transaction DRFIMG: Data Replication • Define Custom Settings for Data Replication • Define Replication Models.

Figure 14.37    Definition of Replication MODEL ZPROJ_DEF
After creating the project definition, it's mandatory to define at least one outbound implementation to the replication model and assign at least one business system as the target system to the outbound implementation. Figure 14.38 shows the assignment of the outbound implementation to the replication model and the assignment of business system ZSYSTEM1 as the target system.

Figure 14.38    Assigning the Outbound Implementation to ZPROJ_DEF and ZSYSTEM1 as the Target System for ZPROJE_DEF
After maintaining all the settings, activate the replication model. The system will perform checks to ensure the consistency of the replication model. Figure 14.39 shows the activation of replication model ZPROJ_DEF.

Figure 14.39    Activation of the Data Model
We've created filter ZF_PSPID and assigned it to business object ZPS. Business object ZPS is assigned to outbound implementation ZPROJE_DEF, and the outbound implementation is assigned to replication model ZPROJ_DEF. Therefore, filter ZF_PSPID is assigned implicitly to replication model ZPROJ_DEF. This can be verified in Transaction DRFF.
The result of this configuration is shown in Figure 14.40.

Figure 14.40    Maintaining Filter Criteria for Replication Model ZPROJ_DEF









14.5    Enabling Key Mapping
In an enterprise, the master data coexists in multiple systems, and, in some cases, the same business object is identified by different object keys in different systems. Centrally governing nonharmonized master data from SAP MDG can be challenging if SAP MDG doesn't know the identifier of the master data in each target system. The key mapping framework addresses this challenge and provides the ability to map SAP MDG object identifiers against target system object identifiers.
This key mapping framework provides an API to retrieve this mapping during replication to transform the object identifiers into values that can be understood by the target system.
This section details the steps required to enable key mapping for business object ZPS. All the activities described in Section 14.4.1 must be completed to enable the key mapping for custom business objects.
A business object type code can have multiple object identifier types assigned to it. For example, object ID type 888 (business partner number) and type 889 (business partner UUID) are assigned to the same business object type code 147 (business partner). Object type nodes are used to define whether different object identifiers assigned to the same business object type code can be part of the same mapping group or not. If the keys have to be part of the same mapping group, then assign the same object node to all the object identifier type codes. If the keys have to be stored in different mapping groups, then assign different object nodes to the object identifiers of the same business object type codes.
Our use case has only one key (project definition ID), so we create one object node and assign it to our object identifier that was created in Section 14.4.1.

Figure 14.41    Creating the Object Type Node and Assigning It to the Object Identifier Type Code
Following are the steps to create an object node (see Figure 14.41):


                Go to IMG node Master Data Governance, Central Governance • General Settings • Data Replication • Enhance Default Settings for Outbound Implementations • Define Object Nodes.
            

                Click on New Entries.
            

                Enter "ZOBN_ZPS" in the Obj Node Type field.
            

                Enter "Object Node for Project Identifier" in the Obj Node Type Desc field.
            

                Click on Save.
            

It's important to remember that the custom outbound implementation class is responsible for invoking the key mapping API and executing the key mapping transformation.









14.6    Enabling Value Mapping
Value mapping is a way of converting source system-specific values to target system-specific values. For example, units of measure of material are maintained using different codes in different target systems. When replicating material data to a target system, the values need to be converted into target system-specific codes. This conversion is achieved using value mapping. Value mapping should be invoked only during the replication. 
The first requirement to enable value mapping to the custom data model object is to maintain settings for the data element of the field that needs the value mapping to be triggered. For our example, after the configuration settings are made, value mapping will be performed for every field that refers to data element ZBUKRS in an outbound message. The following steps are required to maintain these settings (see Figure 14.42): 


                Go to IMG menu path VM IMG • Value Mapping • Maintain Value Mapping.
            

                Click on New Entries.
            

                In the Object Type field, select Data Element from the dropdown list.
            

                In the Global Data Type field, enter "ZBUKRS".
            

                In the Input Help field, enter "CL_MDG_CODE_LIST_PROV_BUKRS".
            

                Click on Save.
                
Figure 14.42    Maintaining Value Mapping Steps for Data Element ZBUKRS


The next step is to maintain the value list for the date element ZBUKRS. The value list is mapping between the internal code and the external code. The following steps are required to maintain value lists (see Figure 14.43): 


                Go to IMG menu path VM IMG • Value Mapping • Maintain Value Mapping.
            

                Select the row with Global Data Type ZBUKRS, and click the navigation button in the Navigation column.
            

                Click on New Entries.
            

                Enter the Mapping ID as "0001".
            

                Enter the List ID as "ZBUKRS" (this field should always have the same value as the data element name).
            

                Enter the List Agency ID as "ZSYSTEM1" (this field should always have same value as the business system ID of the target system).
            

                Enter the List Version ID as "0001". Increment this value for a new version.
            

                Click on Save. 
            

                After the save is completed, select the just saved row, and click on Define Value Mapping.
            

                Maintain the Internal Code Value and External Code Value fields.
                
Figure 14.43    Maintaining Value Lists











14.7    Summary
Chapter 13 and Chapter 14 introduced the SAP MDG custom object framework and how to build an SAP MDG custom application for custom data models. After reading the chapters, you should now have a good understanding of SAP MDG custom objects and the knowledge to build SAP MDG custom applications. In the next chapter, you will be introduced to operational strategies, which are essential to run SAP MDG post go-live. 








15    Operational StrategiesThis chapter explains some guiding principles on the usage of editions, the data import/export framework, and the file upload/download framework for mass processing in an operational SAP MDG environment. This chapter also provides some performance optimization tips and commonly used transactions during troubleshooting of any problems encountered post SAP MDG go-live.Implementing SAP MDG is an important step in the master data journey for any company. However, a successful SAP MDG implementation is only the first step, and it requires continuous monitoring and improvements to mature the master data processes in the organization. Master data teams need to have a proactive strategy in place to prepare, effectively monitor, and make the master data processes more robust while ensuring the system is running smoothly. In this chapter, we'll cover some of the most important topics that you should pay attention to after SAP MDG becomes operational. These topics include editions, ongoing data loads, performance optimization, and troubleshooting options.
Note
Editions in SAP MDG are part of process modeling. For the definition and concepts about editions, refer to Chapter 5, Section 5.2.8. 

15.1    Edition Strategy
Organizations implementing SAP MDG use editions to manage their master data effectively based on its validity dates. Normally, editions are used mainly for finance organizations; however, editions aren't limited to financial objects, and technically any master data object implemented in flex mode may use editions. With SAP MDG 7.0 onward, the editions functionality has been improved significantly, and a lot of flexibility has been provided while dealing with editions in SAP MDG.
The edition management in SAP MDG was introduced with initial lower releases, but a lot of additional flexibility has been added with the latest SAP MDG release (SAP MDG 8.0 and SAP MDG 9.0) to enable the master data governance organizations to strategize and use editions more effectively in their master data landscapes. Following are the four new key capabilities with enhanced flexible editions offered with SAP MDG 8.0 and SAP MDG 9.0: 


Flexibility to reschedule changes  to new editions Figure 15.1 shows how several open editions can handle the same master data objects. When you create or change a cost center, the valid-from date of the edition defines the valid-from date of the change, as shown with cost center 1 in Figure 15.1. The valid-to date is defined by the next change (i.e., in a later edition) of the same cost center. If there is no future planned change, the valid-to date is unlimited, as with cost center 2. You can reschedule open change requests with the related inactive data to another edition, which is useful when you want to release an edition, but some of the change requests are still under the workflow process, as with cost center 4. With the improved concept, you can now use and combine as many editions as needed and reschedule planned changes across editions.
            

More granular control over selection of replication timing  You may now decide which replication timing is allowed for each edition. It's possible to replicate all approved change requests together when the edition is released or replicate each change request separately and immediately when approved. In addition, you can determine for each change request whether it will be replicated immediately or held back and replicated together with the edition when it's released.
            

Improved transparency of past and planned changes When displaying any change request in an edition, you now get full transparency about other (planned) changes. The system shows the next already planned and approved change of the same master data object and allows you to jump directly to it. It also provides a link to any pending change that hasn't been approved yet. 
            

Intuitive access to the different states of master data  valid in certain time frames With a new search parameter (valid on), you can intuitively search and display master data and the data's status on a certain date.
            

The following sections explains the creation, release, and monitoring of editions in SAP MDG. We also discuss some of the guiding principles to operate editions.

Figure 15.1    Overlapping Flexibility of Editions 
15.1.1    Create New Editions
Because the edition is a new functionality for many organizations, it's necessary to establish clear responsibilities around creating editions. This gives better control and prevents any confusion about the usage.
The various characteristics needed when creating an edition are as follows:


                    Edition technical name
                

                    Edition description
                

                    Edition type
                

                    Validity period
                

                    Replication timing
                

                    Comment
                

Following are some common guiding principles to consider regarding editions:


                    If applied, editions become a prerequisite for creating change requests in SAP MDG.
                

                    Restrict edition creation authorization only to a defined group/set of users who are responsible for creating the editions. Authorization object USMD_EDTN can be used in SAP MDG for this purpose.
                

                    Editions have to be created before allowing users to create master data with a particular validity date.
                

                    Because editions control the validity date of the master data, they also influence and control the replication timing for the master data in change requests.
                

                    To provide flexibility to users over the replication of change request data, editions can be created with the Selected in Each Change Request option. 
                

                    An edition may have any number of change requests assigned to it; however, a change request can be assigned to only a single edition.
                

                    Master data objects using validity dates in SAP Business Suite applications automatically inherit the valid-from date from the edition's valid-from date, so be sure to select it carefully. Cost center and profit center are classic examples of master data that inherit edition validity date into the master data validity date.
                

The SAP MDG screen for creation of an edition is shown in Figure 15.2.

Figure 15.2    Creating an Edition in SAP MDG
15.1.2    Releasing Editions
Similar to edition creation, it's important to establish a strategy around releasing editions. This process should be centrally controlled with a designated person/group responsible for releasing the edition after it has matured. Following are the methods that are called while checking an edition during the governance process in SAP MDG:


CHECK_EDITION_START


CHECK_EDITION


CHECK_EDITION_FINAL 


Following are some guiding principles that can be used while working on releasing the editions:


                    Editions can be marked for release before actual release if no more change requests will be created.
                

                    Always run a validation before releasing the edition.
                

                    The replication to local systems can be triggered by the approval of the single change request or the release of the edition, or it can be done manually.
                

                    An edition can't be released unless the workflow process is completed for all change requests belonging to the same edition.
                

                    Change requests that are still under the workflow process can be transferred to another edition to clear the way for the release of the existing edition.
                

                    No change request data can be replicated before releasing the editions.
                

                    After an edition is released, no change request can be assigned to it. However, a new edition can be created for updating the master data.
                

                    Use the SAP MDG distribution monitor for replicating the master data after an edition is released. 
                

Figure 15.3 shows the SAP MDG screen for releasing the edition, running validations, and navigating to various options from a single screen.

Figure 15.3    Releasing an Edition
15.1.3    Monitoring Editions
The monitoring framework in SAP MDG provides an intuitive access to master data with transparency across time frames. The distribution monitor gives granular control over the timing of data replication to the downstream systems where you can decide the date from which the data should be valid.
Figure 15.4 shows a section from the SAP MDG Financial Accounting Governance screen with various options for analyzing the editions that can be easily navigated with a single click.

Figure 15.4    Navigation from SAP MDG Screen for Analysis and Monitoring of Editions
Figure 15.5 depicts the SAP MDG Analysis of Editions screen used for analyzing, filtering, and searching editions based on various criteria.

Figure 15.5    Analysis of Editions Screen in SAP MDG
While working with editions, you'll often need to compare two editions and their master data. SAP MDG provides an out-of-the-box standard application for comparing two editions for a particular entity type. Further detailed navigation is available after executing the edition comparison. Figure 15.6 depicts how edition comparison can be performed based on entity type.

Figure 15.6    Options for Edition Comparison in SAP MDG
After an edition is released manually, a defined authority in the governance process must select the edition and trigger the replication based on the replication model by clicking on the Replicate button. You can monitor replication status and logs on the same screen. For more information on data replication, refer to Chapter 7. 









15.2    Ongoing Data Loads
In an operational SAP MDG environment, businesses often need to perform updates/maintenance on multiple records for various reasons. SAP MDG offers several options that can be leveraged while dealing with multiple records in SAP MDG. Multiple object change requests in SAP MDG support options such as mass change, file data import/export framework, and file upload-download functionality. Note that a change request supported with a workflow process is always needed, even while dealing with multiple records, with the only exception being the file import framework where governance can be skipped. 
In the following sections, some of the commonly used options for post go-live data loads are explained. Depending on exact requirements, suitable options can be used to meet specific business needs. Different options have different capabilities to perform mass loads either first into the SAP MDG staging area or directly to the SAP MDG active area.
15.2.1    Creating Mass Change Requests for Mass Loads
Unlike previous versions of SAP MDG, it's not mandatory to have a mass change request created before actually performing a mass change on records or doing a file upload. Current SAP MDG releases (SAP MDG 8.0 and SAP MDG 9.0) provide an option to create a change request on the fly while performing a mass change or a file upload. However, you still may create a change request in advance and assign it to the mass processing during execution of the load. It's also important to note that the mass change request being assigned should be in a Change Request status that allows the changes and change request workflow to be assigned to the current user. 
Figure 15.7 depicts various steps in the creation of a mass change request in SAP MDG. 

Figure 15.7    Steps to Create a Mass Change Request in SAP MDG
Figure 15.8 depicts the mass change request number. The workflow process is triggered in the background with this message. 

Figure 15.8    System Message after Successful Mass Change Request Creation
The mass maintenance process is no different from the single record process. During mass maintenance, you must ensure that the governance process is duly followed and that data is activated in the SAP MDG system only after all necessary approvals. For this purpose, a multiple object change request is created. This change request will have its own workflow path. 
15.2.2    Scheduling File Uploads in the Background
Any recurring loads or large files that need to be loaded in SAP MDG can be scheduled in the background by selecting the files and placing them in the designated directory. You can specify a date and time at which the load should be executed.
Figure 15.9 shows the screen where you can schedule a file upload in SAP MDG.

Figure 15.9    Scheduling a File Upload Using the File Import Framework
15.2.3    Operating with the Data Import/Export Framework
The data import/export framework is an XML-based data load application that can be leveraged for loading data in SAP MDG depending on the use cases. This functionality can be used in data migration for new regions or any new applications coming in scope of SAP MDG. Optionally, data can also be exported from SAP MDG using the export framework and can be loaded back into SAP MDG using the import framework after necessary updates are made in the XML file.

Note
Detailed steps for using the data import/export framework are explained in Chapter 9.

The following attributes must be selected for exporting a file from SAP MDG:


                    Description
                

                    Variant
                

                    Communication channel
                

                    Target directory
                

                    Package size
                

                    Object type
                

The data import/export framework provides functionalities to monitor the data transfers and access the logs through the SAP MDG UI in case of any failed loads. The various actions and their sequence in the data import framework are as follows:


                    Place the load file in the designated SAP MDG directory.
                

                    Select import settings.
                

                    Select the governance setting.
                

                    Select scheduling settings.
                

                    Select parallel processing settings.
                

                    Select custom converter settings.
                

                    Show the directory content.
                

                    Simulate the import.
                

                    Display monitoring.
                

The data import/export framework also has data monitoring and options for displaying logs. Figure 15.10 depicts the options available in SAP MDG for data monitoring and logs for a particular load.

Figure 15.10    Data Monitoring and Logs in the Data Import/Export Framework
15.2.4    Mass Processing in SAP MDG
Although it may turn out to be a risky, time-consuming, and costly exercise, master data teams often feel the need to update multiple records in their systems for various business reasons. Even if IT comes out with some quick solutions, they may not be compliant from an auditing perspective and hence expose the company to unnecessary and bigger risks. 
With robust master data governance functionalities, SAP realized the need to address this common pain point for most companies and delivered a new functionality with the latest versions that addresses all these concerns effectively. This new mass processing functionality uses SAP Fiori as the UI, allowing master data specialists to perform their mass updates intuitively. The statistics and profiling capabilities provide confidence and transparency while dealing with large volumes of master data.
For recurring loads, variant configurations can be created to make the execution fast by reducing or eliminating unnecessary steps.
Erroneous records in mass processing can be removed from the process during the reviews, and all activities at the process level are tracked with an audit trail available in the SAP Fiori UI.
Mass processing reuses the same technical foundation and framework used by SAP MDG, consolidation, as discussed in Chapter 16. Thanks to queuing and parallelization options, even large volumes can be executed without any performance challenges. In addition, you can schedule the updates in background processing. Currently, the mass processing functionality is offered out of the box for business partner, customer, supplier, and material objects. Custom objects are also supported as long as the necessary configurations are complete.
Interestingly, you can use the mass processing capability in different combinations:


                    With or without SAP MDG, central governance


                    Activation with or without a change request
                

                    Integration of mass processing with central governance and reuse of business rules and validations
                

Currently, objects implemented in SAP MDG flex mode aren't supported out of the box. The mass processing functionality has five steps with different sets of activities performed in each of the steps. These activities per process step are shown in Figure 15.11.

Figure 15.11    Process Steps: Mass Processing in SAP MDG









15.3    Performance Optimization
You may face some performance challenges after SAP MDG becomes operational, but you can overcome those challenges by smartly using the functionalities provided and with the help of some tweaks that can improve system performance. Following are some focus areas for system administrators and architects:


Parallel processing  during data import/export Huge data loads in the SAP MDG system could cause performance issues. For such scenarios, you can use parallel processing to start multiple processing instances during data export as well as data import. Settings for parallel processing are defined through Transaction DRFOUT. For more information on data replication, refer to Chapter 7.
            

Periodic deletion of status logs  using Transaction DRFRSDEL using Transaction DRFRSDEL  This task should be executed weekly or on an as-needed basis if large replication was triggered in SAP MDG system. Program RDRF_DELETE_REP_STA deletes the replication status while keeping the last record and the last successful record for each object/target system.
            

File upload  performance issue While using the file upload functionality in SAP MDG, performance might become a concern for large volumes. Depending on the entity and object for which the load is being performed, systems may behave differently. Minimizing the file sizes by keeping the volumes to no more than a few thousand might help to avoid any performance challenges.
            

Business rules  in SAP MDG Business rules implemented in SAP MDG might also impact the data import and file uploads in the system. The higher number of rules you have, the more of a load will be placed on the SAP system. Based on your specific requirements, these business rules can be temporarily switched off during data loads in SAP MDG for the specific change request types via process modeling.
            

Periodic deletion of logs using Transaction DRFLOGDEL  Application log data should be written by the data replication framework and internal log information should be deleted by executing program RDRF_DELETE_LOG at least once a week or more frequently if large scale replication was triggered in SAP MDG.
            

Periodic deletion using Transaction MDGCPDEL  Execution of this task varies for different objects and depends on the volume of change pointers written. Program MDG_BS_CHANGE_POINTER_TOOLS deletes processed or new change pointers based on the selection.
            

Data replication trigger  using Transaction DRFOUT using Transaction DRFOUT  Depending on the business requirements, heavy data loads can be triggered manually or scheduled from SAP MDG using Transaction DRFOUT by using change pointers.
            

Data replication trigger program USMD_EDITION_REPLICATEThis program can be executed on or shortly after the valid-from date for changes to the relevant business objects. This can ensure timely replication of data from all approved change requests belonging to an edition after executing the validation.
            

Data virus scan  profile for SAP Fiori for SAP MDG applicationsVirus scan profile MDG_BS_FILE_UPLOAD/MDG_VSCAN can be used when uploading files to the SAP Fiori request applications.
            

Hardware requirementsSAP MDG sizing guides must be strictly followed before tweaking any changes in the system. Sizing guides can be found at www.service.sap.com/sizing.
            

Application configuration and user interface building block (UIBBs)  In the Floorplan Manager, SAP standard UIBBs can be easily tweaked to optimize performance. Remember, not all the delivered UIBBs are needed by all users and in all scenarios to perform their tasks. Heavy usage of a large number of UIBBs does affect the performance of the system, so keeping the number of UIBBs on the governance UI as small as possible may improve the system's performance.
            

Highlighting changes Highlighting changes in SAP MDG is an intuitive functionality that helps users focus on the exact updates in the change request at first glance. If needed, deactivation of this functionality may also improve the system's performance.
            

Floorplan Manager  Floorplan Manager applications that use context-based adaptation may take longer than necessary to start. When starting the SAP application, the Floorplan Manager loads all necessary data for context-based adaptation in a pre-fetch from unbuffered tables. This pre-fetch can be made faster if these tables are buffered. Hence, you should consider activating the buffering of table FPM_ADAPT_SET using Transaction SE11. For more details, refer to SAP Note 1860705.
            










15.4    Troubleshooting
After SAP MDG goes live, users may encounter some issues related to workflows and data replication in addition to other areas. Following are two key recommendations that should be implemented in any SAP MDG project as part of the operational strategy:


Activation failed change requests It's important to define a designated group responsible for receiving all work items in case a change request goes in Activation Failed status. This ensures that the change request doesn't remain in Activation Failed status and gets due attention even before users get impacted. You can build alternative workflow steps in SAP MDG to reprocess or reroute such change requests for fixing change request activation issues.
            

Computing Center Management System (CCMS) For tracking any issues related to data replication, CCMS-based alert monitoring can be setup.
            

Additionally, for a quick and accurate root-cause analysis of various post go-live issues, it's important to have a list of commonly used transactions and programs available for reference. 
Following are some commonly used transactions and programs in SAP MDG for any change request failed activations and workflow-related scenarios:


                Transaction SLG1: Analyze Application Log
            

                Transaction SWIA: Process Work Item as Administrator
            

                Transaction SWI5: Workload Analysis
            

                Transaction SWI6: Display Workflows: Select an OBJECT
            

                Program USMD_DELETE_MODEL
            

                Program USMD_DELETE_CR
            

                Transaction SWI1: Selection Report for Work Items
            

                Transaction USMD_SSW_RULE: Rule-Based Workflow Configuration
            

                Transaction USMD_RULE: BRFplus Rules
            

                Transaction SWE2: Change View "Event Type Linkages"
            

Following are some web UI applications used in data replication:


MDG_BS_WD_ANALYSE_IDM: Search Key Mapping
            

MDG_BS_WD_ID_MATCH_SERVICE: Create and Edit Key Mapping
            

MDG_BS_WD_RSI_DISPLAY: Display Replication Status Information
            

DRF_FPM_OIF_MONITORING: Application Monitoring
            

DRF_ADHOC_REPLICATION: Manual (Ad Hoc) Replication
            

DRF_FILTER_POWL_QAF_AC: Define Filter Criteria
            

Following are some common transactions and a report that can be used for troubleshooting and analysis related to data replication:


                Transaction DRFRSD: Replication Status for Business Object/Receiver System
            

                Transaction DRFLOGDEL: Reorganize DRF Logs
            

                Report RDSF_MESSAGE_REOUT: Restart Replication for Erroneous Objects
            

                Transaction DRFOUT: Execute Data Replication
            

                Transaction MDGCPDEL: Reorganization of MDG Change Pointer
            

                Transaction MDG_ANALYZE_IDM: Search Key Mapping
            

                Transaction DRFSUB: Subscribe Business Objects for Replication
            

                Transaction MDG_KM_MAINTAIN: Create and Edit Key Mapping
            

                Transaction DRFLOG: Analyze DRF Logs
            

                Transaction SRT_TOOLS: Web Service Utilities: Message Monitor
            

                Transaction SRT_MONI: Web Service Utilities: Message Monitor
            

                Transaction SXMB_MONI: Integration Engine: Monitoring
            

                Transaction DRFIMG: Customizing for Data Replication Framework
            

                Transaction DRFCC: Check Customizing for Data Replication Framework
            

                Transaction DRFF: Define Filter Criteria
            

                Transaction DRFLOG: Analyze Log for Outbound Implementations
            

Following are some commonly used governance APIs available in SAP MDG. These can be handy during troubleshooting various issues:


IF_USMD_GOV_API


IF_USMD_GOV_API_CR_DATA


IF_USMD_GOV_API_ENTITY


IF_USMD_GOV_API_PROCESS


IF_USMD_GOV_API_SERVICES


IF_USMD_GOV_API_TRANS


IF_USMD_GOV_API_CR_ACTION


In addition, following are some commonly used convenience APIs:


IF_USMD_CONV_SOM_GOV_API


IF_USMD_CONV_SOM_GOV_CR


IF_USMD_CONV_SOM_GOV_ENTITY


IF_USMD_CONV_SOM_GOV_TRANS


IF_USMD_CONV_SOM_GOV_CR_ACTION


Following are some other commonly used transactions and a program in SAP MDG for various troubleshooting scenarios:


                Transaction LPD_CUST: Overview of Launch Pads
            

                Transaction WE21: Ports in IDOC Processing 
            

                Transaction SE80: Object Navigator
            

                Transaction ST22: ABAP Runtime Errors
            

                Transaction SU53: Display Authorization Data
            

                Program USMD_EDITION_REPLICATE: Edition-Based Replication
            

                Transaction WE19: Test Tool for IDOC Processing
            

                Transaction AL11: SAP Directories
            

                Transaction CG3Z: Upload File Parameters
            

                Transaction BD54: Change View Logical Systems Overview
            

                Transaction BD82: Generate Partner Profile
            

                Transaction FILE: Logical File Path Definition Overview
            

                Transaction CG3Y: Download File Parameters
            










15.5    Summary
This chapter provided an overview of the editions functionality from various aspects, discussed mass changes, and explored file upload options in an operational SAP MDG environment. The chapter also provided some performance optimizations tips that are often useful in projects. In addition, some commonly used transactions and programs were shared that can help while troubleshooting post go-live issues. In the next chapter we will discuss SAP MDG, consolidation, which is a newly-developed application for addressing master data consolidation requirements.








16    ConsolidationIn this chapter, SAP MDG, consolidation scenarios, use cases, and process flows are covered via a walk through its prerequisite settings and configuration activities. Initial data load options for SAP MDG, consolidation are also discussed.When master data maintenance is spread across multiple systems, companies have no single view of master data. With different systems or regions having ownership of different segments of the master data, it becomes difficult to coordinate the maintenance and processes, resulting in overall poor data quality. Multiple connections across the multiple source systems complicate the integration environment and hence affect the data quality aspects as well.There are several business processes in an organization that each interact with one or more master data domains. A cohesive master data management strategy helps elevate the conversation from data quality and governance issues with master data to efficient business processes and practices. Businesses can start to monitor the key performance indicators (KPIs)/business metrics and focus on the success of the business goals. Consolidating the master data into a central master data management hub is the first step in the process of getting a handle on the problems plaguing the master data in the enterprise. After the master data are centralized, master data teams can focus on introducing governance processes to improve the master data quality. The SAP Master Data Governance (SAP MDG) system has been architected as two separate functionalities: SAP MDG, consolidation and SAP MDG, central governance. These two scenarios are delivered to work as independent solutions addressing various business challenges in the master data management journey, but they can also be optionally integrated with each other to leverage functionalities from both scenarios. Figure 16.1 shows how an integrated consolidation and central governance solution can be implemented using SAP MDG to achieve quality master data while centrally governing ongoing master data maintenance.
Figure 16.1    Integrated Consolidation and Central Governance Using SAP MDGThe consolidation scenario in SAP MDG is a pipeline process where the data gets staged, standardized, enriched, and, optionally, matched with the existing master data with the view of eliminating duplication. Automated rules then combine the identified duplicate master data to create the best record representation of the master data. As explained in other chapters of this book, the central governance scenario provides a workflow process for authoring and maintenance of the active area on successful completion of the workflow through an activation process. The master data are then distributed to connected downstream applications.
16.1    Overviews and Use Cases
As SAP MDG, consolidation is relatively new in the master data space, we'll first look at how and where it may fit into your overall enterprise information management (EIM) and governance strategy. We'll also discuss what problems and pain areas can be addressed using the SAP MDG, consolidation process. 
Let's explore some common use cases for SAP MDG, consolidation, as follows:


New mergers or acquisitions In this very common use case, a company is getting merged or acquired by another company and thus needs to integrate with systems and reporting applications. For better decisions made through accurate reporting and to ensure processes are running smoothly on cleansed master data, SAP MDG, consolidation has a major role to play in consolidating and cleaning the master data in the landscape. 
            

Implementing new central master data governance For various reasons, most companies have more than one SAP ERP system in their landscape with disparate master data. Now, while trying to align with the corporate goals for their master data, central governance often takes center stage. To realize these goals and make the initiative around central governance successful, it's imperative that existing master data are properly cleansed, enriched, and de-duplicated. SAP MDG, consolidation helps you prepare your master data before you start governing it centrally.
            

Implementing consolidation with central governance Cleansing and consolidating master data isn't an easy and quick job that any tool can perform. It's a process in itself where thousands of decisions have to be made by data owners and data stewards located in different geographies. This is a collective process where regional master data experts and stewards across business lines play a significant role when they make decisions about potential duplicates or incomplete data. The SAP MDG, consolidation process facilitates user-friendly and accurate decision-making about master data. As a native component, SAP MDG, consolidation makes it easy to integrate with central governance and reuse some of the functionalities, including validation and activation processes. Thus, the consolidation scenario complements the implementation of central governance in preparing golden records and avoiding any duplicates being pushed into the central governance repositories during the initial load. 
                Though SAP MDG, consolidation can be used and implemented in any project, most companies that prefer to implement SAP MDG in a rollout approach get a longer timeline to work on data quality, leveraging the rollout timeline as an opportunity to standardize, consolidate, and prepare golden records. These golden records can be prepared based on the respective region, business system, business line, or country. Figure 16.2 depicts how SAP MDG, consolidation and SAP MDG, central governance can be optionally integrated while leveraging each other's functionalities.
                
Figure 16.2    SAP MDG, Consolidation Optional Integration with SAP MDG, Central Governance


Implementing consolidation without central governance Standardized and consolidated golden master data records are important for effective and accurate reporting, which is normally a good reason to implement SAP MDG, consolidation. Additionally, central governance is often seen as a larger initiative by the master data organization in any company. Implementing central governance needs solid groundwork, good preparation, and strong commitment. Improved data quality and consolidated master data can lay the groundwork for implementing SAP MDG, central governance in a company. Hence, in the overall master data journey, implementing SAP MDG, consolidation could be the first milestone.
            

Auditing, compliance, and reporting In any data quality initiative, master data standardization, enrichment, and consolidation often have to involve numerous decisions. Transparency and evidence of decision making is a must from an audit and compliance perspective. The SAP MDG, consolidation framework helps in tracking the necessary information for these purposes. 
            










16.2    Process Flow
SAP MDG is meant to facilitate data consistency across multiple applications for streamlined business processes as well as enterprise reporting. Combining and maintaining the master data formerly located in multiple systems in a single hub and linking the records in different systems are the key goals. The consolidation process contributes in achieving these goals with certain process steps and various activities performed at each step.
Let's look at the process steps and activities performed in SAP MDG, consolidation process, as follows:


                Standardize
                

                        Validate master data.
                    

                        Enrich master data.
                    

                        Optionally, integrate with third-third-party tools for standardization and enrichment of master data.
                    

                        Use BRFplus for standardization and enrichment.
                    



                Match
                

                        Identify duplicates based on customer-specific matching rules.
                    

                        Review matching results.
                    



                Calculate best record
                

                        Create "best" records based on approved match groups.
                    

                        Use BRFplus for customer-specific best record calculation.
                    

                        Review the best record calculation result.
                    



                Validate
                

                        Validate best records against backend Customizing to verify whether records can be activated.
                    

                        Validate against central governance checks (BAdI, BRFplus).
                    



                Activate
                

                        Provide consolidated master data for analytical or operational use.
                    

                        Activate directly or directly trigger postprocessing using central governance.
                    



In the following sections, we'll discuss various prerequisites, preparatory steps, and processes involved in SAP MDG, consolidation.
16.2.1    Prerequisites and Preparations
Various IMG activities and settings are needed to perform the steps and activities in the SAP MDG, consolidation process. Before we jump into the tasks, we'll first look at the security roles available in the systems, as well as the most common consolidation transactions.
Consolidation Transactions and Security Roles
Some of the SAP-delivered security roles needed to perform various activities in SAP MDG, consolidation are shown in Table 16.1.




                                Role
                            

                                Name
                            





SAP_MDC_ADMIN_APP


                                SAP MDG, consolidation: Administrator
                            



SAP _MDC_BCR_MASTERDATA_SPEC_T


                                Master Data Specialist (Consolidation): Apps
                            



SAP_MDC_DISP_BP_APP


                                SAP MDG, consolidation: Business Partner Display
                            



SAP_MDC_SPEC_BP_APP


                                SAP MDG, consolidation: Business Partner Specialist
                            



SAP_MDC_DISP_BP_NONE_BS_APP


                                SAP MDG, consolidation: Business Partner Non-SAP BS Display
                            



SAP_MDC_SPEC_BP_NONE_BS_APP


                                SAP MDG, consolidation: Non-SAP BS specialist
                            



SAP_MDC_TCR_T


                                SAP MDG, consolidation: Transactional Apps 
                            



Table 16.1    SAP-Delivered Security Roles Needed in SAP MDG, Consolidation
Let's explore the common SAP MDG, consolidation transactions, as listed in Table 16.2.




                                Transaction
                            

                                Transaction Text
                            





                                MDCIMG
                            

                                SAP MDG, Consolidation and Mass Processing
                            



                                MDCLOG
                            

                                MDC Log Monitoring
                            



                                MDCMODEL
                            

                                MDC Modeling
                            



                                MDCMODELRIG
                            

                                MDC Model Customizing
                            



                                MDCWORKLIST
                            

                                Worklist Manager
                            



                                MDC_ADMIN_DELETE
                            

                                MDC Process Admin Delete
                            



                                MDC_BP_IMHANA_BC01
                            

                                Import BC Set for IM in SAP HANA
                            



                                MDC_BP_TRANS_SRCDATA
                            

                                MDC (BP): Transform Source Data
                            



                                MDC_HDB_MTC_CONFIG
                            

                                Fuzzy Match Configuration
                            



                                MDC_HDB_MTC_DEL
                            

                                Delete Generated SAP HANA Artifacts
                            



Table 16.2    SAP MDG, Consolidation Transactions
Activate Transaction SICF Services
Some of the Transaction SICF services commonly used for the SAP MDG, consolidation process are listed in Table 16.3.




                                Services
                            

                                Service Name
                            

                                System
                            





MDG_CONS


                                Master Data Consolidation Service
                            

                                SAP Fiori frontend system
                            



MDG_HDB_SV_GENERATION


                                Search View Generation
                            

                                Backend system
                            



MDC_HDB_MATCH


                                Match Configurations Overview
                            

                                Backend system
                            



MDC_HDB_MATCH_CONF


                                Create Match Configuration
                            

                                Backend system
                            



MDG_HDB_SV_INITIAL


                                Search View Initial UI
                            

                                Backend system
                            



Table 16.3    Required Services
These services can be activated via the following path in the SAP MDG, consolidation system: Transaction SICF • Provide Service Name • Execute • Activate.
Figure 16.3 shows navigation and activation of a service example used for SAP MDG, consolidation.

Figure 16.3    Activation of Services Used for SAP MDG, Consolidation
Perform Workflow Setup
SAP has delivered standard workflow template WS54500001 for SAP MDG, consolidation. Linkage type activation settings are needed to make the workflows work for SAP MDG, consolidation scenarios. Transaction SWE2 can be run to perform the necessary settings. Figure 16.4 shows the prerequisite settings required for activation of event type linkages for object BUS2240.
Figure 16.5 shows various prerequisites settings, process steps, and IMG activities under SAP MDG, consolidation.

Figure 16.4    Activate Type Linkage

Figure 16.5    IMG Activities
Configure Process Models
This IMG activity is used for configuring process models for SAP MDG, consolidation. For any extension of fields or nodes of the data models, this configuration is needed. 
Following are the standard business objects delivered out of the box with SAP MDG, consolidation:


Business partner: 147


                                This business object includes tables from supplier, customer, and business partner. Validations for this business object perform SAP ERP level checks. 
                            

                                SAP MDG change requests and cleansing cases can be used for activating the records, or they can be activated directly.
                            

                                After completion of the consolidation activity for business object 147, master data can be replicated out using the data replication framework.
                            



Business partner for consolidation: MDC_147


                                This business object also includes tables for supplier, customer, and business partner. The only major difference between 147 and MDC_147 is that SAP ERP checks aren't applicable for the MDC_147 business object.
                            



Material: 194


                                This business object includes tables for the material master. 
                            

                                Users have the flexibility to either activate the records directly or go through the SAP MDG change requests and cleansing cases.
                            

                                After completion of the consolidation activity for business object 194, master data can be replicated out using the data replication framework.
                            



If any nondelivered business objects are needed for consolidation purposes, then users may create their own business object type.
Following is the IMG path to configure process models: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Process Models. Alternatively, you can also use Transaction MDCMODEL. 
Figure 16.6 shows process model IMG configurations options, various business object types delivered out of the box, and navigation to tables and joins.

Figure 16.6    Configuring Process Models for SAP MDG, Consolidation
In the SAP MDG, consolidation process models, you can select the business object type and click on Tables to view the list of tables available for respective business object type. For creating new business object types, you click on New Entries. In addition, extension of fields and nodes are possible under various tables. 

Note
Refer to SAP Note 1973686 for more information on extension of fields and nodes in SAP MDG, consolidation process models. 

Figure 16.7 shows the list of tables available under business object type 147 (business partners) and the setting options available at the table level for a business object, that is, Root, Process, Omit Rules, BRF+, and Hidden.
Following are some of the activities performed under the consolidation process model table view:


Process indicators should be set on the table to make it relevant for process data.
                    

                        The BRF+ indicator should be set if it's for a given table belonging to a business object type that requires business rules to be maintained.
                    

Omit Rules indicators can be set for omitting rules for a specific table during best record calculation.
                    

                        If the Hidden indicator is set, the respective tables will hide from the user interface (UI).
                    


Figure 16.7    Business Object (147): Business Partner Tables in Process Modeling of SAP MDG, Consolidation

Note
It's mandatory to designate at least one table as root.

Figure 16.8 shows the list of tables available under business object type 194 (material) and setting options available at the table level for a business object.

Figure 16.8    Business Object 194 (Material) Tables in Process Modeling of SAP MDG, Consolidation
Specify Adapters
This Customizing activity provides an overview of the standard delivered adapters required for the specific step types for consolidation and mass processing. You can also add your own adapters to meet specific business requirements. Adapters are specific to a step and business object type. Note that the number of configurations per adapter should not exceed 100 to ensure that the Adapter configuration is displayed correctly within the application in the manage consolidation process detail screen. Following is the IMG path to configure various adapters relevant for SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Specify Adapters.
Figure 16.9 shows some examples of out-of-the-box delivered adapter configurations for various business object step types in SAP MDG, consolidation.

Figure 16.9    Configuration of Adapters
Following are the business partner adapters delivered by SAP for various steps in the consolidation process:


Standardization


CL_MDC_ADAPTER_BP_BAS_STD (Business Address Service [BAS]): The default behavior of this adapter is No Parallelization. Via SAP Fiori, you can switch between configurations for this adapter. This adapter uses the third-party interface of BAS to execute address validations against external applications.
                            

CL_MDC_ADAPTER_BP_IM_STD (SAP HANA smart data quality): This adapter supports only the SAP HANA database, uses SAP HANA smart data quality, and performs standardization directly on the database. The standardization of names and addresses can be performed using this adapter.
                            

CL_MDC_ADAPTER_BP_KEY_MAP_STD (Evaluate Key Mapping for Business Partners and SAP ERP Customers/Vendors): If key mapping between the source system and the consolidation system is maintained, then the source field value can be replaced by the consolidation system value. However, in the absence of key mapping, the source field value will be blank.
                            

CL_MDC_ADAPTER_BP_VALUEMAP_STD (Evaluate Value Mapping for Business Partners and SAP ERP Customers/Vendors): If value mapping between the source system and the consolidation system is maintained, then the source values will be replaced based on the available mapping.
                            

CL_MDC_ADAPTER_BRF_STD (Business Partner Standardization with BRFplus): This adapter can be used if BRFplus check and data enrichment is needed.
                            



Matching


CL_MDC_ADAPTER_BP_BAS_MTC (Business Address Services): This adapter uses third-party interfaces to validate business addresses. However, this might not be appropriate while dealing with mass data of higher volumes. By default, this is set up as No Parallelization.
                            

CL_MDC_ADAPTER_BP_IM_MTC (SAP HANA SDQ): While using SAP HANA smart data quality, this adapter matches directly with the SAP HANA database. Note that matches with non-SAP HANA databases aren't supported with this adapter. A predefined Business Configuration Set (BC set) called CA-MDG-EE-BP_IMHANA_C01 can be activated. 
                            

CL_MDC_ADAPTER_FUZZY_MTC (SAP HANA Fuzzy Search): The SAP HANA fuzzy algorithm is used by this adapter (in fact, only SAP HANA databases are supported by this adapter). SAP HANA rulesets are generated for this adapter, which can be configured and implemented. To use this adapter, additional configurations are needed in the Customizing activity Create Match Configurations for Fuzzy Matching.
                            



Best Record Calculation


CL_MDC_ADAPTER_BP_BRC (Business Partner Best Record Calculation): This adapter supports BRFPLUS, SOURCE_SYSTEM, RECENCY, and COMPLETENESS. This adapter works on an application server and supports best record calculation. By default, No Parallelization is configured for this adapter. If an active record is available within a match group, it's chosen as the best record. If no active record is available, the best record is chosen randomly.
                            



Validation


CL_MDC_ADAPTER_BP_VAL (Business Partner Validations [Business Suite]): This adapter uses standard application programming interfaces (APIs) available in the SAP Business suite. Customer vendor integration (CVI) setup is a prerequisite to use this adapter for validation purposes. By default, the No Parallelization setting is provided for this adapter.
                            



Activation


CL_MDC_ADAPTER_BP_ACT (Business Partner Activation in Consolidation): This adapter activates business partner data using standard APIs in the SAP Business Suite. For using this adapter in activation, CVI is a prerequisite. It's recommended to use this adapter if SAP MDG, consolidation is being used in parallel with SAP MDG, central governance.
                            



Replication


CL_MDC_ADAPTER_BP_REP (Business Partner Replication with DRF): This adapter helps in executing the master data replication and needs configuration to make it run.
                            



Edit


CL_MDC_ADAPTER_EDI (Interactive Mass Processing): This adapter is used mainly for the SAP MDG, mass processing functionality in SAP MDG, consolidation.
                            





Filter & Remove




CL_MDC_ADAPTER_BP_FAR (Delete Business Partners with Incomplete Address Data): This adapter helps in removing and deleting all the business partners for which no address data can be found based on the best record calculations.
                    

CL_MDC_ADAPTER_FAR (Filter & Remove): Based on the results of the predecessor step, a selection of records is either moved to a parallel consolidation process or removed and deleted.
                    



Update


CL_MDC_ADAPTER_BRF_UPD (BRFPlus): This adapter is used for performing BRFplus checks and derivations for mass update. 
                            



Following are the adapters for material objects, which are delivered by SAP for various steps in the consolidation process:


Standardization


CL_MDC_ADAPTER_MAT_KEY_MAP_STD (Evaluate Key Mapping for Material): If key mapping between the source system and the consolidation system is maintained, then the source field value can be replaced by the consolidation system value. However, in the absence of key mapping, the source field value will be blank.
                            

CL_MDC_ADAPTER_MAT_VALUEMAP_STD (Evaluate Value Mapping for Material): If value mapping between the source system and the consolidation system is maintained, then the source values will be replaced based on the available mapping.
                            

CL_MDC_ADAPTER_BRF_STD: This adapter can be used if BRFplus check and data enrichment are needed at the single record level.
                            



Matching


CL_MDC_ADAPTER_FUZZY_MTC (SAP HANA Fuzzy Search): The SAP HANA fuzzy algorithm is used by this adapter (only SAP HANA databases are supported by this adapter). SAP HANA rulesets are generated for this adapter, which can be configured and implemented. To use this adapter, additional configurations are needed in the Customizing activity Create Match Configurations for Fuzzy Matching.
                            

CL_MDC_ADAPTER_MAT_MTC (Material Matching - Old Number): This adapter is suitable when databases other than SAP HANA are being used. You can use the delivered coding of this method as a template while creating your own methods.
                            



Best Record Calculation


CL_MDC_ADAPTER_MAT_BRC (Material Best Record Calculation): This adapter supports BRFPLUS, SOURCE_SYSTEM, RECENCY, and COMPLETENESS. This adapter works on an application server and supports best record calculation. By default, No Parallelization is configured for this adapter. If an active record is available within a match group, it's chosen as the best record. If no active record is available, the best record is chosen randomly.
                            



Validation


CL_MDC_ADAPTER_MAT_VAL (Material Validations [Business Suite]): This adapter uses standard APIs available in the SAP Business Suite. By default, the No Parallelization setting is provided for this adapter.
                            



Activation


CL_MDC_ADAPTER_MAT_ACT (Activation for Material): This adapter activates material data using standard APIs in the SAP Business Suite. It's recommended to use this adapter if SAP MDG, consolidation is being used in parallel with SAP MDG, central governance.
                            



Replication


CL_MDC_ADAPTER_MAT_REP (Material Replication with DRF): This adapter helps in executing the master data replication and needs configuration to make it run.
                            



Edit


CL_MDC_ADAPTER_EDI (Interactive Mass Processing): This adapter is used mainly for the SAP MDG, mass processing functionality in SAP MDG, consolidation.
                            



Filter and Remove


CL_MDC_ADAPTER_FAR (Filter & Remove): Based on the results of the predecessor step, a selection of records is either moved to a parallel consolidation process or removed and deleted.
                            



Update


CL_MDC_ADAPTER_BRF_UPD (BRFplus): This adapter is used for performing BRFplus checks and derivations for mass update. 
                            



Define Rules Using Business Rules Framework Plus
BRFplus-based data quality checks can be built and used in various process steps, including standardization, validation, and best record calculation. The system creates the functions required in BRFplus provided the configurations are done in SAP MDG, consolidation process modeling for the respective business object tables. These functions are applicable for all the tables for which the BRF+ indicator is selected after Apply Artifacts is clicked. Note that the naming convention should be followed as MDC_<abbreviation of process step>_FOR_<table name>.
Following are the possible abbreviations of process steps:


                        BRC: Best record calculation
                    

                        STD: Standardization
                    

                        VAL: Validation
                    

An example may look like MDC_STD_FOR_BUT000_PRC.
Figure 16.10 depicts the IMG activity option available for creating business rules in SAP MDG, consolidation using BRFplus. Transaction BRF+ can also be used to access the BRFplus framework. Refer to the BRFplus documentation to get more information about the framework and its capabilities.

Figure 16.10    Define Consolidation Rules Using BRFplus
Following is the IMG path for adding scope in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Scope.
Figure 16.11 shows the IMG activity where scope can be defined for a business object type. This Customizing controls the scope of changeable fields for mass processing.

Figure 16.11    Configure Scope
Configure Filter and Remove
In SAP MDG, consolidation, users mainly work on the data quality aspect of multiple records at a time. Hence, it becomes imperative to provide options to filter and remove the unnecessary data during various process steps in SAP MDG, consolidation. The filter and remove configuration in SAP MDG, consolidation can help to overcome this optional requirement, and you can configure this as a process step. Note that the filter and remove step can be configured only as a successor of matching, best record calculation, or validation. The filter and remove function automatically removes records or moves records into a new duplicate process: after matching, it moves open match groups; after best record calculation, it moves specific groups of records; and after validations, it moves records with warnings or errors.
16.2.2    Creating a Consolidation Process with SAP Fiori
You can use the SAP Fiori-based UI for performing various process steps and activities in SAP MDG, consolidation. Figure 16.12 depicts the SAP MDG, consolidation UI with SAP Fiori apps used for various activities involved in SAP MDG, consolidation and SAP MDG, mass processing.

Figure 16.12    SAP Fiori Apps for SAP MDG, Consolidation and SAP MDG, Mass Processing 
For any usage based on the business requirements, a consolidation process has to be created first, as shown in Figure 16.13.

Figure 16.13    Create Consolidation Process: Business Partner
Figure 16.14 depicts the screen during the standardization step of the consolidation process.

Figure 16.14    Standardization Step during the Consolidation Process
These consolidation processes created in SAP MDG can be managed through SAP Fiori apps. Figure 16.15 shows how an SAP MDG, consolidation process can be managed. You can create and delete processes. This screen acts as a process monitor for SAP MDG, consolidation by providing an overview of all processes in various states and providing navigation to process details.

Figure 16.15    Managing Consolidation Processes Screen
As explained earlier in this chapter, during a consolidation process, various steps come into play. From a user's perspective, these steps are sequential, and each of the steps needs various configurations as prerequisites. The following subsections explain the configurations involved during each of the consolidation process steps. In addition, the screens for each of the steps are shared to give you an idea of the look and feel of the application.
16.2.3    Standardization 
Standardization is the first step in the consolidation process that normalizes and enriches master data. In this step, an additional check ensures that specific address-related data, such as streets or cities, truly exist.
There are two parts to the standardization step in SAP MDG, consolidation:


Enrichment  In this process, fields required for performing a business process are missing in the master data; for example, a postal code value is missing for an address with street name Crescent Plaza Dr. in city Houston, TX. The enrichment process fills the missing field value to postal code "77077" based on the provided address.
                

Normalization  In this process, all occurrences of the same string are delineated in the same way. In such cases, the standard comes from some authority, such as the postal services. An example of normalization is converting a value of a street name from "Crescent Plaza Dr." to "Crescent Plaza Drive".
                

Following are the adapters used for standardization purposes in the SAP MDG, consolidation process:


CL_MDC_ADAPTER_BP_BAS_STD (Business Address Services)
                

CL_MDC_ADAPTER_BP_IM_STD (SAP HANA Smart Data Quality)
                

CL_MDC_ADAPTER_BP_KEY_MAP_STD (Evaluate Key Mapping for Business Partners and SAP ERP Customers/Vendors)
                

CL_MDC_ADAPTER_BP_VALUEMAP_STD (Evaluate Value Mapping for Business Partners and SAP ERP Customers/Vendors)
                

CL_MDC_ADAPTER_BRF_STD (Business Partner Standardization with BRFplus)
                

CL_MDC_ADAPTER_MAT_KEY_MAP_STD (Evaluate Key Mapping for Material)
                

CL_MDC_ADAPTER_MAT_VALUEMAP_STD (Evaluate Value Mapping for Material)
                

The IMG path for performing standardization activities in SAP MDG, consolidation is as follows: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Standardization.
The IMG activities as shown in Figure 16.16 are part of the standardization process step in SAP MDG, consolidation.

Figure 16.16    IMG Activities: Configure Standardization
In standardization Customizing activities, parallelization of the standardization adapters for BRFplus, BAS, key mapping, and value mapping is maintained. 
The Customizing activity Specify Process Template specifies whether and in what configurations the standardization adapter is used as part of the consolidation process. Note that standardization runs without further configuration, but parallelization of processes can be used for improving the performance during standardization. 
Following are the steps to be followed in the Customizing activity for parallelization of standardization:


                    Select new entries.
                

                    Enter a Config. ID and Description.


                    In the Number of Processes field, enter the number of processes you want to be processed in parallel.
                

                    Enter the Prefix for Queue Name.
                

Figure 16.17 shows the configuration for parallelization in standardization IMG activities in SAP MDG, consolidation.

Figure 16.17    Configure Parallelization for Standardization
Also through the Customizing activity, BC Set CA-MDG-EE-BP_IMHANA_C01 (MDG-BP Consolidation: IM in SAP HANA) can be activated. This BC Set contains predefined sets of table entries that are required to run the process steps standardization and matching with the adapters for SAP HANA smart data quality.
Setting up the background RFC (bgRFC) inbound destination is a prerequisite for using parallelization during SAP MDG, consolidation. You can run Transaction SBGRFCCONF to set up the RFC destination. Click on Create to maintain a new Define Inbound Destination entry. Enter "MDC_QUEUE_" in the Prefixes field.
If the bgRFC destination isn't created manually, you should have authorization object SBGRFC assigned with activity 02 and type 07. In such a case, automatic creation of the inbound destination will occur as soon as a user triggers execution of the consolidation process for the first time.
Figure 16.18 shows the configuration for defining an inbound destination and prefixes.

Figure 16.18    SAP MDG, Consolidation: Define Inbound Destination
Figure 16.19 shows the screen visible to SAP MDG, consolidation users during the standardization step. After saving a consolidation process, this is the first screen visible to business users. Click Continue to see the standardization results during the consolidation process.

Figure 16.19    Standardization Screen in SAP MDG, Consolidation
Figure 16.20 depicts the user screen for standardization results during the consolidation process.

Figure 16.20    Standardization Results during the Consolidation Process
Further details of the master data can be accessed via the Results screen in the standardization step. This screen shows the content of all affected tables in each process step and allows you to navigate between tables using tabs. For example, for a business partner, you can check Overview, General, Address, Phone, Fax, Bank Account, and Tax Number information as shown in Figure 16.21.

Figure 16.21    Results Screen of the Standardization Step of the Consolidation Process
16.2.4    Matching
An activity performed to check and compare data from various source applications and the active area for the purpose of identifying potential duplicates is called matching in SAP MDG, consolidation. Records that are identified as potential duplicates are presented in match groups, and then these match groups are reviewed for potential duplicates. For this purpose, the following adapters are used in the SAP MDG, consolidation process:


CL_MDC_ADAPTER_BP_BAS_MTC (Business Address Services)
                

CL_MDC_ADAPTER_BP_IM_MTC (SAP HANA Smart Data Quality) 
                

CL_MDC_ADAPTER_FUZZY_MTC (SAP HANA Fuzzy Search) 
                

CL_MDC_ADAPTER_FUZZY_MTC (SAP HANA Fuzzy Search)
                

CL_MDC_ADAPTER_MAT_MTC (Material Matching - Old Number) 
                

Following is the IMG path for performing matching-related activities in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Matching.
The Configure Matching section has several associated IMG activities. Figure 16.22 depicts various configuration options in the SAP MDG, consolidation process.

Figure 16.22    IMG Activities for Configure Matching
In the following sections, we'll discuss match configurations, parallelization, and import of predefined settings for SAP HANA smart data quality.
Match Configurations for Fuzzy Matching
In this Customizing activity, a match configuration is defined and generated that can be used by SAP HANA for matching master data records while using fuzzy match. These configuration entries are used during the configuration of process templates for assigning step type matching and adapter SAP HANA fuzzy search. After this configuration is maintained, rulesets can be created in SAP HANA Studio to meet the specific requirements, which eventually can be found in the packages created for match configuration. 
The SAP HANA fuzzy search is a fast and fault-tolerant search feature available in SAP HANA that can return records even if the search term has typos or missing letters. While comparing two terms or two strings, scores are created using a fuzzy search algorithm. A higher score means the strings are similar and vice versa. The scores may vary between 0.0 (lowest) and 1.0 (highest).
Note that a prerequisite for performing this activity is that the client must allow cross-client changes. In addition, the ruleset naming convention should be used while performing the configuration in SAP MDG, consolidation (i.e., <Matchconfigurationname>_RULESET.searchruleset).
SAP provides standard match configuration that can be used as a template to define and generate its own matching configurations:


BPMATCH1


MAT_MATCH1


Figure 16.23 depicts the SAP MDG, consolidation screens while generating the match configuration. It also shows the standard match configuration delivered out of the box.

Figure 16.23    SAP MDG, Consolidation: Match Configurations
Parallelization for Fuzzy Matching
In this Customizing activity, the number of processes are determined that should be allowed to run in parallel for a given match configuration. In addition, an upper threshold for matches is also defined in this IMG activity for automatically rating two records in the match review process.
Note that in the absence of a choice configured for this IMG activity, the number of processes is considered as single processing. Figure 16.24 shows parallelization for fuzzy matching configuration options in SAP MDG, consolidation.

Figure 16.24    Configure Fuzzy Matching Parallelization
Figure 16.25 shows the BAS Matching Configuration in SAP MDG, consolidation.

Figure 16.25    BAS Matching Configuration
Import Predefined Settings for SAP HANA Smart Data Quality
In this Customizing activity, SAP-delivered BC Set CA-MDG-EE-BP_IMHANA_C01 (MDG-BP Consolidation: IM in SAP HANA) containing predefined sets of table entries that are required to run the matching process steps with the adapters for SAP HANA smart data quality.
From a matching perspective, the BC Set delivered by SAP contains settings for the following matching-related tables:


                        Table SIMDQ_CMPRSRC (IM in SAP HANA) for comparing source settings for the match policy
                    

                        Table SIMDQ_MTCADDRSTG (IM in SAP HANA) for address settings for the match policy
                    

                        Table SIMDQ_MTCFIRMSTG (IM in SAP HANA) for firm settings for the match policy
                    

                        Table SIMDQ_MTCPERSTG (IM in SAP HANA) for person settings for the match policy
                    

                        Table SIMDQ_MTCCSTMSTG (IM in SAP HANA) for custom component settings for the custom match policy
                    

Following is the IMG path for importing predefined settings for SAP HANA smart data quality in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Matching • Import Predefined Settings for SAP HANA Smart Data Quality.
Figure 16.26 shows the BC Set name and various options after the IMG activity has been triggered for importing predefined settings for SAP HANA smart data quality.

Figure 16.26    SAP MDG, Consolidation: Import Predefined Settings for SAP HANA Smart Data Quality
You should run a consistency check and resolve any errors or warnings before activating the BC Set. 
Figure 16.27 shows the screen that appears after running the consistency check while activating the SAP-delivered BC Set CA-MDG-EE-BP_IMHANA_C01.

Figure 16.27    Importing Predefined Settings for SAP HANA Smart Data Quality: Consistency Check Logs
Configure Parallelization for Material Matching
This Customizing activity performs parallelization for adapter CL_MDC_ADAPTER_MAT_MTC for material matching. The matching step checks data from various source systems, loads, and active areas for duplicates. To use parallelization for material matching in SAP MDG, consolidation, an RFC destination using bgRFC configuration should already exist. Figure 16.28 shows the SAP MDG, consolidation Configuration for Material Matching Adapter.

Figure 16.28    SAP MDG, Consolidation: Configuring Parallelization for Material Matching
Figure 16.29 shows an SAP MDG, consolidation screen where matching results are visible during the matching step.

Figure 16.29    Matching Results in the Consolidation Process
16.2.5    Best Record Calculation
Best record calculation results in a best record containing the cumulated, most valuable data for each match group identified by the matching process. In other words, in this step for each match group, a best record is calculated. This calculation follows a well-defined process based on a set of rules. 
The following adapters support the best record calculation step in SAP MDG, consolidation:


CL_MDC_ADAPTER_BP_BRC (Business Partner Best Record Calculation)
                

CL_MDC_ADAPTER_MAT_BRC (Material Best Record Calculation)
                

Following is the IMG path for performing best record calculation activities in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Best Record Calculation.
Figure 16.30 shows various IMG activities under the Configure Best Record Calculation process step in SAP MDG, consolidation.

Figure 16.30    IMG Activities: Configure Best Record Calculation
Specify Rules for Best Record Calculation
This Customizing activity provides an overview of the rules for the best record calculation that are part of the standard delivery. You can create new rules based on your business requirements. As stated earlier, in the best record calculation step, the consolidation process calculates a record containing the cumulated, most valuable data for each match group identified by the matching process step. Note that this calculation follows a well-defined process based on certain rules. Figure 16.31 shows the SAP-delivered rules in the IMG, that is, BRFPLUS, COMPLETENESS, RECENCY, and SOURCE_SYSTEM settings in SAP MDG, consolidation.

Figure 16.31    SAP MDG, Consolidation: Specifying Rules for Best Record Calculation
Following are some properties of the delivered rules for best record calculation in SAP MDG, consolidation:


                        When attributes from other records are used to complete the best record, it's called COMPLETENESS. This rule is applied at the field level.
                    

                        The best record is the one with the most recent data, which is called RECENCY. This rule is applied at the table level.
                    

                        In SOURCE_SYSTEM, the best record is chosen based on the specified source system. This delivered rule is used at the table level.
                    

                        Best record calculation is based on the BRFplus table, which needs to be set up accordingly. This rule is applicable at the table level.
                    

After the process matching step has bundled records identified as duplicates into a match group, the system moves these approved records through two steps as described next.
In the first step, the records of a match group are compared at the table level. For a specific table, the source system or the recency can be considered to have higher priority. Depending on this setting, the corresponding data are taken into account for the best record. The information, that is, which source system has a certain priority for a specific table, is maintained in the order of source systems view.
In a second step, the preliminary best record is processed on the field level. If a field doesn't contain data but completeness is assigned to this field as the highest priority, then the data are completed with data derived from the record with the next higher order. Figure 16.32 shows how an order of rules can be specified using configuration in the best record calculation process step.

Figure 16.32    SAP MDG, Consolidation: Specifying the Order of Rules for Best Record Calculation
With the best record calculation step, the SAP MDG, consolidation process is 60% complete. Figure 16.33 depicts the best record calculation during SAP MDG, consolidation. You can drill down into the results through this screen. With the help of the Rollback button in the bottom, it's possible to roll back to any step in the process. In addition, it's possible to rerun the process steps to change settings for the following steps.

Figure 16.33    Users Screen during the Best Record Calculation Step of the SAP MDG, Consolidation Process
16.2.6    Validation
In the validations step, the SAP MDG, consolidation process quality of the record is checked to determine if the master data are good enough to meet requirements in the target connected system. The data may be saved if the quality is under the acceptance levels; otherwise, data enrichment can be performed to improve the quality of the data. For this purpose, you can configure parallel processing for the validations step to ensure performance doesn't become a challenge. Following are the adapters that are used during the validation step in the SAP MDG, consolidation process for business partner and material business object types:


CL_MDC_ADAPTER_BP_VAL (Business Partner Validations [Business Suite])
                

CL_MDC_ADAPTER_MAT_VAL (Material Validations)
                

Configurations can be performed to ensure BRFplus and central governance checks are applied on records while they go through the validation step of the consolidation process. Based on the settings, the SAP MDG, consolidation process can inherit the following data quality checks:


                    Existence checks for reference fields of master data records, such as currency, plants, regions and so on
                

                    Simple checks, such as address formats, postal code lengths, and so on
                

                    BRFplus modeled business rules and checks
                

                    BAdI-based business rules and checks
                

Following is the IMG path for performing validation activities in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Validation.
Figure 16.34 shows the screen in SAP MDG, consolidation where the validations related configurations can be performed.

Figure 16.34    Master Data Consolidation: Configurations for Validations
Follow these steps to perform the necessary configuration in the validations step of the SAP MDG, consolidation process:


                    Click on New Entries.
                

                    Provide a Config. ID and Description.
                

                    In the Number of Processes field, enter the number of processes that can be processed in parallel.
                

                    Enter the Prefix of the Queue Name.
                

                    If you want to execute BRFplus checks, select the Execute BRFplus Checks indicator.
                

                    To execute central governance validation rules, select the Execute Central Governance Checks (Validation Rules (BRFplus) & BAdI Validations) indicator.
                

                    In addition, for filtering the quality of records to the acceptance level, provide a value in the Threshold field.
                

Validation is the fourth step of the consolidation process. Figure 16.35 shows the Step Configuration (Validation) screen during the SAP MDG, consolidation process. Settings from process templates are adjustable. 

Figure 16.35    Validation Screen during the Consolidation Process
16.2.7    Activation
Activation is the final step in the consolidation process where master data will be added in the active area. You can control what should be done with the activated data by maintaining configurations in IMG activities as explained next. Optionally, you can also set up parallelization for the activation process. Normally, there are three possible variations of records for which activation can be applied:


                    Records already existing in the active area and hence being updated
                

                    Records that neither exist in the active area nor have any duplicates
                

                    Records that don't exist in the active area but do have potential duplicates
                

In cases where records could not pass the validations, subsequent specific actions can be configured for each of the systems in scope, including central governance if being used. If SAP MDG, central governance is implemented, errored records can also be sent to its staging layer with the help of change requests types configured for the scenario to ensure a smooth handshake between the SAP MDG, central governance and SAP MDG, consolidation modules. Following are the adapters used in the activation step of the SAP MDG, consolidation process:


CL_MDC_ADAPTER_BP_ACT (Business Partner Activation in Consolidation)
                

CL_MDC_ADAPTER_MAT_ACT (Activation for Material)
                

Following is the IMG path for performing activation activities in SAP MDG, consolidation: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Activation for Business Partner. Figure 16.36 shows the screen for configuring the activation step as an IMG activity.

Figure 16.36    IMG Activities: Configure Activation
Figure 16.37 shows the IMG configuration screen for activation-specific settings in consolidation.

Figure 16.37    Master Data Consolidation: Configurations for Activation
The following describes the activation-related configuration tasks in SAP MDG, consolidation:


                    Click on New.
                

                    Enter a Configuration ID/Description.
                

                    In the Number of Processes field, enter the number of processes that can be executed in parallel.
                

                    Enter a prefix in the Queue Prefix field.
                

                    Configure the system settings for New Records.
                

                    In the New Records field, select an entry using the input help, and assign a corresponding change request type.
                

                    In the New Records with Errors field, select an entry using the input help, and assign a corresponding change request type.
                

                    Configure the system settings for Updated Records.
                

                    In the Updated Records field, select a value from the list, and assign a corresponding change request type.
                

                    In the Updated Records with Errors field, select a value from the list, and assign a corresponding change request type.
                

                    Configure the system behavior for Match Groups.
                

                    Select a value from the list, and assign a corresponding change request type for this activity.
                

                    Select a value for the Match Groups with Errors field, and assign a corresponding change request type.
                

                    For replicating the records to connected downstream systems, set the Call DRF after Activation indicator. This indicator is normally set if activation using change requests is used.
                

                    If SAP MDG, central governance business rules have to be used during the validation process, set the Execute Central Governance Checks (Validation Rules (BRFplus) & BAdI validation indicator. If the BRF+ check indicator is set, then BRFplus rules will be used during validations.
                

Figure 16.38 shows the IMG configuration screen for the activation step for the business partner object in SAP MDG, consolidation.

Figure 16.38    Configuration Options: Adding a New Entry for Activation of Business Partners
Figure 16.39 shows the SAP screen after activation-specific settings were completed for a business object in SAP MDG, consolidation.

Figure 16.39    SAP MDG, Consolidation: Configure Activation for Business Partner
The material master may have its own activation configurations similar to business partners. Following is the IMG path for activation configurations of materials: Cross-Application Components • Processes and Tools for Enterprise Applications • Master Data Governance • Consolidation and Mass Processing • Configure Activation for Material.
Figure 16.40 shows the IMG configuration screen for activation-specific settings for materials in SAP MDG, consolidation.

Figure 16.40    SAP MDG, Consolidation: Configure Activation for Material
Figure 16.41 shows the fifth and last step of the SAP MDG, consolidation process.

Figure 16.41    Activation Step during the SAP MDG, Consolidation Process
Optionally, during any of the five steps, you can view the audit trail of the consolidation process by clicking Show Audit Trail. Figure 16.42 shows how audit trails are visible in SAP MDG, consolidation. All activities on the process level (continue the process, roll back the process, etc.) are tracked. This audit trail can be displayed in the process UI with the ability to drill down into the details. 

Figure 16.42    Audit Trail View during the Consolidation Process









16.3    Initial Data Load
To use SAP MDG, consolidation functionalities, master data from the source has to be loaded in the SAP MDG, consolidation application. It's important to note that data has to prepared and transformed into the SAP data structures for the successful processing of the initial load.
Various extract, transform, and load (ETL) tools can be used for loading master data in SAP MDG, consolidation tables from various SAP applications as well as non-SAP applications.
SAP has provided several options that can be leveraged for performing initial master data loads in SAP MDG, consolidation: SAP Landscape Transformation Replication Server (SLT), SAP HANA Studio, and CSV files.
16.3.1    Source Tables
Following are some source tables in which data has to be loaded from the business partner data model:


                    Table BUT000_SRC: BP General Data-I (required in all cases)
                

                    Table BUT020_SRC: BP Addresses (required if address relevant data are uploaded)
                

                    Table BUT_ADRC_SRC: Addresses (Business Address Services)
                

                    Table BUT_ADR6_SRC: Email Addresses (Business Address Services)
                

                    Table BUT100_SRC: BP Roles
                

                    Table KNA1_SRC: SAP ERP Customer Data (required if a customer data model is used)
                

                    Table LFA1_SRC: SAP ERP Vendor Data (required if a vendor data model is used)
                

Following are some source tables from the material data model:


                    Table MARA_SRC: Central Material Data (required in all cases)
                

                    Table MARC_SRC: Plant Data for Material (required while working with plant-level material data)
                

                    Table MVKE_SRC: Sales Data for Material (required if distribution chain data of materials are loaded)
                

For accessing all SAP MDG, consolidation-specific source tables, you can search for "*SRC" in Transaction SE16N to get a list of all relevant tables.
Report MDC_BP_TRANSFORM_SOURCE_DATA can be used for transforming the customer or vendor data to the business partner data model after the source tables are filled. 

Note
Report MDC_BP_TRANSFORM_SOURCE_DATA doesn't support the transformation of person-related data. Although the SAP MDG, consolidation process supports business partner organizations and business partner persons, it doesn't support business partner relationships with current versions. Refer to SAP Note 2233142 for more information on how to fill in source tables in SAP MDG, consolidation. 
In addition, in SAP MDG 8.0, the inbound functionality doesn't allow you to load the consolidation source tables; however, with SAP MDG 9.0 and based on the SOA service, you can choose whether to load the master data directly to the SAP MDG active area, to the SAP MDG staging area (change request), or to the source tables for SAP MDG, consolidation.

While loading data in SAP MDG, consolidation, the source ID should be a unique identifier for a specific source system. If data are uploaded using customer or vendor data models, ensure that the IDs remain unique. If there are vendor and customer IDs within the same number range, the IDs can be made unique by adding a prefix.
16.3.2    SAP Landscape Transformation Replication Server
SAP Landscape Transformation Replication Server (SLT) is a recommended option for initial loads in SAP MDG, consolidation, especially for existing SAP Business Suite models because identical data models are being used. SLT uses a trigger-based replication approach to pass data from source systems to target SAP HANA-based systems. As shown in Figure 16.43 with SLT, it's possible to load as well as replicate data in real time or schedule data to be loaded into an SAP HANA database at a later time.
SLT has the built-in capability to handle and support conversion between non-Unicode and Unicode data formats. With full integration to SAP HANA Studio, SLT also has table settings and some simple transformation capabilities. For any complex transformation, specialized ETL tools should be considered. With the help of SAP Solution Manager for SAP HANA, SLT also has data monitoring functionalities. To access SLT, use Transaction LTR.

Figure 16.43    SAP System Landscape Transformation
SLT-based table data provisions provide the following options:


Load (Full)This is normally a one-time event used mainly for initial load purposes from a source application.
                

Replicate (Full and Delta Load)With this option, the initial load is triggered along with any delta changes. 
                

Stop ReplicationThis option removes the database trigger and logging table completely while ensuring the replication process is stopped for a given table.
                

SuspendThis option doesn't remove the database trigger and logging information but just pauses the replication process.
                

ResumeThis option resumes the suspended replication process.
                

Following are some salient features while establishing a connection between SAP application and an SAP HANA-based system:


                    A read engine is created in the SAP source system.
                

                    The connection between SAP SLT and SAP HANA-based systems is established as a database connection.
                

                    The connection between the SAP source applications and SLT is established as an RFC connection.
                

                    While replicating a table, SLT creates logging tables in the source system.
                

                    SLT transforms all metadata table definitions from the ABAP source applications to SAP HANA. 
                

Following are some salient features while performing a data load connection between a non-SAP system and an SAP HANA-based system:


                    A read engine is created in SLT.
                

                    The connection between SLT and the non-SAP legacy system is established as a database connection.
                

                    The connection between SLT and SAP HANA-based systems is established as a database connection.
                

                    While replicating a table, SLT does create logging tables in the source system.
                

                    SLT transforms all metadata table definitions from the legacy source system to SAP HANA. 
                

16.3.3    SAP HANA Studio
With SAP HANA Studio, it's recommended that data be imported in an interim table first, and subsequently, in the next steps, this content from the interim tables can be loaded to source tables using custom ABAP reports or SQL. 
16.3.4    CSV Files
SAP MDG, consolidation supports uploading data from a file without ETL tools. SAP HANA-based systems support data loads from file types such as CSV (comma-separated values), XLS, and XLSX.
Prior to performing initial data loads using these options, a control file (CTL) should be created. To upload data in SAP MDG, consolidation, a table should already exist; otherwise, a new table needs to be created via a SQL script. The generic steps required when using CSV files for initial loads are as follows:


                    Select the target system.
                

                    Select the import source.
                

                    Select the file for upload.
                

                    Select the target table.
                

                    Manage the table definition and data mapping.
                

                    Check the target table.
                










16.4    Summary 
This chapter provided an overview of the SAP MDG, consolidation process delivered with SAP MDG. Various use cases for SAP MDG, consolidation were discussed, and we highlighted how SAP MDG, consolidation and SAP MDG, central governance functionalities can be integrated to achieve organizational goals related to master data. Various prerequisite configurations and settings needed for performing several business activities that eventually run the consolidation process were also discussed. We also provided a set of detailed instructions to help you when configuring SAP MDG, consolidation. In the end, an overview of options available for the initial data load in SAP MDG, consolidation was also discussed.








A    SAP MDG Solution Extensions by UtopiaMaster data management products have evolved to cater to customer-specific needs; for many customers, data stewardship applications are key to enabling their business and solving their business's challenges. SAP Master Data Governance industry solutions are perfectly suited to meet these challenges. Utopia offers two solution extensions for SAP MDG: SAP Master Data Governance, enterprise asset management extension by Utopia and SAP Master Data Governance, retail and fashion management extension by Utopia. The service master object extension is bundled with the enterprise asset management functionality. These solution extensions are SAP products. In the following sections, we'll look at these two extensions in detail.
A.1    Enterprise Asset Management Extension
The enterprise asset management extension includes the following objects: functional location; equipment master; bills of material (MRO BOMs); work center; measuring point; functional task list, equipment task list and general task list; maintenance plan/maintenance item; and service master. 
With the industry moving towards digital transformation with new technologies like IoT and connected devices, it is important to provide a governance to achieve data management consistency, compliance, and better single version of truth across all systems, leading to much better efficiency.
This solution extension caters to various industries such as oil and gas, discrete manufacturing, and defense, and it's further enhanced to support linear asset management for additional industry scenarios such as rail, utilities, telecom, and so on. Therefore, the solution supports asset management customers where SAP ERP Plant Maintenance (SAP ERP PM) is the core component within SAP Business Suite. The solution extension is certified for the SAP S/4HANA 1610 release. The following sections discuss the offered objects in detail.
A.1.1    Equipment Master
The equipment master object content contains more than 120 attributes, including basic data, equipment, description, equipment category and deletion indicator, reference, copy equipment, general data, system-user status, general reference data, general-manufacturer data, location data, organization account assignment, organization-responsibilities, structure, serialization data, data origin indicators, configuration data, class and characteristics assignment, and user interface (UI) attributes. Depending on the equipment category, the mentioned sections/components can be enabled in the SAP MDG UI. 
A.1.2    Functional Location
The functional location object content contains more than 120 attributes, including functional location, description, functional location category, deletion indicator, copy functional location, copy reference functional location, default values based on superior functional location, general data, system-user status, general—reference data, general—manufacturer data, location data, organization—account assignment/responsibilities, structure, class, and characteristics.
A.1.3    Maintenance, Repair, and Overhaul Bill of Material
The MRO BOM object content contains more than 80 attributes, including material BOM (MBOM) header details with header data, quantity data, validity and material data, and BOM and alternative text. It also consists of BOM item overview information, including BOM item detail, quantity data, additional data, material requirements processing (MRP) data, purchasing data, item status, BOM document assignment, and item text. 
A.1.4    Work Center
The work center object content contains more than 120 attributes, including basic data, general data, standard value maintenance, default values, capacities (capacity overview, capacity header, assigning pooled capacity), scheduling, costing, and technology. Depending on the work center category, these fields will display in the SAP MDG UI and all related with the screen group and field selection configuration will display in SAP ERP using Transaction OPFA.
A.1.5    Task List (Equipment, Functional Location, and General)
Each item of the task list is a separate entity (type 1) by itself with more than 260 attributes, including header, general view assignment to header, task list overview, operation, general operation overview, internal processing operation, standard values, wages, external processing operation, external activity, and procurement options. The task list allows you to manage the task list header and components as well as the MBOM header and components. 
A.1.6    Maintenance Plan/Item
To introduce consistency and so that there are no orphaned maintenance items, maintenance items are created with the maintenance plan. The object content contains more than 50 attributes that support a single cycle maintenance plan with basic data and scheduling parameters containing date determination, call control parameter, scheduling indicator, and start scheduling. It also has additional data, maintenance cycles, and maintenance items with planning data, task list, and reference object of functional location, equipment, and assembly. Depending on the maintenance plan category and cycle unit, these fields will display in the SAP MDG UI.
To ensure data consistency, the maintenance plan allows you to manage at least one cycle and one item data to create/maintain. Some of the business rules include the following:


Cycle or Offset Value in the Maintenance Plan Cycle tab is a mandatory field.
                

                    If entered, Cycle Unit is a time dimension, and the Start of Cycle field is enabled in scheduling.
                

                    If entered, Cycle Unit is a performance dimension, and the Start Counter Reading field is enabled in scheduling.
                

                    If entered, Cycle Unit is a performance dimension, and the Counter (measuring point with counter reading) field becomes mandatory.
                

                    If the assigned Scheduling Indicator is Time - Key Date or Time - Factory Calendar, then the Factory Calendar field becomes mandatory.
                

                    If a Maintenance Item is assigned to a Maintenance Plan, then it will be auto populated in the Reference Object, Planning Data, and Task List Details.
                

A.1.7    Measuring Point 
The measuring point object content contains more than 110 attributes, including basic data, general data, target value, counter data, additional data, measurement range limits, and classification data to manage equipment and functional location measuring points. 
All of these objects support Linear Asset Management (LAM). Based on the native SAP Business Suite functionality, the functionality of the enterprise asset management extension is enabled for LAM also on activation of the LAM switches. The solution extension provides the functionality to create, maintain, and govern each of the just listed objects via standard SAP MDG change requests as well as to display, search (database search and SAP HANA fuzzy search), duplicate check (SAP HANA), mass change, file upload/download, copy by reference, dynamic title, side panels, data import framework, and data replication framework with key and value mapping. It also allows multiple object change requests and lean SAP Fiori creation UI and approval UI. All the objects leverage the standard predelivered BRFplus workflow template. 
A.1.8    Service Master
The service master object content contains more than 50 attributes, including basic data, time management, purchasing data, and internal work/conversions. The solution allows you to maintain all mandatory fields of the service master, mass updates, database search, copy, mark for deletion, data import framework, data replication framework with key and value mappings, and lean SAP Fiori creation UI and approval UI. At present, this service master object isn't supported on SAP S/4HANA but is planned to be supported in the next releases of SAP S/4HANA.









A.2    Retail and Fashion Management Extension
The retail and fashion management extension by Utopia supports SAP Business Suite for IS-Retail, SAP Fashion Management Solution (runs on SAP HANA), and SAP S/4HANA 1610. With one unified code base, as customers migrate from SAP Business Suite to SAP Fashion Management Solution or SAP S/4HANA, the solution supports all the functionalities natively, and the fields within SAP MDG are activated based on the active switches.
With its fourth release, the retail and fashion management extension has more than 1,100 fields and supports variant classifications for the article master. 
The solution supports the management of single article, generic article-variants, set/prepack/display/group articles, full products, empties with SAP HANA or TREX fuzzy search, and duplicate checks as standard functionalities.
The solution content supports the following SAP Business Suite views: 


                Basic data view with additional data (with textile components, seasons article assignment with segmentation, weight and volume segmentation, additional EAN/vendor GTIN with segmentation, unit of measure [UoM], Additionals tab, and short description) 
            

                Basic data fashion (with segmentation data, fashion attribute, material conversion ID)
            

                Purchasing view: info record (with purchasing segmentation, vendor characteristic, purchase order text, and info record note)
            

                Listing view and associated data maintenance for sales organization/distribution channel validity area
            

                Logistic distribution center (DC) view (with logistic DC RP/forecast view, logistic DC other logistic data view, logistic DC fashion with MRP segmentation, logistic warehouse, segmentation warehouse, and logistic DC accounting view) 
            

                Logistic store view (logistic DC/store RP/forecast view, logistic DC other logistic data view, and logistic DC accounting view)
            

                Sales view (sites, delivery quantity, listing functions, and others)
            

                Point of sale view (POS selling, control for each distribution center, distribution channel)
            

                Merchandise category/classification system/characteristics (including variant building and informative characteristics during the article creation and maintenance process)
            

The enhanced side panel has a standard comparison of active data and in-active data within the change process. Enhanced business rules such as calculation of UoM's weight and volume are standard.
In addition, retail and fashion industry customers have a very complex need to ensure that data are consistent across all views and fields, which is called reference handling. With governance scenarios, it's very important to achieve data management consistency, compliance, and better single version of truth across all departments, eventually leading to much better efficiency. 
For example, when the article category, article type and merchandise category are entered, the reference article from the merchandise category is used for filling in the MARA, MAW1, MARM, and MLAN fields. If the article is copied, then the copied article is considered as the reference article, and the following are true: 


                The MAW1 fields of the Listing tab aren't derived until the user clicks the Listing tab.
            

                The default country is chosen for the current article, and the same country data is fetched from the reference article as well.
            

                For UoM, the GTIN values and the GTIN categories aren't copied.
            

                Whenever a new data item is added on the Article Hierarchy tab, the Article Hierarchy description is derived and filled in.
            

                Reference handling of characteristic/restriction/variant from a merchandizing category (MC) reference article to a new article isn't supported. You must use the copy functionality from search for the same.
            

                Care code values are copied from the reference article to the newly created article.
            

                All views from fashion, listings, purchase info records, logistics DC/fashion, warehouse management, logistics store, sales, point of sale, additional data, seasons, and others support reference handling.
            

The solution supports the following listings capabilities: creation of new listing conditions for different assortments, maintenance of listing data for sales area validity, possible execution of listings based on assortment type, and automatic creation of subsequent segments for articles during the listing process. 
The solution also caters to purchasing info records (PIR) to link the article to vendors. Most customers who look for PIR have this functionality available as standard instead of a separate object.
The solution also provides an enhanced personal object worklist (POWL). The enhancements of POWL include additional fields to identify each work item (article master). This functionality also allows the user to select multiple change requests (records) and edit the listed views within the inbox. After the records are edited, the system runs all the SAP MDG validation checks and finally allows the user to mass approve or reject those change requests with the POWL application itself.
To integrate better with other solutions and maintain SAP MDG as the single version of the truth, the solution provides IDoc-based replication for the article master with classification data (ARTMAS), BOM (BOMMAT), article hierarchy, additionals, substitution, Vendor characteristics, PIR (INFREC), and assortments (LIKOND).
The solution supports management of sets, prepacks, and displays. It also supports the creation of BOMs, article hierarchy assignment, and image/URL handling for remote documents/images that can be displayed in the side panel. Finally, the solution integrates standard with SAP Document Management System (SAP DMS) where documents and images can be stored.








B    The Authors
Homiar Kalwachwala is a senior consulting manager at SAP. He is the head of the Global Cloud Integration & Middleware services practice community at SAP and heads the SAP Master Data Governance and SAP Enterprise Information Management practices in North America. Homiar has contributed to SAP TechEd and ASUG, as well as on the SCN. He has won several awards at SAP and is well respected in professional circles in the SAP MDG/SAP EIM and middleware spaces. 
Sandeep Singh Chahal is a principal business processes consultant working for SAP's Data Technology & Services team since 2015. He has more than 12 years of experience in defining best practices, processes, strategies, and methodologies for enterprise master data solutions. Sandeep has been worked on more than 15 projects in the areas of master data governance, master data management, and data migration. He is currently engaged in driving SAP MDG projects for some of the top corporations in North America. 
Santhosh Kumar Cheekoti is a principal consultant at SAP America. He has more than 11 years of experience in SAP consulting. He holds a bachelor's degree from JNTU, Hyderabad. Santhosh has been part of SAP MDG implementation projects since 2013.
Antony John Isacc is a principal architect for SAP America with a consulting focus in enterprise information management solutions. Antony has more than 12 years of SAP experience and has helped many SAP customers implement master data solutions. He has extensive technical and functional experience with master data management, business process management, user interface frameworks, and various programming languages. He is a certified architect and has a master's degree in information technology and management from Carnegie Mellon University.
Rajani Khambhampati joined SAP in 2007 and is a principal architect with the DBS team at SAP America. He has more than 14 years of experience in implementing SAP solutions, with 12 years dedicated to SAP's master data management solutions. His consulting experience includes helping several customers in the areas of solution architecture, enabling master data governance processes, and implementing master data management solutions, including SAP MDG. 
David Quirk is a senior director in the SAP EIM solution management team. He has been working in the information management field for many years, and, in his current role, his various responsibilities include formulating SAP EIM's vision and strategy and launching new products. David has been working with SAP software for 25 years in a variety of different roles. Prior to his current position, David worked as an implementation consultant with the SAP MDG solution. He was one of the first consultants to bring a customer live on SAP MDG and still maintains close ties to SAP MDG customers, implementations, and sales cycles.All authors have chosen to donate their royalties from this book to Doctors Without Borders.







Index

↓A  ↓B  ↓C  ↓D  ↓E  ↓F  ↓G  ↓H  ↓I  ↓K  ↓L  ↓M  ↓N  ↓O  ↓P  ↓Q  ↓R  ↓S  ↓T  ↓U  ↓V  ↓W  
A ⇑
ABAP Dictionary [→ Section 3.1]
ABAP object-oriented programming (OO) [→ Section 6.4]
ABAP repository [→ Section 11.3]
ABAP Workbench [→ Section 14.2] [→ Section 14.3]
Account replication [→ Section 7.4]
SOA messages [→ Section 7.4]
Activation [→ Section 3.1] [→ Section 16.2]
configuration [→ Section 16.2]
Active area [→ Section 3.1] [→ Section 13.1]
checks [→ Section 13.1]
Ad hoc replication [→ Section 7.1]
Adapters [→ Section 16.2]
business partners [→ Section 16.2]
material objects [→ Section 16.2]
Address standardization [→ Section 6.4]
leveraging SAP DQM [→ Section 6.4]
Agent determination logic [→ Section 12.3]
ALE-based replication [→ Section 7.3]
Analytics [→ Section 8.1]
Analyze log tool [→ Section 7.6]
Application building block ID (ABBID) [→ Section 4.2]
Application context API [→ Section 10.1]
Application framework [→ Section 6.3]
Application Link Enabling (ALE) [→ Section 9.1] [→ Section 2.3] [→ Section 12.3]
Application log [→ Section 4.2] [→ Section 7.6]
Application parameters [→ Section 13.3]
Application programming interfaces (APIs) [→ Section 10.1] [→ Section 13.2] [→ Section 14.4]
Approve Master Data/Extended app [→ Section 11.2]
Architecture and metadata management [→ Section 1.3]
Attributes [→ Section 3.1] [→ Section 13.2] [→ Section 13.2]
adding to entities [→ Section 13.2]
dependencies [→ Section 13.2]
properties [→ Section 3.1]
Audit trails [→ Section 16.2]
Authorization objects [→ Section 14.2] [→ Section 14.2] [→ Section 14.2]
fields [→ Section 14.2]
B ⇑
Background RFC (bgRFC) [→ Section 16.2] [→ Section 16.2]
Best record calculation [→ Section 16.2]
properties [→ Section 16.2]
rules [→ Section 16.2]
Bill of materials (BOM) [→ Section 10.2]
BOL and GenIL layer integration [→ Section 4.2]
BRFplus [→ Section 5.2] [→ Section 6.3] [→ Section 5.5] [→ Section 5.5] [→ Section 16.2] [→ Section 12.3] [→ Section 16.2]
data objects [→ Section 6.3]
navigation [→ Section 6.3]
rule engine [→ Section 6.3]
rule-based workflows [→ Section 5.5]
rules [→ Section 6.3] [→ Section 16.2] [→ Section 16.2]
Business activities [→ Section 5.2]
create new [→ Section 14.1]
determination [→ Section 14.1]
linked [→ Section 5.2]
UI applications [→ Section 5.2]
Business Add-Ins (BAdIs) [→ Section 4.2] [→ Section 4.2] [→ Section 12.3]
data quality and search [→ Section 6.3]
workflows [→ Section 5.5]
Business Address Services (BAS) [→ Section 16.2]
fuzzy search [→ Section 6.1]
Business application programming interfaces (BAPIs) [→ Section 10.3]
Business case [→ Section 1.2]
Business Configure Sets (BC Sets) [→ Section 4.2] [→ Section 2.3] [→ Section 2.3] [→ Section 2.3] [→ Section 11.2] [→ Section 16.2] [→ Section 16.2]
Customizing synchronization [→ Section 2.3]
Business Context Viewer (BCV) [→ Section 8.1] [→ Section 4.2] [→ Section 5.3]
side panels [→ Section 5.3]
Business intelligence [→ Section 8.1]
client [→ Section 8.1]
embedded content [→ Section 8.1]
finance reports [→ Section 8.1]
SAPMDG deployment [→ Section 2.3]
Business Object Layer (BOL) [→ Section 4.2] [→ Section 13.2] [→ Section 13.3]
Business object type 
codes [→ Section 3.1] [→ Section 13.1]
entity type [→ Section 3.1]
Business objects [→ Section 7.1] [→ Section 13.1] [→ Section 13.2] [→ Section 14.4]
code [→ Section 13.2]
consolidation [→ Section 16.2]
create new [→ Section 14.1]
criteria [→ Section 13.1]
define/assign [→ Section 7.1]
entity types [→ Section 7.1]
filter objects [→ Section 7.1]
Business partner [→ Section 2.4] [→ Section 16.2]
category [→ Section 2.4]
change request types [→ Section 5.3]
group [→ Section 2.4]
group hierarchy [→ Section 2.4]
hierarchy [→ Section 3.2]
relationship [→ Section 2.4]
role [→ Section 2.4]
role category [→ Section 2.4] [→ Section 2.4]
workflow template [→ Section 5.5]
Business partner data model [→ Section 3.2] [→ Section 3.2] [→ Section 3.2]
entity types [→ Section 3.2]
governace scope [→ Section 5.1]
hierarchies [→ Section 3.2]
Business partner governance [→ Section 5.3]
UIs [→ Section 4.2]
Business partner screening [→ Section 6.4]
SAP Fraud Management [→ Section 6.4]
Business partner type 
group [→ Section 5.3]
organization [→ Section 5.3]
person [→ Section 5.3]
Business requirements [→ Section 16.2]
Business rules [→ Section 6.3] [→ Section 15.3]
Business systems 
configuration [→ Section 7.1]
data replication framework [→ Section 7.1]
C ⇑
Calculation views [→ Section 8.2]
Central Finance [→ Section 10.2]
Central governance [→ Section 2.1] [→ Section 2.2]
use case [→ Section 1.5]
Central master data scenarios [→ Section 5.3]
Centralized master data system [→ Section 7.1]
Change application [→ Section 4.2]
Change pointers [→ Section 7.6]
Change request [→ Section 4.2]
Change request actions [→ Section 5.2] [→ Section 5.2]
Change request analytics [→ Section 8.2]
Change request header [→ Section 5.2]
Change request number [→ Section 2.2]
Change request process [→ Section 5.2] [→ Section 5.2]
setup [→ Section 5.2]
UI determination [→ Section 5.2]
Change request step types [→ Section 5.2]
Change request steps [→ Section 5.2]
checks [→ Section 5.2]
configuration [→ Section 5.2] [→ Section 5.2]
options [→ Section 5.2]
properties [→ Section 5.2] [→ Section 5.2]
Change request types [→ Section 5.2] [→ Section 5.2] [→ Section 5.4] [→ Section 14.1] [→ Section 14.1]
create [→ Section 14.1]
duplicate checks [→ Section 6.4]
financial controlling [→ Section 5.3]
financial governance [→ Section 5.3]
properties [→ Section 5.2]
SLAs [→ Section 5.2]
Change request UIBB (CRUIBB) [→ Section 4.2] [→ Section 12.3] [→ Section 13.3]
Change requests [→ Section 3.1] [→ Section 8.1] [→ Section 5.2] [→ Section 5.2] [→ Section 2.2] [→ Section 14.1] [→ Section 10.1] [→ Section 10.1] [→ Section 15.1] [→ Section 15.2]
change document-based [→ Section 8.2]
failed [→ Section 15.4]
notes [→ Section 5.2]
object-based [→ Section 8.2]
statuses [→ Section 5.2]
tables [→ Section 8.2]
workflow-based [→ Section 8.2]
Change scenario [→ Section 3.1]
Changes 
highlighting [→ Section 15.3]
reschedule [→ Section 15.1]
Check customizing [→ Section 3.1]
Check table [→ Section 13.2]
Chip [→ Section 14.2]
Class Builder [→ Section 14.3]
Cleansing case [→ Section 4.2]
Client copy [→ Section 7.1]
Code lists [→ Section 6.3]
Co-deployment [→ Section 2.3] [→ Section 2.3] [→ Section 2.3] [→ Section 2.3]
initial build [→ Section 2.3]
restrictions [→ Section 2.3]
Communication channels [→ Section 7.1]
Company code [→ Section 13.2]
Company replication [→ Section 7.4]
Compare data model [→ Section 3.1]
Component.js [→ Section 11.3]
Computing Center Management System (CCMS) [→ Section 7.6] [→ Section 15.4]
Conceptual data model [→ Section 13.2]
Configuration Workbench [→ Section 3.1]
Connectors [→ Section 12.4]
Consistency check [→ Section 16.2]
Consolidation [→ Section 2.2] [→ Section 16.1]
analytics [→ Section 2.1]
initial load [→ Section 2.1]
mergers or acquisitions [→ Section 2.1]
Contact person 
activation [→ Section 2.4]
assignment [→ Section 2.4] [→ Section 2.4]
Content management [→ Section 1.3]
Content management portfolio [→ Section 1.4]
key solutions [→ Section 1.4]
Context parameters [→ Section 12.3]
Context-based adaptations (CBAs) [→ Section 12.2] [→ Section 12.2]
Control file [→ Section 16.3]
Controlling area [→ Section 13.2]
Convenience APIs [→ Section 10.1] [→ Section 15.4]
Core Data Services (CDS) views [→ Section 8.2]
Cost center [→ Section 2.4]
Cost center replication [→ Section 7.4]
Cost element [→ Section 2.4]
Cost element replication [→ Section 7.4]
Create application [→ Section 4.2]
Create scenario [→ Section 3.1]
Create, read, update, delete (CRUD) operations [→ Section 5.1] [→ Section 5.2] [→ Section 10.1] [→ Section 11.3]
Cross-application navigation [→ Section 14.1]
CSV Files [→ Section 16.3]
Custom applications [→ Section 13.1] [→ Section 14.1]
security and roles [→ Section 14.2]
Custom data models [→ Section 8.1]
create [→ Section 13.2]
Custom domains [→ Section 2.4]
Custom object framework [→ Section 13.1] [→ Section 13.3]
Custom objects [→ Section 1.5] [→ Section 14.2]
Custom rules [→ Section 6.3]
Custom solution [→ Section 2.3]
Custom theme [→ Section 11.3]
Customer master [→ Section 5.3] [→ Section 2.4]
change request types [→ Section 5.3]
client maintenance [→ Section 10.2]
Customer master data [→ Section 1.2]
Customer master governance [→ Section 5.3]
Customer vendor integration (CVI) [→ Section 3.2] [→ Section 2.4] [→ Section 12.1]
business partner [→ Section 2.4]
vendor integration [→ Section 2.4]
Customer workflow templates [→ Section 5.5]
agent determination [→ Section 5.5]
design [→ Section 5.5]
Customer, supplier, and business partner replication [→ Section 7.3]
IDoc messages [→ Section 7.3]
Customizing configurations [→ Section 2.3]
Customizing data [→ Section 2.3] [→ Section 2.3] [→ Section 2.3]
Customizing Distribution [→ Section 2.3] [→ Section 2.3]
creating [→ Section 2.3]
monitoring [→ Section 2.3]
RFCs [→ Section 2.3]
Customizing includes [→ Section 3.1]
Customizing layer [→ Section 12.2]
Customizing Scout [→ Section 2.3] [→ Section 2.3] [→ Section 2.3]
RFCs [→ Section 2.3]
Customizing synchronization [→ Section 2.3]
ALE-based [→ Section 2.3]
SAP Solution Manager-based [→ Section 2.3]
D ⇑
Data archiving [→ Section 1.4]
Data consistency [→ Section 16.2]
Data consolidation [→ Section 1.5]
Data conversion [→ Section 9.1]
BAdIs [→ Section 9.1]
Data Dictionary [→ Section 6.1] [→ Section 3.1] [→ Section 7.1]
Data domains [→ Section 2.4]
Data enhancement [→ Section 12.3]
Data enrichment [→ Section 5.2] [→ Section 6.4]
Data enrichment integration options [→ Section 6.4]
SAP Data Quality Management [→ Section 6.4]
third party tools [→ Section 6.4]
Data enrichment process [→ Section 5.2]
Data export framework [→ Section 9.1]
Data extraction 
from SAP ERP [→ Section 9.1]
Transaction MDMGX-based [→ Section 9.1]
Data import [→ Section 15.2]
Data import framework [→ Section 9.1] [→ Section 9.2]
Data import process [→ Section 5.4]
change request types [→ Section 5.4]
main tasks [→ Section 9.2]
Data import/export framework [→ Section 15.2] [→ Section 15.2]
Data integration [→ Section 1.3]
Data load [→ Section 15.2] [→ Section 16.3]
active area [→ Section 9.1]
non-SAP system [→ Section 16.3]
staging area [→ Section 9.1]
Data migration [→ Section 9.1]
considerations [→ Section 9.1]
governance [→ Section 9.1]
hub vs. co-deployed [→ Section 9.1]
implementation approach [→ Section 9.1]
recommendations [→ Section 9.1]
strategies [→ Section 9.2]
use cases [→ Section 9.1]
Data modeling [→ Section 3.1] [→ Section 3.1] [→ Section 13.1]
checks [→ Section 6.3]
introduction [→ Section 3.1]
tools [→ Section 13.1]
Data model-related configurations [→ Section 3.1]
Data models [→ Section 3.1] [→ Section 3.1] [→ Section 10.1] [→ Section 12.4] [→ Section 13.3]
add new entities [→ Section 12.1]
adding attributes [→ Section 12.1]
adding custom fields [→ Section 12.1]
adding existing fields [→ Section 12.1]
attributes [→ Section 13.2]
create new [→ Section 13.2]
custom [→ Section 13.1]
extension [→ Section 11.3]
extensions [→ Section 12.1]
filtering [→ Section 12.3] [→ Section 12.3]
generated tables [→ Section 3.1]
reports [→ Section 3.1]
structures [→ Section 3.1]
Data monitoring [→ Section 1.1] [→ Section 10.2]
Data privacy regulations [→ Section 1.4]
Data profiling [→ Section 1.1]
Data provider class (DPC) [→ Section 11.3]
Data quality [→ Section 1.3] [→ Section 16.2]
Data quality and search [→ Section 6.1]
Data quality checks [→ Section 16.2]
Data quality connector [→ Section 6.2]
Data quality remediation [→ Section 6.2] [→ Section 10.2]
Data quality rules [→ Section 5.2]
Data quality scorecards [→ Section 10.2]
Data quality solution integrations [→ Section 2.2]
Data quality tool [→ Section 6.2]
Data replication [→ Section 2.2] [→ Section 14.1] [→ Section 15.4] [→ Section 14.4]
BAdIs [→ Section 12.3]
non-SAP systems [→ Section 7.5]
settings [→ Section 14.4]
target system [→ Section 14.4]
Data replication framework [→ Section 7.1] [→ Section 7.6] [→ Section 14.1] [→ Section 12.3]
building blocks [→ Section 7.1]
components [→ Section 7.1]
configuration objects [→ Section 7.1] [→ Section 7.1]
custom settings [→ Section 7.1]
customizing check [→ Section 7.6]
operations [→ Section 7.6]
replication modes [→ Section 7.1]
settings [→ Section 14.4]
Data replication trigger [→ Section 15.3]
Data transfer directories [→ Section 9.2]
Data virus scan [→ Section 15.3]
Database search [→ Section 12.4]
Deep-copy [→ Section 12.2]
Define filter criteria [→ Section 4.2]
Delete data model [→ Section 3.1]
Delete replication log [→ Section 7.6]
Delete replication status [→ Section 7.6]
Direct/automatic replication [→ Section 7.1]
Display change documents [→ Section 4.2]
Display change requests [→ Section 4.2]
Display object replication status [→ Section 7.6]
Distribution monitor [→ Section 4.2] [→ Section 15.1]
Distribution types [→ Section 2.3]
Domain-specific UI applications [→ Section 4.2] [→ Section 4.2]
DPC source [→ Section 11.3]
Duplicate check [→ Section 6.2] [→ Section 6.4]
best practices [→ Section 6.2]
configurations [→ Section 6.2]
hybrid approach [→ Section 6.2]
process modeling configuration [→ Section 6.2]
search and duplicate check [→ Section 6.2]
Duplicate records [→ Section 6.2]
reasons [→ Section 6.2]
Dynamic GenIL objects [→ Section 4.2]
E ⇑
Edit data model [→ Section 3.1]
Edition comparison [→ Section 4.2]
Edition management [→ Section 13.2]
Edition type [→ Section 5.2]
Edition-based process [→ Section 5.2]
Editions [→ Section 5.2] [→ Section 15.1]
analysis [→ Section 15.1]
comparing [→ Section 15.1]
create new [→ Section 15.1]
defining [→ Section 5.2]
guidelines [→ Section 15.1]
monitoring [→ Section 15.1]
releasing [→ Section 15.1]
Engineering change record (ECR) [→ Section 10.2]
Enrichment adapters [→ Section 2.2] [→ Section 6.4] [→ Section 10.3]
Enrichment feeder [→ Section 6.4]
Enrichment framework [→ Section 10.3]
Enrichment process [→ Section 16.2]
Enrichment spots [→ Section 6.4] [→ Section 10.3]
Enrichment UI [→ Section 6.4]
Enterprise asset management [→ Section 1.5]
Enterprise Information Management (EIM) [→ Section 1.1]
benefits and drivers [→ Section 1.2] [→ Section 1.2] [→ Section 1.2]
capabilities [→ Section 1.3]
cost savings [→ Section 1.2]
decision making [→ Section 1.2]
operational efficiency [→ Section 1.2]
portfolio [→ Section 1.4]
program [→ Section 1.1]
regulatory compliance [→ Section 1.2]
solutions [→ Section 1.4]
stages [→ Section 1.1] [→ Section 1.1]
strategy [→ Section 1.4]
Entities [→ Section 13.2] [→ Section 13.2] [→ Section 13.3]
Entity data model (EDM) [→ Section 11.3]
Entity Relationship Model (ERM) diagram [→ Section 3.1] [→ Section 13.2]
Entity type [→ Section 3.1] [→ Section 3.1] [→ Section 3.2] [→ Section 13.2]
authorization relevance [→ Section 3.1]
filtering [→ Section 12.3]
generation [→ Section 3.1]
keys [→ Section 3.1]
properties [→ Section 3.1]
type 1 [→ Section 3.1]
type 2 [→ Section 3.1]
type 3 [→ Section 3.1]
type 4 [→ Section 3.1]
Entity type properties [→ Section 5.2]
Error message [→ Section 13.2]
Exact search [→ Section 6.1]
Existence check [→ Section 3.1] [→ Section 13.2]
Explicit filters [→ Section 7.1]
complex filters [→ Section 7.1]
simple explicit filters [→ Section 7.1]
Extensibility [→ Section 12.1]
Extension logic [→ Section 11.3]
Extension point [→ Section 11.3]
Extension project [→ Section 11.3]
Extract, transform, and load (ETL) [→ Section 9.1] [→ Section 1.4] [→ Section 16.3]
F ⇑
Feeder class [→ Section 4.1] [→ Section 4.2] [→ Section 14.3] [→ Section 13.3]
File download [→ Section 9.2]
entity types [→ Section 9.2]
execute [→ Section 9.2]
file structure [→ Section 9.2]
selection [→ Section 9.2]
settings [→ Section 9.2]
File export [→ Section 15.2]
File export framework [→ Section 9.2]
File protocol [→ Section 7.5]
File repository server (FRS) extraction [→ Section 9.1]
File upload [→ Section 9.2] [→ Section 15.2]
entity type [→ Section 9.2]
execute [→ Section 9.2]
file structure [→ Section 9.2]
performance issues [→ Section 15.3]
prerequisites [→ Section 9.2]
upload settings [→ Section 9.2]
Filter objects [→ Section 7.1]
assign [→ Section 14.4]
business objects [→ Section 7.1]
define [→ Section 14.4]
defining [→ Section 7.1]
entity types [→ Section 7.1]
Filters [→ Section 7.1] [→ Section 14.4]
Finance master data object UIs [→ Section 4.2]
Financial accounting governance [→ Section 5.3] [→ Section 4.2] [→ Section 2.4]
change request types [→ Section 5.3]
Financial consolidation governance [→ Section 5.3] [→ Section 4.2] [→ Section 2.4]
change request types [→ Section 5.3]
Financial controlling governance [→ Section 5.3] [→ Section 4.2] [→ Section 2.4]
change request types [→ Section 5.3]
Financial domains [→ Section 4.2]
Financial master data [→ Section 5.3]
elements [→ Section 2.4]
objects [→ Section 5.2]
replication [→ Section 7.4]
Financials workflow templates [→ Section 5.5]
Flex entities [→ Section 12.1]
Flex mode [→ Section 3.1] [→ Section 13.1]
Flexible user interface designer (FLUID) [→ Section 4.1] [→ Section 4.1] [→ Section 12.2] [→ Section 14.3] [→ Section 13.3]
Floorplan applications [→ Section 4.2]
Floorplan Manager [→ Section 4.1] [→ Section 2.2] [→ Section 2.2] [→ Section 4.2] [→ Section 15.3] [→ Section 14.3] [→ Section 13.3] [→ Section 13.3]
event [→ Section 13.3]
predefined layouts [→ Section 4.1]
translation [→ Section 14.3]
UIs [→ Section 12.2]
wiring [→ Section 13.3]
Floorplan Manager text tool [→ Section 14.3]
Floorplan Manager Workbench [→ Section 12.2]
Floorplan Manager-SPI integration (FSI) [→ Section 4.2]
Foreign key relationship [→ Section 3.1] [→ Section 13.2]
Form UIBB [→ Section 13.3]
Freestyle UIBBs [→ Section 4.1] [→ Section 4.1]
FTP [→ Section 9.1]
Fuzzy matching [→ Section 16.2]
parallelization [→ Section 16.2]
Fuzzy search [→ Section 6.1] [→ Section 16.2]
G ⇑
G/L account data [→ Section 2.4]
General Data Protection Regulation [→ Section 1.4]
Generic Interaction Layer (GenIL) [→ Section 4.2] [→ Section 12.1] [→ Section 13.2] [→ Section 13.3]
data models [→ Section 4.2]
model [→ Section 13.3]
models [→ Section 13.2]
objects [→ Section 4.2] [→ Section 4.2]
Generic UIBBs (GUIBBs) [→ Section 4.1] [→ Section 4.1] [→ Section 14.3] [→ Section 13.3]
Governance API [→ Section 10.1] [→ Section 15.4]
functions [→ Section 10.1]
Governance scope [→ Section 5.1]
change impact [→ Section 5.1]
Greenfield implementation [→ Section 2.3]
Guided activities floorplan (GAF) [→ Section 4.1] [→ Section 4.2]
H ⇑
Hadoop [→ Section 1.3]
Handler classes [→ Section 12.1]
Harmonization settings [→ Section 14.4]
Hierarchies [→ Section 3.1]
attributes [→ Section 3.1]
entity types [→ Section 3.1]
validity [→ Section 3.1]
Hierarchy leading entity [→ Section 13.2]
Hierarchy maintenance [→ Section 14.2]
Hierarchy nodes [→ Section 8.1]
Hierarchy processing [→ Section 4.2] [→ Section 5.4] [→ Section 5.4]
business partner IDs [→ Section 5.4]
change request types [→ Section 5.4]
interlocking [→ Section 5.4]
nodes [→ Section 5.4]
UI links [→ Section 5.4]
Hub deployment [→ Section 2.3]
initial build [→ Section 2.3]
Hub versus co-deployment [→ Section 2.3]
I ⇑
IDocs [→ Section 2.2]
message type [→ Section 14.4]
Implicit filters/checks [→ Section 7.1]
Improvement programs [→ Section 1.1]
Indexing [→ Section 12.4]
InfoObjects [→ Section 8.1]
InfoProviders [→ Section 8.1]
Information lifecycle management [→ Section 1.3]
Inherited rules [→ Section 6.3]
Initial build [→ Section 2.3]
Initial synchronization [→ Section 2.3]
In-place navigation [→ Section 14.1]
Interlocking concept [→ Section 5.4]
Intermediate Documents (IDocs) [→ Section 7.5]
Internet Communication Framework (ICF) services [→ Section 11.2]
Is Hierarchy Type? [→ Section 3.1]
K ⇑
Key assignment [→ Section 3.1]
prefixes [→ Section 3.1]
Key fields [→ Section 13.2]
Key mapping [→ Section 8.1] [→ Section 7.1] [→ Section 4.2] [→ Section 16.2] [→ Section 10.3] [→ Section 14.5]
initial loads [→ Section 9.2]
maintenance [→ Section 7.1]
search [→ Section 7.1]
tools [→ Section 7.1]
Key performance indicators (KPIs) [→ Section 8.1] [→ Section 4.2] [→ Section 16.1] [→ Section 11.1]
Key structures [→ Section 14.4]
L ⇑
Language-dependent texts [→ Section 12.3] [→ Section 13.3]
Launchpad designer [→ Section 11.3]
Lazy loading [→ Section 4.1]
Leading relationship [→ Section 13.2]
Legacy codes [→ Section 9.2]
Legacy system decommissioning [→ Section 1.4]
List UIBB [→ Section 13.3] [→ Section 13.3]
Locations [→ Section 13.2]
Logical actions [→ Section 5.2] [→ Section 14.1]
UI applications [→ Section 5.2]
Logical data model [→ Section 13.2]
M ⇑
Manual replication [→ Section 7.1]
Mappings [→ Section 3.1]
configuration [→ Section 3.1]
Mass change [→ Section 4.2]
Mass change process [→ Section 5.4]
Mass change request [→ Section 5.4] [→ Section 15.2]
steps [→ Section 15.2]
types [→ Section 5.4]
Mass loads [→ Section 15.2]
Mass processing [→ Section 15.2]
steps [→ Section 15.2]
Master data [→ Section 9.1] [→ Section 2.1] [→ Section 7.1] [→ Section 14.1] [→ Section 16.2]
create/change process [→ Section 3.1]
domains [→ Section 12.4]
import [→ Section 4.2]
maintenance [→ Section 14.2]
objects [→ Section 2.4] [→ Section 15.1]
record [→ Section 6.4]
stewardship tools [→ Section 2.1]
type [→ Section 9.1]
valid on date [→ Section 15.1]
validity date [→ Section 15.1]
volume [→ Section 9.1]
Master data governance 
best practices [→ Section 6.1]
scenario [→ Section 5.1]
Master Data Governance Consolidation app [→ Section 11.2]
Master Data Governance Mass Processing app [→ Section 11.2]
Master data management [→ Section 1.3] [→ Section 1.5]
solution [→ Section 2.1]
Master data steward [→ Section 3.1]
Match profiles [→ Section 6.1]
parameters [→ Section 6.1]
Matching [→ Section 16.2]
Material master [→ Section 5.3] [→ Section 5.3] [→ Section 2.4] [→ Section 16.2] [→ Section 16.2]
data model [→ Section 3.1] [→ Section 3.2] [→ Section 3.2]
governance UIs [→ Section 4.2]
processes [→ Section 2.4]
simplifications [→ Section 2.5]
views [→ Section 2.4]
workflow template [→ Section 5.5]
Material master replication [→ Section 7.2]
outbound implementations [→ Section 7.2]
segment filters [→ Section 7.2]
Material matching [→ Section 16.2]
Material objects 
adaptors [→ Section 16.2]
Message log [→ Section 8.2]
Metadata provider class [→ Section 4.2]
Model provider class (MPC) [→ Section 11.3]
Monitoring replication tool [→ Section 7.6]
web UI fields [→ Section 7.6]
Multiple object processing [→ Section 5.4]
Multiple-record processing [→ Section 5.4]
change request types [→ Section 5.4]
Multirecord processing [→ Section 4.2]
N ⇑
Networks [→ Section 13.1]
Nodes [→ Section 5.4]
Non-Customizing data 
synchronization [→ Section 2.3]
Nonharmonized master data [→ Section 9.2]
Nonuser agent decision table [→ Section 5.5] [→ Section 5.5]
Normalization [→ Section 16.2]
Number assignment 
business partner to customer [→ Section 2.4]
business partner to vendor [→ Section 2.4]
O ⇑
Object ID types [→ Section 7.1]
Object identifier [→ Section 14.4] [→ Section 14.4]
Object identifier type code [→ Section 14.4] [→ Section 14.5]
Object identifiers [→ Section 7.1] [→ Section 7.1]
key structures [→ Section 7.1]
Object instance floorplan (OIF) [→ Section 4.1]
Object nodes [→ Section 7.1] [→ Section 14.5]
Object type code [→ Section 12.3]
Ongoing synchronization [→ Section 2.3]
Open Data Protocol (OData) Services [→ Section 8.2] [→ Section 11.1]
extension use cases [→ Section 11.3]
redefinition steps [→ Section 11.3]
Operational Data Provisioning (ODP) [→ Section 12.4]
Operational efficiency [→ Section 1.2]
Outbound controller [→ Section 7.1] [→ Section 7.6]
Outbound implementations [→ Section 7.1] [→ Section 14.4] [→ Section 14.4]
class [→ Section 14.4]
configurations [→ Section 7.1]
create [→ Section 14.4]
enhance default settings [→ Section 7.1]
functions [→ Section 7.1]
outbound parameters [→ Section 7.1]
parameters [→ Section 7.1] [→ Section 7.1]
Overview page floorplan (OVP) [→ Section 4.1] [→ Section 4.2] [→ Section 14.3]
P ⇑
Package groups [→ Section 3.1]
Page Builder [→ Section 14.2]
Parallel processing [→ Section 15.3]
Parallel workflow paths [→ Section 12.3]
Physical data model [→ Section 13.2]
Plants [→ Section 13.2]
Point of impact [→ Section 1.1]
Poor master data quality [→ Section 6.1]
challenges [→ Section 6.1]
Postprocessing Office [→ Section 2.4]
Print forms [→ Section 4.2]
Process control [→ Section 10.1]
Process matching [→ Section 16.2]
Process model 
configuration [→ Section 16.2]
table view [→ Section 16.2]
Process modeling [→ Section 5.1] [→ Section 14.1]
Process patterns [→ Section 5.5]
Processing time [→ Section 8.1] [→ Section 4.2]
Profit center [→ Section 2.4] [→ Section 13.2]
Profit center replication [→ Section 7.4]
Project definition [→ Section 13.1] [→ Section 14.1] [→ Section 13.2] [→ Section 13.2] [→ Section 13.2] [→ Section 14.4] [→ Section 13.3]
ID [→ Section 13.2]
Purchasing [→ Section 2.4]
Q ⇑
Quick activities floorplan (QAF) [→ Section 4.1]
R ⇑
Recurring loads [→ Section 15.2]
Referencing relationship [→ Section 13.2]
Regulatory compliance [→ Section 1.2]
Relationships [→ Section 3.1]
Remote client key search [→ Section 6.1]
Remote function call (RFC) [→ Section 12.4]
Remote function call (RFC) connection [→ Section 8.1]
Replicate by object selection [→ Section 4.2]
Replicate by replication model [→ Section 4.2]
Replication models [→ Section 7.1] [→ Section 7.1] [→ Section 14.4]
activation [→ Section 14.4]
defining [→ Section 7.1]
outbound implementations [→ Section 7.1]
outbound parameters [→ Section 7.1]
target systems [→ Section 7.1]
Replication modes [→ Section 7.1]
Replication timing [→ Section 15.1]
Request Business Partner app [→ Section 11.2]
Request Customer app [→ Section 11.2]
Request Customer Change app [→ Section 11.2]
Request New Cost Center app [→ Section 11.2]
Request New Material app [→ Section 11.2]
Request Profit Center app [→ Section 11.2]
Request Supplier app [→ Section 11.2]
Requester roles [→ Section 4.2]
RESTful APIs [→ Section 10.2]
Retail and fashion management [→ Section 1.5]
Retention management [→ Section 1.4]
Reuse active area [→ Section 3.1] [→ Section 13.1] [→ Section 14.2] [→ Section 13.2]
Reuse class [→ Section 13.1]
Reuse entities [→ Section 12.1]
Reuse mode [→ Section 13.1]
Reuse UIBBs (RUIBBs) [→ Section 4.1] [→ Section 4.1]
RFC destination [→ Section 16.2]
Roles [→ Section 14.2]
authorization [→ Section 14.2]
custom [→ Section 14.2]
customer/FI customer [→ Section 2.4] [→ Section 2.4]
translation [→ Section 14.3]
vendor/FI vendor [→ Section 2.4] [→ Section 2.4]
Root object [→ Section 13.2]
Root-cause analysis [→ Section 15.4]
Rule-based workflows [→ Section 5.5] [→ Section 12.3]
change request process [→ Section 5.5]
designing [→ Section 5.5] [→ Section 5.5]
process patterns [→ Section 5.5] [→ Section 5.5]
Rules [→ Section 6.3]
Rules/data validation [→ Section 2.2]
S ⇑
SAP Agile Data Preparation [→ Section 1.4] [→ Section 1.4]
key features [→ Section 1.4]
SAP Ariba [→ Section 10.2]
SAP Business Client [→ Section 4.2] [→ Section 2.2] [→ Section 14.2] [→ Section 14.3]
SAP Business Suite [→ Section 4.2] [→ Section 15.1] [→ Section 13.1]
SAP Business Warehouse (SAP BW) [→ Section 8.1] [→ Section 8.1]
SAP Business Workflow [→ Section 14.1]
SAP content management solutions [→ Section 1.4]
SAP Credit Management [→ Section 10.2]
SAP CRM [→ Section 10.2]
SAP Data Dictionary [→ Section 6.3]
SAP Data Quality Management (DQM) [→ Section 6.4]
SAP Data Services [→ Section 9.1] [→ Section 1.4]
capabilities [→ Section 1.4]
SAP Enterprise Architecture Explorer [→ Section 2.5]
SAP Enterprise Asset Management (SAP EAM) [→ Section 1.5]
SAP Enterprise Portal [→ Section 2.2]
SAP Enterprise Search [→ Section 6.1] [→ Section 12.1] [→ Section 12.4]
SAP ERP Financials (FI) [→ Section 10.2]
objects [→ Section 3.2]
SAP ERP master data tables [→ Section 3.1]
SAP ERP Plant Maintenance [→ Section 1.5]
SAP ERP Project System [→ Section 13.1]
SAP ERP tables [→ Section 12.1]
SAP Extended Enterprise Content Management (SAP Extended ECM) by OpenText [→ Section 1.4]
SAP Fiori 
architecture [→ Section 11.1]
components [→ Section 11.3]
consolidation [→ Section 16.2]
extensibility [→ Section 11.3]
overview [→ Section 11.1]
SAP MDG apps [→ Section 11.2]
SAP Fiori apps [→ Section 4.1] [→ Section 2.2] [→ Section 2.2] [→ Section 2.2] [→ Section 11.1]
enhancements [→ Section 11.3]
extension steps [→ Section 11.3]
SAP Fiori launchpad [→ Section 2.2] [→ Section 11.1]
design catalog [→ Section 11.3]
extension [→ Section 11.3]
SAP Fraud Management [→ Section 6.4]
SAP Gateway [→ Section 11.1]
SAP Gateway server [→ Section 11.3]
SAP Gateway Service Builder [→ Section 11.3]
SAP General Ledger (G/L) [→ Section 2.1] [→ Section 1.5] [→ Section 4.2]
SAP Global Trade Services (GTS) [→ Section 2.5]
SAP HANA [→ Section 1.4]
SAP HANA artifacts [→ Section 13.3]
SAP HANA fuzzy search [→ Section 16.2]
SAP HANA search [→ Section 6.1] [→ Section 6.1] [→ Section 12.4]
extensibility [→ Section 6.1]
flex entities [→ Section 6.1]
generating [→ Section 6.1]
setup [→ Section 6.1]
view [→ Section 13.3]
Web Dynpro application [→ Section 6.1]
SAP HANA smart data integration [→ Section 1.4]
SAP HANA smart data quality [→ Section 1.4] [→ Section 16.2] [→ Section 16.2]
SAP HANA Studio [→ Section 8.2] [→ Section 12.4] [→ Section 16.3] [→ Section 16.3]
SAP HANA views [→ Section 8.2] [→ Section 8.2]
SAP HANA-based analytics [→ Section 8.2]
SAP Hybris Product Content Management [→ Section 10.2]
SAP Information Lifecycle Management (SAP ILM) [→ Section 1.4]
SAP Information Steward [→ Section 1.4] [→ Section 10.2]
capabilities [→ Section 1.4]
SAP Landscape Transformation Replication Server (SLT) [→ Section 9.1] [→ Section 8.2] [→ Section 16.3]
SAP MDG [→ Section 2.1] [→ Section 4.1] [→ Section 7.1] [→ Section 1.5]
8.0 [→ Section 10.1]
analytics [→ Section 8.1]
APIs [→ Section 4.2]
architecture [→ Section 2.2]
BAdIs [→ Section 12.3]
business functions [→ Section 2.2]
change pointers [→ Section 12.3]
consolidation vs central governance [→ Section 1.5]
data conversion option [→ Section 9.1]
data enrichment framework [→ Section 6.4]
deployment [→ Section 2.1]
deployment options [→ Section 2.3] [→ Section 2.3]
editions [→ Section 15.1]
EIM [→ Section 1.1]
enterprise content [→ Section 1.5]
enterprise master data [→ Section 1.5]
extensibility [→ Section 12.1]
file upload/download [→ Section 9.2]
finance UI applications [→ Section 4.2]
foundation framework [→ Section 13.1]
governance scope [→ Section 5.1]
hierarchy [→ Section 13.2]
integration scenarios [→ Section 10.1]
integration with SAP solutions [→ Section 10.2]
languages [→ Section 14.3]
operational strategies [→ Section 15.1]
performance optimization [→ Section 15.3]
replication-related BAdIs [→ Section 12.3]
SAP HANA database [→ Section 2.3]
SAP PLM integration [→ Section 10.2]
simple checks [→ Section 6.3]
solution components [→ Section 2.2]
third-party integration [→ Section 10.3]
troubleshooting [→ Section 15.4]
UI navigation [→ Section 14.1]
UIs [→ Section 2.2]
use cases [→ Section 2.1]
workflow BAdIs [→ Section 12.3]
SAP MDG communicator [→ Section 10.1] [→ Section 13.3] [→ Section 13.3] [→ Section 13.3]
SAP MDG hub [→ Section 2.3] [→ Section 5.3]
data migration [→ Section 9.1]
data replication [→ Section 7.1]
number range settings [→ Section 2.3]
SAP MDG UI [→ Section 4.1]
central governance [→ Section 2.2]
consolidation [→ Section 2.2]
framework [→ Section 4.2]
SAP MDG, central governance [→ Section 6.1] [→ Section 12.1] [→ Section 15.2]
address standardization [→ Section 6.4]
analytics [→ Section 8.1]
data migration [→ Section 9.1]
duplicates [→ Section 6.2]
integrations [→ Section 6.4]
SAP MDG, consolidation 
adaptors [→ Section 16.2] [→ Section 16.2] [→ Section 16.2]
overview [→ Section 16.1]
prerequisites [→ Section 16.2]
process flow [→ Section 16.2]
process models [→ Section 16.2]
scope [→ Section 16.2]
security roles [→ Section 16.2]
services [→ Section 16.2]
transactions [→ Section 16.2]
use cases [→ Section 16.1]
SAP MDG, Financials [→ Section 7.4] [→ Section 2.4]
object extraction [→ Section 9.1]
objects [→ Section 3.1]
SAP MDG, mass processing [→ Section 16.2]
SAP MDG, Product [→ Section 10.2] [→ Section 10.2]
SAP MDG, Supplier [→ Section 10.2] [→ Section 10.2]
SAP NetWeaver MDM extractor [→ Section 9.1]
SAP Notes for SAP MDG [→ Section 2.3]
SAP Process Integration (SAP PI) [→ Section 10.2]
SAP Product Lifecycle Management (SAP PLM) [→ Section 10.2]
SAP S/4HANA [→ Section 5.3] [→ Section 2.5] [→ Section 13.1] [→ Section 10.2]
architecture and deployment options [→ Section 2.5]
master data domains [→ Section 2.5]
SAP S/4HANA Finance [→ Section 10.2]
SAP Screen Personas [→ Section 12.2]
SAP Smart Business apps [→ Section 11.1]
SAP Smart Business Cockpits [→ Section 8.2]
SAP Smart Business content [→ Section 8.1]
SAP Solution Extensions [→ Section 1.4]
SAP Solution Manager-based synchronization [→ Section 2.3] [→ Section 2.3]
setup [→ Section 2.3]
SAP Supplier Lifecycle Management [→ Section 10.2]
SAP Supplier Relationship Management (SAP SRM) [→ Section 10.2]
SAP Supply Chain Management (SAP SCM) [→ Section 10.2]
SAP Theme Designer [→ Section 11.3]
SAP Transport Management System (TMS) [→ Section 2.3]
SAP Web IDE [→ Section 11.3] [→ Section 11.3]
SAPUI5 [→ Section 11.3]
Scope governance 
entity level [→ Section 5.2]
Search applications [→ Section 6.1] [→ Section 4.2] [→ Section 13.3]
Search configuration [→ Section 4.2]
Search control [→ Section 13.3]
Search functionality [→ Section 6.1]
BAdIs [→ Section 12.4]
business activities [→ Section 6.1]
Search helps [→ Section 6.1] [→ Section 3.1] [→ Section 3.1] [→ Section 12.2] [→ Section 13.3]
Search object connector [→ Section 6.3]
Search template [→ Section 13.3]
Segment filters [→ Section 7.1]
Semi-automatic synchronization [→ Section 2.3]
Service level agreements (SLAs) [→ Section 8.1] [→ Section 1.1] [→ Section 4.2]
Service Mapping Tool (SMT) [→ Section 3.1] [→ Section 12.1] [→ Section 14.4]
Service Provider Infrastructure (SPI) [→ Section 4.2]
framework [→ Section 13.3]
Service-oriented architecture (SOA) [→ Section 9.1] [→ Section 10.2]
Single Object Maintenance (SOM) UI [→ Section 10.1] [→ Section 14.1] [→ Section 13.3]
configuration [→ Section 13.3]
Single-record processing [→ Section 5.3]
Single-value decision table [→ Section 5.5]
SMT mapping [→ Section 12.1]
SOA-based replication [→ Section 7.3]
Software component installation [→ Section 2.2]
Source tables [→ Section 16.3]
SPI Metadata Browser [→ Section 4.2]
Staging area [→ Section 3.1] [→ Section 2.2] [→ Section 13.1]
Staging/active areas [→ Section 9.1]
Staging-active concept [→ Section 6.1]
Standard data models [→ Section 3.2] [→ Section 10.3]
Standard financial (0G) data model [→ Section 3.2]
Standard UI configurations [→ Section 4.2]
Standardization [→ Section 16.2]
parallelization [→ Section 16.2]
Status logs [→ Section 15.3]
Status report [→ Section 8.1]
Storage type [→ Section 3.1] [→ Section 3.1]
Strategic benefits [→ Section 1.2]
SU type [→ Section 13.2]
Subnodes [→ Section 5.4]
Supplier client maintenance [→ Section 10.2]
Supplier master [→ Section 5.3]
change request types [→ Section 5.3]
governance [→ Section 5.3]
Supplier workflow templates [→ Section 5.5]
agent determination [→ Section 5.5]
design [→ Section 5.5]
Synchronization groups [→ Section 2.3]
Synchronization objects [→ Section 2.3] [→ Section 2.4]
Synchronized hierarchy [→ Section 3.1]
System calls [→ Section 12.3]
System Landscape Directory (SLD) [→ Section 14.4]
business systems [→ Section 7.1]
T ⇑
Tactical benefits [→ Section 1.2]
Transaction handler class [→ Section 13.3]
Target tables [→ Section 7.4]
Technical UIBB [→ Section 13.3]
Text data processing [→ Section 1.4]
Track My Requests app [→ Section 11.2]
Transaction 
/IWFND/MAINT_SERVICE [→ Section 11.3]
/UI2/FLP [→ Section 11.2] [→ Section 11.3]
/UI2/NWBC_CFG_CUST [→ Section 11.3]
/UI2/NWBC_CFG_SAP [→ Section 11.3]
/UI2/SEMOBJ [→ Section 11.3]
/UI2/SEMOBJ_SAP [→ Section 11.3]
/UI5/THEME_DESIGNER [→ Section 11.3]
BRF+ [→ Section 16.2]
BSANLY_BI_ACTIVATION [→ Section 8.1]
CG3Z [→ Section 9.2]
CJ20N [→ Section 14.1]
CREATE_MASS_ID_MAP [→ Section 9.2]
DRFCC [→ Section 7.6]
DRFF [→ Section 7.1] [→ Section 7.1] [→ Section 7.1] [→ Section 7.1] [→ Section 7.1] [→ Section 14.4]
DRFIMG [→ Section 14.4]
DRFLOG [→ Section 7.6] [→ Section 7.6]
DRFLOGDEL [→ Section 7.6] [→ Section 7.6] [→ Section 15.3]
DRFOUT [→ Section 7.1] [→ Section 7.1] [→ Section 7.6] [→ Section 15.3] [→ Section 15.3]
DRFRSD [→ Section 7.6]
DRFRSDEL [→ Section 7.6] [→ Section 15.3]
DTEXPORT [→ Section 9.1] [→ Section 4.2]
DTIMPORT [→ Section 4.2] [→ Section 5.4]
FILE [→ Section 9.2] [→ Section 9.2] [→ Section 7.1]
FPM_WB [→ Section 12.2]
GENIL_BOL_BROWSER. [→ Section 4.2]
GENIL_MODEL_BROWSER [→ Section 4.2] [→ Section 4.2]
LPD_CUST [→ Section 4.2] [→ Section 12.2] [→ Section 14.2] [→ Section 11.3]
LTR [→ Section 16.3]
MDB [→ Section 4.2]
MDCIMG [→ Section 2.3]
MDG_ADJUST_IDM [→ Section 7.1]
MDG_ANALYSE_IDM [→ Section 7.1] [→ Section 9.2]
MDG_BS_BP_CR_BCSET4 [→ Section 5.3]
MDG_BS_MAT_CR_BCST06 [→ Section 5.3]
MDG_BS_SUP_CR_BCSET7 [→ Section 5.3]
MDG_BS_VL_CR_BCSET4 [→ Section 5.3]
MDG_FIN_BCSET_CR_06 [→ Section 5.3]
MDG_GEN_HBA_CR [→ Section 8.2]
MDG_GEN_HBA_CR_EXT [→ Section 8.2]
MDG_HDB_GEN_UI [→ Section 12.4]
MDG_KM_MAINTAIN [→ Section 7.1]
MDGCPDEL [→ Section 15.3]
MDGIMG [→ Section 4.1] [→ Section 9.1] [→ Section 3.1] [→ Section 2.3] [→ Section 12.1] [→ Section 13.1] [→ Section 12.2] [→ Section 10.2]
MDMGX [→ Section 9.1] [→ Section 9.1] [→ Section 9.1] [→ Section 9.1]
MGIMG [→ Section 4.2]
NWBC [→ Section 6.1] [→ Section 2.2] [→ Section 9.2]
PFCG [→ Section 11.3]
RSA5 [→ Section 8.1]
RSOR [→ Section 8.1]
SCDT_FETCH [→ Section 2.3]
SCDT_GROUPS [→ Section 2.3] [→ Section 2.3]
SCDT_LOG [→ Section 2.3]
SCDT_MAPPING [→ Section 2.3] [→ Section 2.3]
SCDT_SETUP [→ Section 2.3] [→ Section 2.3]
SCOUT [→ Section 2.3]
SCPR20 [→ Section 2.3]
SE10 [→ Section 6.1]
SE11 [→ Section 6.3]
SE24 [→ Section 14.3]
SE63 [→ Section 14.3] [→ Section 14.3]
SE80 [→ Section 6.1] [→ Section 4.2] [→ Section 14.2] [→ Section 14.3]
SE16N [→ Section 16.3]
SEGW [→ Section 11.3] [→ Section 11.3]
SFP [→ Section 4.2]
SFW5 [→ Section 2.2] [→ Section 2.3]
SICF [→ Section 2.3] [→ Section 16.2]
SLG1 [→ Section 7.1] [→ Section 9.2] [→ Section 7.6]
SM34 [→ Section 12.1]
SM59 [→ Section 7.1] [→ Section 6.4] [→ Section 6.4] [→ Section 6.4] [→ Section 2.3]
SOLAR_PROJECT_ADMIN [→ Section 2.3] [→ Section 2.3]
SPERS_MAINT [→ Section 12.2]
STC01 [→ Section 11.2]
SWE2 [→ Section 16.2]
SWU3 [→ Section 2.3]
USMD_RULE [→ Section 6.3]
Transaction control [→ Section 10.1]
Transactional data [→ Section 2.3]
Translation [→ Section 14.3]
Translation Editor [→ Section 14.3] [→ Section 14.3]
Transports [→ Section 2.3]
TREX [→ Section 8.1] [→ Section 12.4]
Troubleshooting [→ Section 15.4]
Type 1 entity [→ Section 14.1] [→ Section 13.2] [→ Section 13.2]
Type 3 entity [→ Section 13.2]
U ⇑
Ungoverned fields [→ Section 5.1]
Universal unique ID (UUID) [→ Section 9.2]
User agent decision table [→ Section 5.5]
User experience [→ Section 4.1]
User interface building blocks (UIBBs) [→ Section 4.1] [→ Section 12.2] [→ Section 15.3] [→ Section 14.3] [→ Section 13.3]
User interfaces (UI) [→ Section 4.1] [→ Section 2.2] [→ Section 1.4]
CBAs [→ Section 12.2]
configurations [→ Section 13.3]
copy application configuration [→ Section 12.2]
custom creation [→ Section 13.3]
custom object [→ Section 13.3]
customizing [→ Section 12.2]
design [→ Section 13.3]
develop [→ Section 13.3]
edit page [→ Section 13.3]
enhancement [→ Section 12.2]
extension [→ Section 11.3]
framework [→ Section 13.3]
main page [→ Section 13.3]
modeling [→ Section 4.1] [→ Section 13.1]
modeling metadata [→ Section 13.1]
modification [→ Section 12.2]
personalizing [→ Section 12.2]
search screen [→ Section 13.3]
Utopia [→ Section 1.5]
V ⇑
Validations [→ Section 16.2] [→ Section 16.2] [→ Section 16.2]
BAdI-based [→ Section 6.3]
Validity dates [→ Section 9.1]
Validity UIBBs [→ Section 4.2]
Valid-to date [→ Section 5.2]
Value drivers [→ Section 1.2]
Value lists [→ Section 14.6]
Value mapping [→ Section 7.1] [→ Section 16.2] [→ Section 10.3] [→ Section 14.6]
initial loads [→ Section 9.2]
Vendor account groups [→ Section 2.4]
Vendor integration [→ Section 2.4]
Vendor lifecycle [→ Section 7.1]
Vendor master [→ Section 2.4]
Vendor master data [→ Section 5.5]
Vendors [→ Section 7.1]
Version dependent hierarchy [→ Section 3.1]
VIP indicator [→ Section 2.4]
Virtual data models (VDMs) [→ Section 8.2]
W ⇑
WBS elements [→ Section 13.1] [→ Section 14.1] [→ Section 14.1] [→ Section 13.2] [→ Section 13.2]
attributes [→ Section 13.3]
create and change [→ Section 13.3]
Web Dynpro [→ Section 2.2] [→ Section 6.4] [→ Section 12.2] [→ Section 14.2] [→ Section 12.4] [→ Section 13.3]
components [→ Section 4.1]
UIBBs [→ Section 4.1]
Web Dynpro applications [→ Section 8.1]
business partner governance [→ Section 4.2]
finance object-related governance [→ Section 4.2]
master data processing [→ Section 4.2]
material master governance [→ Section 4.2]
Web services [→ Section 7.5]
Where-used list [→ Section 4.2]
Work breakdown structure (WBS) [→ Section 13.1]
business activities [→ Section 14.1]
conceptual data model [→ Section 13.2]
hierarchy [→ Section 13.2]
project definition [→ Section 13.1]
Workflow agents [→ Section 12.3]
Workflow Builder [→ Section 5.2]
Workflow decision tables [→ Section 12.3]
Workflow log [→ Section 4.2]
Workflow process modeling [→ Section 5.5]
Workflow templates [→ Section 2.2] [→ Section 5.5]
standard [→ Section 5.5]
Workflows [→ Section 12.3]
assign processors [→ Section 14.1]
settings [→ Section 14.1]
Worklist [→ Section 4.2]










Service Pages
The following sections contain notes on how you can contact us. In addition, you are
            provided with further recommendations on the customization of the screen layout for
            your e-book.
         
Praise and Criticism
We hope that you enjoyed reading this book. If it met your expectations, please do
            recommend it. If you think there is room for improvement, please get in touch with
            the editor of the book: Meagan White. We welcome every suggestion for improvement but, of course, also any praise! You
            can also share your reading experience via Twitter, Facebook, or email.
         
Supplements
If there are supplements available (sample code, exercise materials, lists, and so
            on), they will be provided in your online library and on the web catalog page for
            this book. You can directly navigate to this page using the following link: https://www.sap-press.com/4192. Should we learn about typos that alter the meaning or content errors, we will provide
            a list with corrections there, too.
         
Technical Issues
If you experience technical issues with your e-book or e-book account at SAP PRESS,
            please feel free to contact our reader service: support@rheinwerk-publishing.com.
         
Please note, however, that issues regarding the screen presentation of the book content
            are usually not caused by errors in the e-book document. Because nearly every reading
            device (computer, tablet, smartphone, e-book reader) interprets the EPUB or Mobi file
            format differently, it is unfortunately impossible to set up the e-book document in
            such a way that meets the requirements of all use cases.
         
In addition, not all reading devices provide the same text presentation functions
            and not all functions work properly. Finally, you as the user also define with your
            settings how the book content is displayed on the screen.
         
The EPUB format, as currently provided and handled by the device manufacturers, is
            actually primarily suitable for the display of mere text documents, such as novels.
            Difficulties arise as soon as technical text contains figures, tables, footnotes,
            marginal notes, or programming code. For more information, please refer to the section
            Notes on the Screen Presentation and the following section.
         
Should none of the recommended settings satisfy your layout requirements, we recommend
            that you use the PDF version of the book, which is available for download in your
            online library.
         
Recommendations for Screen Presentation and Navigation
We recommend using a sans-serif font, such as Arial or Seravek, and a low font size of approx. 30-40% in portrait format
            and 20-30% in landscape format. The background shouldn't be too bright.
         
Make use of the hyphenation option. If it doesn't work properly, align the text to the left margin. Otherwise,
            justify the text.
         
To perform searches in the e-book, the index of the book will reliably guide you to the really relevant
            pages of the book. If the index doesn't help, you can use the search function of your
            reading device.
         
Since it is available as a double-page spread in landscape format, the table of contents we've included probably gives a better overview of the content and the structure
            of the book than the corresponding function of your reading device. To enable you
            to easily open the table of contents anytime, it has been included as a separate entry
            in the device-generated table of contents.
         
If you want to zoom in on a figure, tap the respective figure once. By tapping once again, you return to the previous screen. If you tap twice (on the
            iPad), the figure is displayed in the original size and then has to be zoomed in to
            the desired size. If you tap once, the figure is directly zoomed in and displayed
            with a higher resolution.
         
For books that contain programming code, please note that the code lines may be wrapped incorrectly or displayed incompletely
            as of a certain font size. In case of doubt, please reduce the font size.
         
About Us and Our Program
The website http://www.sap-press.com provides detailed and first-hand information on our current publishing program. Here,
            you can also easily order all of our books and e-books. Information on Rheinwerk Publishing
            Inc. and additional contact options can also be found at http://www.sap-press.com.
         










Legal Notes
This section contains the detailed and legally binding usage conditions for this e-book.
Copyright Note
This publication is protected by copyright in its entirety. All usage and exploitation
            rights are reserved by the author and Rheinwerk Publishing; in particular the right
            of reproduction and the right of distribution, be it in printed or electronic form.
            © 2017 by Rheinwerk Publishing Inc., Boston (MA)

Your Rights as a User
You are entitled to use this e-book for personal purposes only. In particular, you
            may print the e-book for personal use or copy it as long as you store this copy on
            a device that is solely and personally used by yourself. You are not entitled to any
            other usage or exploitation.
         
In particular, it is not permitted to forward electronic or printed copies to third
            parties. Furthermore, it is not permitted to distribute the e-book on the Internet,
            in intranets, or in any other way or make it available to third parties. Any public
            exhibition, other publication, or any reproduction of the e-book beyond personal use
            are expressly prohibited. The aforementioned does not only apply to the e-book in
            its entirety but also to parts thereof (e.g., charts, pictures, tables, sections of
            text).
         
Copyright notes, brands, and other legal reservations as well as the digital watermark
            may not be removed from the e-book.
         
Digital Watermark
This e-book copy contains a digital watermark, a signature that indicates which person may use this copy.
         
If you, dear reader, are not this person, you are violating the copyright. So please
            refrain from using this e-book and inform us about this violation. A brief email to
            info@rheinwerk-publishing.com is sufficient. Thank you!
         
Trademarks
The common names, trade names, descriptions of goods, and so on used in this publication
            may be trademarks without special identification and subject to legal regulations
            as such.
         
All of the screenshots and graphics reproduced in this book are subject to copyright
            © SAP SE, Dietmar-Hopp-Allee 16, 69190 Walldorf, Germany. SAP, the SAP logo, ABAP,
            Ariba, ASAP, Concur, Concur ExpenseIt, Concur TripIt, Duet, SAP Adaptive Server Enterprise,
            SAP Advantage Database Server, SAP Afaria, SAP ArchiveLink, SAP Ariba, SAP Business
            ByDesign, SAP Business Explorer, SAP BusinessObjects, SAP BusinessObjects Explorer,
            SAP BusinessObjects Lumira, SAP BusinessObjects Roambi, SAP BusinessObjects Web Intelligence,
            SAP Business One, SAP Business Workflow, SAP Crystal Reports, SAP EarlyWatch, SAP
            Exchange Media (SAP XM), SAP Fieldglass, SAP Fiori, SAP Global Trade Services (SAP
            GTS), SAP GoingLive, SAP HANA, SAP HANA Vora, SAP Hybris, SAP Jam, SAP MaxAttention,
            SAP MaxDB, SAP NetWeaver, SAP PartnerEdge, SAPPHIRE NOW, SAP PowerBuilder, SAP PowerDesigner,
            SAP R/2, SAP R/3, SAP Replication Server, SAP S/4HANA, SAP SQL Anywhere, SAP Strategic
            Enterprise Management (SAP SEM), SAP SuccessFactors, The Best-Run Businesses Run SAP,
            TwoGo are registered or unregistered trademarks of SAP SE, Walldorf, Germany.
         
Limitation of Liability
Regardless of the care that has been taken in creating texts, figures, and programs,
            neither the publisher nor the author, editor, or translator assume any legal responsibility
            or any liability for possible errors and their consequences.
         










The Document Archive
The Document Archive contains all figures, tables, and footnotes, if any, for your
            convenience.
         











Figure 1.1    EIM Capabilities
         











Figure 1.2    SAP Data Services: Key Capabilities
         











Figure 1.3    SAP Information Steward Key Capabilities
         











Figure 1.4    SAP HANA Smart Data Integration and SAP HANA Smart Data Quality
         











Figure 1.5    SAP Agile Data Preparation: Key Features and Usage











Figure 1.6    SAP ILM Scenarios
         











Figure 1.7    SAP Content Management Solutions: Critical Component of an EIM Strategy
         











Figure 1.8    SAP Master Data Governance: Consolidation and Central Governance
         











Figure 2.1    SAP MDG, Central Governance
         











Figure 2.2    SAP MDG, Consolidation for Analytics
         











Figure 2.3    One-Time Consolidation
         











Figure 2.4    Hybrid Approach
         











Figure 2.5    Key SAP MDG Business Functions (SAP MDG 9.0)
         











Figure 2.6    SAP MDG Core Components
         











Figure 2.7    Floorplan Manager Look and Feel
         











Figure 2.8    SAP Fiori Look and Feel
         











Figure 2.9    SAP Business Client
         











Figure 2.10    Hub versus Co-Deployment Approach
         











Figure 2.11    SAP Solution Manager-Based Customizing Process for Ongoing Synchronization
         











Figure 2.12    Creation of the Synchronization Object
         











Figure 2.13    Synchronization Group
         











Figure 2.14    Synchronization Group: Insert Objects
         











Figure 2.15    Synchronization Group Hierarchy
         











Figure 2.16    Customizing Distribution
         











Figure 2.17    Transaction SCDT_LOG Selection Screen Options
         











Figure 2.18    Distribution Log Example
         











Figure 2.19    Customizing Scout: Comparing Customization across All System Roles in the System Landscape
         











Figure 2.20    Customizing Scout Comparison Based on Synchronization Group
         











Figure 2.21    Example of a Customizing Scout Comparison Result
         











Figure 2.22    Material Master Overview
         











Figure 2.23    Material Governance Homepage Screen
         











Figure 2.24    Business Partner Governance Screen
         











Figure 2.25    Customer Governance Screen
         











Figure 2.26    Supplier Governance Screen
         











Figure 2.27    Customer Vendor Integration: Business Partner 
         











Figure 2.28    Activation of Postprocessing Office Requests
         











Figure 2.29    Synchronization Options
         











Figure 2.30    Activation of Contact Person Assignment
         











Figure 2.31    Assigning Department Numbers for Contact Persons 
         











Figure 2.32    Assigning Functions of the Contact Person
         











Figure 2.33    Assigning Authority to the Contact Person
         











Figure 2.34    Assigning the VIP Indicator for the Contact Person
         











Figure 2.35    Business Partner Role Categories for Customer Integration
         











Figure 2.36    Business Partner to Customer: Number Assignment











Figure 2.37    Business Partner Role Categories for Vendor Integration
         











Figure 2.38    Business Partner to Vendor: Number Assignment











Figure 2.39    Financial Accounting Governance Screen
         











Figure 2.40    Financial Controlling Governance Screen
         











Figure 2.41    Financial Consolidation Governance Screen
         











Figure 3.1    Staging and Active Area Concept for Master Data Create Scenario
         











Figure 3.2    Flex and Reuse Modes
         











Figure 3.3    An Example of Type 1 Entity Type
         











Figure 3.4    Summary of Relationship Types
         











Figure 3.5    Example: Hierarchy Attribute
         











Figure 3.6    ERM Diagram of a Data Model
         











Figure 3.7    Business Object Type Codes
         











Figure 3.8    Prefix for Temporary Keys
         











Figure 3.9    Business Partner Data Model: Edit Data Model
         











Figure 3.10    Business Partner Data Model: Configuration Workbench
         











Figure 3.11    Output of Report USMD_DISPLAY_DATA_MODEL for the Business Partner Data Model
         











Figure 3.12    Define Authorizations per Entity Type and Attributes
         











Figure 3.13    Data Model Structures for the Material Master Data Model
         











Figure 3.14    Data Model Mappings for the Material Master Data Model
         











Figure 3.15    An Example of Package Assignment to Package Group
         











Figure 3.16    SMT Mapping Example
         











Figure 3.17    Mapping Step Example
         











Figure 3.18    Material Master Data Model
         











Figure 3.19    Material Master Data Model Example
         











Figure 3.20    Business Partner Data Model
         











Figure 3.21    Business Partner Data Model: Entity Types











Figure 3.22    Business Partner Data Model: Hierarchy











Figure 3.23    Financial Data Model: Type 1 Entity Types
         











Figure 4.1    Floorplan Manager Application Components
         











Figure 4.2    An Example OVP Layout
         











Figure 4.3    An Example GAF Layout
         











Figure 4.4    Worklist
         











Figure 4.5    GENIL_MODEL_BROWSER
         











Figure 4.6    GENIL_BOL_BROWSER
         











Figure 4.7    UI Modeling for SAP MDG
         











Figure 4.8    Define Field Properties of the UI
         











Figure 4.9    Field Level UI Adaptations
         











Figure 4.10    Manage UI Configurations
         











Figure 4.11    Define Available UI Applications
         











Figure 4.12    Assigning Print Forms
         











Figure 4.13    Adjust User Interfaces for Single Processing
         











Figure 4.14    Change Data to Be Printed
         











Figure 4.15    SPI Framework Integration
         











Figure 4.16    SAP MDG Material SPI Metadata
         











Figure 4.17    SPI Entities as Feeder Class Parameters
         











Figure 4.18    Material Master Homepage Screen
         











Figure 4.19    BOL/GenIL Layer Integration
         











Figure 4.20    GenIL Root Object BUPA for the Business Partner Model
         











Figure 4.21    Business Partner Governance Screen
         











Figure 4.22    GenIL Root Object MDGF for Finance Master Data Model
         











Figure 5.1    Governance Scope for Business Partner Data Model
         











Figure 5.2    Simple Change Request Process
         











Figure 5.3    Change Request Header: General Details
         











Figure 5.4    Change Request: Statuses
         











Figure 5.5    Change Request: Notes











Figure 5.6    Change Request: Attachments
         











Figure 5.7    All of the SAP-Delivered Logical Actions
         











Figure 5.8    Business Activities for the Material Master Data Model
         











Figure 5.9    An Example of Scope on Entity for a Parallel Change Request Type
         











Figure 5.10    An Example of a Business Activity Linked to a Change Request Type
         











Figure 5.11    SLA for a Change Request Type
         











Figure 5.12    Links between Logical Action, Business Activity, and Change Request Type
         











Figure 5.13    Change Request Steps for Change Request Types with a Rule-Based Workflow
         











Figure 5.14    Workflow Steps for Workflow Template WS54400001
         











Figure 5.15    Change Request Steps for Change Request Type MAT01
         











Figure 5.16    Enhancements and Checks per Change Request Step
         











Figure 5.17    Entity Type Properties for a Change Request Step











Figure 5.18    Definition of Change Request Actions
         











Figure 5.19    Step Type and Action Assignment
         











Figure 5.20    Step Types and Actions Represented on a UI
         











Figure 5.21    Change Request Process Setup
         











Figure 5.22    Change Request UI Determination
         











Figure 5.23    0G_ALL Edition Type
         











Figure 5.24    Entity Types in the 0G_ALL Edition Type
         











Figure 5.25    Material Master Single-Object Change Request Types
         











Figure 5.26    SAP Master Data Governance for Customer on the Client (SAP ERP)
         











Figure 5.27    BCV Side Panel for Changes Overview 
         











Figure 5.28    Multiple Object Change Request Type
         











Figure 5.29    UI Links for Creating a Mass Change Request and Mass Change
         











Figure 5.30    UI Links for Creating Mass Change Requests and File Upload
         











Figure 5.31    Data Import: Governance Option
         











Figure 5.32    UI Links for Hierarchy Processing











Figure 5.33    Hierarchy Processing: Creating a New Business Partner Hierarchy
         











Figure 5.34    Hierarchy Processing: Inserting a Structure Node
         











Figure 5.35    Hierarchy Processing: Moving a Node as a Subnode by Lowering the Rank
         











Figure 5.36    Hierarchy Processing: Creating a Structure Node and Inserting as a Subnode











Figure 5.37    Hierarchy Processing: Inserting a Business Partner ID
         











Figure 5.38    Hierarchy Processing: Inserting a Business Partner ID as a Subnode











Figure 5.39    Hierarchy Processing: Business Partner Hierarchy with Business Partner ID
         











Figure 5.40    Hierarchy Processing: Creating a Change Request upon Save
         











Figure 5.41    Hierarchy Processing: Pending Change Requests and Change Documents for Hierarchy Nodes
         











Figure 5.42    Scope for Hierarchy Changes for a Business Partner Hierarchy
         











Figure 5.43    Scope for Hierarchy Changes: Concept of Interlocking
         











Figure 5.44    Material Master Multi-Processing Option from the Search Results List
         











Figure 5.45    Material Multi-Processing Change Request Type Selection
         











Figure 5.46    Event Type Linkage Activation
         











Figure 5.47    Configuring Workflow Items
         











Figure 5.48    Workflow Template for the Supplier Create Process
         











Figure 5.49    Workflow Template for the Supplier Change, Block/Unblock, and Mark for Deletion Processes
         











Figure 5.50    Example: Agent Assignment for the Supplier Workflow
         











Figure 5.51    Workflow Template for the Customer Create Process
         











Figure 5.52    Example: Agent Assignment for the Customer Workflow
         











Figure 5.53    SAP MDG, Financials: Simple Workflow
         











Figure 5.54    SAP MDG, Financials: Advanced Workflow
         











Figure 5.55    BRFplus Application for MAT01 Change Request Type
         











Figure 5.56    Decision Tables and Condition Alias
         











Figure 5.57    Rule-Based Workflow: High-Level Design 
         











Figure 5.58    Sample Process Considered for Rule-Based Workflow Design











Figure 5.59    Defining Actions and Step Types for Each User Interaction
         











Figure 5.60    Change Request Process Design for a Sample Process
         











Figure 5.61    Decision Tables for a Sample Process
         











Figure 5.62    Decision Table Export to Excel and Import from Excel Functionalities
         











Figure 6.1    Search Screen in the SAP MDG UI
         











Figure 6.2    Fuzzy Search for BAS
         











Figure 6.3    Seach and Duplicate Check IMG Activities in SAP MDG
         











Figure 6.4    Define Search Applications
         











Figure 6.5    Allocation of Search Help to Search Applications
         











Figure 6.6    Allocation of Entities to Search Help
         











Figure 6.7    Matching Profile
         











Figure 6.8    Matching Profile Relevant Fields
         











Figure 6.9    SAP HANA Search View in SAP MDG
         











Figure 6.10    Editing an SAP HANA Search View
         











Figure 6.11    Maintaining the SAP HANA Package in General Data
         











Figure 6.12    Selecting the Entities and Attributes in SAP HANA Search View
         











Figure 6.13    Reviewing and Generating the SAP HANA Search View
         











Figure 6.14    Configuration for the Web Dynpro Component through Transaction SE80
         











Figure 6.15    Editor for the Web Dynpro ABAP Component Configuration
         











Figure 6.16    Maintaining Attributes of the Element Search UIBBs 
         











Figure 6.17    Search Using SAP HANA Search in SAP MDG
         











Figure 6.18    Selecting Attributes during the SAP HANA Search View Generation
         











Figure 6.19    Defining Joins and Field Mappings for Reuse Tables
         











Figure 6.20    A Potential Duplicate Identified and Presented by SAP MDG
         











Figure 6.21    SAP MDG Screen Shown after Deciding to Continue Ignoring Possible Duplicate
         











Figure 6.22    Duplicate Check Configurations











Figure 6.23    Maintenance View of the Duplicate Check Mode of Data Model
         











Figure 6.24    Duplicate Check Configuration for a Change Request Step
         











Figure 6.25    Validations in SAP MDG
         











Figure 6.26    Data Element-Driven Simple Check for Allowed Values
         











Figure 6.27    Existence Checks in SAP MDG
         











Figure 6.28    BRFplus Landing Page
         











Figure 6.29    Repository View in BRFplus
         











Figure 6.30    BRFplus Workbench Options in SAP MDG
         











Figure 6.31    BRFplus Tools in SAP MDG
         











Figure 6.32    Searching for an Object in BRFplus
         











Figure 6.33    Example of a Function: CHECK_BP_COMPNY (Signature Tab)
         











Figure 6.34    Ruleset Assignment to a Function in BRFplus
         











Figure 6.35    Assigned Ruleset to the Function in BRFplus
         











Figure 6.36    Example of a Rule Built-in to BRFplus
         











Figure 6.37    Derivation Function Example in BRFplus
         











Figure 6.38    Example of a Derivation Rule in BRFplus
         











Figure 6.39    Data Objects in BRFplus
         











Figure 6.40    General Header Information about BRFplus Application Objects
         











Figure 6.41    SAP MDG Data Quality and Search BAdIs
         











Figure 6.42    Maintaining RFC Destination FL_GDQC_SERVER for SAP DQM Integration
         











Figure 6.43    Maintain the RFC Destination FL_GDQC_BATCH for SAP DQM Integration
         











Figure 6.44    Address Enrichment and Duplicate Check Configuration for the Change Request Step
         











Figure 6.45    Data Enrichment Framework in SAP MDG
         











Figure 6.46    SAP-Delivered Enrichment Adapters in SAP MDG
         











Figure 6.47    SAP-Delivered Enrichment Spots in SAP MDG
         











Figure 6.48    Enrichment Spot for Business Partner Screening in SAP MDG
         











Figure 6.49    Configuring Address Screening in SAP MDG, Central Governance
         











Figure 7.1    Logical Representation of the Data Replication Framework
         











Figure 7.2    IMG Activity Showing an Entity type Assigned to a Business Object
         











Figure 7.3    Associating Filter Objects to SAP ERP Tables
         











Figure 7.4    Relationship among Business Object, Filter Object, and Filters
         











Figure 7.5    Different Kind of Filters
         











Figure 7.6    Simple Explicit Filter
         











Figure 7.7    Explicit Complex Filter 
         











Figure 7.8    Logical Representation of Key Mapping Concept
         











Figure 7.9    Selection Screen of Program RMDG_ADJUST_KEY_MAPPING
         











Figure 7.10    Different Ways to Open the Manual Maintenance of Key Mapping UI
         











Figure 7.11    Searching Key Mappings
         











Figure 7.12    Logical Flow of Automatic Replication
         











Figure 7.13    Logical Flow of Ad Hoc Replication
         











Figure 7.14    SAP GUI Application to Execute the Replication Manually
         











Figure 7.15    IMG Activity to Define Custom Settings for Data Replication
         











Figure 7.16    Defining Business Systems
         











Figure 7.17    Overview of Various IMG Activities to Define a Replication Model 
         











Figure 7.18    IMG Activity to Define a Replication Model
         











Figure 7.19    IMG Activity to Assign an Outbound Implementation to Replication Models
         











Figure 7.20    IMG Activity Depicting How to Assign a Target System to a Replication Model
         











Figure 7.21    IMG Activity Depicting How to Maintain the Values for Outbound Parameters
         











Figure 7.22    IMG Activity Showing Configuration Nodes Available for Outbound Implementations
         











Figure 7.23    IMG Activity to Define Outbound Parameters
         











Figure 7.24    IMG Activity Showing How to Configure Outbound Parameter Values for an Outbound Parameter
         











Figure 7.25    IMG Activity Depicting How to Define Filter Objects
         











Figure 7.26    IMG Activity Depicting How to Assign Filters to Filter Objects
         











Figure 7.27    Assigning Entity Type to Filter Object
         











Figure 7.28    Configuration Activity to Define a New Business Object
         











Figure 7.29    Assign Filter Objects to Business Objects
         











Figure 7.30    Define Object Identifiers
         











Figure 7.31    Assign Key Structures to Object Identifiers.
         











Figure 7.32    Object Node 5368
         











Figure 7.33    Configuration Activity to Create Object Nodes
         











Figure 7.34    Main Filter Criteria of Material for Outbound Implementation I_MAT_V2
         











Figure 7.35    Segment Filters Assigned to Outbound Implementation I_MAT_V2
         











Figure 7.36    Web-Based Replication Monitoring Tool
         











Figure 7.37    Selection Screen of Transaction DRFLOG in the SAP GUI
         











Figure 7.38    Transaction DRFCC in the SAP GUI.
         











Figure 7.39    Transaction DRFLOGDEL in the SAP GUI
         











Figure 7.40    Transaction DRFRSD in the SAP GUI
         











Figure 7.41    Transaction DRFRSDEL in the SAP GUI
         











Figure 8.1    Change Requests: Processing Time (List View)
         











Figure 8.2    Change Request Status Report
         











Figure 8.3    Status Report Drilldown
         











Figure 8.4    Key Mapping Data Source 0MDG_KEY_MAPPING
         











Figure 8.5    Customizing for Finance Reports (Direct Access)
         











Figure 8.6    Generation of SAP HANA Content for SAP MDG Analytics
         











Figure 8.7    Generated SAP HANA View Logs
         











Figure 8.8    SAP HANA Studio View
         











Figure 9.1    Transaction MDMGX in SAP ERP
         











Figure 9.2    Transaction MDMGX: Object Types
         











Figure 9.3    Transaction MDMGX: Defining Repositories and FTP Servers
         











Figure 9.4    Transaction MDMGX: Upload Ports and Check Tables
         











Figure 9.5    Defining Function Module Parameters for Exceptional Cases
         











Figure 9.6    Conversion Option in the SAP MDG Import Framework
         











Figure 9.7    Applying Converter Settings during Data Import in SAP MDG
         











Figure 9.8    Defining the File Source and Archive Directories for Data Transfer
         











Figure 9.9    Uploading Extracted Files to the Application Server
         











Figure 9.10    The Data Import Framework in SAP MDG
         











Figure 9.11    Data Import Framework: Import Settings
         











Figure 9.12    Master Data Export Screen in SAP MDG with Necessary Settings
         











Figure 9.13    Import Key Mapping Information
         











Figure 9.14    Selecting the Object Type during the Key Mapping Load
         











Figure 9.15    Choosing the Source Directory for the Key Mapping Import
         











Figure 9.16    Example of a Load File Prepared for Uploading Value Mapping Using Data Import
         











Figure 9.17    Upload Mode Options: Impact of File Upload on Existing Data
         











Figure 9.18    File Upload Link from the SAP MDG Home Page
         











Figure 9.19    File Upload: Determine Entity Type
         











Figure 9.20    File Upload: Define File Structure (Example of Account Entity)
         











Figure 9.21    File Upload: Determine Upload Settings
         











Figure 9.22    Upload Settings: Options for Upload Modes
         











Figure 9.23    File Upload: Select Conversion Settings
         











Figure 9.24    File Upload: Select File Store Settings
         











Figure 9.25    File Upload: Selecting the File Format Separator
         











Figure 9.26    File Upload: Check and Execute
         











Figure 9.27    File Download: Determine Entity Type
         











Figure 9.28    File Download: Define Selection
         











Figure 9.29    File Download: Define File Structure
         











Figure 9.30    File Download: Determine Download Settings
         











Figure 9.31    File Download: Check and Execute
         











Figure 9.32    System Message after Successful File Download Execution
         











Figure 10.1    SAP PLM to SAP MDG Integration
         











Figure 10.2    SAP Supplier Lifecycle Management to SAP MDG Integration
         











Figure 10.3    SAP Hybris Product Content Management and SAP MDG Integration
         











Figure 10.4    SAP Ariba and SAP MDG Integration
         











Figure 10.5    SAP CRM and SAP MDG Integration
         











Figure 10.6    Data Remediation Using SAP Information Steward
         











Figure 11.1    SAP Fiori Landscape
         











Figure 11.2    Request Business Partner App
         











Figure 11.3    Request New Cost Center App
         











Figure 11.4    Request New Material App
         











Figure 11.5    Technical Overview of SAP Fiori Components











Figure 11.6    SAP Gateway Service Builder Projects for SAP MDG Scenarios
         











Figure 11.7    SAP Web IDE 
         











Figure 11.8    Creating a New Extension Project
         











Figure 11.9    Import Project
         











Figure 11.10    Viewing the Extensibility Pane
         











Figure 11.11    Extensibility Pane Outline Options
         











Figure 11.12    Extensible Elements of MDG_REQ_BP
         











Figure 11.13    Controller Hook Methods
         











Figure 11.14    Deploying the Extension Application
         











Figure 11.15    Launchpad Content Model
         











Figure 11.16    UI Theme Designer
         











Figure 11.17    Custom Themes
         











Figure 12.1    Customizing at Runtime
         











Figure 12.2    Adaptation Options (Design Time): Create Customizing, Deep-Copy, and Enhance
         











Figure 12.3    User Personalization Example
         











Figure 12.4    CBA Configuration
         











Figure 12.5    Link Logical Actions with UI Application and Business Activity: Custom Definition
         











Figure 12.6    Link Logical Actions with Business Activity: Custom Definition
         











Figure 12.7    Enhancement Spot USMD_RULE_SERVICE
         











Figure 12.8    IMG Path for Data Replication BAdIs
         











Figure 12.9    BAdI USMD_CREQUEST_INTEGRATION
         











Figure 12.10    Workflow BAdI Definitions
         











Figure 12.11    Replication-Related BAdIs for the Finance Domain
         











Figure 12.12    Replication-Related BAdIs for Business Partner
         











Figure 12.13    Field Properties for the UI
         











Figure 12.14    SAP HANA Search View
         











Figure 12.15    Search Enhancement BAdIs
         











Figure 13.1    Project Definition and the WBS











Figure 13.2    Database Architecture of SAP ERP PS in the SAP Business Suite and SAP S/4HANA Core
         











Figure 13.3    Active Area and Access Class
         











Figure 13.4    Example of Conceptual Data Model for WBS in SAP ERP PS 
         











Figure 13.5    Representation of WBS in SAP ERP PS Logical Data Model in the Form of Entities and
            Attributes
         











Figure 13.6    Data Model Created for the WBS in SAP ERP PS Custom Data Object in SAP MDG
         











Figure 13.7    Creation of Business Object Type Code ZPS
         











Figure 13.8    Creation of the Project Definition as a Type 1 Entity
         











Figure 13.9    Attributes Added to the Type 1 Entity PSPID
         











Figure 13.10    Assigning Business Object ZPS to Entity PSPID (Project Definition)
         











Figure 13.11    Creation of a Type 1 Entity for WBS Element and Addition of Project Definition as
            an Attribute
         











Figure 13.12    Foreign Key Relationship between Tables PROJ and PRPS
         











Figure 13.13    SAP MDG Data Modeling Steps to Implement a Similar Foreign Key Relationship
         











Figure 13.14    Assigning Business Object ZPS to Entity POSID (WBS Element)
         











Figure 13.15    Creation of a Controlling Area as a Type 3 Entity under Data Model ZW
         











Figure 13.16    Error Message When Trying to Add Profit Center as a Direct Attribute with PRCTR as
            a Data Element to Entity PSPID











Figure 13.17    Modeling of the PRCTR Entity and Check Table Dependencies
         











Figure 13.18    Creating Company Code as a Type 3 Entity and Assigning as Attribute to PSPID Using
            a Referencing Relationship
         











Figure 13.19    Creation of a Plant and Assigning Plant as Attribute Using a Referencing Relationship
         











Figure 13.20    Creating an Entity for Location and Its Relationships
         











Figure 13.21    Final List of Attributes of Entity PSPID
         











Figure 13.22    Simple Attributes That Can Be Easily Added to Entity Type POSID
         











Figure 13.23    Adding Company Code, Controlling Area, and Plant as Attributes to Entity POSID 
         











Figure 13.24    Conceptual Data Model for the WBS Hierarchy
         











Figure 13.25    Configuring Entity POSID as the Hierarchy Type
         











Figure 13.26    Adding Additional Entity Types to the Leading Hierarchy Entity POSID
         











Figure 13.27    Entity Relationship Diagram for Data Model ZW
         











Figure 13.28    SU Type 1 Entities Project Definition (PSPID) and WBS Elements (POSID)
         











Figure 13.29    Language-Dependent Structures Generated as Dependent Objects
         











Figure 13.30    Runtime Architecture and Building Blocks of SAP MDG, Custom Object UI Framework
         











Figure 13.31    Sequence of Steps for Creating an SAP HANA-Based Search Help
         











Figure 13.32    Steps to Create a Copy of the Generic Search Template Configuration
         











Figure 13.33    A Fully Functional Search UI Application
         











Figure 13.34    Steps to Create the SAP MDG Communicator Configuration
         











Figure 13.35    Steps Required to Copy the Template Configuration for SOM and Create a New Configuration
         











Figure 13.36    Creation of the Main Page and Configuring Application Controller Settings
         











Figure 13.37    Adding the Technical UIBB to the OVP Floorplan
         











Figure 13.38    Configuring the Technical UIBB in the FLUID
         











Figure 13.39    Configuring Form UIBB for the Project Definition
         











Figure 13.40    Wiring between the Technical UIBB and the Form UIBB for Project Definition
         











Figure 13.41    Creation of the List UIBB for Language-Dependent Texts and Connection via Wire with
            Technical UIBB
         











Figure 13.42    List UIBB Configuration for Language-Dependent Texts
         











Figure 13.43    Creating the List UIBB for Maintenance of WBS Elements and Assigning the Edit Page
            as the Default
         











Figure 13.44    Configuring the UI Elements in the List UIBB for WBS Element Maintenance
         











Figure 13.45    Wiring between the Technical UIBB and List UIBB for WBS Maintenance
         











Figure 13.46    Final Look of the Main Page
         











Figure 13.47    Edit Page with WBS Element Attributes and Hierarchy Assignment UIBB
         











Figure 14.1    Creation of Business Object ZPS to Represent the Custom Data Object for SAP ERP PS
         











Figure 14.2    Creation of Business Activities for WBS in SAP ERP PS











Figure 14.3    IMG Activities Required to Correctly Determine Business Activities at Runtime 
         











Figure 14.4    Settings for Business Activity Determination for Data Model ZW
         











Figure 14.5    Settings for Navigation from a Generic Search UI for Action Create and Action Change
         











Figure 14.6    Change Request Type Configuration
         











Figure 14.7    Assignment of Processors to Workflow Step Number
         











Figure 14.8    Settings to Activate SAP MDG-Specific Generic Authorization for the Business Partner
            Data Model
         











Figure 14.9    Enabling Settings to Make Entities POSID and PSPID Authorization Relevant
         











Figure 14.10    Steps to Copy Role SAP_MDGX_MENU_04 into Custom Menu Role ZSAP_MDGZW_MENU_04
         











Figure 14.11    Adjusting the Menu Entries of the Copied Role
         











Figure 14.12    Copying the Template Role to the Admin Authorization Role
         











Figure 14.13    Configuring the Authorization Objects for the Admin Role
         











Figure 14.14    Steps to Create Page Configuration for Application WDR_CHIP_PAGE
         











Figure 14.15    Steps to Start the Page Builder in Configuration Mode
         











Figure 14.16    Setting Up a Page: Adding the Title and PFCG Link List Chip to the Page Builder
         











Figure 14.17    Configuring the PFCG Application Alias
         











Figure 14.18    Adding the Home Page to the PFCG Role
         











Figure 14.19    Derivation of Texts on the UI from Data Element Texts
         











Figure 14.20    Derivation of Texts on the Navigation Panel of NWBC from Folder Texts of the Role
            Menu in the PFCG Role
         











Figure 14.21    Text Element 002 Used by Feeder Class CL_MDGF_GUIBB_CCTR to Populate Tooltip Text
            on the Postal Code Field during Runtime
         











Figure 14.22    Different Texts Maintained in the Component Configurations of Pages and GUIBB
         











Figure 14.23    Floorplan Manager Text Tool Selection Screen and Result List
         











Figure 14.24    Finding the Transport Entry for an Object
         











Figure 14.25    Translating Texts Using the Translation Editor (Transaction SE63)
         











Figure 14.26    Translation of Text Elements in the Feeder Classes
         











Figure 14.27    Translating PFCG Role Texts
         











Figure 14.28    Defining Filter Object ZF_PSPID
         











Figure 14.29    Assigning the Filter Object to the Business Object
         











Figure 14.30    Defining the Object Identifier
         











Figure 14.31    Assigning the Object Identifier to the Key Structure
         











Figure 14.32    Assigning the Object Identifier Type to the Business Object Type
         











Figure 14.33    Definition of New Outbound Implementation
         











Figure 14.34    Adding ZSYSTEM1 as a Business System
         











Figure 14.35    Assigning Business Object ZPS (Project Structure) to Business System ZSYSTEM1
         











Figure 14.36    Definition of the Communication Channel and Key Harmonization Settings for Business
            System ZSYSTEM1
         











Figure 14.37    Definition of Replication MODEL ZPROJ_DEF
         











Figure 14.38    Assigning the Outbound Implementation to ZPROJ_DEF and ZSYSTEM1 as the Target System
            for ZPROJE_DEF
         











Figure 14.39    Activation of the Data Model
         











Figure 14.40    Maintaining Filter Criteria for Replication Model ZPROJ_DEF
         











Figure 14.41    Creating the Object Type Node and Assigning It to the Object Identifier Type Code
         











Figure 14.42    Maintaining Value Mapping Steps for Data Element ZBUKRS
         











Figure 14.43    Maintaining Value Lists
         











Figure 15.1    Overlapping Flexibility of Editions 
         











Figure 15.2    Creating an Edition in SAP MDG
         











Figure 15.3    Releasing an Edition
         











Figure 15.4    Navigation from SAP MDG Screen for Analysis and Monitoring of Editions
         











Figure 15.5    Analysis of Editions Screen in SAP MDG
         











Figure 15.6    Options for Edition Comparison in SAP MDG
         











Figure 15.7    Steps to Create a Mass Change Request in SAP MDG
         











Figure 15.8    System Message after Successful Mass Change Request Creation
         











Figure 15.9    Scheduling a File Upload Using the File Import Framework
         











Figure 15.10    Data Monitoring and Logs in the Data Import/Export Framework
         











Figure 15.11    Process Steps: Mass Processing in SAP MDG
         











Figure 16.1    Integrated Consolidation and Central Governance Using SAP MDG
         











Figure 16.2    SAP MDG, Consolidation Optional Integration with SAP MDG, Central Governance
         











Figure 16.3    Activation of Services Used for SAP MDG, Consolidation
         











Figure 16.4    Activate Type Linkage
         











Figure 16.5    IMG Activities
         











Figure 16.6    Configuring Process Models for SAP MDG, Consolidation
         











Figure 16.7    Business Object (147): Business Partner Tables in Process Modeling of SAP MDG, Consolidation
         











Figure 16.8    Business Object 194 (Material) Tables in Process Modeling of SAP MDG, Consolidation
         











Figure 16.9    Configuration of Adapters
         











Figure 16.10    Define Consolidation Rules Using BRFplus
         











Figure 16.11    Configure Scope
         











Figure 16.12    SAP Fiori Apps for SAP MDG, Consolidation and SAP MDG, Mass Processing 
         











Figure 16.13    Create Consolidation Process: Business Partner
         











Figure 16.14    Standardization Step during the Consolidation Process
         











Figure 16.15    Managing Consolidation Processes Screen
         











Figure 16.16    IMG Activities: Configure Standardization
         











Figure 16.17    Configure Parallelization for Standardization
         











Figure 16.18    SAP MDG, Consolidation: Define Inbound Destination
         











Figure 16.19    Standardization Screen in SAP MDG, Consolidation
         











Figure 16.20    Standardization Results during the Consolidation Process
         











Figure 16.21    Results Screen of the Standardization Step of the Consolidation Process
         











Figure 16.22    IMG Activities for Configure Matching
         











Figure 16.23    SAP MDG, Consolidation: Match Configurations
         











Figure 16.24    Configure Fuzzy Matching Parallelization
         











Figure 16.25    BAS Matching Configuration
         











Figure 16.26    SAP MDG, Consolidation: Import Predefined Settings for SAP HANA Smart Data Quality
         











Figure 16.27    Importing Predefined Settings for SAP HANA Smart Data Quality: Consistency Check Logs
         











Figure 16.28    SAP MDG, Consolidation: Configuring Parallelization for Material Matching
         











Figure 16.29    Matching Results in the Consolidation Process
         











Figure 16.30    IMG Activities: Configure Best Record Calculation
         











Figure 16.31    SAP MDG, Consolidation: Specifying Rules for Best Record Calculation
         











Figure 16.32    SAP MDG, Consolidation: Specifying the Order of Rules for Best Record Calculation
         











Figure 16.33    Users Screen during the Best Record Calculation Step of the SAP MDG, Consolidation
            Process
         











Figure 16.34    Master Data Consolidation: Configurations for Validations
         











Figure 16.35    Validation Screen during the Consolidation Process
         











Figure 16.36    IMG Activities: Configure Activation
         











Figure 16.37    Master Data Consolidation: Configurations for Activation
         











Figure 16.38    Configuration Options: Adding a New Entry for Activation of Business Partners
         











Figure 16.39    SAP MDG, Consolidation: Configure Activation for Business Partner
         











Figure 16.40    SAP MDG, Consolidation: Configure Activation for Material
         











Figure 16.41    Activation Step during the SAP MDG, Consolidation Process
         











Figure 16.42    Audit Trail View during the Consolidation Process
         











Figure 16.43    SAP System Landscape Transformation
         






































































