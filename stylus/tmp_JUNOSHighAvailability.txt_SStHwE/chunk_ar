Weekly_Int_Baseline



Provides interface statistics weekly and then clears the
              statistics after gathering them so that each week's information
              is easy to identify and read.



Commit



Archives the new configuration every time a configuration
              is committed, along with any changes from the previous
              configurations and any commit scripts involved in the
              commit.



Commit_Engineering



Sends the information to a server in the engineering
              department. It is not sent by the previous scripts because the
              event policies allow for only a single destination.



After event policies are created, the output files appear on the
        archive in the format specified. Because no command syntax checking
        occurs when the then execute-commands
        commands configuration statement is used, testing the policy
        is mandatory. In the following example, the show system users
        command was misconfigured as show
        users, and the error that occurred was placed into the
        output file, notated with the string xnm:error:

<?xml version="1.0" encoding="us-ascii"?>
<junoscript xmlns="http://xml.juniper.net/xnm/1.1/xnm"
xmlns:junos="http://xml.juniper.net/junos/9.1R1/junos"
schemaLocation="http://xml.juniper.net/junos/9.1R1/junos
 junos/9.1R1/junos.xsd" os="JUNOS" release="9.1R1.8"
hostname="router1.example.com" version="1.0">
<!-- session start at 2008-12-09 00:00:00 UTC -->
<!-- No zombies were killed during the creation of this user interface -->
<!-- user root, class super-user -->
<rpc-reply xmlns:junos="http://xml.juniper.net/junos/9.1R1/junos">
<xnm:error xmlns=http://xml.juniper.net/xnm/1.1/xnm
xmlns:xnm="http://xml.juniper.net/xnm/1.1/xnm">
<column>5</column>
<token>users</token>
<message>syntax error, expecting &lt;command&gt;</message>
</xnm:error>
</rpc-reply>
<!-- session end at 2008-12-09 00:00:00 UTC -->
</junoscript>






Event Policies for High Availability



Event policies provide a quick and easy way to automate basic
      troubleshooting on your network equipment. The inability of the event
      policies to change the command output format itself makes them more
      suited for times when you require full output from a command. However,
      the ability of event policies to correlate events, raise traps, and run
      commands does make them suitable for quickly providing information that
      might otherwise be lost during an emergency. Some tasks you can perform
      using the event policies include:



Forwarding technical support information when major processes
          restart or when errors with chassis hardware occur


Collecting configurations and configuration deltas when
          commits are made


Creating SNMP traps and collecting data when certain events,
          such as changes in routing protocol neighbor relationships, occur in
          quick succession


Periodically collecting and clearing interfaces, routing, and
          errors to determine network trending and baselines

















Deep Magic for Advanced Techs



For those of you who are intrepid enough to travel beyond the
    confines of the CLI and GUI, JUNOS software offers a powerful onboard
    scripting processor that includes application programming interfaces
    (APIs) for creating scripts and clients capable of providing better
    coverage and high availability. Using the JUNOScript API and Extensible
    Markup Language (XML), you can automate monitoring, troubleshooting, and
    configuration of network equipment, thus possibly preventing human error
    from leading to network downtime. Full coverage of how to implement JUNOS
    scripting in your network would require a book of its own. This section
    provides a good start, explaining how scripting works. The JUNOS
    documentation itself provides additional explanation, and you can also
    find example scripts on the Internet that are easy to understand and to
    modify, especially if you have a basic understanding of Perl
    scripting.




JUNOS APIs



The key to using the extended JUNOS API capabilities is to understand
      XML and how it interacts with JUNOS in your network equipment. Network
      devices natively running the JUNOS software support XML. You can use XML
      to parse input and output from the device and its software modules. To
      communicate with the processes on the network device, you use either the
      JUNOS XML API or the JUNOScript API. Both APIs enable the
      Juniper networking equipment to accept and respond to request and
      configuration changes encoded in XML. The APIs take the XML input and
      perform Remote Procedure Calls (RPCs) to gather or write information.
The APIs allow creation of two types of scripts: commit scripts and
      automation scripts. Commit scripts, which are used
      to parse configurations for human errors or nonstandard items that could
      lead to network downtime, are called automatically when the commit command is
      issued. These scripts accept only the candidate configuration as input.
      Automation scripts have no defined input or set execution time, but
      instead rely on user input during the creation of the script to
      determine the source of the input data and what will trigger the
      execution of the script.
Running within the JUNOS software, the JUNOScript and JUNOS XML
      APIs act as conduits between client software and the information stored
      in the various software modules of the Juniper Networks equipment. It is
      this conduit that allows the routers and switches to accept
      XML-formatted data and return XML-formatted responses. Figure 10-2 illustrates the normal operation of an
      external client and the JUNOScript server.









Figure 10-2. JUNOS API processing


As Figure 10-2 shows, when
      XML-formatted requests are accepted by the API, the requests activate
      the appropriate RPC, such as the RPC for the show interfaces
      command. After the call is made to the software module in the network
      device, a series of response tags are crafted that carry the results of
      the action or the information requested. In both the request and
      response portions of the call, the API is responsible for translating
      the RPC information to and from the XML format.
Two languages allow you to call and modify the XML that is at the
      heart of the interaction between the clients and the RPCs of the network
      equipment:



XSLT


The Extensible Stylesheet Language Transformation is the World Wide Web
            Consortium's (W3C) standard language for processing XML
            language.


SLAX


The Stylesheet Language Alternative Syntax was written specifically
            for creating JUNOS-based
            automation scripts and has a simpler syntax, similar to C or
            Perl.







XSLT



Scripts written in XSLT can be read directly by the native XML
        capabilities of the JUNOS
        software. The XSLT transforms the hierarchy in XML files into a new
        hierarchy, as defined in the XSLT template. Figure 10-3 is an example of XSLT parsing.









Figure 10-3. XSLT parsing


As Figure 10-3 demonstrates, when the
        commit command is issued to the
        network device, the XSLT engine is called and the candidate
        configuration is compared against the commit script, which is simply a
        configuration template written in XSLT. Using the template, the engine
        either alerts the user to errors in the configuration that fall
        outside the parameters set by the template, or corrects the
        configuration before it is committed.
The following example from the "JUNOS Internet Software
        Configuration and Diagnostic Automation Guide" shows that XSLT scripts
        are written using XML tags. For JUNOS to understand the tagging within
        the script, the script must include standard header lines that call
        out the location of the JUNOS XML templates:

<?xml version="1.0" standalone="yes"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:junos="http://xml.juniper.net/junos/*/junos"
    xmlns:xnm="http://xml.juniper.net/xnm/1.1/xnm"
    xmlns:jcs="http://xml.juniper.net/junos/commit-scripts/1.0">
    <xsl:import href="../import/junos.xsl"/>
    <xsl:variable name="arguments">
      <argument>
        <name>dns</name>
         <description>Name or IP address of a host</description>
      </argument>
    </xsl:variable>
    <xsl:param name="dns"/>
    <xsl:template match="/">
      <op-script-results>
        <xsl:variable name="query">
         <xsl:choose>
           <xsl:when test="$dns">
             <command>
               <xsl:value-of select="concat('show host ', $dns)"/>
               </command>
           </xsl:when>
           <xsl:when test="$hostname">
             <command>
               <xsl:value-of select="concat('show host ', $hostname)"/>
               </command>
           </xsl:when>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="result" select="jcs:invoke($query)"/>
        <xsl:variable name="host" select="$result"/>
        <output>
         <xsl:value-of select="concat('Name: ', $host)"/>
        </output>
      </op-script-results>
    </xsl:template>
</xsl:stylesheet>
As this example shows, the XSLT-formatted script can be long and
        difficult to read for those who are used to more standard scripting
        languages, such as Perl.





SLAX



To simplify scripting in JUNOS software, Juniper Networks engineers
        developed SLAX. SLAX uses a more intuitive, Perl-like scripting style
        that allows network engineers to develop shorter, clearer scripts that
        leverage the power of the JUNOS APIs. Although it requires additional
        processing to transform it into XSLT, SLAX provides the same power as
        scripts written in the standards-based XSLT. Figure 10-4 illustrates how the SLAX parser transforms a
        SLAX script.









Figure 10-4. SLAX parsing


When scripts written in SLAX are processed, they are first
        converted to XSLT by the SLAX processor and are then run against the
        XML files from the network device. This additional processing can
        either be performed automatically when the script is run or called
        manually so that the scripts can be tested and converted before they
        are needed.
The following is an example of the same functionality shown in
        the previous XSLT script, but written in SLAX:

version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";
import "../import/junos.xsl";
var $arguments = {
  <argument> {
    <name> "dns";
    <description> "Name or IP address of a host";
    }
  }
param $dns;
match / {
  <op-script-results> {
    var $query = {
      if ($dns) {
        <command> 'show host ' _ $dns;
      } else if ($hostname) {
        <command> 'show host ' _ $hostname;
      }
    }
    var $result = jcs:invoke($query);
    var $host = $result;
    <output> 'Name: ' _ $host;
  }
}
The SLAX script provides a much clearer and shorter script, with
        the same power as the original XSLT, thus making it very useful for
        building network management systems that run on the Juniper network
        devices. Those of you who have worked with scripting or programming
        should find this simplified format easy to understand and to
        learn.






Automation Scripts



As mentioned earlier, the JUNOS APIs support automation and commit scripts.
      Automation scripts come in two types:



Operation (ops) scripts


Execute and inspect router commands and their output using
            the CLI. Falling under the mgd process, ops
            scripts can be used to create automated troubleshooting
            tools.


Event scripts


Are executed by the eventd process
            and can be used to automatically execute and inspect router
            commands when a predefined event occurs.



Using the automation scripts, senior network engineers can build
      tools to allow more junior engineers and technicians to troubleshoot the
      network using commands that provide only the necessary information,
      without displaying extraneous fields in the command output. Unlike event
      policies, covered in Chapter 9, which supply all
      information provided by the standard CLI commands, an event script can
      focus the output on specific areas through the use of the innate XML
      formatting of the output.




Operation scripts



You write operation scripts to create commands that automate
        selected monitoring and troubleshooting functions and to customize the
        output of show commands. In the
        following example of SLAX code, the standard output from the show bgp summary
        command is shortened to display only the peer IP address and the
        number of received and active routes from established users:

version 1.0;

ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

import "../import/junos.xsl";

match /
{
    <op-script-results>
    {
        var $peer = { <command> 'show bgp summary'; }
        var $prefix = jcs:invoke($peer);

        <output>"Peer IP\t\tASN\t\tReceived Prefixes\tActive Prefixes\t\tdescription";
        <bgp-information> {
                for-each($prefix/bgp-peer[peer-state='Established']) {
                        <output> peer-address _ "\t\t" _ peer-as _
"\t\t" _ received-prefix-count _"\t" _ active-external-prefix-count _
"\t\t" _ Description;
                }
        }
    }
}
Using operation scripts such as this, senior engineers can write
        commands for junior engineers that supply only the information that
        falls into their particular purview, making it easier for them to
        parse the information and find possible indicators of issues that
        could lead to network downtime. After operation scripts have been
        added to the network device, they are called by their filename
        (without the file extension) or by an alias.





Event scripts



Just as with operation scripts, event scripts provide a way to tailor
        CLI commands and their output to provide information necessary for
        network management. Unlike operation scripts, event scripts do not
        require human interaction to run. When the event scripts are loaded
        into the eventd process, they
        are called if the network equipment experiences any of the configured
        triggers. You configure event policies or triggers in the script
        itself, so the scripts are automatically called when the configured
        events, timed events, or thresholds, or any combination of events,
        occur.






Working with Scripts



To work with JUNOS scripts, you need to understand the format of the JUNOS
      scripting languages, what information needs to be gathered from the
      network device, and the XML tags for that information. Once the scripts
      are written, you load them onto the network devices and then call them
      directly, either from the command line or by event processing. JUNOS
      also provides commands for refreshing the scripts from a remote
      location.




Planning scripts



To take advantage of the APIs in the JUNOS software, the scripts you write
        must call the RPCs providing the information required by the calls.
        Thankfully, the scripting languages are easily understandable, and you
        can find the information necessary to build the scripts in the
        reference material on the Juniper Networks website or in the equipment
        itself.
The following code example shows the XML version of
        the show interfaces
        terse command. The tags displayed in the output are the ones
        you use in your script to call and process the information necessary
        for the script:

user@host> show interfaces terse | display xml
<rpc-reply xmlns:junos="http://xml.juniper.net/junos/9.1R1/junos">
    <interface-information
xmlns=http://xml.juniper.net/junos/9.1R1/junos-interface
junos:style="terse">
        <physical-interface>
            <name>dsc</name>
            <admin-status>up</admin-status>
            <oper-status>up</oper-status>
        </physical-interface>
        <physical-interface>
            <name>fxp0</name>
            <admin-status>up</admin-status>
            <oper-status>up</oper-status>
            <logical-interface>
                <name>fxp0.0</name>
                <admin-status>up</admin-status>
                <oper-status>up</oper-status>
                <address-family>
                    <address-family-name>inet</address-family-name>
                    <interface-address>
                        <ifa-local junos:emit="emit">112.2.111.128/27
                        </ifa-local>
                    </interface-address>
                </address-family>
You can use the preceding XML tags as variables to gather
        information and customize the output of JUNOS commands.





Loading and calling scripts



For scripts to be used by the network device, either you upload them to
        the hard drive of the network equipment—placing operation scripts in
        the /var/db/scripts/op directory and event
        scripts in the /var/db/scripts/event directory—or
        you load them into the flash memory of the equipment. In the
        configuration file, you call out the filenames of the scripts. When
        the configuration is committed, the event script is then loaded into
        the eventd process so
        that it can be run when triggered. The operation scripts are not
        loaded into eventd, but are called
        manually through a user typing the alias or automatically from within
        an event policy or script.
For network operators to be able to use the scripts, the
        eventd process must know about
        them. In the case of an operational script, once it is identified in
        the configuration, the operator can call it using the CLI. Event
        scripts, on the other hand, run in the eventd process and are called through event
        policies, not by an operator using the CLI. If you change an event
        script, you must reload it into eventd either by modifying the filename in
        the configuration or by reloading it into the active process. The
        following code example includes the commands to identify an event
        script called routing, written in the SLAX
        language, and to load it into the eventd process. The second code example
        shows an operation script called trouble that can
        be called from the CLI:

[edit]
user@host# set system event-options event-script file routing.slax
user@host# commit and-quit
user@host>request system scripts event-scripts reload


[edit system sripts]
user@host# set system scripts op file trouble.slax command trouble
user@host# commit and-quit
user@host>op trouble
Because event scripts and operation scripts have the same
        format, you can store the same script in both the ops and event directories and the configuration can
        call both scripts. This deployment style allows operators to retrieve
        the same data both manually and automatically.





Refreshing scripts



When you update and change scripts, you need to load the new
        version onto your network equipment. Although it is possible to
        manually load the new version of the script to each machine in your
        network, it makes more sense to use the refresh-from keyword
        in the system script ops configuration to refresh the script from an
        accessible location. The following example shows how to refresh an
        operation script from a web server:

[edit system scripts op]
user@host# set file test.slax refresh-from \
http://engineering.example.com/scripts
refreshing 'test.slax' from 'http://engineering.example.com/ scripts/test.slax'
/var/tmp//...transferring.file.........xsm3bo/100% of  762  B 2194 kBps
In your network, you can take the automation even further by
        using the refresh-from keyword
        along with an event script that triggers at a specific time. The
        result is that the scripts automatically refresh themselves.















Chapter 11. Management Tools



Through the use of ops and event scripts, it is possible to create
  highly customized management and troubleshooting information to be used to
  ensure continuous systems, but if this information is not understood or
  cannot be processed correctly, it is useless. Though most network management
  systems can be tweaked to handle the information the scripts and the JUNOS
  software provide, Juniper Networks has worked to provide tools that
  seamlessly integrate with the power of the JUNOS application programming
  interfaces (APIs) to provide information in a more easily understood
  format.
Based on proven open source projects, the Juniper Networks management
  tools include a GUI for monitoring equipment, software, and networking;
  tools for interacting with the Juniper Technical Assistance Center (JTAC) for management of
  tickets and equipment; and partner programs allowing best-in-breed service
  providers to integrate their protocols and systems into JUNOS.













JUNOScope



Though individual devices in the network can be configured with
    J-Web for individual management, if you're managing an entire network of
    routers, use of the web-driven JUNOScope provides a GUI-based tool for
    collecting and analyzing the information necessary to maintain network
    high availability. JUNOScope provides access to tools that allow you to
    monitor information such as system capacity and usage, routing protocols,
    and interface throughput.




Overview



At the heart of the JUNOScope software are the web-based management functions
      provided from a Unix/Linux-based server. Using a combination of
      Perl, Extensible Markup Language (XML), and JUNOScript, the web server interacts with the networking
      equipment through the use of the APIs built into JUNOS. The JUNOScope
      server can also interact with remote application servers through
      standardized communication
      protocols, such as syslog, Remote Authentication Dial-in User Service (RADIUS), and SQL. Figure 11-1
      shows an example of the JUNOScope server in a network and its
      interactions with network devices.









Figure 11-1. JUNOScope network architecture


In Figure 11-1, the
      JUNOScope server is the hub of the network management architecture, and
      provides information to the clients through standard web protocols. The
      JUNOScope server interacts securely with the networking equipment,
      running JUNOS via the JUNOScript access protocol. Within the JUNOScope
      server itself, there are syslog and audit log processes, as well as a
      Concurrent Versions System (CVS) process for maintaining and coordinating configuration
      information and an Inventory Management System that can interact with
      external inventory control applications.
The JUNOScope software is divided into six modules, each designed
      for specific management functions. You interact with each software
      module through the JUNOScope IP Element Manager via the web GUI. As various processes
      or modules are called, they interact within the JUNOScope tools and the
      SQL database on board the JUNOScope server. All requests to and from the
      network equipment are formed into XML and sent via JUNOScript and the
      APIs on the machines. The network equipment responds to the requests
      from JUNOScope by crafting the appropriate Remote Procedure Calls
      (RPCs) to write or gather the requested information. The
      function of each module is as follows:



Looking Glass


A GUI for querying and viewing device status and
            troubleshooting information


Configuration Manager


A CVS system for monitoring and managing configurations currently on
            network devices or within the local repository


Inventory Management System


Provides tools for scanning and reporting on hardware and licenses
            throughout the network


Software Manager


A licensable add-on that provides tools for managing the
            deployment and upgrade of JUNOS software throughout the
            network


Monitor


A module for managing and auditing the functionality of the
            JUNOScope server


Settings


Tools for configuring access and monitoring of the JUNOScope
            server



You can interact with all of the modules through the GUI. Figure 11-2 illustrates the interaction between
      software processes in JUNOScope.









Figure 11-2. JUNOScope architecture


By using the built-in APIs in the network equipment, JUNOScope is
      able to seamlessly integrate with all network devices running JUNOS
      software and pull exactly the data necessary for monitoring the network
      for high availability. Though JUNOScope is not designed to work with the
      equipment running non-JUNOS software, such as ScreenOS, other management
      software is available through the NetScreen Security Manager and the
      Advanced Insight Manager. Also, product lines such as the new SRX
      security equipment are being built on the JUNOS operating system to
      allow them to have all the features available from JUNOScript.





JUNOScope and High Availability



JUNOScope works with the previously discussed tools for
      maintaining continuous systems to provide information to network
      engineers. Looking through the modules of JUNOScope, four of them stand
      out as being capable of assisting network engineers in providing the
      information necessary for ensuring continuous systems.




Looking Glass



The Looking Glass portion of JUNOScope provides access to monitoring and
        troubleshooting features of the JUNOS equipment and is based on the
        open source Looking Glass projects accessible through the Internet.
        Because of the ubiquitous nature of the Looking Glass tools, the
        module within JUNOScope allows network engineers to more quickly take
        full advantage of the tool to provide monitoring. Figure 11-3 shows an example of the
        JUNOScope Looking Glass screen.
The command queries are broken up into device, information
        category, and command fields. As the device and category options are
        selected, the available commands appear. The commands can be set to
        refresh the output incrementally.





Configuration Manager



The Configuration Manager module of JUNOScope provides tools for managing
        all aspects of configurations on the Juniper Networks equipment that
        is being managed through the JUNOScope server. Using the open source
        CVS, the Configuration Manager module offers the ability to scan,
        audit, compare, and edit configurations. The use of CVS ensures that
        only a single copy of a configuration is used and that all changes are
        recorded in the versioning data.
Not only does the Configuration Manager enable management of the
        configuration files for the network equipment, but it also provides
        functions to import, upload, edit, and manage scripts on the JUNOS
        devices. This central repository of JUNOScript files is also included
        in the CVS so that versioning data is maintained for any
        changes made to the files.









Figure 11-3. Example Looking Glass screen







Inventory Management System



The JUNOScope Inventory Management System allows network
        engineers to scan, view, and report on equipment and licensing
        throughout the network. The data retrieved from the networking
        equipment can be stored within the local database, as well as sent to
        external inventory control systems through SQL. Reports can also be published to Excel, PDF, and other standard formats.

Note
In many networks, licensing information is considered one of
          the less important aspects of inventory control—but it can lead to
          network outages very quickly. Running into a wall as a result of
          lack of licensing is an easily avoidable error.






Software Manager



As discussed in previous chapters, the single JUNOS train and the use of
        JUNOS across the wide spectrum of Juniper Networks gear make software
        quite easy to upgrade. The Software Manager within JUNOS makes this
        already easy process even simpler by providing a central repository
        for the JUNOS software and a way to upload/download the files, as well
        as upgrade the equipment. Once JUNOS files are downloaded to one of
        the JUNOScope clients, they can be imported to the JUNOScope server,
        and from there be deployed to the systems through the network.






Using JUNOScope



As with all of the functionality of JUNOS and Juniper Networks equipment, it
      is best to determine which high availability issues can be avoided using
      the various modules within JUNOScope. Table 11-1 compares the JUNOScope modules with the
      information they provide.


Table 11-1. JUNOScope modules










JUNOScope module


Type of information


Potential high availability issues
              avoided








Looking
              Glass






ASP


Firewall and Network Address Translation (NAT) information


Prevents overconsumption
              of firewall flows or NAT IP addresses




Chassis


Alarms, routing engine
              (RE), and hardware information


Checks for hardware or
              environment issues that cause or could lead to
              downtime




Interfaces


Interface operations and
              throughout


Prevents oversubscription
              of network interfaces




Routing
              Protocols


Information on routing
              protocol processes, including Border Gateway Protocol (BGP), Open Shortest Path First (OSPF), and Intermediate
              System to Intermediate System (IS-IS)


Monitors for
              configuration errors resulting in routing and network outages




System


Status of storage
              capacity, users, uptime,
              and version


Prevents the overuse of
              system equipment, such as hard drives





