        the master and backup REs without interrupting packet forwarding. NSR
        builds on GRES to preserve routing and switching protocol state
        information during the transfer between the master and backup
        REs.




GRES configuration



You add GRES configuration elements at the chassis level of the
          configuration hierarchy:

[edit]
lab@r5-re0# set chassis redundancy graceful-switchover
Once committed, this configuration change triggers a marker on
          the hierarchy label to tell users whether they are on the master or
          backup RE. You need to know this because you must execute the ISSU
          command from the master RE:

[edit]
lab@r5-re0# commit
commit complete

{master}[edit]
lab@r5-re0#





NSR configuration



NSR configuration requires GRES configuration (as shown previously) as
          well as configuration elements at the system and routing-options
          hierarchy levels. At the system level of hierarchy, we enable
          the commit synchronize
          option to automatically synchronize any configuration changes
          between REs. The nonstop-routing
          element under the routing-options level of hierarchy enables
          NSR:

{master}[edit]
lab@r5-re0# set system commit synchronize

{master} [edit]
lab@r5-re0# set routing-options nonstop-routing

{master} [edit]
lab@r5-re0# commit
re0;
configuration check succeeds
re1;
commit complete
re0;
commit complete
Notice that with the commit
          synchronize feature enabled, all commits result in a
          configuration update on both the master and backup REs.
















Software Upgrades Without Unified ISSU



Chapter 6 looked in detail at configuration elements, such as Virtual Router
    Redundancy Protocol (VRRP) and the OSPF overload bit, which you can use to
    "encourage" network traffic to avoid specific routers or links within the
    network. These configurations deployed chassis in pairs to allow you to
    perform software upgrades in situations where ISSU is not an
    option.
If you look at Figure 7-1
    again, you might notice that routers r1
    and r2 share responsibilities to a
    great extent. With the exception of the Kiosk LANs, these two chassis
    effectively serve as a redundant pair. In this scenario, traffic could be
    shifted from r1 to r2 to permit a JUNOS upgrade on r1 and then from r2 to r1 to
    permit the r2 upgrade.
Routers r3 and r4 are also redundant in many ways; however,
    each serves as a nonredundant gateway for a pair of Corp LANs. To upgrade
    JUNOS on r3 with minimal disruption,
    transit traffic and ownership of virtual IP (VIP) 172.16.7.1 can be
    transferred to r4. Once the upgrade to
    r3 is complete, transit traffic and
    ownership of the VIP can be transferred back to r3 to permit the r4 upgrade with minimal impact.




Loading a JUNOS Image



Only two steps are needed to load a JUNOS image. First, get the image onto the chassis.
      Then, make the chassis use it as a boot image.
FTP is commonly used to transfer a JUNOS image. The only real
      trick to the transfer is to make sure the image is sent to the router
      using the bin (binary) option
      available in most FTP client applications. Here's the transfer, using a
      Microsoft Windows-based host system:

Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\jsonderegger>ftp 10.10.13.6
Connected to 10.10.13.6.

220 r5-re0 FTP server (Version 6.00LS) ready.
User (10.10.13.6:(none)): lab
331 Password required for lab.
Password:

230 User lab logged in.
ftp> bin
200 Type set to I.

ftp> put c:\jinst*
200 PORT command successful.
150 Opening BINARY mode data connection for
'jinstall-9.0R4.5-domestic-signed.tgz'.

226 Transfer complete.
ftp: 163950321 bytes sent in 14.23Seconds 11521.46Kbytes/sec.
ftp>
Once the image is on the router, it can be loaded. When upgrading
      JUNOS without ISSU, it is necessary to reboot the router to load the
      image. Here we see jinstall-9.0R4.5-domestic-signed.tgz loading
      and the router rebooting and starting the new image:

lab@r5-re0> request system software add
/var/home/lab/jinstall-9.0R4.5-domestic-signed.tgz no-validate
Installing package '/var/home/lab/jinstall-9.0R4.5-domestic-signed.tgz' ...
Verified jinstall-9.0R4.5-domestic.tgz signed by PackageProduction_9_0_0
./+INSTALL: /sbin/x509-exts: not found
Adding jinstall...

WARNING:     This package will load JUNOS 9.0R4.5 software.
WARNING:     It will save JUNOS configuration files, and SSH keys
WARNING:     (if configured), but erase all other files and information
WARNING:     stored on this machine.  It will attempt to preserve dumps
WARNING:     and log files, but this can not be guaranteed.  This is the
WARNING:     pre-installation stage and all the software is loaded when
WARNING:     you reboot the system.

Saving the config files ...
Installing the bootstrap installer ...

WARNING:     A REBOOT IS REQUIRED TO LOAD THIS SOFTWARE CORRECTLY. Use the
WARNING:     'request system reboot' command when software installation is
WARNING:     complete. To abort the installation, do not reboot your system,
WARNING:     instead use the 'request system software delete jinstall'
WARNING:     command as soon as this operation completes.

Saving package file in /var/sw/pkg/jinstall-9.0R4.5-domestic-signed.tgz ...
Saving state for rollback ...

lab@r5-re0> request system reboot
Reboot the system ? [yes,no] (no) yes














Snapshots Redux



After you complete the software upgrade and confirm that all hardware and
    protocol behavior is as expected, run the request system snapshot
    command again to copy the new image to the backup boot media. This step is
    important because the backup media is intended to be redundant to the
    primary boot media. To be truly redundant, the backup must have the same
    JUNOS image as the primary media:

lab@r5-re0> request system snapshot













Image Upgrade Tweaks and Options



The traditional request system software
    add <image-name> command supports options for additional functionality
    through the upgrade process. The help key (?) lists the options:

lab@r5-re0> request system software add jbundle-8.1R1.5-domestic.tgz?
Possible completions:
  <[Enter]>            Execute this command
  delay-restart        Don't restart processes
  force                Force addition of package (ignore warnings)
  no-copy              Don't save copies of package files
  no-validate          Don't check compatibility with current configuration
  reboot               Reboot system after adding package
  validate             Check compatibility with current configuration
  |                    Pipe through a command




delay-restart



Installs the software package but does not restart any
          software process. This option does not eliminate the need to restart
          for the upgrade to take effect; it just stops the restart from
          happening automatically.



force



Forces the image to be loaded regardless of any system
          warnings that are generated. This is a dangerous option and can
          result in a corrupt JUNOS image being loaded as a boot image,
          effectively making the router inoperable.



no-copy



Installs the new image but does not save copies of package
          files.



no-validate



Installs the new image but suppresses the warning messages
          that would be generated by the validate function.



validate



Confirms that all configuration elements and hardware
          components are compatible with the image being loaded.



reboot



Automatically reboots the system after finishing the image
          upgrade.



unlink



Removes the package after successful installation. This option
          is very useful on J Series chassis, where storage space is at a
          premium.



best-effort-load



Load succeeds if at least one statement is valid.
















J Series Considerations



Currently, J Series routers—the chassis most commonly used in the enterprise—are
    not equipped with a rotating media hard drive. Their on-system memory for
    storing JUNOS images is limited. As a result, some additional image
    upgrade commands and options are available as mentioned previously.




Cleanup



J Series chassis support a cleanup command that
      frees up storage space by deleting files in the /cf/var/tmp/ directory that have not been
      accessed in the past 48 hours, as well as all crash files in the
      /cf/var/crash directory. This
      command also rotates all current logfiles in the /cf/var/log directory. This command takes a
      minute or two to complete. You can run it immediately before a software
      upgrade to free up space for the JUNOS image:

lab@r5-re0> request system storage cleanup

List of files to delete:

         Size Date         Name
  2300B Dec  8 09:39 /cf/var/log/interactive-commands.0.gz
  8561B Jun 11 06:00 /cf/var/log/interactive-commands.1.gz
   9.8K Jun 10 09:00 /cf/var/log/interactive-commands.2.gz
  9290B Jun  2  2008 /cf/var/log/interactive-commands.3.gz
  8990B May 20  2008 /cf/var/log/interactive-commands.4.gz
  2408B Dec  8 09:39 /cf/var/log/messages.0.gz
  11.7K Dec  8 08:00 /cf/var/log/messages.1.gz
  14.8K Jul 30 09:00 /cf/var/log/messages.2.gz
  11.1K Jul 25 07:00 /cf/var/log/messages.3.gz
  5550B Jul  9 19:00 /cf/var/log/messages.4.gz
  5527B Jul  9 14:00 /cf/var/log/messages.5.gz
  20.3K Jul  9 09:00 /cf/var/log/messages.6.gz
  17.0K Jun 11 06:00 /cf/var/log/messages.7.gz
  13.0K Jun 10 10:00 /cf/var/log/messages.8.gz
  10.6K Jun 10 06:00 /cf/var/log/messages.9.gz
  8269B May 20  2008 /cf/var/log/sampled.0.gz
  36.3M May 18  2008 /cf/var/tmp/junos-jseries-8.2R4.5-domestic.tgz
Delete these files ? [yes,no] (no) yes





Backup Images



J Series chassis support a USB port that allows files, including
      JUNOS images, to be added and removed from the chassis. Table 7-3 shows the list of
      officially supported USB thumb drives as of JUNOS 9.3.


Table 7-3. Officially supported USB drives










Manufacturer


Size


Manufacturer part
              number






SanDisk—Cruzer Mini
              2.0


256 MB


SDCZ2-256-A10




SanDisk


512 MB


SDCZ2-512-A10




SanDisk


1,024 MB


SDCZ2-1024-A10




SanDisk—ImageMate USB 2.0
              Reader/Writer for CompactFlash Type I and II


N/A


SDDR-91-A15




SanDisk-CompactFlash


512 MB


SDCFB-512-455




SanDisk-CompactFlash


1,024 MB


SDCFB-1000-A10




Kingston


512 MB


DTI/512KR




Kingston


1,024 MB


DTI/1GBKR






Before upgrading an image, you can write the current configuration
      and image to a USB drive using the request system
      snapshot command. In this example, the USB drive has not
      previously been used on a JUNOS platform, a FreeBSD environment, so the partition option is also necessary. The
      initial da0 output is generated when
      the USB drive is inserted into the chassis:

da0 at umass-sim0 bus 0 target 0 lun 0
da0: <OPTI3 Flash Disk 2.00> Removable Direct Access SCSI-2 device
da0: 1.000MB/s transfers
da0: 125MB (256000 512 byte sectors: 64H 32S/T 125C)

lab@r5-re0> request system snapshot partition media usb
Clearing current label...
Partitioning usb media (da0) ...
Partitions on snapshot:

  Partition  Mountpoint  Size    Snapshot argument
      a      /           111MB   root-size
      e      /config     13MB    config-size
Running newfs (111MB) on usb media / partition (da0s1a)...
Running newfs (13MB) on usb media /config partition (da0s1e)...
Copying '/dev/ad0s1a' to '/dev/da0s1a' .. (this may take a few minutes)
Copying '/dev/ad0s1e' to '/dev/da0s1e' .. (this may take a few minutes)
The following filesystems were archived: / /config

Note
The USB port can also be used as boot media if it is loaded with
        a jinstall image that meets the
        install-media guidelines. For the J Series chassis, the install-media
        packages will have a size indicated in the suffix of the package name
        to describe system storage requirements for the image, as in this
        example:

Junos-jseries-8.0R2-export-cf256.gz






Rescue Configuration



A rescue configuration is a feature specific to J Series routers. Though it is not a
      true part of the software upgrade procedure, its functionality is
      directly related. The rescue configuration allows you to create a known
      stable working configuration and save it in a special memory location in
      the J Series router. There is no rescue configuration by default. It
      must be created and saved by the administrator:

lab@r4> request system configuration rescue save
Once saved, it can be viewed as needed to make sure it is still
      current and appropriate for the system:

lab@r4> show system configuration rescue
version 9.4R2.9;
system {
    host-name r4;
    root-authentication {
        encrypted-password "$1$vky7kv0i$/NeUtRaLSDgDb3we4nPVs/"; ## SECRET-DATA
    }
    login {
        class juniper {
            permissions view;
            allow-commands "show route";
        }
        user lab {
            uid 2003;
            class superuser;
            authentication {
                encrypted-password "$1$pYM5k*hEy_zeUS6rfe32R.4bg.";
                ## SECRET-DATA
            }
        }
    }
...
Then the rescue configuration can be loaded and committed on the
      router by momentarily pressing the RESET CONFIG button on the face of the chassis. The
      rescue configuration can also be loaded through
      the command-line interface (CLI):

[edit]
lab@r4# rollback rescue
load complete

Note
Pressing the RESET CONFIG button momentarily loads and commits
        the rescue configuration, but be warned: holding the RESET CONFIG
        button for 15 seconds will delete the active configuration, the rescue
        configuration, and all rollback configurations, and will reset the
        system to a factory default.















Chapter 8. JUNOS Post-Upgrade Verifications



Congratulations! If you are reading this chapter, you must have
  followed the pre-upgrade procedures in Chapter 6 and the painless software upgrade
  recommendations in Chapter 7. You
  have:



Identified an appropriate JUNOS release based on current and
      future network requirements and on the contents of the release notes for
      that revision.


Confirmed that the JUNOS release is compatible with your network
      hardware.


Formulated a strategy and timeline for rolling the new JUNOS out
      to the target devices in the network.


Checked the configuration of the target devices to make sure the
      proper configuration elements are in place to take advantage of hardware
      component redundancies and In-Service Software Upgrade (ISSU) features
      where available.


Prepared for the upgrade by capturing and storing configuration
      and state information for each device.


Downloaded a copy of the new JUNOS release and, using the provided
      MD5 hash, prepositioned the image on the target chassis.


Just prior to the upgrade, used Interior Gateway Protocol
      (IGP)-specific overload bits, metrics adjustments, and virtual IP (VIP)
      ownership changes to make the target chassis less desirable to transit
      traffic.


Confirmed that traffic was indeed following an alternate path
      through the network.


Executed the request system software
      add command to load the new operating system and rebooted the
      routing engines (REs) as needed.


Did all this with minimal traffic loss during your allocated
      maintenance window, supporting the service-level agreements (SLAs)
      guaranteed by your company and protecting the availability of the
      network.



Well done!
Now that JUNOS has been upgraded to the desired release level, it is
  time to make sure everything went as smoothly as it appeared. It is time for
  you to run a post-upgrade verification. Performing a
  post-upgrade verification is the equivalent of double-checking your math. It allows you to spot any
  mistakes and correct them before they turn into serious problems.













Post-Upgrade Verification



Post-upgrade verification should begin at the Physical layer on the device that has been upgraded, and
    expand upward through the Open Systems Interconnection (OSI) model and outward through
    the rest of the network. However, before beginning this process, we
    recommend confirming that the chassis is currently running on the desired
    (upgraded) revision of JUNOS.
On more than one occasion, we have been surprised to find a chassis
    that did not get fully upgraded. Either a hardware or configuration
    incompatibility occurred that we had overlooked, or we simply failed to
    reboot the RE to allow it to come up on the new software.
Take a look at the revision of JUNOS the master RE is currently running and make sure it matches the target
    release:

lab@j2300-1-re0> show version
version 9.3R3.8;
A commonly overlooked but critical next step is to confirm that the
    upgrade was also successful on the backup RE. Checking the backup software
    version is important because a chassis is not really in a fully redundant
    high availability state unless the backup components (in this case, an RE)
    are capable of performing the same tasks and supporting the same
    functionality as the primary components.
Log in to the backup RE and check its release:

[edit]
lab@m40-3-re0# run request routing-engine login re1

lab@m40-3-re1> show version
version 9.3R3.8;
You can also check the JUNOS revision level from configuration mode,
    but it is important to keep in mind that what you are viewing in
    configuration mode is a configuration element that can be changed within
    the configuration file:

[edit]
lab@j2300-1# show version
version 9.3R3.8;

[edit]
lab@j2300-1# set version 867-5309

[edit]
lab@j2300-1# show version
version 867-5309;

[edit]
lab@j2300-1# run show version
Hostname: j2300-1
Model: j2300
JUNOS Software Release [9.3R3.8] (Export edition)
Because of the ability to change the revision tag, the authors
    strongly recommend that you check the release level from operational mode
    rather than from configuration mode. Some administrators will, as a
    standard procedure, simply delete the version tag within the configuration file to
    force all users to rely on the operational mode command to check the true
    revision level.

Note
Throughout this chapter, we refer to the act of loading JUNOS as
      an "upgrade." We do this because in most situations the revision of
      JUNOS being loaded on the chassis is newer than the revision of JUNOS
      that was already on the chassis. Loading the newer version is considered
      moving up in the code train.
While not explicitly stated in every example, the procedures
      listed in this chapter also apply to situations in which you are moving
      down in the code train. In other words, you are
      "downgrading" from a newer release to an older release of JUNOS.

After confirming the successful upgrade of both REs, check the
    hardware and interface states of the upgraded device.




Device State



You use the show chassis hardware,
      show chassis alarm, show interfaces
      terse, and show chassis fpc
      pic-status commands to show the state of the chassis hardware
      and interfaces. You should run these commands only from the master RE.
      However, the output from these commands is relevant to the entire
      chassis.




Verify chassis hardware



In the output from the show chassis
        hardware command, you should check that all components in
        the chassis are listed. Having them appear indicates they are at least
        powered on and accessible by the router's management daemon (mgd). Output
        from this command varies in length based on the number of component
        Field Replaceable Units (FRUs) in the chassis.

Note
Juniper Networks product warranties and service contracts are
          tied to product serial numbers. All serial numbers have been removed
          from the output of the show chassis
          hardware commands to protect the service contracts of the
          owners of the chassis.

For a J2300 chassis, commonly found in small enterprise
        environments, the output is quite short:

lab@j2300-1# run show chassis hardware
Hardware inventory:
Item             Version  Part number Serial#  Description
Chassis                                         J2300
Routing Engine   REV 07   750-009992            RE-J.1
FPC 0            REV 05   750-010738            FPC
  PIC 0                                         2x FE, 2x T1
For large enterprise and service-provider-scale chassis, the
        output is significantly longer. This example is from an M40e:

lab@m40-2-re0> show chassis hardware
Hardware inventory:
Item             Version  Part number Serial# Description
Chassis                                       M40e
Midplane         REV 04   710-008502
FPM CMB          REV 03   710-001642
FPM Display      REV 04   710-001647
CIP              REV 06   710-002649
PEM 0            Rev 04   740-005165          AC Power Entry Module
PEM 1            Rev 04   740-005165          AC Power Entry Module
PCG 0            REV 06   710-003066
PCG 1            REV 06   710-003066
Routing Engine 0 REV 16   740-005022          RE-3.0
Routing Engine 1 REV 16   740-005022          RE-3.0
MCS 0            REV 15   710-001226
MCS 1            REV 15   710-001226
SFM 0 SPP        REV 09   710-001228
SFM 0 SPR        REV 03   710-007707          Internet Processor IIv2
SFM 1 SPP        REV 10   710-001228
SFM 1 SPR        REV 01   710-011130          Internet Processor IIv2
FPC 1            REV 04   710-005078          M40e-FPC Type 1
  CPU            REV 03   710-004602
  PIC 0          REV 06   750-010240          1x G/E SFP, 1000 BASE
  PIC 1          REV 06   750-010240          1x G/E SFP, 1000 BASE
  PIC 2          REV 06   750-010240          1x G/E SFP, 1000 BASE
  PIC 3          REV 06   750-010240          1x G/E SFP, 1000 BASE
FPC 2            REV 01   710-011165          M40e-FPC Type 1
  CPU            REV 03   710-004602
  PIC 0          REV 06   750-005720          1x OC-12 ATM-II IQ,SMIR
  PIC 1          REV 06   750-005720          1x OC-12 ATM-II IQ,SMIR
  PIC 2          REV 07   750-002911          4x F/E, 100 BASE-TX
  PIC 3          REV 11   750-008431          Adaptive Services
FPC 5            REV 01   710-011165          M40e-FPC Type 1
  CPU            REV 03   710-004602
FPC 6            REV 01   710-011165          M40e-FPC Type 1
  CPU            REV 03   710-004602
  PIC 0          REV 06   750-010240          1x G/E SFP, 1000 BASE
  PIC 1          REV 06   750-010240          1x G/E SFP, 1000 BASE
  PIC 2          REV 05   750-005728          2x OC-3 ATM-II IQ, SMIR
  PIC 3          REV 04   750-005731          4x T3 ATM-II IQ





Check for alarms



If the output from the show chassis alarms
        command matches what is shown in the following output, all the
        hardware components are operating properly. This output is from J2300-1:

[edit]
lab@j2300-1# run show chassis alarms
No alarms currently active
However, if alarm conditions are identified by the following
        command, you need to investigate and remedy them. Output such as this
        would be disturbing and require investigation:

{primary:node0}[edit]
lab@host1-b# run show chassis alarms
node0:
----------------------------------------------------------------------
7 alarms currently active
Alarm time               Class  Description
2009-04-27 14:17:11 PDT  Minor  ge-3/0/0: Link down
2009-04-27 14:17:10 PDT  Minor  fe-2/0/4: Link down
2009-04-27 14:17:10 PDT  Minor  fe-2/0/3: Link down
2009-04-27 14:17:09 PDT  Minor  fe-2/0/2: Link down
2009-04-27 14:17:09 PDT  Minor  fe-0/0/4: Link down
2009-04-27 14:17:08 PDT  Minor  fe-0/0/3: Link down
2009-04-27 14:17:08 PDT  Minor  fe-0/0/2: Link down

node1:
---------------------------------------------------------------------
No alarms currently active

{primary:node0}[edit]
lab@host1-b#





Verify interfaces



When verifying device state, use the show interfaces
        terse command to view Link and Admin state for all physical
        and logical interfaces in the chassis:

[edit]
lab@j2300-1# run show interfaces terse
Interface               Admin Link Proto Local                 Remote
fe-0/0/0                up    down
fe-0/0/0.0              up    down inet  192.168.50.50/30
gr-0/0/0                up    up
ip-0/0/0                up    up
ls-0/0/0                up    up
mt-0/0/0                up    up
pd-0/0/0                up    up
pe-0/0/0                up    up
sp-0/0/0                up    up
sp-0/0/0.16383          up    up   inet
fe-0/0/1                up    down
fe-0/0/1.0              up    down inet  192.168.50.26/30
t1-0/0/2                up    down
t1-0/0/3                up    down
dsc                     up    up
gre                     up    up
ipip                    up    up
lo0                     up    up
lo0.0                   up    up   inet  152.152.1.1         --> 0/0
lo0.16385               up    up   inet  10.0.0.1            --> 0/0
                                         10.0.0.16           --> 0/0
lsi                     up    up
mtun                    up    up
pimd                    up    up
pime                    up    up
pp0                     up    up
tap                     up    up
The output shown is likely a genuine cause for concern, because
        the two physical interfaces fe-0/0/0 and fe-0/0/1 have a logical interface configured
        with an IP address, but both are showing status of Admin Up and Link
        Down. A more detailed version of the show interfaces
        command provides more information, but in this case it is of little
        help. A physical inspection of the chassis reveals that both Ethernet
        cables have been disconnected:

[edit]
lab@j2300-1# run show interfaces detail fe-0/0/0 | match down
Physical interface: fe-0/0/0, Enabled, Physical link is Down
  Device flags   : Present Running Down
  Interface flags: Hardware-Down SNMP-Traps 16384
  Hold-times     : Up 0 ms, Down 0 ms
    Flags: Device-Down SNMP-Traps Encapsulation: ENET2
      Addresses, Flags: Dest-route-down Is-Preferred Is-Primary
As we noted in Chapter 7, if
        the router detects an incompatibility between a Physical Interface Card (PIC) and the new operating
        system during a JUNOS upgrade, the PIC may be taken offline. This
        problem can be difficult to identify because when a PIC is offline, it
        does not appear in the output of show
        interfaces commands.
If you suspect a problem with an entire PIC, use the show chassis fpc
        pic-status command to get more data about interfaces. In the
        first example, FPC 0 is
        online:

[edit]
lab@j2300-1# run show chassis fpc pic-status
Slot 0   Online       FPC
  PIC 0  Online       2x FE, 2x T1
In the second example, FPC 0
        is offline:

[edit]
lab@j2300-1# run show chassis fpc pic-status
Slot 0   Offline      FPC
Notice that when a Flexible PIC Concentrator (FPC) is offline
        some critical configuration elements vanish from the show interfaces
        command output:

[edit]
lab@j2300-1# run show interfaces terse
Interface               Admin Link Proto Local                 Remote
dsc                     up    up
gre                     up    up
ipip                    up    up
lo0                     up    up
lo0.0                   up    up   inet  152.152.1.1         --> 0/0
lo0.16385               up    up   inet  10.0.0.1            --> 0/0
                                         10.0.0.16           --> 0/0
lsi                     up    up
mtun                    up    up
pimd                    up    up
pime                    up    up
pp0                     up    up
tap                     up    up

[edit]
lab@j2300-1# run show interfaces detail fe-0/0/0
error: device fe-0/0/0 not found

[edit]
lab@j2300-1# run show interfaces detail fe-0/0/1
