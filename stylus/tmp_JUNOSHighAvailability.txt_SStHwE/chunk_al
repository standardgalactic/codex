interface ge-0/0/1.302 {
    passive;
}
interface lo0.0 {
    passive;
}
interface ge-0/0/0.0;

[edit protocols ospf area 0.0.0.0]
lab@r4# show
interface ge-0/1/0.0 {
     priority 100;
interface ge-0/2/0.0 {
    passive;
}
interface ge-0/1/1.0;
interface ge-0/0/1.401 {
    passive;
}
interface ge-0/0/1.402 {
    passive;
}
interface lo0.0 {s
    passive;
}
interface ge-0/0/0.0;
Transfer of ownership can be accomplished by changing the
        priority setting and forcing a reset of the neighbor state between the
        two routers involved. First, to make r3 the DR for the selected subnet, give
        r3 a higher priority value for its
        interface onto the subnet:

[edit protocols ospf area 0.0.0.0]
lab@r3# set interface ge-0/1/0 priority 255

[edit protocols ospf area 0.0.0.0]
lab@r3# show
interface ge-0/1/0.0 {
    priority 255;
}
interface ge-0/2/0.0 {
    passive;
}
interface ge-0/1/1.0;
interface ge-0/0/1.301 {
    passive;
}
interface ge-0/0/1.302 {
    passive;
}
interface lo0.0 {
    passive;
}
interface ge-0/0/0.0;

[edit protocols ospf area 0.0.0.0]
lab@r3# commit
commit complete
An OSPF priority change is nondeterministic; therefore, a
        neighbor reset is necessary after the priority change to elect a new
        DR. Confirm this by first looking at the output of the show ospf interface command:

[edit protocols ospf area 0.0.0.0]
lab@r3# run show ospf interface
Interface          State     Area       DR ID         BDR ID    Nbrs
ge-0/1/0.0         BDR      0.0.0.0    10.0.0.4      10.0.0.3     1
ge-0/2/0.0         DR       0.0.0.0    10.0.0.3      0.0.0.0      0
ge-0/0/0.0         BDR      0.0.0.0    10.0.0.5      10.0.0.3     1
ge-0/1/1.0         DR       0.0.0.0    10.0.0.3      10.0.0.1     1
ge-0/0/1.301       DR       0.0.0.0    10.0.0.3      0.0.0.0      0
ge-0/0/1.302       DR       0.0.0.0    10.0.0.3      0.0.0.0      0
lo0.0              DRother  0.0.0.0    0.0.0.0       0.0.0.0      0
Notice that r4 is still
        identified by r3 as the DR on
        interface ge-0/1/0.0. For the shift
        to take place, manually reset the neighbor relationship on that
        interface. After doing so, take a look at the command output
        again:

[edit protocols ospf area 0.0.0.0]
lab@r3# run show ospf neighbor
  Address         Interface     State      ID            Pri  Dead
10.0.1.18        ge-0/1/0.0      Full      10.0.0.4       128   31
10.0.1.9         ge-0/0/0.0      Full      10.0.0.5       128   36
10.0.1.22        ge-0/1/1.0      Full      10.0.0.1       128   33

[edit protocols ospf area 0.0.0.0]
lab@r3# run clear ospf neighbor 10.0.1.18

[edit protocols ospf area 0.0.0.0]
lab@r3# run show ospf interface
Interface          State     Area      DR ID        BDR ID     Nbrs
ge-0/1/0.0         DR       0.0.0.0   10.0.0.3     10.0.0.4      1
ge-0/2/0.0         DR       0.0.0.0   10.0.0.3     0.0.0.0       0
ge-0/0/0.0         BDR      0.0.0.0   10.0.0.5     10.0.0.3      1
ge-0/1/1.0         DR       0.0.0.0   10.0.0.3     10.0.0.1      1
ge-0/0/1.301       DR       0.0.0.0   10.0.0.3     0.0.0.0       0
ge-0/0/1.302       DR       0.0.0.0   10.0.0.3     0.0.0.0       0
lo0.0              DRother  0.0.0.0   0.0.0.0      0.0.0.0       0
The purpose of this exercise is to show how DR state can be
        shifted as needed so that all routers in the network can be upgraded
        without having an impact on the DR's accessibility. These
        configuration elements are specific to networks running OSPF.





The overload bit and IS-IS



IS-IS supports overload bit and DR (called Designated Intermediate System, or DIS, in IS-IS)
        functionality that is comparable to OSPF in many ways. In IS-IS, when
        the overload bit is set, interface metrics are pushed to the highest
        possible value to discourage transit traffic, just as is done with
        OSPF. As in the previous example, this use of the overload bit allows
        traffic to continue to flow through the network as the JUNOS software
        on r2 is upgraded. First, let's
        take a look at IS-IS route metrics for r2:

[edit protocols isis]
lab@r2# run show route protocol isis

inet.0: 30 destinations, 30 routes (30 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

10.0.0.1/32        *[IS-IS/18] 00:00:05, metric 10
                    > to 10.0.1.25 via ge-0/0/0.0
10.0.0.3/32        *[IS-IS/18] 00:00:05, metric 20
                    > to 10.0.1.29 via ge-0/1/1.0
                      to 10.0.1.25 via ge-0/0/0.0
10.0.0.4/32        *[IS-IS/18] 00:00:05, metric 10
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.0.5/32        *[IS-IS/18] 00:00:05, metric 20
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.0.6/32        *[IS-IS/18] 00:00:05, metric 30
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.0/30        *[IS-IS/18] 00:00:05, metric 30
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.4/30        *[IS-IS/18] 00:00:05, metric 30
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.8/30        *[IS-IS/18] 00:00:05, metric 30
                      to 10.0.1.29 via ge-0/1/1.0
                    > to 10.0.1.25 via ge-0/0/0.0
(output truncated)
Now set the overload bit, commit, and observe the changes in the routing table:

[edit protocols isis]
lab@r2# set overload advertise-high-metrics

[edit protocols isis]
lab@r2# commit
commit complete

[edit protocols isis]
lab@r2# run show route protocol isis

inet.0: 30 destinations, 30 routes (30 active, 0 holddown, 0 hidden)
+ = Active Route, - = Last Active, * = Both

10.0.0.1/32        *[IS-IS/18] 00:00:03, metric 63
                    > to 10.0.1.25 via ge-0/0/0.0
10.0.0.3/32        *[IS-IS/18] 00:00:03, metric 73
                    > to 10.0.1.29 via ge-0/1/1.0
                      to 10.0.1.25 via ge-0/0/0.0
10.0.0.4/32        *[IS-IS/18] 00:00:03, metric 63
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.0.5/32        *[IS-IS/18] 00:00:03, metric 73
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.0.6/32        *[IS-IS/18] 00:00:03, metric 83
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.0/30        *[IS-IS/18] 00:00:03, metric 83
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.4/30        *[IS-IS/18] 00:00:03, metric 83
                    > to 10.0.1.29 via ge-0/1/1.0
10.0.1.8/30        *[IS-IS/18] 00:00:03, metric 83
                    > to 10.0.1.29 via ge-0/1/1.0
                      to 10.0.1.25 via ge-0/0/0.0
(output truncated)
Notice the dramatic increase in metrics associated with reaching
        destinations through r2. Clearly,
        r1 will now be used for transit
        traffic.





Moving the DIS



As with OSPF, the IS-IS spokesman for a multiaccess segment can be
        changed on a per-interface basis by adjusting the value assigned to
        the interface. This process allows the DIS to be moved as needed. In
        this example, we move it to allow all routers sharing a multiaccess
        segment to receive a JUNOS upgrade without becoming the DIS.

Note
The election of a DIS is a deterministic event. As soon as an
          IS-IS-enabled router with a higher priority comes online on a
          multiaccess segment, it becomes the DIS. No adjacency reset is
          needed.

In the following command output, we see that r3 is currently serving as the DIS for the
        10.0.1.16/30 LAN, accessible on both r3 and r4
        through the ge-0/1/0.0 interfaces:

[edit protocols isis]
lab@r3# run show isis interface
IS-IS interface database:
Interface        L CirID Level 1 DR   Level 2 DR        L1/L2 Metric
ge-0/1/0.0       2   0x2 Disabled     r3.02                  10/10
ge-0/2/0.0       0   0x1 Disabled     Passive                10/10
ge-0/0/0.0       2   0x3 Disabled     r5.03                  10/10
ge-0/1/1.0       2   0x4 Disabled     0010.0000.0001.02      10/10
ge-0/0/1.301     0   0x1 Disabled     Passive                10/10
ge-0/0/1.302     0   0x1 Disabled     Passive                10/10
lo0.0            0   0x1 Disabled     Passive                 0/0

[edit protocols isis]
lab@r4# run show isis interface
IS-IS interface database:
Interface        L CirID Level 1 DR   Level 2 DR        L1/L2 Metric
ge-0/1/1.0       2   0x2 Disabled     r2.02                  10/10
ge-0/1/0.0       2   0x3 Disabled     0010.0000.0003.02      10/10
ge-0/2/0.0       0   0x1 Disabled     Passive                10/10
ge-0/0/0.0       2   0x4 Disabled     0010.0000.0005.02      10/10
ge-0/0/1.401     0   0x1 Disabled     Passive                10/10
ge-0/0/1.402     0   0x1 Disabled     Passive                10/10
lo0.0            0   0x1 Disabled     Passive                 0/0
The protocol IS-IS configuration on both r3 and r4
        explains why r3 holds the DIS
        responsibility. Notice that the priority for r3 on the ge-0/1/0 interface has been set to 100 but
        is currently at 50 for r4:

[edit protocols isis]
lab@r3# show
interface all {
    level 1 disable;
}
interface ge-0/1/0.0 {
    level 1 disable;
    level 2 priority 100;
}
interface ge-0/2/0.0 {
    level 1 disable;
    level 2 passive;
}
interface ge-0/0/1.301 {
    level 1 disable;
    level 2 passive;
}
interface ge-0/0/1.302 {
    level 1 disable;
    level 2 passive;
}


[edit protocols isis]
lab@r4# show
interface all {
    level 1 disable;
}
interface ge-0/1/0.0 {
    level 1 disable;
    level 2 priority 50;
}
interface ge-0/2/0.0 {
    level 1 disable;
    level 2 passive;
}
interface ge-0/0/1.401 {
    level 1 disable;
    level 2 passive;
}
interface ge-0/0/1.402 {
    level 2 passive;
    level 1 disable;
Prior to upgrading JUNOS on r3, we want to transfer DIS responsibility
        to r4. Do this by adjusting
        priority on either r3 or r4 (either lowering r3's priority or increasing r4's). In this example, we chose to set
        r4's priority for the interface to
        the maximum allowable value of 127:

[edit protocols isis]
lab@r4# set interface ge-0/1/0.0 level 2 priority 127
Committing the change and then running a few show commands confirms that the priority
        value adjustment on r4 had the
        desired result:

[edit protocols isis]
lab@r4# commit
commit complete

[edit protocols isis]
lab@r3# run show isis interface
IS-IS interface database:
Interface        L CirID Level 1 DR   Level 2 DR        L1/L2 Metric
ge-0/1/0.0       2   0x2 Disabled     0010.0000.0004.03      10/10
ge-0/2/0.0       0   0x1 Disabled     Passive                10/10
ge-0/0/0.0       2   0x3 Disabled     r5.03                  10/10
ge-0/1/1.0       2   0x4 Disabled     0010.0000.0001.02      10/10
ge-0/0/1.301     0   0x1 Disabled     Passive                10/10
ge-0/0/1.302     0   0x1 Disabled     Passive                10/10
lo0.0            0   0x1 Disabled     Passive                 0/0

[edit protocols isis]
lab@r4# run show isis interface
IS-IS interface database:
Interface        L CirID Level 1 DR   Level 2 DR        L1/L2 Metric
ge-0/1/1.0       2   0x2 Disabled     r2.02                  10/10
ge-0/1/0.0       2   0x3 Disabled     r4.03                  10/10
ge-0/2/0.0       0   0x1 Disabled     Passive                10/10
ge-0/0/0.0       2   0x4 Disabled     0010.0000.0005.02      10/10
ge-0/0/1.401     0   0x1 Disabled     Passive                10/10
ge-0/0/1.402     0   0x1 Disabled     Passive                10/10
lo0.0            0   0x1 Disabled     Passive                 0/0






Label-Switched Paths



Multiprotocol Label Switching (MPLS) label-switched paths (LSPs) provide a deterministic path through the network—which is
      fantastic, except when the deterministic path transits a router that
      needs a software upgrade. In the event the LSP transits a router to be
      upgraded, the network administrator should manually trigger traffic onto
      a secondary LSP or trigger the movement of the primary LSP onto a
      different router. Your choice of action depends on topology and on the
      signaling protocol chosen to set up the LSP.




RSVP-signaled LSPs



In Figure 6-3, r3 has an LSP running to r2 with a primary path that passes through
        r4 and a secondary path that passes
        through r1. A return LSP from
        r2 to r3 with similar parameters for the primary
        and secondary paths has also been configured. In this example, the
        administrators want to upgrade the JUNOS software on r4.









Figure 6-3. Primary and secondary LSPs


Relevant configuration elements on r3 and r2
        show how the primary and secondary paths are built and directed
        through the network. Notice that the standby option is being used with the
        secondary paths to have the backup LSP signaled as being up and ready
        for use. Also note that the fast-reroute option is enabled on these
        LSPs as well:

[edit]
lab@r3# show protocols mpls
no-cspf;
label-switched-path to-r2 {
    to 10.0.0.2;
    fast-reroute;
    primary to-r2-primary;
    secondary to-r2-secondary {
        standby;
    }
}
path to-r2-primary {
    10.0.0.4 loose;
}
path to-r2-secondary {
    10.0.0.1 loose;
}
interface all;

[edit]
lab@r2# show protocols mpls
no-cspf;
label-switched-path to-r3 {
    to 10.0.0.3;
    fast-reroute;
    primary to-r3-primary;
    secondary to-r3-secondary {
        standby;
    }
}
path to-r3-primary {
    10.0.0.4 loose;
}
path to-r3-secondary {
    10.0.0.1 loose;
}
interface all;
To confirm that both the primary and secondary LSPs are up in
        both directions, run show mpls lsp
        from both chassis. First, look at output from the command on r3:

edit protocols mpls]
lab@r3# run show mpls lsp
Ingress LSP: 1 sessions
To              From        State Rt ActivePath       P     LSPname
10.0.0.2        10.0.0.3    Up     0 to-r2-primary    *     to-r2
Total 1 displayed, Up 1, Down 0

Egress LSP: 2 sessions, 3 detours
To              From        State   Rt Style Labelin Labelout LSPname
10.0.0.3        10.0.0.2    Up       0  1 FF       3        - to-r3
10.0.0.3        10.0.0.2    Up       0  1 FF       3        - to-r3
Total 2 displayed, Up 2, Down 0

Transit LSP: 0 sessions, 2 detours
Total 0 displayed, Up 0, Down 0
Then look at output from the same command on r2:

[edit protocols mpls]
lab@r2# run show mpls lsp
Ingress LSP: 1 sessions
To              From        State Rt ActivePath       P     LSPname
10.0.0.3        10.0.0.2    Up     0 to-r3-primary    *     to-r3
Total 1 displayed, Up 1, Down 0

Egress LSP: 2 sessions, 2 detours
To              From        State   Rt Style Labelin Labelout LSPname
10.0.0.2        10.0.0.3    Up       0  1 FF       3        - to-r2
10.0.0.2        10.0.0.3    Up       0  1 FF       3        - to-r2
Total 2 displayed, Up 2, Down 0

Transit LSP: 0 sessions, 1 detours
Total 0 displayed, Up 0, Down 0
The output confirms that both LSPs are up with primary and
        secondary paths established. Both LSPs have a detour count indicating
        that fast-reroute is enabled to
        protect these paths.

Note
In large, highly complex networks, use the extensive option with the show mpls lsp command to confirm that all
          LSPs are following the desired paths as defined in the path
          attributes before you begin the JUNOS upgrade.

As you prepare to upgrade JUNOS on r4, the next step is to check for other
        transit LSPs on r4. In the
        following command output, it is apparent that only the bidirectional
        LSPs between r2 and r3 are transiting r4:

[edit protocols mpls]
lab@r4# run show mpls lsp
Ingress LSP: 0 sessions
Total 0 displayed, Up 0, Down 0

Egress LSP: 0 sessions
Total 0 displayed, Up 0, Down 0

Transit LSP: 4 sessions
To            From         State   Rt Style Labelin Labelout LSPname
10.0.0.2      10.0.0.3     Up       1  1 FF  100032        3 to-r2
10.0.0.2      10.0.0.3     Up       1  1 FF  100064        3 to-r2
10.0.0.3      10.0.0.2     Up       1  1 FF  100048        3 to-r3
10.0.0.3      10.0.0.2     Up       1  1 FF  100080        3 to-r3
Total 4 displayed, Up 4, Down 0
Because of the LSP protection configuration options and the
        confirmation that no other LSPs are transiting r4, you can force traffic onto the secondary
        paths with minimal service interruption by disabling RSVP on r4. LSP traffic between r2 and r3
        transfers immediately to the backup paths, which you can confirm using
        the extensive option on the
        show mpls lsp command, here shown
        for r2:

[edit protocols mpls]
lab@r2# run show mpls lsp ingress extensive
Ingress LSP: 1 sessions

10.0.0.3
  From: 10.0.0.2, State: Up, ActiveRoute: 0, LSPname: to-r3
  ActivePath: to-r3-secondary (secondary)
  FastReroute desired
  LoadBalance: Random
  Encoding type: Packet, Switching type: Packet, GPID: IPv4
  Primary   to-r3-primary    State: Up
    SmartOptimizeTimer: 180
    Received RRO (ProtectionFlag 1=Available 2=InUse 4=B/W 8=Node
10=SoftPreempt):
          10.0.1.25 10.0.1.21
   17 Nov 15 18:44:34 10.0.1.29: MPLS label allocation failure[8 times]
   16 Nov 15 18:42:40 Deselected as active
   15 Nov 15 18:42:40 Record Route:  10.0.1.25 10.0.1.21
   14 Nov 15 18:42:40 Down
   13 Nov 15 18:42:40 10.0.1.18: MPLS label allocation failure
   12 Nov 15 18:42:40 10.0.1.29: MPLS label allocation failure
   11 Nov 15 18:42:40 10.0.1.18: MPLS label allocation failure
   10 Nov 15 18:42:40 10.0.1.29: MPLS label allocation failure
    9 Nov 15 18:25:49 Fast-reroute Detour Up
    8 Nov 15 18:25:40 Record Route:  10.0.1.29(flag=1) 10.0.1.17
    7 Nov 15 18:25:36 Record Route:  10.0.1.29 10.0.1.17
    6 Nov 15 18:25:36 Up
    5 Nov 15 18:25:36 Originate make-before-break call
    4 Nov 15 17:27:44 Selected as active path
    3 Nov 15 17:27:44 Record Route:  10.0.1.29 10.0.1.17
    2 Nov 15 17:27:44 Up
    1 Nov 15 17:27:44 Originate Call
 *Standby   to-r3-secondary  State: Up
    SmartOptimizeTimer: 180
    Received RRO (ProtectionFlag 1=Available 2=InUse 4=B/W 8=Node
10=SoftPreempt):
          10.0.1.25 10.0.1.21
   12 Nov 15 18:42:40 Record Route:  10.0.1.25 10.0.1.21
   11 Nov 15 18:42:40 Selected as active path
   10 Nov 15 18:42:40 Fast-reroute Detour Down
    9 Nov 15 18:27:15 Fast-reroute Detour Up
    8 Nov 15 18:25:40 Record Route:  10.0.1.25(flag=1) 10.0.1.21
    7 Nov 15 18:25:36 Record Route:  10.0.1.25 10.0.1.21
    6 Nov 15 18:25:36 Up
    5 Nov 15 18:25:36 Originate Call
    4 Nov 15 18:25:36 Clear Call
    3 Nov 15 17:30:10 Record Route:  10.0.1.25 10.0.1.21
    2 Nov 15 17:30:10 Up
    1 Nov 15 17:30:09 Originate Call
  Created: Sat Nov 15 17:27:44 2008
Total 1 displayed, Up 1, Down 0
Running the same command on r3 confirms that the return LSP has also
        moved to the secondary path:

[edit protocols mpls]
lab@r3# run show mpls lsp ingress extensive
Ingress LSP: 1 sessions

10.0.0.2
  From: 10.0.0.3, State: Up, ActiveRoute: 0, LSPname: to-r2
  ActivePath: to-r2-secondary (secondary)
  FastReroute desired
  LoadBalance: Random
  Encoding type: Packet, Switching type: Packet, GPID: IPv4
  Primary   to-r2-primary    State: Up
    SmartOptimizeTimer: 180
    Received RRO (ProtectionFlag 1=Available 2=InUse 4=B/W 8=Node
10=SoftPreempt):
          10.0.1.22 10.0.1.26
   15 Nov 15 18:44:34 10.0.1.18: MPLS label allocation failure[8 times]
   14 Nov 15 18:42:40 Deselected as active
   13 Nov 15 18:42:40 Record Route:  10.0.1.22 10.0.1.26
   12 Nov 15 18:42:40 Down
   11 Nov 15 18:42:40 10.0.1.29: MPLS label allocation failure
   10 Nov 15 18:42:40 10.0.1.18: MPLS label allocation failure[2 times]
    9 Nov 15 18:25:48 Fast-reroute Detour Up
    8 Nov 15 18:25:40 Record Route:  10.0.1.18(flag=1) 10.0.1.30
    7 Nov 15 18:25:36 Record Route:  10.0.1.18 10.0.1.30
    6 Nov 15 18:25:36 Up
    5 Nov 15 18:25:36 Originate make-before-break call
    4 Nov 15 17:27:44 Selected as active path
    3 Nov 15 17:27:44 Record Route:  10.0.1.18 10.0.1.30
    2 Nov 15 17:27:44 Up
    1 Nov 15 17:27:44 Originate Call
 *Standby   to-r2-secondary  State: Up
    SmartOptimizeTimer: 180
    Received RRO (ProtectionFlag 1=Available 2=InUse 4=B/W 8=Node
10=SoftPreempt):
          10.0.1.22 10.0.1.26
   12 Nov 15 18:42:40 Record Route:  10.0.1.22 10.0.1.26
   11 Nov 15 18:42:40 Selected as active path
   10 Nov 15 18:42:40 Fast-reroute Detour Down
    9 Nov 15 18:27:14 Fast-reroute Detour Up
    8 Nov 15 18:25:40 Record Route:  10.0.1.22(flag=1) 10.0.1.26
    7 Nov 15 18:25:36 Record Route:  10.0.1.22 10.0.1.26
    6 Nov 15 18:25:36 Up
    5 Nov 15 18:25:36 Originate Call
    4 Nov 15 18:25:36 Clear Call
    3 Nov 15 17:29:42 Record Route:  10.0.1.22 10.0.1.26
    2 Nov 15 17:29:42 Up
    1 Nov 15 17:29:42 Originate Call
  Created: Sat Nov 15 17:27:44 2008
Total 1 displayed, Up 1, Down 0
From an MPLS perspective, r4
        is now ready for the JUNOS software upgrade. All LSPs have been moved
        off the router with minimal downtime.

Note
It is not uncommon for the admins of a large service provider
          network to experience problems when trying to move LSPs with high
          bandwidth constraints (we discuss RSVP bandwidth constraints in
          Chapter 16). This
          is because LSP establishment will fail in the absence of adequate
          reserveable bandwidth. One option would be to temporarily configure
          the LSP bandwidth requirement to a low value:

[edit protocols mpls]
lab@r3# set label-switched-path to-r2 bandwidth 1k
Another option could be to use clear
          mpls lsp optimize-aggressive, effectively removing the
          bandwidth constraint check steps for LSP setup.
















Chapter 7. Painless Software Upgrades



Juniper Networks recently added features to JUNOS software that
  dramatically reduce the impact of software upgrades on transit traffic by
  making it possible to upgrade the router operating system while the router
  is "in service." In this chapter, we build on the pre-upgrade procedures
  discussed in the previous chapter and show how unified In-Service Software
  Upgrade (ISSU) functionality supports high availability goals.
Unified ISSU functionality applies only to platforms with redundant
  routing engines (REs). And since not all routers have
  redundant REs, this chapter examines software upgrades for platforms that
  support unified ISSU and software upgrades for platforms with a single RE or
  where a release of JUNOS supporting unified ISSU is not in use. Figure 7-1 shows the network topology
  that we'll upgrade.
In Figure 7-1, routers
  r5 and r6 have redundant REs and are platforms that
  support ISSU functionality. Routers r1,
  r2, r3, and r4 do not have redundant REs but are to some
  extent paired so as to allow continuity of operations during OS upgrades
  (i.e., r1 is paired with r2, and r3 with
  r4).













Snapshots



Immediately before upgrading a chassis using either an ISSU or a non-ISSU
    image, capture a snapshot of the known stable image and configuration
    using the request system snapshot
    command. Doing this is important because problems do sometimes arise
    during the upgrade process, and having a known good fallback point makes
    it possible to recover quickly.









Figure 7-1. Enterprise topology to be upgraded


The snapshot command copies the
    content of /config and /root on the boot media to /altconfig and /altroot on the alternate boot media. For
    example, if the router boots from CompactFlash, the snapshot command creates the /alt files on the hard drive. If the router
    boots from the hard drive, the /alt
    files are created on the CompactFlash:

[edit]
lab@r5-re0# run request system snapshot

Note
The request system snapshot
      command is commonly used with the partition option to troubleshoot failed boot
      media, including CompactFlash or
      the hard drive. In the following example, the CompactFlash has failed and should be
      replaced. We know this because of the error message generated:

[edit]
lab@r5-re0# run request system snapshot partition
error: s1a media missing or invalid














Software Upgrades with Unified ISSU



For routers with redundant REs, unified ISSU allows the administrator to
    upgrade between two different JUNOS software releases with no disruption
    on the control plane and with minimal disruption of traffic.




How It Works



Although the goal of this book is to discuss practical application
      of tools and technologies rather than protocol theory, let's take a
      quick look at how unified ISSU performs its magic. The process begins
      when the in-service-upgrade
      command is executed on the master RE:

[edit]
lab@r5-re0# run request system software in-service-upgrade /var/tmp/jinstall-9
.3R1.7-domestic-signed.tgz reboot
After this command is entered, the router begins an eight-step sequence to complete the
      upgrade:



The router validates the configuration to make sure all
          elements are compatible with the new revision of code, in this case
          9.3R1.7. The router also checks to make sure that all Physical Interface Cards (PICs) are compatible with
          ISSU. If an incompatible PIC is found, the upgrade continues but the
          router issues a warning.


Kernel state on the backup RE is synchronized with the master RE.


The configuration file on the master RE is copied to the
          backup RE.


The backup RE is upgraded with the new operating system, and
          then kernel state is resynchronized to the master.


chassisd on the master RE
          notifies the Packet Forwarding Engine (PFE) on each Flexible PIC Concentrator (FPC) to download the new
          image from the backup RE.


The PFEs download the image, then reboot. Following reboot,
          they come back online synchronized to the backup RE.


Once all PFEs are synchronized to the backup RE, ownership of
          the chassis transfers to the backup RE and the backup becomes the
          master.


The former master is now upgraded to the new version of code
          and the process is complete.








Implementation Details



Support for unified ISSU is expanding across the M Series and T Series
      product lines with most new major releases of JUNOS. Table 7-1 shows unified ISSU platform
      support by JUNOS release.


Table 7-1. Unified ISSU platform support









Platform


First software release
              that supports unified ISSU






M120


JUNOS 9.2




M320


JUNOS 9.0




MX240,
              MX960


JUNOS 9.3




T320


JUNOS 9.0




T640


JUNOS 9.0




T1600


JUNOS 9.1




TX Matrix


JUNOS 9.3






Notice that not every protocol feature of JUNOS is compatible with
      unified ISSU. Table 7-2 lists
      protocols that support unified ISSU and the first software release on
      which unified ISSU for the protocol began being supported.


Table 7-2. Unified ISSU protocol support









Protocol


First software release
              that supports unified ISSU






Border Gateway Protocol (BGP)


JUNOS 9.0




Open Shortest Path
              First (OSPF), OSPFv3


JUNOS 9.0




Intermediate System to
              Intermediate System (IS-IS)


JUNOS 9.0




Label Distribution
              Protocol (LDP)


JUNOS 9.0




Virtual Private LAN
              Service (VPLS)


JUNOS 9.3




Layer 2
              circuits


JUNOS 9.2




Layer 3 virtual private
              networks (VPNs)


JUNOS 9.2




Protocol-Independent
              Multicast (PIM; sparse, dense
              modes)


JUNOS 9.3






Notice that not all PICs are compatible with unified ISSU. During a unified ISSU
      operation, legacy PICs that do not support unified ISSU trigger a
      warning message which indicates that specific PICs in the chassis will
      be momentarily taken offline during the software upgrade. Once the new
      firmware is upgraded, the PICs are brought back online.

Note
While a few seconds of interface downtime may sound trivial, it
        can be significant. During this time, any routing protocol enabled on
        the interface loses connectivity across that interface to neighbors.
        This means that while the PIC downtime might last for only a second,
        the protocols' recovery time could be dramatically longer. It is
        indeed best to understand potential downtime well in advance of the
        upgrade. A complete list of legacy PICs that do not support unified
        ISSU is available in the "High Availability Guide" that accompanies
        each release of JUNOS software. For JUNOS 9.3, it is available at the
        following URL:

http://www.juniper.net/techpubs/software/junos/junos93/swconfig-high-availability/unified-issu-pic-support.html#section-issu-supported-pics






Configuration dependencies



To perform unified ISSU, Graceful Routing Engine Switchover (GRES) and Non-Stop Active Routing (NSR) must be enabled on the
        router. GRES is the component that allows the router to switch between
