
Configuration
              Manager






Configuration


Provides for viewing and editing of configuration
              files


Prevents user-caused
              configuration errors




JUNOScript


Provides for the
              management of JUNOScript
              scripts on network devices


Allows network engineers
              to ensure that the scripts they developed to ensure high
              availability exist on the system






Inventory Management
              System






Hardware


Tracks information on hardware within the chassis of
              network equipment


Speeds the time for
              replacement of failed equipment by having a central repository
              for serial number and other equipment information




Licensing


Tracks information on the
              licenses for upgraded modules


Provides a central
              repository for licensing information to prevent service outages
              caused by lack of licensing or passing license
              limits






Software
              Manager






Import


Allows software to be loaded onto the JUNOScope
              server


Provides a central
              repository for JUNOS software so that upgrades can be performed more
              efficiently




Upgrade


Pushes software to
              network equipment from the central repository and upgrade
              devices


Prevents user error in
              loading software onto network equipment










JUNOScope installation



Once the hardware requirements of the server are met, the installation of
        JUNOScope is very straightforward. Installation on a Sun Solaris box
        requires a simple installation shell script. Installation on a Red Hat
        Enterprise Linux server requires the standard Red Hat Package Manager
        (RPM) software. After installation, the software can be configured to
        scan for network devices.















Juniper AIS



The creation of Juniper Advanced Insight Solutions (AIS) has made Juniper
    Networks a partner in maintaining continuous systems by providing in-depth
    support for the Juniper Networks products. AIS, which is built on top of
    the JUNOScript ability in JUNOS software, allows Juniper to automatically
    detect events and gather network intelligence information, manage
    incidents, and provide information to Juniper Support Systems
    (JSS) to facilitate efficient resolution of incidents, and
    provide intelligence to prevent future incidents.




Overview



Juniper AIS is made up of three main components that work together to
      provide proactive and reactive support for your network and allow you to
      maintain high availability for critical components.
At the heart of AIS are the Advanced Insight Scripts, which are a collection of ops scripts used to detect,
      collect, and gather incident information and network intelligence. All
      the information gathered in the scripts is converted into Juniper
      Message Bundles (JMBs) and sent to archive sites, which can be forwarded to the
      JTAC so that they can quickly and efficiently correct incidents that
      cause network downtime and identify situations that could lead to
      network downtime in the future.
The Advanced Insight Manager (AIM), which installs on Solaris/Linux systems, provides a
      secure conduit between the locally based archives containing information
      and the intelligence provided by the Advanced Insight Scripts and JSS.
      Working as a central hub, the AIM monitors and connects to all local
      archives of information, and provides controls for managing JTAC cases. The AIM can be configured in one of three
      modes:



Standard Mode


The users connect directly through the AIM to the JSS to
            send and receive network information and JTAC case information.
            This deployment is useful for large network providers with highly
            technical engineering staffs.


Partner Controller


The users at customer sites connect to a partner-supplied
            AIM that connects to the JSS. The partner can determine what
            information is sent to and from the customers. ISPs and other
            network providers use this as an additional service for ensuring
            high availability among customers.


End Customer


The customer's AIM server connects to the JSS through a
            partner's AIM device. The customer has full control of the AIM,
            but is limited in some functionality. Like the Partner Controller,
            this option allows ISPs to provide the tools necessary for high
            availability to customers, but also allows larger customers to
            have some control over their AIM and have a greater hand in
            providing continuous systems to their network.



The JSS is a series of tools and databases designed to enable JTAC
      and network engineers to resolve incidents quickly and to provide
      proactive monitoring to prevent situations that can lead to future
      network downtime. The JSS has access to all of the necessary information
      for maintaining networking equipment and providing continuous systems,
      including configuration item databases, bug and knowledge base data, and
      analytic processes. Figure 11-4
      illustrates the location of the AIM server in the network in a simple
      deployment.









Figure 11-4. Juniper AIM architecture


The AIM is a web-driven tool that provides the convenience of a
      single access point to data collected through the Advanced Insight
      Scripts, as well as to the resources of the JSS. Because of mergers and
      acquisitions, some Juniper Networks equipment does not support
      JUNOScript (the equipment running operating systems other than JUNOS,
      such as JUNOSe). The AIM allows for information gathering for these
      devices, as well as those running older versions of JUNOS, through the
      use of the Data Collector process. The information from these devices
      can be used with the JSS and JTAC.





AIS for High Availability



Though the use of the AIS requires licensing, the power it gives
      network engineers to maintain continuous systems is extraordinary. By
      increasing the efficiency of interaction between the JTAC and your local
      network engineers, issues that do arise can be solved quickly and future
      issues to network downtime can be caught and prevented.




Installation



The first step in the use of AIS is installation of the Advanced
        Insight Scripts on the network
        devices. You can load the scripts manually, or automatically
        using JUNOScope. When you load
        the Advanced Insight Scripts manually, you must download them from the
        Juniper website and move the package to the
        /var/sw/pkg directory of the networking
        equipment. Then you can extract them to the appropriate locations
        using the request system software
        add command. Once you've added them to the system, you can
        activate the scripts using the JAIS activation script. In the
        following example code, the activation script is inserting the JAIS
        scripts into the configuration using the commit script
        function:

groups {
  juniper-ais {
    system {
      scripts {
        commit {
          allow-transients;
          file jais-activate-scripts.slax {
            optional;
          }
        }
        load-scripts-from-flash;
     }
  }
}
event-options {
  destinations {
    AIS-Archive {
      archive-sites {
        "ftp://anonymous@archive.example.com/AIS";
    }
   }
}
The preceding configuration not only calls out where the scripts
        are located, but also points to the destination for the archived
        information. This archive can be accessed to provide information to
        JTAC and JSS directly or through the AIM:

user@host# show configuration groups juniper-ais | display commit-scripts
system {
  scripts {
    commit {
      allow-transients;
      file jais-activate-scripts.slax {
        optional;
      }
    }
  }
}
event-options {
  event-script {
    file problem-event-pfecrash.slax;
    file problem-event-dcrash.slax;
    file intelligence-event-main.slax;
    file SPD_EVLIB_CREATE_FAILURE.slax;
    file SPD_DAEMONIZE_FAILED.slax;
    [remainder omitted]
  }
  destinations {
    AIS-Archive {
      archive-sites {
        "ftp://anonymous@archive.example.com/AIS";
      }
   }
}
Once you have activated the scripts, you can confirm them by
        using the show configuration commands, and by calling
        out the specifics of the Advanced Insight Scripts. In the preceding
        example, the various Stylesheet Language Alternative Syntax (SLAX) scripts
        have been added to the event-script
        portion of the hierarchy with the appropriate destination. eventd will now
        monitor for the described events and send messages to the AIM archive
        sites. Using AIM, the results from these scripts can also be
        configured to forward events to third-party network management
        devices.
You install AIM through a graphical installation binary file
        available for download from Juniper Networks. The binary file walks
        you through the entire installation process.





AIS planning



Because AIS is a tool for integration with the JSS and the
        specialized Insight JTAC, one decision that you must make for AIS is
        what level of support will be required. Table 11-2 illustrates an example of J-Care levels
        and features.


Table 11-2. Support levels













J-Care essential
                services


J-Care efficiency
                services


J-Care continuity
                services


J-Care agility
                services








Business
                protection






Technical
                support


X


X


X


X






Operational
                efficiency






Inventory management
                assistance

 

X


X


X




Knowledge
                transfer

 

X


X


X




Automated incident
                management

 

X


X


X






High
                availability






Service desk
                management

 
 

X


X




Access to Insight
                JTAC

 
 

X


X






Evolution and
                adaptability






Advanced
                options

 
 
 

X




Proactive product report

 
 
 

X





















Partner Tools



In addition to the tools available to maintain high availability, Juniper
    also offers APIs to allow Juniper Partners to develop and deploy
    applications for service creation and management, as well as directly
    interact with JUNOS and with multiservice Physical Interface Cards (PICs)
    to provide services built directly on the stable foundation of JUNOS. By
    allowing service providers that are considered best-in-breed in their
    respective fields to develop services and software that integrate directly
    with JUNOS and the other Juniper Networks management software, Juniper
    Partners can guarantee high availability for their customers.




Open IP Service Development Platform (OSDP)



OSDP allows best-in-breed producers to access APIs in the Service
      Resource Controller (SRC) software to allow for integration and rollout
      of new service networks. The OSDP allows direct access to JTAC and
      software development engineers for the creation and testing of the new
      software.





Partner Solution Development Platform (PSDP)



PSDP software gives engineers direct access to Juniper to develop
      software that directly interacts with the JUNOS operating system and the
      Juniper hardware. Using SDKs and JUNOS APIs, software engineers can
      build tools to better secure or provide high availability to the
      network. Some examples of groups taking advantage of the PSDP
      include:



Customers


Allows for development of applications used on their
            networks to provide additional security, stability, or unique
            service offerings


Integration partners and OEMs


Allows channel partners to integrate services, such as VoIP,
            more intimately in the hardware and software of the networking
            equipment


Universities and research


Allows for the development and testing of new and
            cutting-edge services on a stable routing platform

















Chapter 12. Managing Intradomain Routing Table
  Growth



This chapter provides a useful collection of methods, tips, and tricks for
  controlling routing table growth. While controlling the size of routing
  tables was once imperative because of memory and processor limitations on
  many vendors' routing platforms, those limitations are no longer the prime
  reasons to do so. Because modern networks' routing tables are minimized as
  much as possible to simplify operation and troubleshooting, controlling
  routing table growth is a much more basic equation—fewer routes equals fewer
  potential routing issues, and therefore increases uptime.
For example, suppose you came into the operations center to bring up a
  new local area network (LAN) with a bank of web servers during a routine
  2:00 a.m. maintenance window. Shortly after bringing the servers online, you
  lose remote connectivity to the LAN. The flashing red icon on the network
  management map confirms the loss and you immediately reverse the changes.
  You then spend a few hours trying to figure out why the activation of the
  subnet impacted traffic. After much digging, you determine the issue to be
  the result of several small factors, the classic "death by a thousand cuts,"
  but it's already 5:00 a.m. The maintenance window closed an hour ago. So,
  what caused the failure?



A few static routes that were no longer needed were left
      configured on a router.


An IP address conflict existed between the new server LAN and
      several existing LANs.


The crisis was exacerbated by lack of a sensible IP addressing
      scheme, which would have made it possible to distinguish between host
      LANs and infrastructure links.


Finally, the massive number of routes in the table helped obscure
      the problems.



In the end, a new maintenance window has to be scheduled and the
  launch of some new revenue-generating service, based on the new server LAN,
  has to be delayed for more than a week.
While not an outage in the classic sense, the end result was the same:
  loss of service that resulted in loss of revenue.
This chapter focuses on key mechanisms that reduce the number of
  routes needed to route traffic bound for intradomain destinations, thus
  promoting high availability. It also addresses the reasons and methods for
  limiting external advertisement (and therefore reachability) to certain
  destinations within the Autonomous System (AS). Specific implications of
  route reduction for both carrier and enterprise networks are also covered in
  this chapter.













Address Allocation



Intelligent address allocation is arguably the most critical element in controlling the size
    of the intradomain routing table. While an intelligent addressing scheme
    is often a byproduct of "good design," and therefore applicable in
    "greenfield" situations, it is also an element that can be applied to
    mature networks. Furthermore, the increasing use of multiple logical
    networks or service overlays, riding on a single collection of physical
    routers, means that many more architecture and design opportunities for
    intelligent address allocation exist than did just a few years ago.



Logical Networks As Design Opportunities
Logical networks as a tool for high availability are covered in detail later
      in this chapter. However, they do merit some immediate discussion to
      clarify the previous statements on design opportunity being more than a
      "greenfield" endeavor.
A logical network is a collection of logical components, including
      IP addresses, routing protocols, routing policies, virtual
      LAN (VLAN) tags, and ATM PVCs, that are collected together on a group of
      physical devices and links. Several years ago, businesses were content
      to have a single logical construct in their physical network, but this
      is no longer the case. Service providers and medium to large enterprise
      networks now commonly have multiple logical networks overlaid on the
      same physical infrastructure.
A network must have a Layer 2 and Layer 3 addressing scheme, as
      well as a way to share reachability information with other devices in
      the network, so at least one logical network is necessary. But setting
      up multiple independent logical networks is a way to separate customer
      traffic, create independent service domains, and provision Quality of
      Service (QoS), streaming multicast, or traffic separation for a subset
      of the existing customer base. These logical networks, sometimes
      called logical overlays, are used to
      separate and control services for customer billing or to limit the
      exposure of the network to services that are not needed everywhere in
      the domain.
The increasing use of logical overlays results in greater network
      complexity, placing higher demands on the skills of the support staff.
      Getting the foundational design elements (IP addressing)
      right becomes critical to the integrity and
      availability of the network.

Seldom does a network retain the shape described by its original
    architects. Technologies change; applications and services evolve or die
    out completely. Even in the absence
    of multiple logical networks or service overlays, engineers have many
    opportunities throughout the life of a network to properly allocate
    address space. As a result, it's important to discuss interface addressing
    in the context of high availability.




Interface Addressing



Interface addressing, or the process of assigning one or more logical identities to a
      physical port, seems on the surface like a very simple task. If done
      properly, it is part of the solution to controlling the size of your
      intradomain routing tables. However, if done improperly, it works
      against high availability. For example, every network engineer has at
      one time or another built an entire network using just
      192.168.n/24 addresses for everything, including
      all host LANs and infrastructure links. Likewise, nearly every engineer
      has felt the pain of having to go back and readdress that same network
      as it expands in scale and complexity—to the point where the addressing
      scheme hampers growth and makes troubleshooting a slow, cumbersome
      endeavor. Don't be ashamed. The authors of this book are guilty as well.
      This mistake is dishonorable only if repeated. So, how do we properly
      assign network addresses?




JUNOS interface addressing syntax



Interface addressing syntax in JUNOS software is quite intuitive.
        All logical components related to a single logical connection are
        grouped under a unit number.
        Logical elements can include a Layer 2 and Layer 3 address, and should
        always include a description.

Note
Because this chapter focuses on controlling the size and
          content of intradomain routing tables, we do not cover the full
          range of interface configuration options in detail. You can find a
          thorough list and description
          of interface-related configuration elements at http://www.juniper.net/support.

In this example, interface fe-0/0/0 has vlan-tagging enabled and three VLANs
        configured. unit 70 corresponds to
        VLAN 70, unit 90 to VLAN 90, and
        unit 100 to VLAN 100. Each VLAN
        carries a description as well as an
        IP address:

[edit interfaces fe-0/0/0]
lab@r5# show
vlan-tagging;
unit 70 {
    description "VLAN connection to r3";
    vlan-id 70;
    family inet {
        address 10.0.1.9/30;
    }
}
unit 90 {
    description "VLAN Primary to r6";
    vlan-id 90;
    family inet {
        address 10.0.1.2/30;
    }
}
unit 100 {
    description "VLAN Secondary to r6";
    vlan-id 100;
    family inet {
        address 10.0.1.6/30;
    }
}

Note
The unit numbering scheme in this example is intentional.
          Successful JUNOS engineers quickly get in the habit of matching the
          unit number—the logical
          interface identifier—to the logical interface address. This
          simplifies protocol configuration (see Using Protocol Tweaks to Control Routing Table Size) and can
          reduce troubleshooting time and, therefore, downtime.

Intelligent interface addressing requires an understanding of
        the purpose of the network. Subnet IPs should be allocated based on the purpose of
        the link to which they are being assigned. For example, in enterprise
        environments it is almost always necessary to distinguish between IP
        addresses used for corporate LANs and IP addresses used for
        connectivity to the Internet and partnering networks. In many
        networks, the distinction is simple: internal addresses are drawn from
        the private range and external addresses are drawn from the public
        range.
Furthermore, the range of addresses used within the corporate
        network can be divided into subnets used for router-to-router
        communication and subnets used for host machines. Therefore, one block
        of IP addresses should be reserved for infrastructure links
        and device IDs, another block for internal user and server LANs, and a
        third block for LANs used for connections to kiosks and other areas
        outside the corporate domain. The network shown in Figure 12-1 demonstrates how
        addresses can be pulled from different blocks of space based on link
        purpose. Interface addressing simplifies both traffic engineering and
        troubleshooting of the network, while conserving address space.
In Figure 12-1,
        all router and security devices are assigned an IP address that serves
        as a device ID, commonly referred to as a loopback address. All loopback
        addresses in Figure 12-1 take the form
        10.0.0.<device ID#>. This numbering
        scheme permits up to 254 routers and security devices within the
        network. Considering that there are currently only six, this design
        leaves adequate room for growth.









Figure 12-1. Small-enterprise design using private IPs


The infrastructure links in Figure 12-1 begin numbering
        at 10.0.1.0/30 (recall that the 10.0.0/24 space was reserved for
        device IDs). While address conservation is itself a noble goal, you
        should also allow adequate space for network growth. With this in
        mind, only infrastructure links in Figure 12-1 are drawn from
        the 10/8 addressing space in this design, leaving ample room for
        network growth, network virtualization, and numerous service overlays.
The addressing scheme used for the Corp LANs in Figure 12-1 draws from the
        172.16/12 range of private addresses. In this design, all LANs are in
        the 172.16/16 space and are subnetted out to 24 bits, resulting in a
        capacity of 255 subnets with as many as 254 host machines per subnet.
        While a full /24 was used in this example, user LANs should be
        appropriately scoped for the number of users that will connect to
        them. Though commonly used, a 24-bit subnet mask may be overkill in
        many cases for a segment expected to have few hosts. Table 12-1 is a good quick
        reference for subnet scoping based on anticipated number of hosts.


Table 12-1. Usable hosts for common subnet masks










Bit
                mask


Bit mask (dotted
                decimal notation)


Usable
                hosts






/24


255.255.255.0


254




/25


255.255.255.128


126




/26


255.255.255.192


62




/27


255.255.255.224


30




/28


255.255.255.240


14




/29

