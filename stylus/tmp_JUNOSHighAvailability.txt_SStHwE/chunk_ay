        distribution layer and, to a lesser extent, at the access
        layer.









Figure 15-4. Transitioning from an all-Ericsson network to an all-Juniper
          network, starting with the core







Site-based transitions



By their very nature and purpose, site-based architectures are seldom
        single-vendor networks. An even rarer event would be the need to
        change vendors for a single-vendor site-based architecture. However,
        should the oddsmakers take a beating and the need arise you would
        begin the process by following a pattern similar to the layered
        transition:



Start up the new provider routers and establish peering
            sessions to all provider, edge, and data center routers.


Manipulate metrics and protocol settings to make traffic
            "want" to transition the new provider routers instead of the
            old.


Decommission the old provider routers.


Enable new provider edge routers that parallel existing
            sites, and configure peering relationships to the provider
            chassis.


Once you have confirmed that the edge routers are
            functional, establish peering relationships to customer edge
            routers and transition the traffic.



The transition is completed when all sites are cut over to the
        new devices.















Routing Protocol Interoperability



Figure 15-5
    illustrates a few issues you may encounter when running common
    industry-standard routing protocols among Juniper and Cisco routers. In
    this figure, devices from different vendors have been mixed in a rather
    haphazard way to trigger certain issues that we want to address. The
    figure does not necessarily reflect a layered or site-based approach to
    multivendor networks.









Figure 15-5. Base topology for IGP and BGP interoperability concerns


In Figure 15-5,
    routers r2, r3, and r5 share OSPF adjacencies, which use MD5
    authentication, and Internal BGP (IBGP) relationships within AS 64512.
    Router r5 is an External BGP (EBGP)
    peer to r1 in AS 100. Routers r2 and r3 are
    EBGP peers to r4 in AS 400.
In this example, we assume that AS 64512 contains other Cisco
    devices that are connected in a partial mesh. Router r5 represents the collection of Cisco
    routers.




Interface Connectivity



Before bringing up OSPF or BGP relationships among the Cisco and
      Juniper devices, we must first establish simple Layer 3 connectivity.
      Assuming that all physical cabling is in place, we add the necessary
      configuration elements for the Cisco-Juniper connections on r5. This snippet shows Fast Ethernet
      interfaces 0/0 and 0/1 configured with appropriate IP addresses
      for connectivity to r3 and r2. We also see the appropriate address for
      serial interface 0/0 and confirm that
      a loopback address is available for IBGP connectivity:

interface Loopback0
 ip address 10.0.0.5 255.255.255.255
 no ip directed-broadcast
!
interface FastEthernet0/0
 ip address 10.0.1.17 255.255.255.252
 no ip directed-broadcast
!
interface Serial0/0
 bandwidth 1544
 ip address 172.16.5.1 255.255.255.252
 no ip directed-broadcast
!
interface FastEthernet0/1
 ip address 10.0.1.21 255.255.255.252
 no ip directed-broadcast
Routers r2 and r3 host the Juniper side of the Fast Ethernet links. Configuration for r2 and r3
      is straightforward. Here it is on router r2:

[edit interfaces]
lab@r1# show
fe-0/0/0 {
    unit 0 {
        family inet {
            address 10.0.1.25/30;
        }
    }
}
fe-0/0/1 {
    unit 0 {
        family inet {
            address 10.0.1.22/30;
        }
    }
}
Router r3 has a similar
      configuration:

[edit interfaces]
lab@r3# show
fe-0/0/0 {
    unit 0 {
        family inet {
            address 10.0.1.26/30;
        }
    }
}
fe-0/0/1 {
    unit 0 {
        family inet {
            address 10.0.1.18/30;
        }
    }
}
Router r1 hosts the Juniper
      side of the T1 connection (serial 0/0) to router r5. The interface configuration on r1 includes the necessary elements:

[edit interfaces]
lab@r1# show
t1-0/0/2 {
    unit 0 {
        family inet {
            address 172.16.5.2/30;
        }
    }
}
Use ping commands on r5 to
      confirm Layer 3 connectivity on all connected interfaces. Router
      r5 expects to receive replies from
      r1, r2, and r3:

r5>ping 10.0.1.22

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.0.1.22, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 8/21/68 ms
r5>ping 10.0.1.18

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 10.0.1.18, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 1/2/4 ms
r5>ping 172.16.5.2

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 172.16.5.2, timeout is 2 seconds:
.....
Success rate is 0 percent (0/5)
Routers r2 and r3 responded to the pings, but clearly there
      is a problem with the connection
      to r1. Further investigation is
      required. We use variations of a show interface command on both vendors'
      platforms to look for compatibility issues. At this point, assume that
      the physical cabling, a T1 cross-connect that is a standard pin-out
      recognized by both vendors, has been confirmed to be good. Output from
      r5 is shown first, followed by output
      from r1:

r5>show int serial 0/0
Serial0/0 is up, line protocol is down
  Hardware is PQUICC with Fractional T1 CSU/DSU
  Internet address is 172.16.5.1/30
  MTU 1500 bytes, BW 1544 Kbit, DLY 20000 usec,
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation HDLC, loopback not set
  Keepalive set (10 sec)
  Last input 00:00:02, output 00:00:00, output hang never
...

[edit interfaces]
lab@r1# run show interfaces t1-0/0/2
Physical interface: t1-0/0/2, Enabled, Physical link is Up
  Interface index: 139, SNMP ifIndex: 36
  Link-level type: PPP, MTU: 1504, Clocking: Internal, Speed: T1,
  Loopback: None, FCS: 16, Framing: ESF
  Device flags   : Present Running
  Interface flags: Point-To-Point SNMP-Traps Internal: 0x4000
  Link flags     : Keepalives
  Keepalive settings: Interval 10 seconds, Up-count 1, Down-count 3
  Keepalive: Input: 0 (never), Output: 0 (never)
  LCP state: Down
  NCP state: inet: Not-configured, inet6: Not-configured,
  iso: Not-configured, mpls:
  Not-configured
  CHAP state: Closed
  PAP state: Closed
  CoS queues     : 8 supported, 8 maximum usable queues
  Last flapped   : 2009-03-21 04:54:48 UTC (00:36:47 ago)
  Input rate     : 0 bps (0 pps)
  Output rate    : 0 bps (0 pps)
  DS1   alarms   : None
  DS1   defects  : None

  Logical interface t1-0/0/2.0 (Index 67) (SNMP ifIndex 40)
    Flags: Hardware-Down Point-To-Point SNMP-Traps Encapsulation: PPP
    Protocol inet, MTU: 1500
      Flags: Protocol-Down, Is-Primary
      Addresses, Flags: Dest-route-down Is-Preferred Is-Primary
        Destination: 172.16.5.0/30, Local: 172.16.5.2, Broadcast: 172.16.5.3
Comparing output from the two, the astute reader immediately
      notices the issue: a Layer 2 encapsulation mismatch. The default
      encapsulation for a serial interface on a Cisco router is HDLC (Cisco
      HDLC, to be more specific), whereas the default encapsulation for a
      serial interface on a Juniper router is PPP (Point to Point Protocol).
      To resolve the issue, we simply change the encapsulation on one end of the link to match the other. In this case,
      we change the Juniper side:

[edit interfaces t1-0/0/2]
lab@r1# set encapsulation cisco-hdlc

[edit interfaces t1-0/0/2]
lab@r1# show
encapsulation cisco-hdlc;
unit 0 {
    family inet {
        address 172.16.5.2/30;
    }
}

[edit interfaces t1-0/0/2]
lab@r1# commit
commit complete

[edit interfaces t1-0/0/2]
lab@r1# run show interfaces t1-0/0/2 | match encapsulation
    Flags: Point-To-Point SNMP-Traps Encapsulation: Cisco-HDLC
The effectiveness of this change can be confirmed by reissuing
      the ping command on
      r5:

r5>ping 172.16.5.2

Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 172.16.5.2, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 4/4/4 ms
r5>
At this point, r5 has
      connectivity to all immediately attached subnets shown in Figure 15-5. To go beyond
      immediately attached subnets, a routing protocol is necessary, and for
      AS 64512, we have chosen OSPF.

Note
What's in a name? While we're on the topic of vendor-specific
        differences in physical media, on Juniper platforms interface media is
        indicative of throughput. In other words, a 10-Gigabit Ethernet (10GE)
        interface is capable of
        connecting to other platforms using the 10-gigabit variant of the
        Ethernet protocol and is capable of passing traffic at 10 gigabits per
        second as indicated by the interface's name. For other vendors'
        platforms, an interface's media naming convention indicates its
        ability to communicate with other platforms using similar media, but
        it may not be an accurate reflection of true interface throughput. To
        put it simply, for non-Juniper platforms a 10GE interface, while
        capable of connecting to other 10GE interfaces, may not be capable of
        handling 10 gigabits of transit traffic.






OSPF Adjacencies Between Cisco and Juniper Equipment



Figure 15-6 shows the devices in the
      OSPF domain of AS 64512. We bring up the simple
      adjacencies first, and after we confirm the desired state, we add
      protocol authentication for each neighbor relationship.
On the r5 network, we enable
      OSPF and bring up adjacencies to r2
      and r3. Notice that in IOS, OSPF is
      enabled on networks:

router ospf 10
 network 10.0.0.5 0.0.0.0 area 0
 network 10.0.1.17 0.0.0.0 area 0
 network 10.0.1.21 0.0.0.0 area 0









Figure 15-6. The OSPF domain


On r2 and r3, we enable OSPF, but notice that in JUNOS
      syntax, the protocol is configured on specific physical and logical
      interfaces:

[edit protocols ospf]
lab@r2# show
area 0.0.0.0 {
    interface fe-0/0/0.0;
    interface fe-0/0/1.0;
    interface lo0.0 {
        passive;
    }
}

[edit protocols ospf]
lab@r3# show
area 0.0.0.0 {
    interface fe-0/0/0.0;
    interface fe-0/0/1.0;
    interface lo0.0 {
        passive;
    }
}
On the Juniper devices, confirm OSPF adjacencies using
      the run show ospf neighbor
      command, first on r2 and then on
      r3:

[edit]
lab@r2# run show ospf neighbor
  Address         Interface             State      ID              Pri  Dead
10.0.1.26        fe-0/0/0.0             Full      10.0.0.3         128   35
10.0.1.21        fe-0/0/1.0             Full      172.16.5.1         1   33

[edit]
lab@r3# run show ospf neighbor
Address          Interface              State     ID               Pri  Dead
10.0.1.25        fe-0/0/0.0             Full      10.0.0.2         128    35
10.0.1.17        fe-0/0/1.0             Full      172.16.5.1         1    39
On r5, confirm the adjacencies
      with the show ip ospf neighbor
      command:

r5# show ip ospf neighbor

Neighbor ID   Pri   State     Dead Time   Address      Interface
10.0.0.3      128   FULL/DR   00:00:33    10.0.1.18    FastEthernet0/0
10.0.0.2      128   FULL/DR   00:00:38    10.0.1.22    FastEthernet0/1
r5#




OSPF authentication keys



For added security, the administrators of AS 64512 require MD5
        authentication on OSPF neighbor relationships. Fortunately, the
        Juniper platforms we are adding to the network support the MD5 hashing algorithm. Here is the configuration on the
        Juniper side for router r2;
        configuration elements on r3 are
        similar:

[edit protocols ospf area 0.0.0.0]
lab@r2# set authentication-type md5

[edit protocols ospf area 0.0.0.0]
lab@r2# edit interface fe-0/0/0

[edit protocols ospf area 0.0.0.0 interface fe-0/0/0.0]
lab@r2# set authentication md5 0 key Juniper

[edit protocols ospf area 0.0.0.0 interface fe-0/0/0.0]
lab@r2# show
authentication {
    md5 0 key "$9$VxsgajHmFnCZUnCtuEhVwY"; ## SECRET-DATA
}

[edit protocols ospf area 0.0.0.0 interface fe-0/0/0.0]
lab@r2# commit
commit complete
When adding protocol authentication to a neighbor relationship,
        it is a good habit to confirm the adjacency state for each neighbor
        pair immediately after adding the authentication syntax. You do this
        because the JUNOS operating system encrypts the hash key (in this
        case, the string Juniper)
        immediately after you type it into the command-line interface (CLI).
        While this process is an effective way to protect the hash key, it
        does make troubleshooting a typo rather difficult. In this case, the
        hash key was successfully added to both r2 and r3, and the adjacency is in the Full state:

[edit protocols ospf area 0.0.0.0]
lab@r3# run show ospf neighbor
  Address         Interface        State      ID            Pri  Dead
10.0.1.26        fe-0/0/0.0        Full      10.0.0.3       128   37
10.0.1.21        fe-0/0/1.0        Full      172.16.5.1       1   33
To complete the operation, add the MD5 hashing function to the
        links between r5 and r2 and r5
        and r3. You can apply the syntax
        previously shown for interface fe-0/0/0 on r2 to fe-0/0/1:

[edit protocols ospf area 0.0.0.0]
lab@r2# set interface fe-0/0/1 authentication md5 1 key Juniper
After committing this change, add the corresponding
        configuration elements on r5:

interface FastEthernet0/1
 ip address 10.0.1.21 255.255.255.252
 no ip directed-broadcast
 ip ospf message-digest-key 1 md5 Juniper
!
autonomous-system 64512
!
router ospf 10
 network 10.0.0.5 0.0.0.0 area 0
 network 10.0.1.17 0.0.0.0 area 0
 network 10.0.1.21 0.0.0.0 area 0
 area 0 authentication message-digest
Again, it is a best practice to confirm adjacency state
        immediately after enabling authentication to prevent errant keystrokes
        from damaging the integrity of the network:

r5#show ip ospf ne

Neighbor ID  Pri   State       Dead Time   Address    Interface
10.0.0.2     128   FULL/DR     00:00:39    10.0.1.22  FastEthernet0/1
r5#
There appears to be a very serious problem here. Router r5 has a Full adjacency with r2, the neighbor for which authentication
        was enabled, but the relationship to r3 appears to have dropped. In fact, this is
        due to the way MD5 was configured on r5: authentication enabled for all Area 0
        interfaces in OSPF instance 10. To resolve the issue, we quickly
        enable MD5 on the r3 interface to
        r5:

[edit protocols ospf area 0.0.0.0]
lab@r3# set interface fe-0/0/1 authentication md5 1 key Juniper

[edit protocols ospf area 0.0.0.0]
lab@r3# commit
commit complete
Then enable MD5 on the r5
        interface to r3:

r5#config t
Enter configuration commands, one per line.  End with CNTL/Z.
r5(config)#interface fastEthernet 0/0
r5(config-if)#ip ospf message-digest-key 1 md5 Juniper
r5(config-if)#^Z
And now we confirm the results on both r3 and r5:

[edit protocols ospf area 0.0.0.0]
lab@r3# run show ospf neighbor
Address          Interface         State     ID            Pri  Dead
10.0.1.25        fe-0/0/0.0        Full      10.0.0.2      128    35
10.0.1.17        fe-0/0/1.0        Full      172.16.5.1      1    39

r5#show ip ospf neighbor

Neighbor ID  Pri   State     Dead Time   Address     Interface
10.0.0.3     128   FULL/DR   00:00:38    10.0.1.18   FastEthernet0/0
10.0.0.2     128   FULL/DR   00:00:34    10.0.1.22   FastEthernet0/1

Note
When you enable authentication between pairs of devices in
          high availability environments, you should change only one device in
          each pair at a time. This practice is necessary because typing
          errors or unanticipated protocol behavior has the potential to cause
          outages. Temporarily moving traffic away from a device within a
          redundant pair, as discussed in Chapter 6, is also a sensible move
          when making major configuration changes.







IBGP Peering



After enabling OSPF, the next requirement for the Juniper integration into
      AS 64512 is to enable IBGP peering relationships. Router
      r2 is configured to peer using the
      loopback address with r3 and r5:

[edit protocols bgp]
lab@r2# show
group IBGP {
    type internal;
    local-address 10.0.0.2;
    export NHS;
    neighbor 10.0.0.3;
    neighbor 10.0.0.5;
}
Router r3 has similar
      configuration elements for its relationship with r2 and r5:

[edit protocols bgp]
lab@r3# show
group IBGP {
    type internal;
    local-address 10.0.0.3;
    export NHS;
    neighbor 10.0.0.2;
    neighbor 10.0.0.5;
}
Cisco-specific configuration elements on r5 are adequate to bring up the IBGP peering
      mesh:

router bgp 64512
 neighbor 10.0.0.2 remote-as 64512
 neighbor 10.0.0.2 update-source Loopback0
 neighbor 10.0.0.3 remote-as 64512
 neighbor 10.0.0.3 update-source Loopback0
Use show commands on all three
      chassis to confirm the IBGP peering state. On r5, results are as expected. Juniper
      neighbors, r2 and r3, are present as IBGP neighbors:

r5# show ip bgp summary
BGP router identifier 10.0.0.5, local AS number 64512
BGP table version is 29, main routing table version 29
17 network entries and 24 paths using 2281 bytes of memory
2 BGP path attribute entries using 192 bytes of memory
BGP activity 34/17 prefixes, 48/24 paths
0 prefixes revised.

Neighbor  V    AS MsgRcvd MsgSent  TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.0.2  4 64512     316     324     29    0    0 00:45:38        8
10.0.0.3  4 64512     345     322     29    0    0 00:45:36        8
r5#
On r2, the results are similar. Routers r3
      and r5 are both listed as IBGP
      neighbors:

lab@r2# run show bgp summary
Groups: 1 Peers: 2 Down peers: 0
Table          Tot Paths  Act Paths Suppressed    History Damp State    Pending
inet.0                25          8          0          0          0          0
Peer      AS    InPkt     OutPkt    OutQ   Flaps  Last Up/Dwn
State|#Active/Received/Damped...
10.0.0.3  64512  426        388       0       0     3:12:22 0/0/0
0/0/0
10.0.0.5  64512  323        325       0       1       48:23 0/0/0
0/0/0
A quick check of r3 confirms
      what we already suspected: the IBGP mesh is fully operational:

[edit protocols bgp]
lab@r3# run show bgp summary
Groups: 1 Peers: 2 Down peers: 0
Table          Tot Paths  Act Paths Suppressed    History Damp State    Pending
inet.0                25          8          0          0          0          0
inet.2                 0          0          0          0          0          0
Peer        AS      InPkt     OutPkt    OutQ   Flaps  Last Up/Dwn
State|#Active/Received/Damped...
10.0.0.2   64512     393        434       0       0     3:15:06 0/0/0
0/0/0
10.0.0.5   64512     326        361       0       1       51:05 0/0/0
0/0/0





EBGP Peering



The next task is to bring up EBGP peering relationships to
      ASs 100 and 400. Router r5 supports the relationship to AS 100, as
      shown in Figure 15-7.









Figure 15-7. AS 64512 peering to AS 100


To bring up the relationship, first add an external neighbor to
      r5 within the router bgp 64512 configuration stanza:

router bgp 64512
 neighbor 10.0.0.2 remote-as 64512
 neighbor 10.0.0.3 remote-as 64512
 neighbor 172.16.5.2 remote-as 100
 no auto-summary
!
Add the complementary configuration elements on r1 to establish the EBGP relationship:

[edit protocols bgp]
lab@r1# show
group EBGP {
    type external;
    export STAT;
    peer-as 64512;
    neighbor 172.16.5.1;
}
[edit protocols bgp]
lab@r1# top edit routing-options

[edit routing-options]
lab@r1# show
autonomous-system 100;
With the necessary configuration elements in place, we check the state of the
      relationship, first on r1:

edit routing-options]
lab@r1# run show bgp summary
Groups: 1 Peers: 1 Down peers: 0
Table          Tot Paths  Act Paths Suppressed    History Damp State    Pending
inet.0                 0          0          0          0          0          0
Peer            AS      InPkt     OutPkt    OutQ   Flaps Last Up/Dwn
State|#Active/Received/Damped...
172.16.5.1    64512      218        249       0       1     1:46:44 0/0/0
0/0/0
The relationship looks to be up and usable; however, r1 does not appear to be receiving any BGP
      routes from r5. This may not be an
      issue at the moment, but it is something to keep in mind. Router
      r5 shows the relationship is up and
      functional as well:

r5# show ip bgp summary
BGP router identifier 10.0.0.5, local AS number 64512
BGP table version is 29, main routing table version 29
17 network entries and 24 paths using 2281 bytes of memory
2 BGP path attribute entries using 192 bytes of memory
BGP activity 34/17 prefixes, 48/24 paths
0 prefixes revised.

Neighbor   V    AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd
10.0.0.2   4 64512     347     356     29   0    0 01:01:30        8
10.0.0.3   4 64512     380     353     29   0    0 01:01:28        8
172.16.5.2 4   100     249     224     29   0    0 01:47:06        8
r5#
For now, we can move on to the next EBGP relationship. In Figure 15-8, both r2 and r3
      are peering to r4 in AS 400.
The relevant configuration elements from r2 are shown for reference:

[edit protocols bgp]
lab@r2# show group EBGP
type external;
peer-as 400;
neighbor 172.16.7.6;
The configuration on r3 is
      nearly identical:

[edit protocols bgp]
lab@r3# show group EBGP
type external;
peer-as 400;
neighbor 172.16.7.2;









Figure 15-8. AS 64512 peering to AS 400


Router r4 is configured to peer
      with r2 and r3, and the multipath option enables load sharing across
      the redundant equal cost paths:

[edit protocols bgp]
lab@r4# show
group EBGP {
    type external;
    export STAT;
    peer-as 64512;
    multipath;
    neighbor 172.16.7.5;
    neighbor 172.16.7.1;
}
Confirm the functionality of this relationship using show commands on r2,
      r3, and r4. On
      r2, the relationship is up and BGP
      routes are being added to the local routing table. Output from the same
      commands on r3 would be nearly
      identical:

[edit protocols bgp]
lab@r2# run show bgp summary
Groups: 2 Peers: 3 Down peers: 0
Table          Tot Paths  Act Paths Suppressed    History Damp State    Pending
inet.0                25          8          0          0          0          0
Peer           AS      InPkt     OutPkt    OutQ   Flaps Last Up/Dwn
State|#Active/Received/Damped...
172.16.7.6    400       498        452       0       0     3:44:51 8/9/0
0/0/0
10.0.0.3        64512        502        456       0       0     3:46:22 0/8/0
0/0/0
10.0.0.5        64512        391        393       0       1     1:22:23 0/8/0
0/0/0

[edit protocols bgp]
lab@r2# run show route protocol bgp terse

inet.0: 27 destinations, 36 routes (19 active, 0 holddown, 8 hidden)
+ = Active Route, - = Last Active, * = Both

A Destination      P Prf   Metric 1   Metric 2  Next hop       AS path
* 10.0.0.4/32      B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.0.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.1.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.2.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.3.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.4.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 40.40.5.0/24     B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
* 172.16.7.0/30    B 170        100            >172.16.7.6     400 I
  172.16.7.4/30    B 170        100            >172.16.7.6     400 I
                   B 170        100            >10.0.1.26      400 I
The show commands on r4 confirm that the expected relationship is
      up, but no BGP routes have been received from AS 64512:

[edit protocols bgp]
lab@r4# run show bgp summary
Groups: 1 Peers: 2 Down peers: 0
Table          Tot Paths  Act Paths Suppressed    History Damp State    Pending
inet.0                 0          0          0          0          0          0
Peer           AS      InPkt     OutPkt    OutQ   Flaps Last Up/Dwn
State|#Active/Received/Damped...
172.16.7.1    64512     540        544       0       0     4:04:04 0/0/0
0/0/0
172.16.7.5    64512     457        507       0       0     3:47:57 0/0/0
0/0/0

[edit protocols bgp]
lab@r4# run show route protocol bgp

inet.0: 11 destinations, 11 routes (11 active, 0 holddown, 0 hidden)
Now that the relationships are completely up, you might expect to
      see routes received from AS 100 being passed to AS 400, and routes from
      AS 400 being passed to AS 100. However, neither AS is receiving routes.
      There are actually two issues at play in this scenario.




The BGP next hop issue



Some readers may have noticed the presence of an export policy named
        NHS on the IBGP neighbor group on
        both r2 and r3. The NHS export statement is a reference
        to the NHS policy configured on
        each chassis:

[edit policy-options]
lab@r2# show
policy-statement NHS {
    term 1 {
        from {
            protocol bgp;
            neighbor 172.16.7.6;
        }
        then {
            next-hop self;
        }
    }
}
The NHS policy syntax is
        similar on r3:

[edit policy-options]
lab@r3# show
policy-statement NHS {
    term 1 {
        from {
            protocol bgp;
            neighbor 172.16.7.2;
        }
        then {
            next-hop self;
        }
    }
}
These policies are necessary to overcome the BGP next hop
        reachability issue. The policies allow r2 and r3
        to overwrite the EBGP next hop with their own loopback address. When
        traffic destined for the EBGP next hop arrives at r2 or r3,
        r2 or r3 is able
        to use routes known via protocol Direct to forward the traffic.
Router r5 must also advertise
        a route to the EBGP protocol next hop. Therefore, either a similar
        policy must exist on r5, or some
        other method must be enabled to have the protocol next hop be added to
        the AS 64512 routing table. In this case, the administrators chose to
        run OSPF passively across the link between r5 and r1
        to get the BGP next hop added as a reachable destination within the AS
        64512 routing table:

r5#config t
Enter configuration commands, one per line.  End with CNTL/Z.

r5(config)#router ospf 10

r5(config-router)#network 172.16.5.1 0.0.0.0 area 0

Note
Recognizing that next hop self policy is one of the most
          common ways to overcome the BGP next hop reachability issue, Cisco
          includes an optional configuration element in IOS that overrides BGP
          next hop and replaces it with the loopback address of the local
          router. The result is comparable to the result of the JUNOS
          NHS policy used in the previous example:

router bgp 64512
 neighbor 10.0.0.2 remote-as 64512
 neighbor 10.0.0.2 update-source Loopback0
 neighbor 10.0.0.3 remote-as 64512
 neighbor 10.0.0.3 update-source Loopback0
 neighbor 172.16.5.2 remote-as 100
 no auto-summary
!

Unfortunately, a check of the routing tables shows that r4 is still not receiving routes from AS
        100. There is another issue.





The other issue



The r5 BGP configuration is
        missing a critical element. By default, an IOS router will not install
        any BGP route as active unless the route is known by the underlying
        IGP, in this case OSPF. Because the EBGP routes are not known to the
        router as OSPF routes they will not by default be advertised to IBGP
        peers. To overcome this issue we use no
        synchronization:

router bgp 64512
 no synchronization
 neighbor 10.0.0.2 remote-as 64512
 neighbor 10.0.0.3 remote-as 64512
 neighbor 172.16.5.2 remote-as 100
 no auto-summary
!





Success



A quick check of the r4
        routing table confirms that this step resolved the issue, and AS 400
        is now receiving BGP routes advertised from AS 100. Router r1
        also shows routes from AS 400 being received in AS 100. Output from
        the show route command also
        confirms load balancing back to r2
        and r3 from r4:

[edit protocols bgp]
lab@r4# run show bgp summary
Groups: 1 Peers: 2 Down peers: 0
Table   Tot Paths  Act Paths Suppressed History Damp State Pending
inet.0         14         14          0       0          0       0
Peer         AS   InPkt  OutPkt    OutQ   Flaps Last Up/Dwn
State|#Active/Received/Damped...
172.16.7.1  64512  574     578       0       0     4:18:49 7/7/0
0/0/0
172.16.7.5  64512  487     540       0       0     4:02:42 7/7/0
0/0/0

[edit protocols bgp]
lab@r4# run show route protocol bgp terse

inet.0: 18 destinations, 25 routes (18 active, 0 holddown, 0 hidden)
@ = Routing Use Only, # = Forwarding Use Only
+ = Active Route, - = Last Active, * = Both

A Destination      P Prf Metric 1  Metric 2  Next hop     AS path
* 10.0.0.1/32      B 170      100            172.16.7.1   64512 100 I
                                            >172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.0.0/24   B 170      100            172.16.7.1   64512 100 I
                                            >172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.1.0/24   B 170      100           >172.16.7.1   64512 100 I
                                             172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.2.0/24   B 170      100            172.16.7.1   64512 100 I
                                            >172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.3.0/24   B 170      100           >172.16.7.1   64512 100 I
                                             172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.4.0/24   B 170      100           >172.16.7.1   64512 100 I
                                             172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I
* 100.100.5.0/24   B 170      100            172.16.7.1   64512 100 I
                                            >172.16.7.5
                   B 170      100           >172.16.7.1   64512 100 I















Chapter 16. Transitioning MPLS to a Multivendor
  Environment



Though not common in small and medium-size enterprise networks,
  Multiprotocol Label Switching (MPLS) has a long history (by Internet
  standards) of use by large enterprises and carriers. Forwarding traffic
  based on the content of an MPLS label table was originally viewed as faster
  than forwarding based on a longest-prefix match lookup in a routing table.
  However, with rapid advances in router hardware and the adoption of the
  radix tree structure for charting routing table content, the IP-based prefix
  match quickly caught up. MPLS would have been discarded had its clean
