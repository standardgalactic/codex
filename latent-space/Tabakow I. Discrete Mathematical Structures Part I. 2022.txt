
DISCRETE MATHEMATICAL STRUCTURES
Part I: Propositions, Predicates and Sets
Iwan G. Tabakow
Wroclaw University of Science and Technology 
Poland
WUST Publishing House 
Wroclaw 2022

Cover design
Marcin Zawadzki
Printed in the camera ready form.
All rights are reserved. No part of this publication may be reproduced, stored in a retrieval system 
or transmitted in any form or by any means, electronic, mechanical, including photocopying, recording 
or any information retrieval system, without permission in writing form the publisher.
Â© Copyright by WUST Publishing House, Wroclaw 2022
WUST PUBLISHING HOUSE
Wybrzeze Wyspianskiego 27, 50-370 Wroclaw 
http://www.ohcyna.pwr.edu.pl. ksiegamia.pwr.edu.pl 
e-mail: oficwydf/pwr.edu.pl. zarnawianie.ksiazek@pwr.edu.pl
ISBN 978-83-7493-188-5
Print and binding: beta-druk, www.betadruk.pl

In memory of my parents: 
Nikolina and Georgi.
In memory of my teachers: 
prof, dr Ludwik Borkowski 
and prof, dr Jerzy Bromirski

5
Contents
Preface 7
The used designations 11
Chapter 1. Propositions 23
1. 
Classical propositional calculus 23
1.1. 
Symbols and formulae 24
1.2. 
Primitive rules 25
1.3. 
Theses and derived rules 29
1.4. 
Zero-one verification 
44
1.5. 
Logical consequence 
48
1.6. 
The consistency and completeness 49
1.7. 
The axiomatic approach 52
1.8. 
Sequent calculus 57
2. 
Non-standard logics 64
2.1. 
Systems of many-valued logic 65
2.2. 
Fuzzy logic 74
2.3. 
Modal, deontic and temporal logics 103
2.4. 
Other non-classical systems 
180
Chapter II. Predicates 214
3. 
Classical first-order and higher order predicate logics 214
3.1. 
Symbols and formulae 
215
3.2. 
Primitive mles 217
3.3. 
Theses and derived rules 219
3.4. 
The existential uniqueness quantifier 224
3.5. 
Sequent calculus 228
3.6. 
Skolemisation, resolution and interpretation 231
3.7. 
The higher order predicate logic 
239
3.8. 
Generalised quantifiers 241
4. 
Non-classical calculus 248
4.1. 
Fuzzy predicate calculus 248
4.2. 
Modal, deontic and temporal calculus 254
4.3. 
Other systems 265
Chapter 111. Sets 271
5. 
Classical set theory 271
5.1. 
The axiomatic approach 272
5.2. 
Basic notions and definitions 272

6
5.3. 
Generalised unions and intersections 277
5.4. 
Cartesian products and relations 
279
5.5. 
Equinumerosity and countability 
303
5.6. 
Kripke - Platek and other set theories 310
5.7. 
Set theory: some applications 311
5.8. 
Cormnonsense sets: some comments 315
6. 
Multiset theory 316
6.1. 
Basic notions and definitions 316
6.2. 
Multiset operations 317
6.3. 
Multirelations 319
6.4. 
Applications 321
7. 
Fuzzy set theory 325
7.1. 
Basic notions, definitions and fuzzy set 
operations 325
7.2. 
Fuzzy relations 329
7.3. 
Fuzzy distances, measures and transformations 332
7.4. 
Fuzzy-probabilistic models 337
7.5. 
Applications 339
8. 
Rough set theory 344
8.1. 
The notion of approximation space 344
8.2. 
Rough set operations and approximation 
accuracy 345
8.3. 
Information systems, reducts and decision 
tables 347
8.4. 
Other applications 351
9. 
Fuzzy rough sets and other nonstandard approaches 353
9.1. 
Intuitionistic fuzzy sets, complex fuzzy sets and 
complex intuitionistic fuzzy classes 353
9.2. 
Fuzzy rough sets and intuitionistic fuzzy rough 
sets 357
9.3. 
Interval type-2 fuzzy sets 362
9.4. 
Near sets and nested sets 363
9.5. 
Paraconsistent sets 366
9.6. 
Forcing sets, non well-founded sets and 
stationary sets 367
10. 
Bunch Theory 372
10.1. 
Basic notions and definitions 373
10.2. 
Bunch operations 373
Conclusions 375
References 375

7
"There is no any mathematical abstraction 
which would not be applicable at an earlier time 
or later time in practice".
Nikolai Ivanovich Lobachevsky (1792 - 1856)
Preface
Knowledge is the most valuable attainment of the human civilisation. In fact, without knowledge there is no any 
science, and vice versa. And hence, knowledge and science can be considered as elements of some discrete 
sequential process. Obviously, the initial state of any such process is knowledge. Wisdom is a reasonable principle 
based on existing humans knowledge. A more formal treatment of the last notion should be very difficult, but in the 
broad sense it may be described e.g. as "a habit or disposition to perform the action with the highest degree of 
adequacy under any given circumstance" (The Free Encyclopaedia, The Wikimedia Foundation, Inc). However, 
wisdom should be associated with some good thing (i.e. disinterested goodness, etc.) in the same way as beauties 
should not be useful. Moreover, wisdom should not involve contradictory interpretations (e.g. such as: a peace war. 
peace bombardment, humanitarian intervention, twofold standards, privatisation or distortion of historical, scientific 
or other facts and so on) . It should be an alternative to "technical rationality" and hence, should involves knowledge 
of what is good or bad. And also, it should not be time restricted, as an example the following sentence: "Much do 
not means well, but well means much" (Socrates 469/70 - 399 b.c.) or also: " It is not sufficient to know very many 
for being wise" (Heraclitus of Ephesus. 535 - 475 b.c.). In particular, such notions as: wisdom and ethical goodness 
were also fundamental in Confucius' philosophy (Kong Fuzi, 551 - 479 b.c.. near Qufu. China): "Do not do to others 
what you do not want done to yourself'.
Logic is the science and art which so directs the mind in the process of reasoning and subsidiary processes as to 
enable it to attain clearness, consistency and validity in those processes (Turner W. 1999). The term 'logic' can be 
considered into two aspects. The first one describes the use of valid reasoning in some activity while the second 
names the science or study of reasoning. In the latter sense, it features most prominently in the subjects of 
philosophy, mathematics, and computer science (The Free Encyclopaedia, The Wikimedia Foundation, Inc).
The science of computers, computer systems and their applications (often called in short "computer science" or 
also "theoretical and applied informatics") is a very young discipline starting together with the development of the 
first electronic computers*. Sometimes computer science is erroneously interpreted as e.g. "computer hardware 
science" or also "computing (or computation) science". In fact, a computation in the broad sense can be realised 
without using any computers, e.g. the Euclid's algorithm (computation of the greatest common divisor of two 
integers a and b). computation of s[x (x L 0), known in ancient times, etc. But in the narrow sense, any computation 
is introduced as a process, i.e. a strongly connected sequence of computer memory states realised under some subset 
of computer instructions. It can be observed that without computers there is no any sense of using the term 
"informatics''. On the other hand, today's computer systems became a very important and at the same time necessary 
condition for any scientific investigation.
* Electronic computers were initially developed in the 1940s by the American physicist John Vincent Atanasoff. son of a Bulgarian immigrant 
(1903 - 1995). In fact. Atanasoff designed and built the first electronic, digital computer (non-programmable).
The problem-solving emphasis of computer science borrows heavily from the areas of mathematics and logic. 
Faced with a problem, computer scientists must first formulate a solution. This method of solution, or algorithm as it 
is often called in computer science, must be thoroughly understood before the computer scientists make any attempt 
to implement the solution on the computer (Lambert K.A. et al. 1996). Any using of (digital) computers in resolving 
mathematical tasks would require a discretisation of the considered domain. And so. the involved computational 
process, i.e. a sequence of computer memory states, is discrete (and finite, if the corresponding algorithm would be 
convergent).

8
Discrete mathematical structures (in short: discrete structures), in particular such as mathematical logic and set 
theory, algebraic systems, formal languages, automata theory, graphs, number theory, coding theory, combinatorial 
analysis, discrete probability theory. Petri nets and so on, underpin a large amount of modem computer science
*.
 
Discrete structures became a very large and dynamic science. Unfortunately, the speedy developments and 
knowledge in this area makes impossible the presentation of all notions, definitions and applications used here.
The subjects of this part are propositional (or equivalently: sentential) calculus, first-order predicate (or equivalently: 
quantifier) calculus, and set theory. The last Ihree topics can be considered as basic, having now sufficiently large 
applications in computer science theory. Without this "surgical instrumentarium" any more formal treatment of 
definitions or descriptions, various properties or theorem proofs would not be complete. Some elements of classical 
mathematical logic and set theory are first introduced. Then non-classical logic systems and sets are also presented.^
Some basic notions concerning: operations and algebraic systems, lattices. Boolean, multiple valued and fuzzy 
algebras, homomorphisms of algebraic systems (i.e. epimorphism, monomorphism, isomorphism, endomorphism 
and automorphism), congruencies, quotient algebraic systems, finite direct products of algebraic systems and free 
algebraic systems, grammars and sequential machines, algorithms, computability, recursion, graph theory, 
combinatorial analysis, probability theory. Markov's chains, number theory, information, coding and algorithm 
complexity will be briefly considered in Part 11 of this book.
In general, the natural deduction in the broad sense can be considered as a way of the human drinking and 
inferenc. But in the narrow sense, i.e. in senso stricto. it corresponds to the assumptional system style (as a natural 
way of imitation of any such drinking and inference) . In fact, this is the most generally known and important 
approach and any other automated (algebraic or "artificial") approach can be described by this one. but not vice 
versa. Moreover, the last approaches seem to be very difficult in using for non-classical systems. The natural 
deduction style is the most preferable and at the same time required in any scientific research. Moreover, the proofs 
in the above assumptional systems are nearly the same as in the case of usual mathematical proofs or other scientific 
reasoning. And hence, in accordance with the above advantages of these systems, they sometimes are known under 
the name "natural deduction". In the case of propositional and predicate logic systems, the existing assumptional and 
axiomatic system styles are theoretically equivalent. But the main problem of any axiomatic system is related to the 
time and space effectiveness of the corresponding proofs. This is because they are used here only two rules, i.e. the 
rule of detachment for implication and the rule of replacement. And hence, from the practical point of view, we have 
a different provability effectiveness related to the above two styles. An additional advantage of the assumptional 
system style is the possibility of constructing different proofs for the same thesis and hence, the possibility of 
studying different proof teclmiques. Finally, the assumptional and the axiomatic system styles theoretically are 
having the same modelling power, but having different decision powers (related to concrete scientific research, e.g. 
as in Turing machines and high-level Petri nets5). And so. the assumptional system approach is used in this book. 
Usually a non-classical propositional logic involves a non-classical predicate logic, and hence - a non-classical set 
theory. Here, some such approaches are also presented. The material considered was selected mainly based on 
further investigations in computer science.
At the beginning in Chapter I, the classical propositional" calculus is presented. The logical calculi considered 
here are based on a system of rules, which define the methods used in proofs from assumptions. The methodological 
problems in the deductive sciences are given only an elementary treatment (Slupecki J. and Borkowski L. 1967). The 
last problems such as consistency, completeness, independence, etc. of a given system arise when a given axiomatic 
system is considered (in ways analogous to assumptional systems). Obviously, the most important of these properties 
is the consistency of a system. Next, a short review of selected axiomatic systems is presented and the proof of the
' In contradistinction to the numerical analysis, i.e. the study of algorithms for the problems of continuous mathematics (as distinguished from 
discrete mathematics).
t In general, the existing logic systems may be classified as formal or non-formal (or "intuitive"'. e.g. tracing somebody's steps: a perfect 
system of the Australian Aborigines). We shall study only formal logic systems. The last ones may be classified as classical or non-classical. On 
the other hand, the non-classical systems can be classified as partially classical (or: "anti-classical") and extended (or "extra-classical"), e.g. 
see: (Burgess J.P. 2009). Provided there is no ambiguity, the term 'mathematical logic" is sometimes used to denote the applications of formal 
logic in mathematics.
1 Natural deduction is a deductive reasoning as distinct from abductive reasoning (a form of logical inference based on observations).
Â§ Alan Mathison Turing (1938: 1912 - 1954), Carl Adam Petri (1962: 1926 - 2010).
** From the Latin: 'propositio".

9
well-known deduction theorem is given (a summary presentation under Slupecki J. and Borkowski L. 1967). The last 
theorem can be considered as a basis of introducing assumptional system style. Some elements concerning direct 
reasoning and automated deduction methods are related to the sequent presentation. As it is shown, any Gentzen's 
rule can be represented as a corresponding thesis in the above-considered calculus. In the second section of this 
chapter some non-standard logic systems are briefly considered, such as many-valued, fuzzy, modal, deontic and 
temporal logics (Zadeh L.A. 1974, Manna Z. and Pnueli A. 1992 and 1995, Carson J. 1995,Gotwald S. 1995, Suber 
P. 1997, Hajek P. 1998, Navara M. 2000, etc.). Here, the natural deduction methods are extended to some non- 
classical systems, e.g. such as many-valued, fuzzy, modal, deontic and temporal logic systems. The Gentzen's 
sequent calculus is extended to Lukasiewicz's L-BL systems. In particular, it is shown that any fuzzy propositional 
formula provable under Hajek's axioms of the logic BL is also provable under the above-proposed approach, i.e. 
using proofs from assumptions. This approach seems to be more attractive, more simpler and natural in practical use 
than the axiomatic one. Moreover, there are introduced new t-nonn and t-cononn and then it is defined a generalised 
Lukasiewicz's system, denoted by La-BL (a > 0), where the previous one becomes a particular case with a = 1. The 
used fuzzy implication is specified as a residuum of the above t-nonn (which is left-continuous) and hence, the last 
implication is unique. In particular, it is also shown that the generalised Lukasiewicz's fuzzy t-nonn, given in 
(Tabakow l.G. 2010, 2014), can be also used for obtaining more universal fuzzy flip-flops and hence more flexible 
control systems (modeled with fuzzy interpreted Petri nets). It is also shown that this t-nonn, redefined as generalised 
Lukasiewicz's intuitionistic fuzzy t-nonn is a t-representable intuitionistic fuzzy t-nonn. And hence, a generalised 
Lukasiewicz's fuzzy intuitionistic implication (satisfying all conesponding requirements) is also introduced. Some 
new inference rules are also given in the case of modal and temporal systems. Some introductory notions related to 
the dynamic logic, modal p-calculus and their applications are also presented (Pratt V.R. 1981, Kozen D.C. 1983, 
Venema Y. 2008, Gurov D. and Huisman M. 2013, etc.). As a first pass, some notions concerning the last calculus 
and related to the next two chapters may be omitted. There are also briefly presented (or commented) some other 
non-classical systems, such as: epistemic. game, quantum dynamic-epistemic. intuitionistic and fuzzy intuitionistic. 
linear, (intuitionistic) computability, paraconsistent. relevant and non-monotonic logic systems. Some comments 
concerning fractal logic are also given.
Propositional logic is not sufficient for computer science. And hence, in the next Chapter II, the first-order 
predicate calculus is initially considered. Some well-known basic notions related to the classical predicate logic are 
first introduced. As an illustration, by using such formulae, some example mathematical and/or computer science 
definitions are also described and a set of primitive rules is then presented. Next, a carefully selected subset of theses 
is proved. The corresponding formal proofs are based on assumptions. The notion of the existential uniqueness 
quantifier is next presented and some properties are also given. The Gentzen's sequent calculus is also illustrated. As 
in the previous chapter, the corresponding rules are proved. Some new proofs and/or theses, mainly concerning 
bounded (or equivalently: restricted) quantifiers, are also given. In the next considerations the skolemisation, 
resolution and interpretation techniques are discussed (Chang C.-L. and Lee R.C.-T. 1973). The resolution technique 
is considered as a construction of ramified indirect proofs with joined additional assumptions and natural numbers 
are used in the formula interpretation rules. Next, the higher order predicate logic is briefly considered. Basic notions 
related to the genralised quantifier theory are also presented (Pogonowski J. and Smigerska J. 2008). Some 
considered here notions are related to the next Chapter III (e.g. the semantic values of quantifier expressions arer sets of 
sets). Other non-classical systems, such as fuzzy, modal, deontic and temporal predicate calculi are considered in the 
second section of Chapter II. Here, the intuitionistic and paraconsistent predicate logic systems are also briefly 
presented.
In the last Chapter III, elements of set theory are first presented. This theory is a basic tool in discrete 
mathematics and also in mathematical analysis (concerning infinite sets). Initially, there is given a historical outline 
related to the development of this theory (The little encyclopaedia of logic 1988). And next, starting with the 
axiomatic foundations, some well-known (set-algebraic) classical basic notions and definitions are briefly introduced 
(Slupecki J. and Borkowski L. 1967, Kemtopf P. 1967). In particular, there are presented relations which are binary
*.
 
The most of considered proofs are from assumptions. In the next considerations Kripke - Platek and other set 
theories are briefly presented. Several applications are also presented. Some coimnents concerning coimnonsense 
sets are also given. Next some elements of non-classical set theories are given, such as: multisets (or bags) and 
multirelations, fuzzy sets and fuzzy relations, rough sets or also non-standard approaches: fuzzy rough sets, interval 
type-2 fuzzy sets, near sets and nested sets, paraconsistent sets or other set models. Bunch theory is also briefly 
presented. It is shown that the generalised Lukasiewicz's fuzzy t-nonn (introduced in Chapter I) may be considered
In accordance with Part 11: the presentation of abstract algebra that focuses on binary relations. 

10
as an adequate t-norm in the case of obtaining a distance function of the Minkowski class. Some other properties and 
examples are also given. In particular, a possibility of a generalisation and improving of the notions of lower and 
upper approximations used in fuzzy rough sets is also presented. All the above set theories are a very important part 
of today's computer science. And hence, some applications are also considered, e.g. concerning multigraphs, high- 
level Petri nets, fuzzy graphs and nets, fuzzy clustering, fuzzy control, information systems and decision tables, data 
mining, theory of programming, etc.
The above basic theories may be used as a part of lectures, predestined at first for computer science students, 
however it can also be useful in other areas, e.g. such as system techniques and control, technical cybernetics, 
telecormnunication, managing etc. And also, the considered here systems may be useful for any researcher who is 
interested in the above given area. The expected effects can be summarised as twofold. First, thorough knowledge of 
the sense of using natural deduction methods in computer science and second, a possibility of obtaining a knowledge 
for the purpose of efficient bibliographic search in this field of application and also with respect to future scientific 
investigations and/or practical applications.
Several parts of this work were presented during my lectures at the Institute for Mechanical and Electrical 
Engineering in Sofia, now known as TU Sofia. Bulgaria and also at the Wroclaw University of Technology in 
Wroclaw. Poland. A preliminary version of this study was realised in accordance with some research projects, e.g. 
such as Z0802-331557-W0800, Z0802-341763-W0800, etc., during my stay in Wroclaw.
In addition, I would like to thank my wife for her countless patience and love during the writing of the 
manuscript of this book.
This open access work is firstly addresses to the (advanced) computer science students, but may be useful for any 
researcher who is interested in the above given area. Any suggestions or other comments related to this work are 
well come. To all such remarks I would be grateful.
Iwan.G.Tabakow (retd. Professor)

11
The used designations
The used names for the primitive and/or derived rules given below are in accordance with the Lukasiewicz's 
symbols of negation, conjunction, disjunction implication, and equivalence denoted by N. K., A, C, and E. 
respectively (introduced in the parenthesis-free notation called also Polish notation'. Jan Lukasiewicz 1878 - 1956). 
Some commonly used symbols are given in parentheses. Other designations and/or abbreviations are the same as in 
(SlupeckiJ. and Borkowski L. 1967)
*.
symbol of negation, called also logical inversion or logical 
not (called also e.g. 'quantum negation', i.e. 
'orthocomplement.'' in quantum logic systems or 'linear 
negation' in linear logic systems, etc.). Another used 
designations: 
Â± (e.g. p-1- ), Not, etc. The used
symbol ' ' ' may be also used as a citation of designations or 
formulae, e.g. to denote the set equinumerosity relation 
or 'AnB' etc., depending on the context;
symbol of conjunction (logical multiplication, logical and: 
& , â¢ , n, n, And) or weak conjunction (many-valued 
logics);
symbol of disjunction (logical sum, logical alternative, join: 
+ , u , I, /, U, Or) or weak disjunction (many-valued logics)
the symbols of strong conjunction and disjunction, 
respectively: many-valued logics (& may also denote 
additive and in linear logic, depending on the context), 'S' 
denotes multiplicative or, see: linear logic, subsection 2.4 ;
symbol of (the material) implication (â> , o , I);
p <= q <=4>df p a ~ q , the co-implication connective, 
known also as subtraction (or difference) operator ;
symbol of equivalence {co-implication, _, iff , ~ 
, E:
'. ' may also denote the congruence modulo m relation on 
the set of integers or a linear logic equivalence, depending 
011 the context (see linear logic. Subsection 2.4 );
is an abbreviation for ~ (cp a ~ cp), i.e. <pÂ° ce-df ~(<p a 
~ (p), see: paraconsistent predicate logic ;
cp =a> tp <=4>df n(<p \p) and cp Â«=Â» tp ce-df n(<p <=> vp), 
respectively (see temporal predicate calculus, Subsection 4.2);
(the modal) functor of necessity (other used designation: N): 
Provided there is no ambiguity by â¡ it is also denoted the temporal 
functor 'always' (or 'henceforth'', see Subsection 2.3, Temporal 
logics);
(the modal) functor of possibility (other used designations: 
A or also P : Lewis C.I. 1883 - 1964): Provided there is no
Slupecki Jerzy (1904 - 1987). Borkowski Ludwik (1914 1993).

12
ambiguity by O it is also denoted the temporal fimctor 
'eventually' (or 'sometimes': see Subsection 2.3, Temporal logics);
==>> , <ci>>
the modal logic symbols of strict implication (or entailment: 
< , : , âÂ» 
Lewis C.I.) and strict equivalence,
respectively ;
- â¡
rule of omitting the necessity modal functor ;
+ O
rule of joining the possibility modal junctor ,
N â¡
rule of negating a necessity modal junctor ,
NO
rule of negating a possibility modal functor ;
+ SI, + SE, - SI
rules of joining a strict implication and a strict equivalence, 
respectively, rule of detachment for strict implication (or 
omitting a strict implication);
+ OSE, - OSE
ordinary rules of joining and omitting a strict equivalence, 
respectively ;
â¡ /O
rule of changing a necessity modal junctor into possibility 
modal junctor;
â¡ K
rule of exchanging a necessity of conjunction by conjunction 
oj' necessities ;
â¡ C
rule of necessity of implication ;
â¡-loll
modal necessity tollens;
S-Toll
strict implication tollens ;
OA
rule of exchanging a possibility of disjunction by disjunction 
of possibilities ;
An
rule oj' disjunction of necessities ;
OK
rule of possibility of conjunction ;
R â¡ , RO
tides of reduction of necessity and possibility, respectively ;
SDS, CSDS
strict title of Duns Scotus and contrapositive strict tide oj 
Duns Scotus, respectively ;
SMC, SAA
strict laws of multiplication of consequents and addition oj' 
antecedents, respectively ;
CO
tide of implication of possibilities ,
O-Toll
modal possibility tollens ,
NnK, NOA
modal De Morgan's laws for necessity of conjunction and 
possibility of disjunction, respectively ;
OBR
obligation tide ;
(the deontic) functor of obligation ( O ) or a connective in 
linear logic (pronounced as 'of course', see: linear logic. 
Subsection 2.4) ;
8
(the deontic) functor of permission ( P );
CT
(the deontic) functor offorbiddance ( F, provided there is no 
ambiguity and depending on the context, by ct it is also 
denoted a binary relation or a program computation, i.e. a 
sequence of states, stack, i.e. an abstract data type: last in. 
first out, or also a map: see Subsection 2.3, Temporal logics, u- 
calculus). Provided there is no ambiguity, the Greek letter |.i

13
also denotes a path ( of a graph G): depending on the 
context;
denotes a formula or the binary relation of bisimulation, 
depending on the context (see Subsection 2.3, Temporal 
logics.Li-calculus);
*
deontic constant (i.e. O-ary modal functor, denoted also by 
's' or 'v'), standing for some sanction or related to some 
violation or may also denote a belief revision action, 
depending on the context;
N !
rule of negating a deontic Junctor of obligation ;
N8
rule of negating a deontic Junctor ojpermission ;
!K
rule oj' exchanging an obligation oj' conjunction by 
conjunction oj obligations ;
8A
rule oj exchanging a permission oj' disjunction by 
disjunction of permissions ,
A!
rule oj' disjunction of obligations ;
8K
rule of permission of conjunction ;
!/8
!C
rule oj changing an obligation deontic Junctor into 
permission deontic Junctor ;
rule of obligation of implication ,
C8
ride of implication oj permissions ,
- !C
deontic rule of detachment for implication (or omitting an 
implication),
!-Toll
deontic obligation tollens ;
N!K
deontic De Morgan's law for obligation of conjunction ;
N8A
deontic De Morgan's law for permission of disjunction ;
!AA
deontic law of addition of antecedents ;
!MC
deontic law of multiplication of consequents ;
!MAC
deontic rule oj multiplication oj' the antecedents and 
consequents of two implications ;
+!A
deontic rule of joining a disjunction ;
!TC
deontic rule of transitivity for implication ;
!(-/-), 8(-/â¢â¢â¢), a(- /â¢â¢â¢)
conditional (or relative) obligation, permission and 
forbiddance functors, respectively, e.g. !(<p / vp), where <p 
and vp may be arbitrary classical logic formulae ;
0,0,0
the (temporal) functors 'next', 'previous' and 'weak 
previous1',
U, W, S. B
the temporal logic functors 'until', 'unless (waiting-for)', 
'since' and 'back-to' , respectively ;
â¡ , *
the temporal logic functors 'has-always-been and 'once', 
respectively ;
G
the temporal logic functor 'it will always be the case that...'
F
the primary tense logic functor 'it will be the case that...' ;
IT
the temporal logic functor 'it has always been the case 
that...' ,
P
the primary tense logic functor 'it was the case that...' ;
+ G
tense logic rule of joining G functor;

14
+ IT
tense logic rule of joining H Junctor ,
- GC, - HC
tense logic G and H rules of detachment for implication (or 
omitting an implication) ;
G-Toll, H-Toll
tense logic rules G and H tollens ,
FA, PA
distributive property rules of F and P functors ;
NGK, NHK
tense logic De Morgan's laws for G and H functors of 
conjunction ;
NFA, NPA
tense logic De Morgan's laws for F and P functors of 
disjunction ;
GTC, HTC
tense logic rules of G- and \-\-transitivity for implication ;
.-Z 1= qx , 0
the formula (p in time instance t is satisfied in model M, 
9 is a time instance set (.<Z and r may also denote a 
transition system and transition label, respectively: see 
Subsection 2.3, Temporal logics, u-calculus: simulation logic);
l(u)
the. label associated with u (an edge of a graph G) ;
NO
rule of negating a temporal next functor;
OA, OK
distributive property rules for temporal next functor of 
disjunction and conjunction, respectively ;
NoA, NOK
De Morgan's laws for temporal next functor of disjunction 
and conjunction, respectively ;
nnl(x), anl(x,y), cnl(x,y)
Post's functions corresponding to negation, disjunction and 
implication in m-valued systems (Post E.L. 1897 - 1954): 
the Post's functions corresponding to the classical 
disjunction, conjunction and negation, i. e. for m = 2, are 
denoted by a, k and n, respectively;
=df
the metalogical symbol of definitional equality {:=, = or 
also =);
the range equality (set theory) :
<=>df
symbol of definitional equivalence ;
-c
rule of omitting an implication (or detachment for 
implication RD called also modus ponendo ponens or 
briefly: modus ponens MP);
+ K (-K)
rules of joining {omitting) a conjunction ( JC and OC , 
respectively);
+ A (-A)
rules of joining {omitting) a disjunction ( .ID and OD , 
respectively);
+ E (-E)
rules of joining (omitting) an equivalence { JE and CJE, 
respectively);
+ C
rule of joining an implication ;
c-1
rule of conversion of implications ;
DE
rule of detachment for equivalence ;
DS
rule ofDunsScotus (John Duns Scotus 1266 - 1308);
NC
rule of negating an implication ;
NA (NK)
rules of negating a disjunction {conjunction);
+ N (-N )
rules of joining (omitting) double negation ;

15
ER, SR
RR
-EA',-EA"
TC, IE, CR, CC, CE
â 
Na, â Nc, â Ra, â Rc, â Aa, â Ac, â Ca, â Cc, â Ea, aild
â 
Ec
1(0)
B
loll
AA, MC (AC)
AAC, MAC
iso, sim, i=, Â« , Â«<p
GR
//
/
a
a
e
aip
extensionalily rule, rule of substitution for equivalence 
(called also: substitution rule or rule of replacement for 
equivalence);
rule of definitional replacement of one formula by another 
(axiomatic system style) ;
rules of omitting an exclusive disjunction ;
the transitivity for implication, transitivity for equivalence 
and implication rules, the law of transposition or 
contraposition of implication, law of transposition or 
contraposition of equivalence ;
rules of reduction of the basic logical functors in the 
antecedent (consequent) of a sequent (subscripts 'a' and 'c' 
, respectively: here the Lukasiewicz's symbols N,R,A,C, 
and E are used) ;
truth (falsehood) of a sentence, i.e. a sentence which is 
always true {always false, i.e. inconsistent) proposition, the 
logical constants (or equivalently: the constant formulae) 
'true' and false' are also denoted by T and F, respectively 
or also by tt and ff: depending on the context: other 
possible designations: T and Â±, respectively, ), T and Â± 
may be also used to denote a t-norm and t-conorm, 
respectively ;
denotes both', i.e. false and true: see paraconsistent logic ( 
B may also denote e.g. a set: depending on the context);
rule modus tollendo tollers (or briefly: modus toilers),
rules of addition of antecedents and multiplication (addition) 
of consequents of two or more implications having the same 
consequent and antecedent, respectively;
rules of addition and multiplication of the antecedents and 
consequents of two implications, respectively;
binary relations of machine isomorphism, simulation, 
inclusion, equivalence (Pawlak Z. 1926 - 2006) and 
isomorphism between two algebraic systems (wrt some map 
q>);
Godel's Rule in modal logic systems (Godel R. 1906 - 
1978);
symbol of replacement;
symbol of alternative negation (Sheffer's dash'. Sheffer 
H.M. 1882 - 1964) or also the (temporal logic) functor ' 
first... then... ': see Subsection 2.3, Temporal logics. Ibis symbol 
may also denote 'such that' or arithmetical division (depending on 
the context);
symbol of joint negation (Peirce's arrow: Peirce C.S. 1839 - 
1914);
assumption(s);
the ith axiom (i - 1,2,... ,k);
the unit element of an algebraic system (denoted also by u: 
provided there is no ambiguity by e it is also denoted an 
expression: see Subsection 2.3, Temporal logics) ;
assumption(s) of indirect proof;

16
ada, contr.
additional assumption of a proof, contradiction ;
BL, L-BL, G-BL, tu-BL
the basic fuzzy propositional logic (called also: basic manyÂ­
valued logic: Hajek P 1998),concerning the following three 
systems: Lukasiewicz's BL, Gbdel's BL, and product logic 
BL, respectively (tu may also denote quantum program or 
proof, depending on the context);
a.k.a., wrt, s.t.
means: 'also known as', ' with respect to , and ' such that 
...', respectively (denoted also by: /, $, or :): the 0-ary ' $ ' 
may also denote an 'intuitionistic absurd', depending on the 
context;
cnf(<|>), dnf(<|>)
H
the conjunctive {disjunctive) normal form of the formula <|>;
symbol of Gentzen's sequent ( 
, Gentzen G.K.E. 1909 -
1945);
-L , T
the many-valued logic symbols of ''undefined'' (or 
"undetermined'' also denoted by Kleene symbol "u": Kleene 
S.C. 1904 -1994 ) and "overdefined", respectively; the first 
symbol is also used as truth constant in strict fuzzy logic 
(denoting falsity, i.e. the truth degree 0 or equivalently: 0, 
similarly the second symbol denoting truth, i.e. the truth 
degree 1 or equivalently: 1). Â± and, T may also denote 
'bottom' and 'top' in linear logic or also: 'machine' and 
'environment' in intuitionistic computational logic 
(depending on the context, see Subsection 2.4):' Â±x ' may denote 
'the decimal value of a binary (in general m-ary) word' ;
' 5 V
product logic, the usual arithmetic product and algebraic- 
sum operations (denoted also by 'asÂ®'), where: a v b =dt a 
+ b - ab ;
min, max
the logical operations minimum and maximum, respectively ;
msc
the main sequent connective of a given formula (p , i.e. ' 1- ' 
in the sequent ' 1- <p ' ;
soa
'state of affairs' (wrt a database query);
1= , l=t
' 1= <|> ' means ' <j> is thesis' ( 1- ), 1# <|> <=>df ~ (1= <|>),
' means ' </> is t- thesis' or also, depending on the context, 
' 1= cp' requires <p to hold at the first state of any sequence of 
states (see Subsection 2.3, Temporal logics);
S 11= (p
denotes 1 tp is true or holds at s' (another designation of the 
satisfaction relation: 'll-', used in p-calculus: similarly for II# 
and lb1, see Subsection 2.3, Temporal logics);
â (P,D)
the modal equivalence relation, denoted also by ' 
' (if P
and D are known: see Subsection 2.3, Temporal logics, u- 
calculus);
(cyj) 1= q>
denotes 'tp holding at a position j , j > 0, in a sequence 
<7 (similarly for #: see Subsection 2.3, Temporal logics);
4>(j)
<|>(j) =df '(o,j) i= <p' ;
symbol of exclusive disjunction ( S , Y );

17
means â or â or â
<p
cp 
cp 
<p ,
Vi \ v2 \ 
vp2
VPl 
vp2 
\p;
'1'2
P ,q,r, s,...,pi,p2,...
some propositional (called also sentential) variables 
(provided there is no ambiguity by p it is also denoted a 
property of a given program and s may also denote a state: 
see Subsection 2.3, Temporal logics) ;
I
symbol of an interpretation or index set, depending on the 
context: usually 1 coincides with the set of natural numbers: 
for convenience, instead of |J y , it is also used: IJjy, 
i e I 
i
(assuming that 1 is known) ;
v(q>), vz(cp), vp e Cn({cpi,... ,<pn})
the logical value of a propositional formula (p , v(cp) for 1, 
vp is a logical consequence wrt cpi, ... ,<pn (follows from , is 
deducible by, equivalently: cpi,... ,<pn 1= vp ) ;
<p 1= xp, cp l=t vp
vp follows from (or is a logical consequence wrt) (p. Then 
1= cp => \p (and vice versa: similarly for <p l=t vp);
(p 1# \p
~(<P i= v);
X(<P H V)
is obtained from % by the replacement of its parts vp by the 
formula <p;
e
'is (are) dementis) of ...'(may also denote an empty 
sequence e. depending on the context: see Subsection 2.3, 
Temporal logics: u-calculus);
0
empty (or null) set;
N , Ne, No, I, Q, IR, IR+ , IR++ , C , T, H
the sets of natural numbers N =ar {1, 2, ...}, the subsets of 
even and odd natural numbers, integer numbers, rational 
numbers, real numbers, nonnegative real numbers [0, oo). 
positive real numbers (0, oo), complex numbers, 
transcendental numbers and quaternions, respectively ;
nonnegative integers (i.e. IN =df N u {0}), extended by 
'CO' (an infinite number);
8o,C
the cardinal numbers corresponding to the sets of natural 
numbers and real numbers, respectively ;
E, O
E, O c 1 denote the subsets of even and odd integer 
numbers ;
{ a / f(a) }
the set of all 'a' satisfying condition 4>(a) , another 
designation: E0>(a):'E' from French word 'ensemble' ;
X
the cardinality of set X (denoted also by: X (Cantor's 
designation: G.F.L.P. Cantor 1845 - 1918), card(X), nc(X), 
#(X) or #X;
#(x,B)
Ai, di
the number of x's in E> (a multiset);
the ith axiom A and its use ahi g N );
<, <
denote 'is less than or equal to' (in general: some partial 
ordering relation) and 'is a subformula of, respectively ;
the partial order relation, the opposite (or inverse) partial 
order relation and their strong versions, respectively: 
denoted also by > , < , > and < , respectively ;

18
pÂ°
equivalently: Ox or id it is denoted the set: {(x,x) / x 
e X} ;
universum (the universe set, the universe, the universal set), 
other used designations: S, E, 1, etc., sometimes may be 
used another symbol (e.g. X: fuzzy sets or intuitionistic fuzzy 
sets) and this is depending on the context);
gcd(o,fe)
the greatest common divisor (archaic: greatest common 
factor) of two integers a and b is the largest integer that 
divides them both. ;
(a) modulo m
denoted also by rem(a/m) =df b is the remainder when a 
is divided by m, where: a = k â  m + b (a,m,kâb - 
integers: m > 0 and 0 < b < m )*;
i
the set inclusion and the proper set inclusion (or strict set 
inclusion, denoted also by c' ) binary relations. X J Y 
<=>dt ~ (X G Y): if X G Y then X is a subset of Y or 
equivalently, Y is a superset of X ;
Gb , =b
the multiset inclusion and equation, respectively ;
inf{YJ, sup{YJ
infimum ofY (supremum of Y), denoted also by: infY (sup 
Y) or inf y / y e Y (sup y / y e Y),i.e. the greatest lower 
bound (the least upper bound) of Y G X, where X is a 
partial ordered set;
supp(X)
support of X (a given set) ;
P, d>
non-empty (equivalently: non-void) sets of formulae, e.g. 
proposition letters (i.e. propositional variables called also 
atomic propositions p, q, r, ... or also free or bound variables 
of a formula <p: x, y, z, etc., see Subsection 2.3, Temporal 
logic: j.t-calculus; provided there is no ambiguity by P it is also 
denoted a given program or also process: see Subsection 2.3, 
Temporal logics): in set theory (1> and T may also 
correspond to some conditions (depending on the context);
D
non-empty set of atomic actions (or labels', see Subsection 2.3, 
Temporal logics: p-calculus) ;
X/p
the quotient set wit the binary equivalence relation p (the 
used symbol p may also denote metric in a given metric 
space, denoted also by d, from the term 'distance');
P /B
the binary relation p on A, restricted to (the subset) B 
G A ;
Np
an equivalence class under p ;
A (X), A (X), BR(X)
denote: lower approximation, upper approximation and 
boundary region of X wit p (a binary relation, see: rough 
sets);
u , n, - , 4- , ' , o , *
the set union (set sum), set intersection, set difference and 
symmetric (or: symmetrical) set difference operations (another 
designation for set difference: ' \ * 1 , e.g. X \ Y, instead of 
X - Y ), provided there is no ambiguity by X' is denoted
* In general, the congruence modulo m relation on the set of integers ' -' is defined as follows: a = b (mod m) <=>df m / a - b, i.e. m 
divides the arithmetical difference a - b. Equivalently, a = b(modm) iff there exists an integer k 6 I such that a = k â  m + b.
1 Ulis set operation may also denote usual set inclusion, e.g. see (Slupecki J. and Borkowski L. 1967).

19
[a] .(a)
IND, LI, R'l'C, MGEN, MON
PML(D,P), |1PML(D,P), FV(tp), BV(tp)
Ke , Bc
UJG - PULÂ­
i 
i
(x,y)
x ,Xn
P, P-P"
rfowz(p), corf(p)
p+, p*,p
 o a
f: X -> Y, Yx
S, Kd.pS, [|cp|]s ( llcpllÂ® )
the complement of X (another designation: X ): the symbol 
'u' may also denote a union (or nondeternrinistic choice of 
events, called also regular expressions'), o and * are the 
corresponding algebraic operations of concatenation (called 
also catenation, sequencing or composition', another 
designation: ' ; ': 'o' may also denote composition or 
equivalently superposition of two or more, a finite number, 
binary relations) and the Kleene star operator, called 
iteration, Kleene S.C. (1904 - 1994: see Subsection 2.3, 
Temporal logics: dynamic logic);
dynamic logic functors (called also operators, 'a' denotes 
action or equivalently: event): [a]"/) and denote the 
facts that after performing a it is necessarily and it is 
possible the case that <p holds, respectively (for an arbitrary 
formula <p : see Subsection 2.3, Temporal logics: dynamic logic)
the induction axiom, the loop invariance, the reflexive 
transitive closure, the modal generalization and the 
monotonicity rules (see Subsection 2.3, Temporal logics: 
dynamic logic);
the polymodal logic in D and P , the polymodal fixpoint 
logic in D and P, the sets offree and bound variables of a 
formula <p, respectively (see Subsection 2.3, Temporal logics: 
pi-calculus);
the epistemic and doxastic functors (or: operators, denoted 
in short by K and B, if the Agent 'c' is known). Lip 
denotes "Agent c knows p" and B.p denotes "Agent c 
believes p";
the generalised set union and set intersection operations, 
respectively ;
an ordered pair (2-tuple in short "couple": means "pair"), 
denoted also by <x,y>, Kuratowski K. (1896 - 1980);
Cartesian product of sets, Xn =at X x X x ... x X, n 
times, n E 2 (Rene Descartes 1596 - 1650, Latinised: 
Renatus Cartesius);
a binary relation: p A A x B. where A and B are two 
sets ( apb ci>df (a,b) e p ); p denotes the transposed 
relation or equivalently the converse of p, i.e. ap 'b ci>df 
bpa (sometimes instead of the Greek p. o. ... they are also used 
the latin letters R, S, ... ) and the identity relation (denoted also 
byid):e.g. pÂ° =df {(x,x)/x e X; :
domain and codomain (called also: range or image) of a binary 
relation p;
transitive closure of p, transitive and reflexive closure of p, 
i.e. p*  =df p+ u pÂ° and composition (called also: 
superposition or relative product) of two (or more, a tillite 
number) binary relations: sometimes 'o ' is omitted ('o ' 
may also denote concatenation: language theory);
f is a map (into or onto) from X to Y, Yx =dt {f/f:X 
Y} (denoted also by Map(X,Y));
a (P,D)-(labelled) transition system or (P,D)-Kripke model, 
Kd.pS (in short K) denotes the Kripke functor associated 
with D and P, and and the corresponding meaning or 
extension of a formula <p in S (in S wrt the environment 
g : see Subsection 2.3, Temporal logics: pi-calculus);

20
the usual triangular norm and conorm operators, in short: 1- 
norm and t-conorm (called also: s-norm), denoted also by T 
and _L, respectively; the generalised Lukasiewicz's fuzzy t- 
norm and t-conornr, the intuitionistic fuzzy t-norm and t- 
conomr, the generalised Lukasiewicz's intuitionistic fuzzy t- 
norm and t-conorm, respectively. Â® and Â© may also denote 
multiplicative and' and additive or, depending on the 
context, see: linear logic, Subsection 2.4 ;
?, -Â°
is used in propositional dynamic logic, e.g. '?p' denotes: 
'test p and proceed only if true' (see Subsection 2.3) or also a 
connective in linear logic, pronounced as: 'why not' and
denotes linear implication, e.g. (p -a vp, see: linear logic, 
Subsection 2.4 ;
=^>a , =^>fi , =^>a-fi
the generalised Lukasiewicz's fizzy implication, the fuzzy 
intuitionistic implication and the generalised Lukasiewicz's 
fuzzy intuitionistic implication, respectively ;
0
denotes logical, arithmetical operation or another binary 
operation: depending on tire context;
Vt(<p)
the logical value of a propositional formula op wrt the 
continuous t-norm Â®: vt(cp) e [0,1] ;
{ X / <p(x)}
the. set of all x such that <p(x) (or equivalently: E^x));
IP(X)
the power set (or the powerset) of a set X, IP(X) =df { Y / Y 
c X } (also denoted by: P(X), p(X), pX, 2X );
n(X)
partition of a setX;
B1PN
denotes the class oh Boolean interpreted Petri nets ;
N
denotes a Petri net (provided there is no ambiguity, N 
denotes also the Lukasiewicz's symbols of negation: 
depending on the context);
SM(N)
the finite-state machine corresponding to N (a Petri net);
ba , ~
the behaviour equivalence and state machine equivalence 
relations, respectively ;
Coroll.
means: 'Corollary'',
Df. , df.
means: 'Definition'',
1-.-
e.g. '1 1.2a' means ' thesis or theorem 1.2a' (depending 
on tire context);
1AU
the state-tautology axiom (see Subsection 2.3, Temporal logics)
GEN, SPEC, IN S I
the primitive rules of generalisation, specialisation and 
instantiation rules (see Subsection 2.3, Temporal logics);
TEMP, PAR, PR
the derived rules of temporalisation, particularisation and 
propositional reasoning (see Subsection 2.3, Temporal logics);
E(- C), ETC, EPR
the derived rules of entailment omission of implication (or: 
entailment modus ponens), entailment transitivity for 
implication (or: entailment transitivity) and entailment 
propositional reasoning (see Subsection 2.3, Temporal logics)
an alphabet and the set of all finite words in S ;

21
V V i<(x) 
?>(x)
the universal quantifier (called also: general or big 
quantifier and denoted also by: n, A, A, etc.: n or A may 
also denote a generalised conjunction, A may denote the 
minimal element of a given lattice: depending on the 
context) and the bounded universal quantifier. V V(x) <=>df
V O(x) => y(x)) (or equivalently: Vx W => V(x)) or
V x : <p{x) =t> y(x) or also V x. <p{x) =$ y(x) );
3 
3 V(x)
' p(x)
the existential quantifier (called also existentional or little 
quantifier and denoted also by: S, II, E, V, 3 j , etc.: S or 
V may also denote a generalised disjunction, S may also 
denote an alphabet and V may denote the maximal 
element of a given lattice: depending on the context) and the 
bounded existential quantifier. 3 V(x) <=>df 3 (<p(x) a y(x))
(or equivalently: 3 x (#>(x) a y(x)) ordx : <p{x) a q/(x) Or
also 3x. ^(X) A 1|/(X) );
Q
denotes a quantifier, i.e. Q e {V, 3}, a set or also a 
predicate name (depending on the context);
3! , 3*
the unique (or 'exists unique') quantifier, denoted also by 3i 
or also by 3=i and the existential uniqueness quantifier, 
denoted also by 3Â£i,andso: 3!?>(x) <=> 3y(x) a 3*  ^(x) ;
X 
XX
<p(x/O
denotes an expression formed from <p by substituting (tlie 
individual variable) x for the expression ;
O(x)
denotes a mathematical expression, describing some property 
associated with x;
NV, N 3, -V, -3 (NV
*,
 N 3*,
 -V
*,
 -3
*)
rules of negating an universal quantifier, negating an 
existential quantifier, omitting an universal and an 
existential quantifiers (tlie corresponding rules for bounded 
quantifiers);
+V,+3 (+V
*,
+3
*),
 3.
rules of joining an universal and an existential quantifiers 
(tlie corresponding rules for bounded quantifiers), and 
''there exists at most one" quantifier ,
El. CER
the rule of extensionality for identity, cut-elimination rule ;
I
' I' denotes a descriptor's operator, e.g. i <p(x) ;
â 3!
rule of joining a descriptor's operator (or omitting an 
existential uniqueness quantifier);
RES
the resolvent rule (see Subsection 3.6: resolution method);
fl
' end-ofi-definition',
=df
the symbol of definitional equality (or identity: equals by 
definition);
x,I, â â â 
some vectors (denoted also by x, y,...);
X
empty formula {empty sequence, empty sentence, phrase or 
word, empty string', denoted also by g or e) or real

22
parameter, depending on the context;
fiCSQ
ex contradictione sequitur quodlibet (latin), equivalently: 
ICQ:
Cont. Weak. Penn
Contraction, Weakening, Permutation
i.e.
id est (latin): that is ;
LP
logic of paradox ,
PDL, LQA
propositional dynamic logic, logic of quantum actions ,
QL
(the traditional) quantum logic ,
Â©h , Â©J, Â®h
the average, combinatorial and series connectives (see Subsection 
2.4, Fractal logic);
KB, DB, CWA
knowledge base, database, closed world assumption ;
Hilbert space
7C, K
quantum programs or proofs, depending on the context,
lie
if... then ... else, e.g. s = ite{bl a ; cj denotes: 'if a is 
true, then s = b, else s = c (Subsection 2.4: fractal logic) ,
e
an expression ,
wrt, vs. , aka
which respect to, versus, also known as ;
1FN
intuitionistic fuzzy number ;
P
Pytagorean fuzzy set
LNC
law of non-contradiction
It
' It' denotes 'less than', i.e. '<
Z(X), Z(y)
'X is a set' , 'y is a set' ,
qr(<p)
the quantifier rank of (p ;
a
'J
is an abbreviation: 3 -Â«â¢ 3 3 ;
4/ 
i j
'isproportional to' ;
J
end of proof ' (of an example, algorithm, or another 
formalised text);
'text'
citation of a text, e.g. 'a variety of problems that can be 
solved by ... ' .
[boowj, [boowsj
denote (depending on the context): 'based on other work ' and 
'based on other works', respectively.
Sets are denoted by capital letters, e.g. X, Y, etc. Families of sets are denoted by bold capital letters, e.g. X, Y, 
etc. Moreover, as in Slupecki J. and Borkowski L. (1967), below the lower case Greek letters ' 
' <p '. ' q/ . ' % '
. etc., are used as metalanguage variables for which names of any formulae of the propositional calculus may be 
substituted, while for the variables ' p ' . ' q ' etc. . we may substitute any propositional formulae belonging to that 
calculus.

23
I. Propositions
The logical calculi considered here are based on a system of rules, which define the methods used in proofs from 
assumptions. The methodological problems in the deductive sciences are given only an elementary treatment 
(Slupecki J. and L. 1967). The last problems such as consistency, completeness, independence, etc. of a given system 
arise when a given axiomatic system is considered (in ways analogous to assumptional systems). Obviously, the 
most important of these properties is the consistency of a system. Some elements concerning direct reasoning and 
automated deduction methods are related to the sequent presentation. As it is shown, any Gentzen's rule can be 
represented as a corresponding thesis in the above-considered calculus. In the second section of this chapter some 
non-standard logic systems are considered, such as many-valued, fuzzy, modal, temporal and other non-classical 
systems (Zadeh L.A. 1974, Manna Z. and Pnueli A. 1992 and 1995, Carson J. 1995,Gotwald S. 1995, Suber P. 1997. 
Hajek P. 1998, Navara M. 2000, etc.). Here, the natural deduction methods are extended to some non-classical 
systems, e.g. such as many-valued, fuzzy, modal, temporal and some others. The Gentzen's sequent calculus is 
extended to L-BL systems. In particular, it is shown that any fuzzy propositional formula provable under Hajek's 
axioms of the logic BL is also provable under the above-proposed approach, i.e. using proofs from assumptions. This 
approach seems to be more attractive, more simpler and natural in practical use than the axiomatic one. Some new 
inference rules are also given in the case of modal and temporal systems. Some introductory notions related to the 
dynamic logic, modal p.-calculus and their applications are also presented (Pratt V.R. 1981, Kozen D.C. 1983, 
Venema Y. 2008, Gurov D. and Huisman M. 2013, etc.). As a first pass, some notions concerning the last calculus 
and related to the next two chapters may be omitted. There are also briefly presented (or commented) some other 
non-classical systems, such as: epistemic. game, quantum dynamic-epistemic. intuitionistic and fuzzy intuitionistic. 
linear, (intuitionistic) computability, paraconsistent. relevant and non-monotonic logic systems. Some comments 
concerning fractal logic are also given.
1. Classical propositional calculus
Logic is the science and art which so directs the mind in the process of reasoning and subsidiary processes as to 
enable it to attain clearness, consistency and validity in those processes (Turner W. 1999). The Greek word logos, 
meaning 'reason' is the origin of the term "logic-logike (techen, pragmateia.or episteme.understood) as the name of 
a science or art., first occurs in the writings of the Stoics (The Stoic School: founded in 322 b.c. by Zeno of Cittium). 
The traditional mode of dividing logic into formal' (called also 'symbolic') and 'material' is maintained in many 
modem treatises on the subject. The founder of logic. Aristoteles (born at Stagira, a Grecian colony in the Thracian 
peninsula Chalcidice,384 b.c. died at Chaicis,in Euboea,322 b.c.) in the six treatises*, which he devoted to the subject, 
examined and analysed the thinking processes for the purpose of formulating the laws of thought. In the wide sense, 
the discovery of logic should be associated with the classical Greek philosopher Socrates (469/70 - 399 b.c.) 
reckoned as the biggest wise man in Ancient Greece, one of the most famous of the whole history of philosophy, 
attracted many pupils and/or followers, such as: Euclides (430 - c.360 b.c.). Platon (c.424 - 347 b.c.). Xenophon 
(c.425 -c.386), Aristophanes (c.450 - c.386), Aristoteles (who was a student of Platon, whom Socrates taught), etc. The 
Socrates style of teaching was based on two different methods: elenctic style (elenkhos: critical drinking or cross- 
examing) and maieutic style (maieutics: constructive or creative style). It can be observed that the last two methods 
are related to the notions of indirect and direct proofs from assumptions, respectively. Some philosophy systems 
were studied early, e.g. in India, in the 5th century b.c.:'nydya ' meaning inference, logical argument or syllogism^. 
The NyGya school of logic, based on Hindu philosophy, can be considered as a form of epistemology (i.e. theory of
' The Categories, Interpretation, Prior Analytics, Posterior Analytics, Topics, and Sophisms.
t A syllogism (Greek: ouXXoyiopog , 'conclusion, inference') is a kind of logical argument that applies deductive reasoning to arrive at a 
conclusion based on two or more propositions that are asserted or assumed to be true (see: The Free Encyclopaedia, The Wikimedia Foundation, 
Inc.).

24
knowledge) in addition to logic. In accordance with this school, there are exactly four sources of knowledge. 
i.Qfparamanasf perception, inference, comparison, and testimony (based on texts known as Nyaya Sutras, written 
by Aksapada Gautama from around the 2nd century b.c. (see l /'/e Free Encyclopaedia, The Wikimedia Foundation, 
Inc).
In the next considerations we shall concentrate our attention only to the formal logic (called in short also 'logic', 
provided there is no ambiguity). In the last case, logic can be divided into "classical* *(known also as Boolean
*
 or 
bivalent, i.e. the logical value of a propositional formula is either true or false) and "non-standard' (called also "non- 
classicaV). Typically, a logic consists of a formal or informal language together with a deductive system and/or a 
model-theoretic semantics. The language is, or corresponds to, a part of a natural language like English or Greek. 
The deductive system is to capture, codify, or simply record which inferences are correct for the given language, and 
the semantics is to capture, codify, or record the meanings, or truth-conditions, or possible truth conditions, for at 
least part of the language (Shapiro S. 1995).
'George Boole (1815 - 1864)
'Stanislaw Jaskowski (1906 - 1965), Gerhard Karl Erich Gentzen (1909 - 1945)
* Alfred Tarski (1901 - 1983). Jacques Herbrand (1908 - 1931)
Â§ Charlie Chaplin (1889 - 1977)
" Any logical expression consists of symbols (in the broad sense: constants and variables), hr general, there exist two kinds of constants: 
logical constants (e.g. T, F, ~ , a , v , =>, <=>, â¡ , O, ! , etc., having the same semantic content in any interpretation) and non-logical ones, 
depending on the used interpretation (and hence, the considered sentence may be true or false).
A formal semantics approach including the Kamp's discourse representation structures having two critical components: a set of discourse 
referents representing entities which are under discussion and a set of conditions representing the obtained information about discourse referents 
(discourse representation theory: Johan Anthony Willem Kamp, bom 1940)
Subsections 1.1 - 1.6 are a brief introduction to the methods of natural deduction according to the excellent 
work given by Slupecki J. and Borkowski L. (1967). The logical calculi considered here are based on a system of 
rules which define the methods used in proofs from assumptions. Such an approach was originally introduced during 
1934 - 1935 by Jaskowski S. and Gentzen G.K.E . The last approach seems to be inspirated by the earlier 
presented deduction theorem (introduced independently by Tarski A. in 1923 and Herbrand J.i in 1930: see 
Theorem 1.31 of Subsection 1.7 and related coimnents). Some elements concerning direct reasoning and automated 
deduction methods are related to the sequent presentation (Subsection 1.8).
1.1. Symbols and formulae
Consider the proposition: "Russell is a logicien or it is not true that Russell is a logicien". This proposition 
remains to be true if instead of the word "Russell", the word "Chaplin"? is used or also instead of the word 
"logicien" , e.g. the word "general" is used. However, the last property is not preserved if we consider only the first 
part of the above proposition: "Russell is a logicien" (Bertrand Russell: 1872 - 1970). So. it can be observed 
different texts may have different logical forms. In general, the logical form of a proposition is the formula obtained 
from this proposition by replacing non-logical constants
**
 by variables, the same constants being replaced by the 
same variables and different constants by different variables. Unfortunately it is a very difficult task to be given some 
more general definition of the last notion. Some more fundamental investigations concerning the process of 
extraction of a logical form associated with a priori given text were presented by Barwise K. J. and Perry J. (1983) 
and also by Kamp H. and Reyle U. (1993 )tt. A more strict considerations of the notion of logical form are omitted 
here. According to the above example, the following formula can be obtained: p v ~ p , where the propositional 
variable p corresponds to " Russell is a logicien". The constants v and ~ correspond to the connectives 'or' and 
'it is not true that', respectively. Hence, the Aristotelian law of the excluded middle (lat: "tertium non datur") was 
obtained.
In the propositional calculus any formula is constructed by using the following three kinds of symbols: (i) 
propositional variables (denoted by p. q. r, s.....pi.p2....). (ii) some constants of the calculus (called also logical

25
functors or connectives, such as: 
a , v ,=>,<=>, etc.) and also (iii) parentheses (left: '(' and right: ')'). The
basic symbols ~ , a , v , => and o are called negation, conjunction, disjunction (below called also "logical 
alternative' or in short "alternative'), "(material) implication', and "equivalence', respectively. The expression p' 
is read: "not p' (or: "it is not true thatfr). In a similar way. the expressions 'p a q','p v q','p =a q'. and 'p o 
q' are read as follows: 'p and q', 'p or q', "if p then q' (or: 'q only if p') and 'p if and only if q', 
respectively. The first and the second elements of an implication are called its antecedent (or premise) and its 
consequent (or succedent), respectively. As it was mentioned, an expression may be introduced without using any 
parentheses (in accordance with the Lukasiewicz's parenthesis-free notation), e.g. instead of the expression '(p =a 
q) => (~ q =a ~p)' we can consider 'CCpqCNqNp'(this approach is omitted below).
To minimise the number of used parentheses in an expression, some priorities for logical connectives were 
introduced, e.g. (i) ~ . a , v , => , o (i.e. the symbol of negation binds more strongly than the symbol of 
conjunction, the last binds more strongly than the symbol of disjunction, etc. Slupecki J. and Borkowski L. 1967) or 
(ii) ~ . a , =a, <=>, v (Mostowski A.W and Pawlak Z. 1970) or also (iii) ~, v, a , => , <=> (Chang C.-L. and Lee 
R.C.-T. 1973). The only difference concerns disjunction binding. The convention under Slupecki J. and Borkowski 
L. (1967) is used below. Moreover, in the next considerations we shall use the term "proposition' to denote only 
such expressions which are declarative, i.e. either true or false (so neither the interrogative nor the imperative 
sentences are propositions wrt the last sense).
The set of propositional formulae (called equivalently propositional expressions, in short: expressions or also 
sentential formulae) of the propositional calculus can be considered as the smallest set of formulae which includes 
propositional variables, and which is closed under the operations of forming the negation, conjunction, disjunction, 
implication and equivalence. Hence, any propositional variable can be considered as an expression and also the 
compound formulae formed from them by means of the corresponding logical functors. More formally, the 
following well-known inductive definition is used.
Definition 1.1
A propositional formula is:
1. 
Any propositional variable.
2. 
If cp and q/ are some propositional formulae, then such formulae are also: ~ (cp), (cp) a (qt), (cp) v (qt), (cp) 
=^> (q/). and (cp) o (q/).
3. 
Every propositional formula in this propositional calculus either is a propositional variable or is formed from 
propositional variables by a single or multiple application of rule (2) .*
' Equivalently, the above collection of formulae, i.e. the language of this logic, can be recursively defined as follows: <p =df p / ~ <p / <p a i|/ / 
<pvq//<p => ip <p <=> ip. Ulis definition corresponds to the BNF notation, i.e. the Backus-Naur form, a notation technique for context-free 
grammars: John Backus (1924 2007), Peter Naur (1928 - 2016).
Let <p be a formula constructed under Definition 1.1. The main purpose of this calculus is to give an answer of 
the question whether this formula is a thesis or not.
1.2. Primitive rules
There exist two classical approaches in constructing of the propositional calculus: the axiomatic approach and 
the approach from assumptions. In general, a system based on assumptions is presented below. The proofs realised 
in such a system are very similar to the mathematical proofs or also to the reasoning in other disciplines. Hence, in 
accordance with the last property, the commonly used name for such systems is the name of natural deduction. As it 
was mentioned, the first systems based on assumptions were developed during 1934 - 1935 by Jaskowski and 
Gentzen. The system considered below differs from them in some details (Borkowski L. and Slupecki J. 1958). The 
proof in the propositional calculus can be interpreted as a process of joining new lines by using some primitive or 
derived rules and/or other theses in accordance with the used assumptions. The following seven primitive rules are 
considered below.

26
(1) 
Rule of detachment (or omitting an implication, also known 
as ,,modus ponens" or ,,modus ponendo ponens" denoted 
below by -C'
):*
* A schema having two parts, upper and lower, separated by a horizontal line will present any rule (corresponding to the sequential way of the
. . 
. 
. 
. 
y? => yr.q>
human thinking and reasoning). Another possible convention, e.g. for the rule of detachment: - C : -------------. etc.
1 In fact, the rule ------â, which can be considered as a particular case of the following rule of omitting an exclusive disjunction:
(p=> V
-C: 
cp
V
(2) 
Rule of joining a conjunction'.
CP
+ K: v
(p A y
(3) 
Rule of omitting a conjunction'.
The Stoic School founded in 322 b.c. by 
Zeno of Cittium (Zeno of Cittium b. 366; 
d. in 280 b.c): the first system of 
propositional calculus
The Stoic School
Albert of Saxony (who was a student of 
Jean Buridan: 1320 - 1390)
(p A
-K: ------------
cp
cp \ \|/ \
V
(4) 
Rule of joining a disjunction'.
(P
cp vtp
(5) Rule of omitting a disjunction (also known as âmodus 
tollendo ponens" or also ^disjunctive syllogism"):
Robert Kildwarby: 1215 - 1279, Albert 
of Saxony, Jean Buridan (13th and 14th 
century, Jean Buridan 1295/1305 - 
1358/61).
The Stoic School: a rule formulated 
only for an exclusive disjunction.* 1'
cp v v
-A: 
~cp
V
(6) 
Rule of joining an equivalence:
Boethius A.M.S.(c.e. 477/80 - 524): 
some laws for equivalence. However it 
seems that the rules Â± E date from a 
much later time.
<p V

27
+ E:
(p=> V
tp <=> V
(7) Rule of omitting an equivalence'.
-E:
(p=>\|/\\|/=xp\
According to the last rule - E. we shall say <p => y is a direct (or if-) implication and y => <p is the 
corresponding opposite (converse or only-if-) implication. Sometimes <p => y and y => <p are also said to be left- 
to-right and right-to-left implications, respectively.
In general, the above primitive rules can be considered as a natural way of the human thinking and inference. 
As an example, assume that from our analysis it follows that some variable x > 0. i.e. (x > 0) v (x = 0). But 
from the next steps of this analysis it follows that x A 0. i.e. ~ (x = 0). And hence, in accordance with the rule of 
omitting a disjunction we can obtain: x > 0.
Next we shall concentrate our attention to the following two rules for constructing a proof from assumptions: 
direct proof from assumptions and indirect proof from assumptions. Let consider the following generalised form of 
an expression:
<|)1 =4> (<|>2 =4> (<|>3 
â¢â¢â¢ 
(4>n- 1 =4> K> ...)
In general, the direct prooffrom assumptions is realised as follows:
Proof:
(i) 
4>i
(2) 
<t>2
(3) 
<t>3
(n - 1) 
4>n- 1
{1.2.....n-l / a}
In the first n - 1 lines the corresponding primary assumptions 
are given (called also: assumptions of the direct proof or direct 
premises). To the proof we may join: new proof lines in 
accordance with the existing primitive rules, some proved 
previously theorems and/or additional assumptions (i.e some 
secondary assumptions, if necessary). The proof is said to be 
complete if in its last line the formula 4>n appears (this line will not 
be numbered). If there exists some <pk (k 6 {L â â â  ,n _ U) 
which is a conjunction of the form <pi k a <p2 k a... a <pnk k , 
according to - K , instead of assuming <|>k . nk lines are 
obtained. In the case when the main symbol is not an implication 
the proof begins by writing down one or more theorems previously 
proved. This case is called an ordinary direct proof.
The rule for constructing a direct proof from assumptions is illustrated below.
Thesis 1.1 (the law of multiplying implications by sides)
(p => q) a (r => s) =a
<|>i
( PAr
<|>2
=a q as ) 
j>3
Proof:
(1) 
p =a q
(2) 
r =a s
(3) 
p
(4) 
r
(5) 
q
{1.2.3.4/a}
{-C: 1.3]

28
(6)
s
q a s. â¡
[-C: 2.4] 
{+K:5.6}
The indirect proof from assumptions is realised as follows:
Proof:
(i) 
4>i
(2) 
<|>2
& 
{1.2.....11-1/a]
(n - 1) 
<l>n-i
(n) 
~ 4>n 
{aip}
contr. â¡
In the first n - 1 lines the corresponding primary assumptions 
are given. In the n,h line the formula ~ <|>n is placed as the 
assumption of the indirect proof (called also: indirect premise)". To 
the proof we may join: new proof lines in accordance with the 
existing primitive rules, some proved previously theorems and/or 
additional assumptions (i.e some secondary assumptions, if 
necessary). The proof is said to be complete if two contradictory 
lines appear in it. If there exists some <|>k (k e {1, ... ,n - 1}) 
which is a conjunction of the form <pi k a <p2 k a... a <pnk k , 
according to - K , instead of assuming <|>k , nk lines are 
obtained. The last approach will be used also for ~ <j>n. In the case 
when the main symbol is not an implication the proof begins with 
the assumption of the indirect proof. This case is called an 
ordinary indirect proof.
The proper specification of the set of all primary assumptions is a very important process (see remark concerning 
T 1.15 and T 1.19, given in the next subsection). The rule for constructing an indirect proof from assumptions is 
illustrated below.
Thesis 1.2 (law of reduction ad absurdum)
(~p=>qA~q)=>p
Proof:
(1)
(2)
(3)
(4)
(5)
~p a q A~q 
~p 
q A~q 
q 
~q 
contr. â¡
{a}
{aip}
{-C: 1,2}
{4.5/-K: 3}
{4.5}
An application of the law of multiplying implications by sides is given in the next example.
Example 1.1
Let p and a be two binary relations over X ,i.e. p , ct c X x X . Assume that p and a are transitivet 
Then the intersection p n a is also a transitive relation over X . So, the following implication have to be shown 
(for any x.y.z e X).:
(xpy a ypz =a xpz) a (xAy a vaz =a xaz) =a ((xpy a x<tv) a (ypz a vaz) =a xpz a xaz)
Since a is a commutative and associative logical operation (see the commentary given after T 1.7a below), 
this implication is satisfied. â¡ 
{T 1.1}
'Lines (1 - n) can be considered as obtained by using (n - 1) times the rule NC of negating an implication (see T 1.19 below) wrt ~ |<|>i => 
(<}>2 => ('t'j => â â â  => (4>n -1 => 4>n) â â â )]â 
1 Any binary relation over X p is said to be transitive iff xpy a ypz => xpz (for any x,y,z 6 X ), where xpy iff (x,y) e p . 
Obviously. x(p n o)y iff xpy a xoy (for any x.y 6 X).

29
It can be observed the rule for a direct proof is a particular case of the rule of an indirect proof. However, direct 
proofs (if they exist) are usually more simpler than the indirect ones*. And finally, the only universal are the indirect 
(ordinary or ramified) proofs. And hence, if some formula cp is a thesis then such a proof always exists.
* For example, a typical indirect (ramified) proof of the following expression: ((p v q) a r => s) (p a r => s) a (q a r => s), i.e. 
the mle A,' of removing a disjunction in the antecedent of a sequent (see Subsection 1.8) would require 20 lines. On the other hand, the 
corresponding direct proof would require only 3 lines, hr fact, since a is distributive over v, by using the rule of addition of antecedents AA, SR 
and - E the proof can be completed (the proof is left to the reader). But sometimes, obtained numbers of proof lines may be similar, e.g. see. the 
attached two proofs of the law of negating an implication T 1.19a given in the next subsection.
1.3. Theses and derived rules
The propositional variables (e.g. p, q, r, ...). appearing in the proof of any thesis given below, can be considered 
as metavariables and hence the obtained results, i.e. rules, can be generalised for arbitrary propositional formulae 
(e.g. cp, %,...). We shall first consider the laws of double negation.
Thesis 1.3a (rule of omitting double negation) 
~~p =a p
Proof:
(1)
~~P
{a}
â cp
(2)
~p
{aip}
In general: IN .
T
contr. â¡
{1.2}
Thesis 1.3b (rule of joining double negation) 
p =a ~~p
Proof:
(1) 
P 
{a} 
,. <P
(2) 
~~~p 
{aip} 
In general: +N: 
â
(3) 
~p 
{T 1.3a}
contr. â¡ 
{1,3}
Thesis 1.3
~~p p.n 
{+E : T 1.3a, T 1.3b] 
The Stoic School
In accordance with the rule of detaclunent for implication and T 1.3a. , the following law of reduction ad 
absurdum can be also obtained (left to the reader).
Thesis 1.4 
(p => q a~ q) => ~ p.
In a (direct or indirect) proof from assumptions some additional assumptions can be also used. Let cp be an 
additional assumption of the corresponding proof and % is obtained as a consequence of the previous lines and cp . 
Then the implication cp => % may be jointed to the proof. We shall say the rule of joining an implication 
(denoted below by + C ) has been used in the proof. This rule corresponds to the deduction theorem extended by 

30
rules Â± K. Â± A. and Â± E (see Theorem 1.31 and the comments at the end of Subsection 1.7: a more formal treatment 
is omitted here)*.
(1) p =a> q at
(1.1) P
(1.2) qAr
(1.3) q
(1.4) r
(2) 
p =a> q
(3) 
p =a> r
(p =a> q) a (p =a> r). â¡
Proof T 1.5a (a direct proof without using + C):
(1) 
p =a> q at
(2) 
~p v q at
(3) 
(~p v q) A(~p v r)
(p =a> q) a (p =a> r). â¡
For simplicity an additional assumption will be preceded by some double number of the form 'i.j' (to denote the 
j1'1 line of the i'1' additional assumption; i.j = 1.2,...). It can be observed that any additional assumption, say cp. 
introduced as an 'arbitrary formula" should be related to the considered proof. And so. we have some allowable 
degree of arbitrariness, e.g. it is not possible to accept <|>n as an additional assumption of the proof (i.e. the right side 
of the main implication) or also an expression cp which is in contradiction with some of the previous lines of this 
proof.
The rule + C is illustrated in the proof of the first implication of the next thesis called Taw of multiplication of 
consequents" (the proof of the converse implication T 1.5b can be realised as a direct proof from assumptions 
similarly to T 1.1, so this is omitted).
Thesis 1.5 (law of multiplication of consequents'. MC) 
p q a r o (p q) a (p r)
In accordance with the rule of omitting an equivalence, i.e. - E, the following two implications have to be 
proven.
Thesis 1.5 a 
(p => q a r) (p => q) a (p => r)
Thesis 1.5b 
(p =a> q) a (p =a> r) =a> (p =a> q a r)
Proof T 1.5 a:
{a}
{ada}
{-C: 1.1.1}
{1.3.1.4/-K: 1.2}
{+C : 1.1=>1.3}
{+C : 1.1=>1.4}
{+K:2.3}
{a}
{ CR : 1. i.e. according to the law of implication, see T 1.15 }
{v is distributive over a}
{CR.SR: 3}
Here SR is the substitution rule (see: remarks associated with T 1.18). However, the corresponding indirect 
proof without using + C may be more complicated as it is illustrated below.
Proof T 1.5a (an indirect version):
The used rules NK and NC (negating a conjunction or an implication, respectively) and the construction of 
ramified proofs with joined additional assumptions are described in the next considerations (see below: T 1.8 and 
T 1.19, respectively).
'Let p and q be two propositional variables corresponding to two, not necessarily adjacent, proofs lines. And so, by using '+ K' we have 
the conjunction p a q. Since p a q => (p => q) ' is a thesis, using C' the following implication can be obtained: p => q. It can be 
observed that this proof style do not corresponds to the above rule of joining an implication '+ C'.

31
(1)
p =>q at
{a}
(2)
~ ((p =7> q) a (p =a r))
{aip}
(3)
~ (p =a q) v ~ (p =a r)
{NK: 2}
(1.1)
~ (p q)
{ada}
(1.2)
P A~q
[NC : 1.1}
(1.3)
P
{1.3.1.4 / - K : 1.2}
(1.4)
~q
(1.5)
q Ar
{-C: 1,1.3}
(1.6)
q
{1.6.1.7 / - K : 1.5}
(1-7)
r
contr.
[1.4,1.6}
(2.1)
~ (P r)
{ada}
(2.2)
P A~r
[NC : 2.1}
(2.3)
(2.4)
P
~ r
[2.3,2.4 / - K : 2.2}
(2.5)
q Ar
(-C : 1,2.3}
(2.6)
q
[2.6.2.7 / - K : 2.5}
(2.7)
r
contr. â¡
{2.4.2.7}
It is possible to reduce the above proof wrt the lines (1.7) and (2.6) (see the rule of omitting a conjunction). The 
proof of T 1.5b is left to the reader. In fact, in accordance with the second above given direct proof version, all 
(algebraic) transformations, i.e. used derived rules are equivalencies. And hence, the opposite implication, i.e. T 1.5b 
is also satisfied. The following equivalence is also a thesis (law of addition of consequents, AC: the proof is left to 
the reader): p => q v r o (p => q) v (p => r).
In accordance with T 1.5, the proof of any implication of the form 'P => '|' a / can be replaced (and of 
course simplified) by equivalently proving the following corresponding two implications: <p => q/ and <p => %. 
In fact, assume that 1= cp => q/ and l= cp => %. Then according to the last two lines, the rule +K, and T 1.5, we 
have: l= cp => qt a %*.  And so, this observation can be also extended in the case of proving implications on 
predicates, sets or non-standard formulae, e.g. the Hauber's law in L-, G -, and it - BL, in particular in G - and it - 
BL, where the classical law of negating an implication NC, i.e. T 1.19, is satisfied only in the case of L- BL: see 
Subsection 2.2). As an example, in the case of classical logic Hauber's law, a corresponding proof is given below: 
see the attached direct proof of T 1.13 using the law of multiplication of consequents T 1.5. It can be observed that a 
similar approach is possible in the case of T 1.9 (law of addition of antecedents: this is left to the reader).
According to T 1.3a and the rule of detaclunent for implication, i.e. - C , the following rule can be obtained.
Thesis 1.6 (rule modus tollendo tollens)
(p =a> q) a ~q =a ~p
Proof:
(1)
(2)
p q
~q
{1.2/a}
(3)
~~p
{aip}
(4)
p
{-N: 3}
(5)
q
{-C: 1,4}
contr. â¡
{2.5}
The Stoic School, Boethius 
A.M.S. etc.
In general: Toll: ~ q/
~<P
' This symbol '1=' concerns the whole expression on the right

32
It can be observed that the proof of T 1.6 follows directly from T 1.14a (according to the law of contraposition 
of implication), next using T 1.12b (the law of importation).
The following two very important theses, called De Morgan's laws , can be obtained (Augustus De Morgan 
1806 - 1871). In fact, they were already known in the middle ages (i.e. in the medieval period, e.g. W. Burleigh 
1273 - 1357, William of Ockham 1285 - 1349, etc.). Only the proof of the first one is presented below (the proof of 
T 1.8 is left to the reader). More formally, the indirect proof of T 1.8a, in accordance with T 1.3, should require the 
use of substitution rule SR: introduced after T 1.18).
Thesis 1.7 (the law of negating a disjunction)
~ (p v q) o ~p a ~q
Thesis 1.8 (the law of negating a conjunction)
~ (p a q) o ~p v ~q
In accordance with the rule of omitting an equivalence, i.e. - E , the following two implications are obtained.
Thesis 1.7a
~ (p v q) =a ~p a ~q
Thesis 1.7b
~p a ~q =a ~(p v q)
Let % and be two contradictory lines obtained for some additional assumption cp . Hence, by using rules + 
K and +C the following line can be obtained: cp => % a . According to T 1.4 and the rule of detaclunent 
- C , as a next line of the proof, the formula ~ cp can be used. This is illustrated in the proof of T 1.7a below.
Proof T1.7a:
(1)
~(p V
q)
{a}
(1.1)
P
{ada}
(1.2)
Pvq
{+A: 1.1}
(2)
~p
{1.1 =a control, 1.2)}
(2.1)
q
{ada}
(2.2)
Pvq
{+A:2.1}
(3)
~q
{2.1 => contr.(l,2.2)}
~P A ~ q â¢ â¡
{+K:2,3}
-fy'vy) 
In general: NA:----------------------
It is easily to show the v and a logical operations satisfy the commutative, associative, absorptive, 
idempotent, and distributive axioms. In fact, any system (P ; v , a) can be considered as a Boolean finite lattice, 
where P 0*  is an arbitrary set of formulae such that for any p, q e P we have: p v q , p a q e P (we 
shall say the logical operations v and a are closed in P , e.g. see KemtopfP. 1967). Hence, for any p, q, r eP 
we have: pvq o q v p, p a q o q a p, (p v q) v r o p v (q v r), (p a q) a r o p a (q a
r), p o p v p a q, p o p a (p v q), p o p v p, p o p a p, p a (q v r) o p a q v p a r, and 
pv q a r o (pv q ) a (pv r) (e.g. the line (2.2) in the proof of T 1.7a is obtained in accordance with the 
commutative axiom for disjunction). The corresponding proofs are left to the reader. In general, the notion of a 
Boolean algebra is used (George Boole 1815 - 1864). So, let P =dt {0,1, pi, p2,..., ~ pi ,..., pi a p2,...} be the 
set of all formulae containing 0,1, and the propositional variables pi, p2,..., closed wrt the logical operations v , a ,
' '0' denotes "empty set". In general, the word "empty" may be used in other contexts, e.g. such as: empty formula, empty word, empty string, 
empty cover, empty graph, empty algebraic system, empty domain, empty music (4'33"'. four minutes, thirty-three second: John Cage 1912 - 
1992), etc.

33
and ~ (it can be observed P is not finite). Hence, the corresponding algebraic system can be considered as a 
Boolean algebra (Mostowski and Pawlak 1970)*.
Proof T 1.7b:
(1)
(2)
(3)
(4)
(5)
~p
~q
~ ~ (p v q)
P v q
q
contr. â¡
{1.2/a}
{aip} 
{-N:3} 
{-A: 1.4} 
{2.5}
For simplicity, in the next considerations we shall omit lines like (3) in the proof of T 1.7b assuming directly line 
(4) as an {aip}. According to T 1.8. the following rule of negating a conjunction can be obtained.
NK :
~ (<? A W)
~ <pv ~ V
In accordance with the previous used convention , the above rules NA and NK can be considered as '-NA' 
and NK' in comparison with the rules + NA and + NK given below .
~ <p A ~ \|/
+ NA: -------------, + NK :
~ (Â® v w)
~(Pv~V 
~ (<P A V)
The following law is satisfied.
Thesis 1.9 (law of addition of antecedents'. AA)
P v q =a r o (p => r) a (q => r)
Proof T 1.9a:
(1)
p v q r
{a}
(1.1)
P
{ada}
(1.2)
P v q
{+A: 1.1}
(1.3)
r
{-C: 1.1.2}
(2)
p => r
{+C : 1.1=>1.3}
(2.1)
q
{ada}
(2.2)
P v q
{+A : 2.1}
(2.3)
r
{-C: 1.2.2}
(3)
q => r
{+C : 2.1 =>2.3 J
(p =a r) a (q =a r). â¡
{+K:2.3}
Since a and v are coimnutative and mutually distributive, the proof of T 1.9a (and hence T 1.9) can be 
simplified by using a similar approach as in T 1,5a (without + C) and this is left to the reader.
Proof T 1.9b:
1 It is assumed that any two equivalent formulae are identical. Hence, elements of this algebra are not single formulae ,but equivalence 
classes wrt the following binary relation p <= P x P : (pi p (p2 Odf ((pi o (pi)- Since p is an equivalence relation , the system & =df (P /p ;
[0]p. [1]p;v'.a'. ~')is a Boolean algebra, where P/p is the quotient set wrt p and v' . a' . ~ ' are the corresponding operations closed in 
P/p .
T Provided there is no ambiguity, a similar approach will be used for any derived rule having as a main connective in the corresponding thesis 
an equivalence, e.g. + CR wrt the law of implication CR. similarly + NC wrt the law of negating an implication NC (see T 1.15 and T 1.18 
given below), etc.

34
(1)
p => r
(2)
(3)
q => r
P v q
{1.2.3 / a}
(4)
~ r
{aip}
(5)
~p
[Toll: 1.4}
(6)
~q
[Toll: 2.4}
(7)
~p a ~q
{+K:5,6}
(8)
~ (p v q) 
contr. â¡
[+NA : 7} 
{3.8}
It can be observed there may exist various proofs for a given thesis, e.g. an indirect version for T 1.9a (more 
complicated, like the indirect version of the proof of T 1.5a ) or instead of using + K. and + NA in the proof of T 
1.9b. the use of the rule of omitting a disjunction ,i.e. - A wrt lines (3) and (5), etc. In the last case we can obtain 
some simplification of the proof (this is left to the reader). Since a and v are associative logical operations, the 
above laws of multiplication of consequents and addition of antecedents (i.e. T 1.5 and T 1.9. respectively) can be 
generalised for a finite number ( > 2) of propositional variables. The obtained laws are called generalised laws of 
multiplication of consequents and addition of antecedents.
Next we shall concentrate our attention on the construction of ramified proofs with joined additional assumptions. 
Consider the generalised form of a given expression. Let d> =<jf {cpi, cp2 . ... . cpcj be a finite set of additional 
assumptions. Also let cpi v cp2 v ... v cpk be one of the proof lines. Then:
(i) a ramified direct proof from assumptions of this expression is recognised to be complete if the formula <[>,, 
have been obtained as a consequence of each <p e <I>.
(ii) a ramified indirect proof from assumptions of this expression is recognised to be complete if a contradiction 
have been obtained as a consequence of each cp e d>.
Let consider the case (if Assume that <|)n have been obtained as a consequence of each cp e <I>. So. by using rule 
+ C the k additional lines can be obtained: cp =a 4>n (for each cp e <I>). According to the (generalised form of the) 
law of addition of antecedents we have: cpi v cp2 v...vcpk =a <|>n. Finally, by rule of detachment -C wrt the last 
line and cpi v cp2 v ... v cpk . the formula 4>n can be obtained as the last proof line.
Let a contradiction have been obtained as a consequence of each cp e d>. So. in accordance with T 1.4. to prove 
case (ii) the negation of each cp e <I> can be joined, i.e. the following new proof lines can be obtained: ~ cpi , ~ cp2 
. ... . ~ cpk . Next by using ( k - 1) times the rule of omitting a disjunction - A two contradictory lines can be 
obtained: cpk and ~ cpk (Slupecki J. and Borkowski L. 1967).
It can be observed that for k > 4 the proof of case (ii) can be simplified if instead of using ( k - 1) times - 
A, the (generalised) rules + K and + NA are used (wrt the proof lines ~ cpi , ~ cp2 ..... ~ cpk ). Hence we can 
obtain the following two contradictory lines: cpi v cp2 v ... v cpk and ~ (cpi v cp2 v ... v cpk).
The following thesis (known in ancient times) is an illustration of the ramified direct proof from assumptions. An 
illustration of the ramified indirect proof from assumptions is the indirect version of the proof of T 1.5a.
Thesis 1.10 (law of compound constructive dilemma)
(p =a q) a (r =a s) a (p v r) =a q v s
Proof:
(1)
(2)
(3)
(1.1)
(1.2)
p q 
r => s 
p v r 
P 
q
{1.2.3 / a}
{ada}
{-C: 1.1.1}

35
(1.3) q v s
(2.1) 
r
(2.2) 
s
(2.3) 
q v s
q v s . â¡
[+A : 1.2} 
{ada}
{â C : 2,2.1}
[+A : 2.2} 
{1.3,23}
The last thesis can be also proven without using the ramified proof rule as it is shown below.
Proof T 1.10 (an indirect version):
(1) 
p =a q
(2) 
r =a s
(3) 
p v r
(4) 
~ (q v s)
(5) 
~q
(6) 
~ s
(7) 
~p
(8) 
~r
(9) 
~p A ~r
(10) 
~(pvr) 
contr. â¡
[1.2.3 / a}
{aip}
[5.6 / NA : 4}
[Toll: 1,5} 
[Toll: 2,6} 
{+K:7,8} 
[+NA : 9} 
{3,10}
The proof of the next two theses is left to the reader. Is the law (p => q) => (p v r => q v r) usable in the 
indirect proof of T 1.11? Give a direct proof of T 1.11 without using any additional assumptions. Similarly, is the 
law (p q) a (r => s) => (p v r => q v s) usable in the direct proof of T1.10?
Thesis 1.11 (law of compound destructive dilemma)
(p =a q) a (r =a s) a ~ ( q v s) =a ~ (p v r). â¡
Thesis 1.12 (laws of exportation and importation', implications (a) and (b), respectively)
p a q =a r o p =a (q =a r). â¡
According to T 1.12, the following formula is an equivalent version of the law of compound constructive 
dilemma: (p =a q)A(r => s) => ( p v r => q v s) (in a similar way for T 1.11). The following two examples 
are an application of the ramified direct/indirect proofs with joined additional assumptions.
Example 1. 2
Let p and ct be two binary relations over X (see Example 1.1). Assume that p and ct are symmetric
*.
 
Then the union p u a is also a symmetric relation over X . So, the following implication have to be shown 
(for any x,y e X):
* Any binary relation over X p is said to be symmetric iff xpy =x> ypx (for any x,y e X ), Obviously, x(p u o)y iff xpy v xoy 
(for any x,y e X).
(xpy =a ypx) a (xav =a vax) =a (xpy v xoy =a ypx v vax)
This formula is an equivalent version of the law of compound constructive dilemma (T 1.10). The proof follows 
immediately from the law AAC (of addition of the antecedents and consequents of two implications: see T 1.20 
given below). â¡
An application of the ramified indirect proof from assumptions is given in the next example (Tabakow 2001).

36
Example 1. 3
Let f: {0,1}n 
{0,1} bean n-variable two-valued logic function. Assume that C is any circuit realisation
of f = f(x) e {0.1} where x =dt (xi,...,xn) e {0,l}n is the corresponding primary input vector. For C which 
realises the function f(x) , a logical type fault a e changes the function realised to f "(x) (a new n-variable 
two-valued logic function called a faulty function), where . - is the set of all possible such faults. Next for any a 
e . - by T(a) =df { x e{0,l}n/f(x) 
f"(x) I we shall denote the set of tests which detect a . Similarly, by
T(a * P) =df {x e {0.1}n/f "(x) Â£ fp(x)} we shall denote the set of tests that distinguish a and p (forany 
a, p e F , a * P). The following implication is satisfied.
* The Euclid's algorithm: (1) If a > b then a =df a - b.Goto(l); (2) If a = b then gcd(a.b) =df a . End ; (3) b =# b - 
a . Go to (1). â¡ It can be observed these two algorithms have the same behaviour. We shall say they are behavioural-equivalent, i.e. the outputs 
are the same tor any input.
x 6 T(oc) n T(P) => x Â£ T(oc * P) (forany x 6 {0,1 }n, a, p e >,a 
P).
Proof:
(1)
x 6 T(oc) n T(P)
{a}
(2)
x e T(oc * P)
{aip}
(3)
f(x) = 0 V f(x) = 1
{df f(x) }
(4)
i 6 T(oc) a s 6 T(P)
[df 'n ' : 1}
(5)
x e T(a)
{5.6/ - K:4}
(6)
X 6 T(P)
(7)
f(x) f"(x)
{df T(oc) : 5}
(8)
f(x) Â£ fP(x)
{df T(P): 6}
(9)
f"(i) fp(x)
{df T(oc P) : 2}
(1.1)
f(x) = 0
{ada}
(1.2)
f"(x) = fP(x)
{3,7,8}
contr.
{9.1.2}
(2.1)
f(x) = 1
{ada}
(2.2)
f"(x) = fp(x)
{3,7,8}
contr. o
{9,2.2}
It can be observed for an arbitrary n-variable m-valued discrete logic function f : Mn M the above 
implication is not satisfied, where M =dt {0,1,... ,m - 1} and m <> 2 . In fact, the above property is satisfied only 
for m = 2 . â¡
The algorithm proving is another field of application of the logic rules. This is illustrated in the next example, 
where the well-known Donald Knuth's version of the Euclid's algorithm is presented (Euclides of Alexandria, a 
native of Megara: 430 b.c. - c.360 b.c.).
Example 1. 4
Consider the following algorithm (without loss of generality, it is assumed below that a.b e k the set of natural 
numbers: 'gcd' denotes "greatest common divisor" ).
Input: a.b e N
Output: gcd(a,b) e N
(1) Let p =df a and q =df b (initial step) ; (2) Assume that r =dt (p) modulo q : (3) If r = 0 then gcd(a.b) 
=df q . End ; (4) Let p =df q and q =df r . Go to (2). â¡*

37
According to the above given algorithm it is sufficient to consider the case a > b.
Let:
ft
=df
a - cib
= 
(a) modulo b ,
ft = 0
=>
q = b
ft
=df
b -c2ft
= 
(b) modulo ft ,
ft = 0
=>
q = ft
ft
=df
ft - c3 r2
= (ft) modulo r2,
r3 = 0
=>
q = ft
ft
=df
ft-2 - Gnft-1
= (rn_2) modulo rn_i .
ft = 0
=>
q = ft-
For example, for a = 1026 and b = 580 we can obtain: n = 446, r2 = 134, r3 = 44, r4 = 2 , and r5 = 
0. Hence gcd(1026,580) = 2. Similarly, assuming a = 551 and b = 64 we have: n = 39, r2 = 25, r3 = 14, 
ft = 11, ft = 3, r6 = 2, r7 = Land r8 = 0. So gcd(551,64) = l.etc.
Provided there is no ambiguity, let r0 =df b . It can be observed rk-i > ft (for any k = 1,2, ... ,n). It can be 
shown for any a.b e N , there exists some step k such that ft = 0 (i.e. the number of iterations required to reach 
a fixed point is finite and the algorithm converges: this is left to the reader).Moreover, the following property is 
satisfied.
Proposition (a): 
For any step k = 1,2, ... ,n :
a = ft-ia(k) + fty(k) and b = ft-iP(k) + ft8(k), 
where oc(k), P(k), y(k), and 8(k) are some sum-of-products forms wrt the c/s.
In fact, let a = rs-ia(s) + rsy(s) and b = rs-iP(s) + rs8(s). Since rn = rn-2 - cnft-i .for n =df s + 
1 we can obtain: rs + i = rs-i - cs + i ft . Hence ft-i = rs + i + cs + i ft and so we have: a = (ft + i + cs + i 
ft)a(s) + rsy(s) and b = (ft +1 + cs + i ft)P(s) + ftS(s). Then a = rsa(s + 1) + ft + iy(s+ 1) and b = rsp(s + 
1) + rs + i8(s + 1), where: oc(s+l) =df cs + ia(s) + y(s), y(s + 1) =df a(s), P(s + 1) =df cs + iP(s) + 8(s), and 8(s 
+ 1) =df P(s). â¡
For example:
k
oc(k)
P(k)
y(k)
8(k)
1
Cl
1
1
0
2
1 + C1C2
c2
Cl
1
3
Cl + C3 + C1C2C3
1 + C2C3
1 + C1C2
c2
etc.
The following implication is satisfied.
Proposition (b): 
= <> => gcd(a.b) = q = rn-i (for any n e N)
Proof:
The proof is inductive wrt n. e.g. for n = 3 , assuming r3 = 0 we can obtain ft = c3 r2. Hence a = r2 (ci 
+ c3 + cic2c3), b = r2(l + c2c3) and q = r2 = gcd(a.b). In general the following implication have to be proven 
(the inductive step of the proof):
(ft = 0 =^> gcd(a.b) = ft-i) (ft+i = 0 =^> gcd(a,b) = ft)
gccUb) 
= ft-i 
(1.2/a}
rk_i => rk 
0 
[T 1.14: see below}
ft-i 
{ada}
[-C: 3,1.1}
So we have:
(1) 
ft = 0 
=^>
(2) 
rk + i = 0
(3) 
gcd(a,b) *
(1.1) 
gcd(a,b) *
(1.2) 
ft 0

38
(4) 
a = rk-ioc(k) + rky(k) and b = rk-iP(k) + rk8(k)
(5) 
rk+i = rk-i - ck+i rk
(6) 
rk-i = ck + i rk
(7) 
a = ck + i rkoc(k) + rky(k) and b = ck + i rk P(k) + rk8(k)
(8) 
a = rkoc(k+l) and b = rk P(k + 1). where:
a(k+ 1) =df ck + ia(k) + y(k) and P(k+ 1) =df ck + i P(k) + 8(k). 
gcd(a.b) = rk . â¡
(Prop.(a)}
[df. rn. n =df k+ 1}
{2}
{4.6}
{7}
{8}
It can be observed that instead of the existing algorithm proving techniques, in general the last approaches may 
be nontrivial.
The following law of converting implications is satisfied (called also law of a closed system of theorems or 
Hauber's law. HauberE.D. 1695 - 1765).
Thesis 1.13 (law of conversion of implications') 
(p =a q) a (r => s) a (p v r) a ~ ( q a s) =a (q =a p) a (s =a r)
Proof (Slupecki J. and Borkowski L. 1967):
(1)
(2)
(3)
(4)
(5)
(1.1)
(1.2)
(1.3)
(1.4)
(6)
(2.1)
(2.2)
(2.3)
(2.4)
(7)
p q 
r => s
p v r
~ (q a s) 
~q v ~s 
q
~ s
~ r
P
q p 
s
~q 
~p
r
s => r
(q =a p) a (s =a r). â¡
{1,2,3,4/ a}
{NK : 4} 
{ada} 
{-A:5,l.l} 
{Toll: 2.1.2} 
{-A : 3.1.3} 
{+C : 1.1=>1.4} 
{ada}
{-A: 5.2.1}
{Toll: 1.2.2}
{-A : 3.2.3} 
{+C : 2.1 =a2.4; 
{+K:6.7}
In general: C 1
cpi =4> Vi
<f>2 => '1'2 
cpi v cp2 
~ (q/j a\|/2)
Vi =^<P1 
'1'2 =' (P 2
The proof of the next five theses is left to the reader (T 1.17 and T 1.18 are some particular cases of the laws of 
extensionality of equivalence). According to T 1.14 and T 1.15. it can be also observed the implication is transitive, 
i.e. (p => q) a (q => r) => (p => r). By using T 1.12, the following equivalent form of the last implication can be 
obtained, called first law of the hypothetical syllogism ' (or conditional syllogism', known in ancient times): (p =a 
q) =a ((q =s> r) =a (p =a r)).
Thesis 1.14 (law of transposition ox contraposition of implication: CC)
P => q ~ q => ~ p. â¡
By using CC we have:
(P Â« q)
(p =a q)A(q=>p)
(~q =s> ~p)A(~p =s> ~q)
(~P =s> ~q)A(~q =s> ~p)
(~ p Â« ~ q). â¡
And so. the following law of transposition or contraposition of equivalence is obtained: CE : ---------------

39
Thesis 1.15 (law of implication)
p^>qo~pvq. â¡
In general: CR :
<p => \|/
~ cp v \|/
The following law is also satisfied: p => q o (p a q o p). The proof is left to the reader.
By using T 1.15 another direct proof of T 1.13 can be obtained. This is illustrated below.
Proof!' 1.13 (a direct proof):
(1)
p q
(2)
(3)
(4)
r => s
p v r
~ (q a s)
{1.2.3.4 / a}
(5)
(1.1)
~q v ~s 
p
{NK.
{ada}
4}
(1.2)
q
{-c
1,1.1}
(1.3)
~ s
{-A
5.1.2}
(1.4)
~ s v r
[+A
1.3}
(1.5)
P v ~q
[+A
1.1}
(1.6)
s => r
[CR: 1.4}
(1.7)
q p
[CR: 1.5}
(1.8)
(2.1)
(q =a p)A(s =a r) 
r
[+K 
{ada}
1.6, 1.7}
(2.2)
s
{-c
2,2.1}
(2.3)
~q
HA
5.2.2}
(2.4)
~q V p
[+A
2.3}
(2.5)
r v ~ s
[+A
2.1}
(2.6)
q p
[CR: 2.4}
(2.7)
s => r
[CR: 2.5}
(2.8)
(q =a p)A(s =a r) 
(q =a p)A(s =a r).
{+K.: 2.6, 2.7}
â¡ 
{1.8,2.8}
Proof T 1.13 (a direct proof usingToll):
1)
p q
(2)
r => s
[1.2.3.4 / a}
(3)
p v r
(4)
~ (q a s)
(5)
~q v ~s
[NK : 4}
(1.1)
~q
{ada}
(1.2)
~q v p
{+A : 1.1}
(1.3)
q p
{CR: 1.2}
(1.4)
~p
{Toll: 1.1.1}
(1.5)
r
{-A: 3.1.4}
(1.6)
r v ~ s
{+A : 1.5}
(1.7)
s => r
{CR: 1.6}
(1.8)
(q =a p)A(s =a r)
{+K : 1.3.1.7}
(2.1)
~ s
{ada}
(2.2)
~ s v r
{+A : 2.1}
(2.3)
s => r
{CR: 2.2}
(2.4)
~ r
{Toll: 2.2.1}
(2.5)
P
{-A: 3.2.4}
(2.6)
P v ~q
{+A : 2.5}

40
(2.7)
(2.8)
q p
(q =a p)A(s =a r)
(q => p) a (s => r). â¡
{CR: 2.6} 
{+K : 2.3,2.7} 
{1.8,2.8}
According to the notion of a ramified proof, it can be observed that sometimes we may have more than one 
possible alternative under consideration, e.g. lines (3) and (5) in the last proof, similarly in the indirect proof of the 
only-if-implication of the following thesis: p a (qv r) o p a qv p a r (a is distributive over v and vice 
versa), etc. In general, any alternative may implicate a different proof effectiveness.
Thesis 1.16 {detachmentfor equivalence)
(p o q) a p =a q. â¡
In general: DE :
Thesis 1.17 {extensionality of equivalence: according to T 1.1 and T 1.14) 
(p o q) =a (~ p o ~ q). â¡
Thesis 1.18 {extensionality of equivalence, called below: rule of extensionality)
(p o q) a (r o s) a (p o r) =a (q o s). â¡
In general: ER :
<Pi <=> Vi
<P2 <=> v2
<P1 <=><P2
V1 <=> 'l'2
According to T 1.12, the above law of substitution for equivalence can be equivalently described as follows: (p 
o q) a (r o s) =a ((p o r) => (q o s)). It can be observed the converse implication of the right side is 
also satisfied, i.e. in general we have: (p o q) a (r o s) =a ((p o r) o (q o s)) . Another form of the 
above rule of extensionality ER is the following rule of substitution for equivalence {substitution rule or rule of 
replacement for equivalence: Slupecki J. and Borkowski L. 1967).
cn cpÂ«V , 
. 
x(v)
SR: ---------------â (or equivalently: -------------
XÂ«X(q>//\|t) 
â  
x(<p//v)
Here %(q> // ip) is obtained from % by the replacement of its parts ip by the formula <p , e.g. let % 
corresponds to the law of compound constructive dileimna, i.e. (p => q) a (r => s) a (p v r) => q v s , r 
=> s to q/, and ~ s => ~ r to <p . Then (p => q) a (~ s => ~ r) a (p v r) => q v s will correspond to 
%(q> // ip). In particular, the rule DE under T 1.16 can be considered, in a sense, as a special case of SR.
By using T 1.15, T 1.17, - N , and NA the following law can be proven.
Thesis 1.19 {law of negating an implication)
~ (P => q) Â« P A ~ q. â¡
~ (<P => V)
In general: NC â  
--------------------
\ \ (p 
cp \ ~ y \
Two kinds of proofs of T 1.19a are given below, i.e. direct and indirect. The first one uses the same technique as 
in the proof of T 1.7a (the proof of T 1.19b is left to the reader).
Proof T1.19a (a direct proof):

41
Proof T 1.19a (an indirect proof):
(1)
~ (P q)
{a}
(1.1)
~p
{ada}
(1.2)
~P v q
{+A : 1.1}
(1.3)
p q
{CR: 1.2}
(2)
P
{1.1 =a control. 1.3)}
(2.1)
q
{ada}
(2.2)
q v ~p
{+A : 2.1}
(2.3)
p q
{CR: 2.2}
(3)
~q
{2.1 => contr.(1.2.3)}
p A ~ q. â¡
{+K:2.3)
(1)
~ (p q)
(2)
~ (P A ~ q
(3)
~P v q
(4)
p q 
contr. q
{a}
{aip}
{NK, -N:2}
{CR: 3}
{1.4}
Since l= (<p o \p) o (~ cp o ~ \p), according to DE (the rule of detachment for equivalence), any of the 
above two theses T 1.15 and T 1.19 can be proved by assuming that the another is satisfied. However, an 
independent proof of any of them would require an exact specification of the corresponding set of primary 
assumptions. For example, the following primary assumptions are associated with T 1.15b: <|>i =df ~ p v q and <f>2 
=df p. In fact, if <|>2 have been omitted (using ~ (p => q) as an assumption of indirect proof) then the proof of 
T 1.15b becomes depending on the proof of T 1.19a. but the last is depending on the proof of T 1.15b. etc. And 
hence, a cycle can be reached.
The rule NC was used in the indirect proof of T 1.5a. Another illustration may be the indirect proof of the law 
of conversion of implications (i.e. T 1.13, see below). The proofs of the laws transitivity for implication, TC (known 
also as 'second law of the hypothetical syllogism ') : (p =a q) a (q => r) =a (p =a r) and transitivity for 
equivalence, TE: (p o q) a (q o r) => (p o r) are left to the reader.
Proof T 1.13 (an indirect version):
(1)
p q
(2)
(3)
r => s
p v r
{1.2.3.4/a}
(4)
~ (q a s)
(5)
~ ((q =s> p) a (s =a r))
{aip}
(6)
~ (q =a p) v ~ (s =a r)
{NK : 5}
(7)
qA~pvsA~r
{NC, SR: 6}
(8)
~q v ~s
{NK : 4}
(1.1)
q
{i.i.1.2 / ada}
(1.2)
~p
(1.3)
~ s
{-A: 8.1.1}
(1.4)
~ r
{Toll: 2.1.3}
(1.5)
P
{-A: 3,1.4}
contr.
{1.2,1.5}
(2.1)
s
{2.1.2.2 / ada}
(2.2)
~ r
(2.3)
~q
{-A: 8.2.1}
(2.4)
~p
{Toll: 1.2.3}
(2.5)
r
{-A: 3.2.4}
contr. â¢
{22,2.5}

42
Proof! 1.13 (a direct proof using the law of multiplication of consequents T 1.5):
The following two sub-theses should be proved: (p =a q) a (r => s) a (p v r) a ~ ( q a s) =a (q => p) and 
(p =a q) a (r =a s) a (p v r) a ~ ( q a s) =a (s =a r). The proof of the first one is illustrated below (the second 
proof is left to the reader).
(1)
p q
(2)
r => s
(3)
p v r
{1.2.3.4.5 / a}
(4)
~ (q a s)
(5)
q
(6)
~q v ~s
[NK.: 4}
(7)
~ s
{-A: 5,6}
(8)
~ r
[Toll: 2,7}
p. â¡
{-A: 3,8}
It accordance with the used approach, the set of all primary assumptions becomes redundant. In fact, the line (1), 
i.e. the implication 'p =a q' has not been used in the above proof (similarly 'r =a s' wrt the second sub-thesis). 
A ramified direct proof from assumptions can be obtained by using line (6): left to the reader.
The proof of the next theses is also left to the reader.
Thesis 1.20 (addition of the antecedents and consequents of two implications'. AAC)
(p =a q) a (r =a s) =a (p v r =a q v s). â¡
In general: AAC:-------^^2-------
Is the law of addition of the antecedents and consequents of two implications usable in the indirect proof of 
T 1.13? Proof the following implication: (p v r => q v s) => (p => q) v (r => s).
Thesis 1.21 (multiplication of the antecedents and consequents of two implications'. MAC)
(p =a q) a (r =a s) =a (p a r =a q a s). â¡
'T'l ^>'1'1
I n general: MAC:----------------------------
An illustration of the law of multiplication of the antecedents and consequents of two implications is given in the 
next example.
Example 1. 5
Let Mi and M2 be two isomorphic machines, i.e. anyone can be simulated by the other. We have: Mi iso M2 
Odf Mi sim M2 a M2sim Mi. We shall say that Mi is a submachine wrt M2, i.e. Mi c M2 <=>df FM c , where 
Fm is the set of functions realised by Mt (i = 1,2). Also, we shall say that Mi and M2 are equivalent, i.e. Mi ~ M2 
<=>df Fm = FMz . The following property can be shown: Mi sim M2 => M2 Mi (for any Mi and M2 . And so, in 
accordance with the law of multiplication of the antecedents and consequents of two implications (T 1.21) we can 
obtain: Mi iso M2 =a Mi ~ M2 (Pawlak Z. 1971). â¡
Thesis 1.22 (law of contradiction, law ofDuns Scotus: John Duns Scotus 1266 - 1308)

43
p =a (~p =a q)
*.
 â¡
In general: DS : 
~ (p
By using the law of importation andC'(see T 1.12) we can obtain: p/~p=> q .Since l=pA~r=>qo 
p r v q. for r =df p we have: pA~p=>qop=>pvq (the proof is left to the reader: show that (a2 - 
2ab = c2 - 2bc) =a (a = c) v (a + c = 2b) and (a2 - 2ab = c2 - 2bc) a (a c) =a (a + c = 2b) are equivalent, for 
any a.b.c e K). According to T 1.22, a contradictory proposition has any proposition as its consequence (i.e. 
everything follows from a contradiction). An illustration of the rule DS. is given in the next example.
Example 1. 6
Let consider the following propositional formula:
p a (q a (r v s a L p a ~ q a t)))
Proof:
(1)
(2)
(3)
(4)
P 
q 
r v s 
~p 
~ q a t. â¡
{1.2.3.4 / a}
{DS.: 1,4}
Obviously, an indirect proof of this formula can be obtained immediately. In fact, assuming ~ (~q a t) we 
have a contradiction wrt (1) and (4).
Consider the following two truth functors 7' and '4/ called symbol of alternative negation and symbol ofjoint 
negation, respectively. The formula p/q Odf ~ (p a q) (is read 'not both p and q': known as the Sheffer's dash'. 
Henry Maurice Sheffer 1882 - 1964) and the formula pJ-q odf ~ (p v q) (is read 'neither p nor q': known as 
the Peirce's arrow. Charles Sanders Peirce 1839 - 1914). It can be observed the last two functors differ from the 
other truth functors of two arguments in that either suffices to define all the remaining truth functors (this is left to 
the reader). We shall say these two functors are functionally complete. Functionally complete logical connectives are 
also negation and implication, since p a q odf ~ (p =a ~ q) and p v q Odf ~ p => q (the Lukasiewicz's 
system', a more formal treatment is omitted here).
Definition 1.2
Let cp and q/ be two propositional formulae. Then cp and are said to be equivalent iff 1= cp o
Any propositional formula in the propositional calculus can be represented in an unique way by some disjunctive 
normal form or also equivalently by some conjunctive normal form (e.g. see Mostowski A.W and Pawlak Z. 1970). 
This is illustrated in the next example.
Example 1. 7
Consider the following functor ' <Â£>' called exclusive disjunction. The formula p <Â£> q odf~ (p o q) (is read 
'either p or q': 'exclusive' because the truth of one element excludes the truth of the other element). So, the 
following disjunctive and conjunctive normal forms can be obtained (a simple method for obtaining such forms is 
given in the next Subsection 1.4): pA~q v ~pAq and (p v q) a (~ p v ~ q), respectively. According to 
Definition 1.2, the above two forms are equivalent, i.e. we have the following thesis: 
1= p a ~ q v ~ p a q o (p v q) a (~ p v ~ q)
' By using the law of importation, i.e. T 1.12b, we can obtain: p a ~ p => q. Among the material implication paradoxes, the following 
(theses) are also known: p => (q => p), (p => q) v (q => p) and (p => q) v (q => r): the corresponding proofs are left to the reader.

44
Proof (a):
(1)
P a ~q
V ~p a q
{a}
(1.1)
(1.2)
P 
~q
[1.1.1.2 / ada}
(1.3)
P v q
[+A: 1.1}
(1.4)
~p v ~ q
{+A : 1.2}
(1.5)
(P \' q) A (~ P V - q)
[+K : 1.3.1.4}
(2.1)
(2.2)
~p 
q
{2.1,2.2 / ada}
(2.3)
P V q
{+A : 2.2}
(2.4)
~p V ~ q
{+A : 2.1}
(2.5)
(p \' q) A (~ P V -q)
{+K : 2.3,2.4}
(p \' q) A (~ P V ~ q). â¡
{1.5,25}
The proof of the converse implication (b) is left to the reader. The reader is also invited to verily the following 
implication: p c| => p v q.
Since v is distributive over a (and the both logical operations are also commutative and associative), a simpler 
proof can be obtained. In fact, we have:
P A~q v ~p a q
o (p a ~ q v ~ p) a (p a ~ q v q)
o ((- p v p) a (~ p v ~ q)) a ((q v p) a (q v ~ q)) 
o (p v q) a (~ p v ~ q). â¡
In general, it can be shown any disjunctive normal form can be equivalently transformed to a conjunctive normal 
form and vice versa. It can be observed that a conjunctive normal form is a true formula if each disjunction includes 
at least one variable which in one case is negated and in another is not. Moreover, the complexity of the last two 
forms (obtained for a given formula, i.e. the number of propositional variables and the logical operations) may be 
different, e.g. the conjunctive normal form associated with p v q coincides with the same formula, but the 
following disjunctive normal form can be obtained: ~ p AqvpA~q vp a q. In fact, we have: 1= p v q o 
~pAqvpA~q vpAq. The following formula is also a thesis: 1= p a ~ p a qv r o r (the last two 
proofs are left to the reader).
1.4. Zero-one verification
The zero-one verification of a propositional formula <p e P is a functional method (called also truth table 
method) of determining in a finite number of steps whether cp is true (yes or no). And so. this method do not present 
the corresponding proof structure for a given thesis *p ". Moreover, in some computer science applications the method 
realisation may be difficult, but at the same time the assumptional system style is more natural and usable (see 
Example 1.3 in the previous subsection).
For simplicity, below any propositional variable is said to be an atom. The truth and the falsehood of a given 
formula cp will be symbolised by '1' and '0', respectively. Some introductory notions are first introduced (Chang 
and Lee 1973). Below we shall assume the logical value of a propositional formula cp . denoted by v(dp) e {0,1} 
(see Definition 1.1).
Definition 1.3
'Let <p = <p(pi,p2, ... ,pn) e P and v(p) =df (v(pi),v(p2), ... ,v(pn)). Hence, the 0-1 verification of <p(a) / i.e. <p(p) for v(p) a is not a 
logical consequence of the 0-1 verification of <p(b) / v(p) = b (for any different a, b 6 {0,1}" ).And so, we have not the structure of a typical 
assumptional proof (having a connected set of lines). In fact, the 0-1 verification method and the assumptional system style are very similar to the 
notions of 'black box' and of 'white box', respectively (well-known in automata theory).

45
Let cp = cp(pi,p2, ... ,pn) e P be a given propositional formula where p, are the corresponding atoms of cp 
(i = 1,2,... ,n). Then any (v(pi),v(p2),... ,v(pn)) e {0,l}n is said to be an interpretation I of cp .
It can be observed the number of possible interpretations of a given formula cp having n different atoms is: 
I {0,1 }'j = 2n. Let Vi(cp) be v(cp) fori.
Definition 1.4
A propositional formula cp is true in I iff vz(cp) = 1. Otherwise we shall say that cp is false ini.
According to Definitions 1.2 and 1.4 it follows two propositional formulae cp and are equivalent iff vz(cp) 
= 1 o vi(vp) = 1 (for any I). Moreover, the logical value of a propositional formula cp e P can be considered 
as a map v : P {0,1} (for a given I).
Definition 1.5
A formula cp e P is:
(i) 
satisfied (called also thesis, true formula, valid formula or tautology) iff cp is true in any I ,
(ii) 
satisfiable iff there exists some I such that cp is true in I,
(iii) 
contradictory iff cp is false in any I.
Let cp e P be a thesis. Then ~ cp is contradictory. Hence, according to CC (contraposition of implication), if cp 
is contradictory, then ~ cp is a thesis. For example, let cp be the law p v ~ p (excluded middle), then ~ (p v ~ p), 
i.e. ~ p a p is contradictory. Similarly, since 1= (p a (q o r) => s) => (p a q a r => s) a (p => q v r v 
s) then ~ ((p a (q o r) =a s) =a (p a q a r =a s) a (p =a q v r v s)) is contradictory, etc. In the case of 
the classical propositional calculus this follows immediately by the considered below zero-one verification method. 
A more formal proof is given in Subsection 2.2 (assuming basic fuzzy propositional logic systems: it can be observed 
that {0,1} Â£ [0,1]).
The zero-one verification requires the use of some tables, called truth tables, which show how the truth-value of 
the considered compound proposition is determined by the truth-values of the component propositions. The truthÂ­
values related to the basic two argument logical operations are shown in the table given below (according to 
Definition 1.1: provided there is no ambiguity, for simplicity instead of v(cp) the same formula cp is used, e.g. p 
instead of v(p), q instead of v(q), p a q instead of v(p a q), etc.). Obviously, v(~ p) =df if v(p) = 1 then 0
else 1 fi. The implication values follow immediately from T 1.15 (or also: T 1.19). 
It can be observed that the
conjunction and disjunction connectives correspond to the logical operations minimum and maximum, respectively. 
Moreover, the logical value of the implication p => q is equal to 1, i.e. p =a q = 1 
iff p <. q. And hence, the
equivalence p o q =1 iff p S q and q < p, i.e. iff p = q (see Subsection 2.1).
p
q
p A q
P v q
p q
p o q
0
0
0
0
i
1
0
i
0
1
i
0
1
0
0
1
0
0
1
1
1
1
1
1
Example 1.8
Consider the formula: (p a q ) / p -> q (corresponding to the rule of detachment - C ). So we can obtain the 
following table.
* From the Greek word tauroLryia: in formal logic, a formula that is true in every possible interpretation, 
t Filon of Megara, 4lh - 3th century b.c.

46
p
q
p q
(p =a q)Ap
(p =A q)Ap =A q
0
0
i
0
1
0
i
i
0
1
1
0
0
0
1
1
1
i
1
1
The same result can be obtained by using the Hilbert's abbreviated verification (Hilbert D. 1862 - 1943). The 
last approach is most often used for formulae having the form of an implication. We can assume the antecedent 
(consequent) of the whole implication is true (false) and then examine whether its consequent (antecedent) can be 
false (true)
*.
 As an example, consider the above formula (p =a q)Ap =a q. Assume that v(q) = 0 (in short: q = 
0). Since the antecedent of the whole implication is a conjunction, the logical value of p have to be equal to 1. 
Then the value of the first element of this conjunction, i.e. the implication p => q , is equal to 0 ( ^ 1).So the 
verification is completed (see below: the index 'c' denotes that the corresponding logical value is critical, i.e. there 
is no any other possibility).
A more complicated example may be the verification of the Hauber's law (see T 1.13). So initially we can obtain:
where x e {0,1}.
0c
lc
X
X
oc
X
lc
X
lc
oc
X
X
(P =}q)/\(r => s) /\(p\/ r) av~(q/s_s) 
==> (q ^p)/'(s =^r)
1 ?
= 0 !
Now it is necessary to verify if the antecedent of the main implication is equal to 1 (similarly for the rest two 
cases of the consequent of this implication: this is left to the reader). Since q is lc the value of ~ ( q a s) will be 
1' iff s is 0c. In a similar manner, the value of pvr will be '1' iff r is lc. Then the value of r => s is 
uniquely specified from ' lc =a 0c '. Hence the obtained value of the antecedent of the main implication is 0 (a 
1) and the verification process is completed. It can be observed the nmnber of possible interpretations of this 
formula is equal to 24 = 16 (we have four different atoms: p.q.r, and s). The reader is invited to verify the formula 
considered in Example 1.6. â¡
The reader is invited to verify the following implications:
1. 
p a q => (p => q)
2. ((p =s> 
q) =a r) 
=a (p =a (q =a r))
3. 
((p a q) 
r) a (p a q a r)
4. (p => q V r) A (s A t => u) => ((r => s) A p A t => q V u): see Example 1.14 of Sub section 1.8.
5. p A ~ p A q V r o r
1 One of these two approaches may not be applicable for some formulae, e.g. for the zero-one verification of the following formula: 
p v q (p q) v p. The logical value of the consequent (p q) v p is-0 (for any p, q e {0, 1} ). And hence, the considered 
formula is a thesis.

47
The zero-one representation of a given formula cp may be also useful for obtaining the corresponding (disjunctive 
or conjunctive) normal form of cp . This is illustrated in the next example.
Example 1.9
Consider the truth table for exclusive disjunction:
The disjunctive normal form for p c| can be easily obtained as a disjunction of all elementary conjunctions
*
 
corresponding to all l's of p 
q . So we have two such conjunctions: ~p a q and p A~q (for
* In general, the notion of an elementary conjunction can be introduced as the following formula Pic1a p2c2A ... a pâcn . where any c e 
{0,1} and p" =df if Cj = 1 then pi else ~ p; ft (i = 1,2, ... ,n). The notion of an elementary disjunction can be introduced in a similar way 
by considering v and cf =dr 1 â c, (see:Mostowski and Pawlak 1970). Ihe Boolean constants c, can be interpreted as some latin 
exponents.We shall say cuf(i|>) is a conjunctive normal form of a formula <|> iff it is equivalent to i|> and is either an elementary disjunction or a 
conjunction of (two or more) elementary disjunctions. In general, cnf(<|>) can be obtained from: ~ dnf(~<|>) (similarly for dnf(i|>) wrtthe cnf(i|>)).
t Use two times the absorptive, distributive axioms and the rule SR (starting with q <=>...).
(v(p).v(q)) = (0,1) and (v(p).v(q)) = (1,0), respectively: see Example 1.7). In a similar way, the conjunctive 
normal form can be obtained as a conjunction of all elementary disjunctions corresponding to all 0's of p q 
.We have two such disjunctions: p v q and ~p v ~q (for (v(p),v(q)) = (0,0) and (v(p),v(q)) = (1,1), 
respectively). The conjunctive normal form can be considered as a negation of the corresponding disjunctive normal 
form obtained for ~ (p q), i.e. for p o q by using De Morgan's laws (the proof is left to the reader). â¡
According to the last example, it can be shown any conjunctive normal form is a true formula iff each elementary 
disjunction includes at least one variable which is at the same time with and without negation.
Example 1.10
In the case of the law of Duns Scotus (see T 1.22),by using the law of implication T 1.15, the following 
conjunctive normal form can obtained: p=>(~p=>q)o~pvpvq. So we have only one elementary 
disjunction including at the same time the propositional variable p with and without negation. Similarly, in the case 
of the rule of detachment we can obtain:
p A (p A q) A q
~ (p a (p =a q)) v q
~p v p A~q v q
(~ p v p) a (~ p v ~ q) v q
(~ p v p v q) a (~ p v ~ q v q).
We have two elementary disjunctions including at the same time: ~ p and p (in the first) and ~ q and q (in 
the second). â¡
The reader is invited to verify and to proof the following formula: (pAqopAr)A(pvqopvr)=> 
(q Â« r)t
Let cp =df cp(pi,p2,... ,pn) be an arbitrary propositional formula (n e N: the set of natural numbers). The following 
thesis is satisfied: i= cp => F o ~ cp. â¡ And hence: ~ cp =df cp => F (left to the reader).
In general, the Hilbert's abbreviated verification can be considered as an analysis method, more effective than 
truth tables and usable in the case of verification if a priori given formula cp is a thesis or not. However in the case 

48
of synthesis of a formula cp having a priori required properties the only usable method are truth tables (e.g. see the 
proof of T 2.33 of Subsection 2.3). And hence, the last method is more universal.
1.5. Logical consequence
In the exact sciences and engineering, as in the usual life, often it is necessary to decide if a given assertion (i.e. 
thesis, sentence, declaration, etc.) follows from some others. The last involves the notion of 'logical consequence' 
(or 'entailment'
*
, i.e. a relation between set of sentences and a sentence). For example, the system fault diagnosis (or 
e.g. patient's disease diagnosis) should be a logical consequence of the obtained test outcomes (or consistency of the 
obtained measures, i.e. patient results). The single most important factor in general aviation flight safety is the 
decision of a pilot to begin or to continue with a flight in unsuitable weather, e.g. the landing of the plane at the 
airport should be a logical consequence wrt the corresponding set of conditions. The safety of nuclear central should 
be a logical consequence wrt the corresponding set of conditions related to the selected place of building, proposed 
type of project, the general concept of this project and quality of its realisation, and of course the human factor. The 
declaration of a candidate should be a logical consequence of the corresponding set of propositions used during the 
electioneering campaign. The judge's decision should be a logical consequence wrt the corresponding set of facts of 
the specific case. The specification validity of a reactive program should be a logical consequence wrt the a priori 
required properties associated with this program, etc.
* The notion of entailment is used in (at least) three meanings: implication connective (having some properties), the name of the logical 
system characterising this connective as well as the area in which this system is defined (see Subsection 2.4: Relevance logic).
t The generalised form of an expression can be transformed in a form similar to the right side of Theorem 1.23: using (n - 2) times T 1.12 
(since logical equivalence is transitive).
The intuitive concept of consequence, the notion that one sentence follows logically from another, has driven the 
study of logic for more than two thousand years. But logic has moved forward dramatically in the past century, 
largely as a result of bringing mathematics to bear on the field (Etchemendy 1990). A generalised model-theoretic 
analysis of logical consequence was introduced by Tarski (Tarski A. 1902 - 1983). Here the following three simple 
axioms were assumed: Cn(0) = 0, A c B =a Cn(A) c Cn(B), and Cn(Cn(A)) = Cn(A), where 'Cn' denotes 
'consequence', A and B are some finite sets of axioms. Some works concerning an examination of this model have 
been recently undertaken, e.g. the above cited work (a more formal treatment is omitted). Below only some 
introductory notions concerning the concept of a logical consequence are given (Chang and Lee 1973).
Definition 1.6
Let cpi.cpi, ... e P be formulae. We shall say y is a logical consequence wrt <pi,q>2, ... , cpn (or follows 
logically from cpi,cp2,... ,<pn) iff v(q>i a cp2 a ... a cpn) = 1 => v(q/) = 1 (for any I). We shall say <pi,q>2,... ,cpn 
are axioms for i|/ .
Theorem 1.23
The formula q/ is a logical consequence wrt <pi,q>2,..., <Pn <=> 1= cpi a cp2 a ... a cpn =a .
Proof:
(a) Assume that ip is a logical consequence wrt q>i,q>2,... , <Pn . Let I is an interpretation such that v(q>i a cp2 a ... 
Acpn) = 1. According to Definition 1.6 and the rule of detachment - C, we have v(q/) = 1. Hence v(q>i a cp2 a ... 
a cpn =a v|/) = 1 in I. On the other hand, if v(q>i a cp2 a ... a cpn) = 0 in I (i.e. there exists some cpk having 
v(cpk) = 0 in I) then also v(q>i a cp2 a ... a cpn => qi) = 1 in I. Hence v(q>i a cp2 a ... a cpn => qi) = 1 (for 
any I). So according to Definition 1.5(i) we have: 1= cpi a cp2 a ... a cpn =a v|/ .

49
(b) Let now 1= <pi a <p2 a ... a <pM =a q/. In accordance with the rule of detachment - C, for any interpretation I 
we have: v(q>i a cp2 a ... a cpn) = 1 => v(i|/) = L According to Definition 1.6, q/ is a logical consequence wrt 
>P1,IP2, ... , ipn . â¡
It can be observed is not a logical consequence wrt <pi.<p2. ... , <pn <=> q>i a cp2 a ... a <pn a ~ is a 
contradictory formula (by using the rule NC: see T 1.19). Below we shall denote e Cn({cpi.cp2.... , <pn}) <=>df qr 
is a logical consequence wrt ..., cpn .
Consider the generalised form of an expression, i.e. <|>i =a (<|>2 =a (c|>3 =>...=> (4>n_1=> <(>â) ...). By T 1.12 it 
follows: <|>i =a (<|>2 =a (<|>3 =>...=> (4>n_1=> <|>n)...) o 4>i a <|)2 a <|>3 a ... a <|)â-i =a <[>â (the proof is left to 
the reader). Hence, according to T 1.23 we can obtain: <|>n e Cn({<|>i,(|>2, ..., <t>n-i}) <=> 1= <|>i =a (<|>2 =a (<|>3 => ... 
=?> (<|)n -1 =?> 4>n) â¢â¢â¢)â¢
Example 1.11
(a) Let cpi Odf p => q and Odf q . According to T 1.23, we can obtain: q is a logical consequence wrt 
p a q o l= (p => q) => q ? The last requirement is not satisfied (for v(p) = v(q) = 0 we have v(p =a q) = 
1 ). So q Â£ Cn({p =a q}).
(b) Assume now that cpi <=>df p => q , <P2 <=>df p . and Odf q . Since 1= (p a q) a p a q then q is a 
logical consequence wrt p => q and p (the mle of detachment). Hence q e Cn({p =a q , p}).
(c) In a similar way for cpi Odf p =a q , <p2 <=>df p v r, and Odf q v r we have: q v r is a logical 
consequence wrt p => q and p v r (is equivalent to the Taw of a new element': using the law of exportation, see 
T 1.12). Hence q v r e Cn({p =a q . pv r}).
(d) Let consider the case (c) having as one of the following three formulae: q v ~r,~q v r.and ~q v ~r 
. It can be shown that : q v~r,~qvr,~qv~r Â£ Cn({p =a q . pv r}). According to the mles +NK and 
ER, also ~ (q a r) Â£ Cn({p =a q . p v r}), e.g.
x lc x lc 
lc lc 
(p=>q)v(pvr) =i> ~qv~r 
= 1 ? 
= 0 !
It can be observed for any x e {0,1} the antecedent of the last implication is always true. According to 
Definition 1.5, the last formula is satisfiable, but not satisfied. In fact, it is not satisfied for 1= (v(p),v(q),v(r)) = 
(x,l,l). â¡
1.6. The consistency and completeness
Consider an arbitrary formula <p e P of the propositional calculus such that Vi(cp) = 1 (for any 
interpretation I). In accordance with Definition 1.5, cp is satisfied and hence a thesis of that calculus. The problem 
arises whether every thesis provable by the rules of the assumptional system of the propositional calculus is a true 
formula. In particular, a resolution of the last problem is related to the notion of order of a thesis, given in the next 
inductive definition (Slupecki J. and Borkowski L. 1967).
Definition 1.7
Let <[> e P is an arbitrary formula. Then:
(i) <|> is a thesis of order 1 iff there exists a (direct or indirect) proof from assumptions of <|> by using only the 
primitive rules, i.e: - C, Â± K, Â± A, and Â± E ,

50
(ii) <[> is a thesis of order n iff there exists a proof from assumptions in which only theses of order < n - 1 are 
used and <|> is not a thesis of order < n.
(iii) <|> is a thesis iff there exists some n e N such that <|> is a thesis of order n.
According to the last definition, it can be shown any thesis of the propositional calculus implicate proof of its 
corresponding metathesis (this is omitted). The proof of the next theorem is inductive wrt the order of the considered 
thesis.
Theorem 1.2 4
Every thesis of the assumptional system of the propositional calculus is a true formula.
Proof:
(1) 
Let <|>i =a (<|>2 =a (<|>3 =>...=> (c|>s-i => <)>s)...) be a thesis of order 1 which is not true (aip). For simplicity, 
let also <|> Odf (c|>2 => (<t>3 =>...=> (<|>s-i => <t>s) â¢â¢â¢)â¢ So there exists an interpretation l0 such that the logical value 
Vio (4>) = 0- Hence we have: Vio (4>k) = 1 (for k = 1, ... ,s - 1) and Vio (4>s) = 0. Then Vio (~ 4>s) = L 
According to the assumption that 1= <|> of order 1, it follows there exists an indirect proof of <|> such that the rules 
- C, Â±K, Â±A, and Â± E, applied to the assumptions <|>k (k = 1, ... , s - 1) and ~ 4>Â» generate two contradictory 
lines, e.g. %i and ~ %i . Any primitive rule applied to formulae having value 1 for Io will produce corresponding 
formulae having also 1 for Io . Since Vio (<t>k) = 1 (for k = 1, ... ,s - 1) and Vio (~ 4>s) = 1 then all the 
formulae obtained from the former will have the logical value 1 for Io .But this is a contradiction wrt the above 
formulae %i and ~ %i.
(2) 
Let now any thesis of order in- 1 be a true formula (an inductive assumption) and 1= <|> of order n which 
is not true, where n > 2 (aip). As in the previous case (1), there exists an indirect proof of <|> . Starting with the 
assumptions <|>i, <|>2, ... ,<|>s-i ,~ 4>s and theses of orders lower than n , two contradictory lines, e.g. %n and ~ %n , 
are generated.. Since vio (4>k) = 1 (for k = 1, ... ,s - 1), vio (~ 4>s) = 1 . and any thesis of order lower than n 
have the value 1, then by the same reasons as in case (1) we shall obtain a contradiction wrt %n and ~ %n . â¡
Definition 1.8
R system is said to be consistent iff its theses do not include two contradictory formulae.
According to T 1.24, every thesis of the assumptional system is true. So, it is no possible to meet two 
contradictory formulae being at the same time theses in this system. Hence, the following theorem is satisfied.
Theorem 1.2 5
The assumptional system of the propositional calculus is consistent. â¡
Theorem 1.2 6
Every true formula of the propositional calculus is a thesis of the assumptional system.
Proof:
Consider an arbitrary true formula <|> . Let cnf(<|>) be the corresponding equivalent conjunctive normal form, 
obtained in an unique way for <[> (it can be shown for any cp and q/: cp a q/ o cnf(cp) a cnf(\p). and <p v \p 
o cnf(cp) v cnf(\p): the proof is left to the reader). According to Definition 1.2, we have: l= cf> <=> cnf(<|>). From 
T 1.24 it follows this equivalence is a true formula. Since <f> is a true formula then a true formula is also cnf(<|>). 
Moreover 1= cnf(<|>). In accordance with the rule of detachment for equivalence DE (see T 1.16) wrt the theses <|> o 
cnf(<|>) and cnf(<|>), it follows that !=<!>.â¡
Definition 1.9

51
A system is said to be semantically complete iff every true formula implemented in the language of that system 
is a thesis.
According to Definition 1.9, the above theorem T 1.24 cam be reformulated as follows.
Theorem 1.2 7
The assumptional system of the propositional calculus is semantically complete. â¡
Hence the process of verification of an arbitrary formula cp e P of the propositional calculus can be reduced to 
the process of checking whether cnf(cp) is a true formula.
Definition 1.10
A system is said to be syntactically complete iff every propositional formula <p e P implemented in the 
language of that system either is a thesis or (when joined to the theses of that system) results in a contradiction.
Theorem 1.2 8
The assumptional system of the propositional calculus is syntactically complete.
Proof:
Let cp e P and I# cp . By T 1.24 and T 1.14 (the law of transposition of implication) it follows that cp is not 
a true formula. Hence there exists an interpretation Io such that vft (<f>) = 0, e.g. for v(p,) = 1 and v(q) = 0 (i 
= 1.2.... ,ni and j = 1.2. ... .ny according to Definition 1.3 the propositional variables pi and q correspond to 
the set of atoms of cp and n, + nj = n). Starting with cp .by using the substitution rule SR .it can be obtained a 
new formula cp
*  such that each p, is substituted by a true formula and each q - by its negation, e.g. by'p => p' 
and (p =^> p)'. respectively. Since vz (cp
*)
 = 0 then vz (~ cp
*)  = 1 (for any I). According to T 1.24, 
1= (~ cp
*).
 Hence the system of the propositional calculus extended by cp is a contradictory wrt cp
*  and ~ cp
*.
 â¡
Definition 1.11
A system of rules is said to be independent iff none of these rules is secondary wrt the remaining rules.
According to the last definition, a system is independent if there is no a rule being a logical consequence of the 
remaining rules of this system.
Theorem 1.2 9
The system of primitive rules of the propositional calculus is an independent system. â¡
Let cp = cp(pi,p2. ... ,pn) e P be a given propositional formula under Definition 1.1 and v(p) =df (v(pi).v(p2). 
... ,v(pn)) e [0,1 }n. Since [0,1 }n is finite then, in accordance with Definition 1.5, it is always possible to decide if cp 
is satisfied or not. In fact, the following theorem can be shown (e.g. see Grzegorczyk A. 1969).
Theorem 1.3 0 (decidability of the classical propositional calculus')
There exists an algorithm of determining in a finite number of steps whether a given cp e P is a true formula 
(i.e. thesis). â¡
Moreover, it can be shown the subset of all theses (say T) of the classical propositional calculus is a theory, i.e. T 
= Cn(T) (see the last cited work).
There exists some closed relationship between the classical propositional calculus and the algebra of sets (i.e. the 
classical propositional logic has its corresponding set theory). So we have a possibility of obtaining directly from theses of 
the propositional calculus corresponding theorems of the algebra of sets consisting of two expressions, incorporating 
set operations, and connected by the symbol of equality or inclusion (Slupecki J. and Borkowski L. 1967). For 

52
example, from p => q o ~ q => ~ p (law of transposition of implication, see T 1.14) we can obtain: P c Q 
o Q' c p' (''' denotes complement of a set). From (p => q) => (p v q o q) v (p a q o p) we can obtain: 
(P Â£ Q) => (p u Q = Q) v (P n Q = P). Similarly, from (p =a q) a (r =a s) a (p v r) a ~ (q a s) =a (q 
=> p) a (s =a r) (the Hauber's law, see T 1.13) we have: (P Â£ Q) a (R Â£ S) a (P u R = ?/) a (Q n S = 0) 
=> (Q Â£ P)a(S Â£ R), where ?/ is the universe, etc. (a more formal treatment is omitted, see Subsection 5.2).
1.7. The axiomatic approach
In general a scientific theory can be considered as an axiomatic system that obtains an empirical interpretation 
Ihrongh appropriate statements called rules of correspondence, which establish a correlation between real objects (or 
real processes) and the abstract concepts of the theory. The language of a theory includes two kinds of terms: 
observational and theoretical. The statements of a theory are divided in two groups: analytic and synthetic. 
Observational terms denote objects or properties that can be directly observed or measured, while theoretical terms 
denote objects or properties we cannot observe or measure but we can only infer from direct observations. Analytic 
statements are a priori and their truth is based on the rules of the language; on the contrary, synthetic statements 
depend on experience, and their truth can be acknowledged only by means of the experience. This conception about 
the structure of scientific theories is perhaps the most durable philosophical principle of the logical positivism 
(Reichenbach Hâ Carnap R., etc.: see the Internet Encyclopaedia of Philosophy 2001).
The axiomatic approach as a rule involves a number of propositions that are not proved by means of the other 
propositions. Such propositions are said to be the axioms (or postulates) of the system. The next stage in the 
construction of the propositional calculus is related to the specification of the corresponding primitive mles of 
proving (inference) and hence the possibility of obtaining new theses. Usually the following two primitive mles of 
proving are introduced: the rule of definitional replacement of one formula by another, denoted below by RR and 
the rule of detachment (for implication: - C). The proof style used is always the direct style. For example, starting 
with the rale (p =a q) A~q =a ~p (modus tollendo tollens, see T 1.6), by replacing each p with 'p =a 
q' a new thesis can be obtained: ((p => q) => q) a ~ q => ~ (p =a q) (the proof is left to the reader).
The rale of definitional replacement is introduced as follows (Slupecki J. and Borkowski L. 1967):
<p = df y
X(Y H(P1
where the Lukasiewicz's symbol of definitional equality '=dt' is not a logical connective, but it has a metalogical 
sense). As in SR, %(cp // q/) is obtained from % by the replacement of its parts <p by the formula q/. In fact, RR 
can be considered as a derived rale which is a generalisation of SR (since it is not necessarily usable only for 
equivalent formulae).
There exist very many different axiomatic systems*, e.g. including only one axiom or also having a relatively 
large set of axioms. A more enlarged axiomatic system seems to be preferable. In fact, we have a possibility of 
setting off some logical rales and also an easier way of deriving logical theses. However, independently of the 
transparent way of the obtained proof notations and in comparison with the assumptional style, the proofs in 
axiomatic systems are considerably difficult, complicated and hence, not so natural. Any axiomatic system is , in a 
sense, "dogmatic" (i.e. conservative, closed). In fact, there is not possibility of extending the actual set of axioms 
with new formulae derived by the same system. Moreover, any axiom can be considered as thesis and proved by 
using the assumptional style.
As an illustration, the following axiomatic system is presented below (Grzgorczyk A. 1969) .
Positive axioms for implication
' The first such axiomatic system was introduced by Frege (Friedrich Ludwig Gottlob Frege 1848 - 1925).
' Andrzej Grzegorczyk (1922 - 2014).

53
(Al) p (q p)
(A2) (p (q r)) =7> ((p =7> q) =7> (p =7> r))
{/ow of simplification}
{Frege's law (or syllogism): 1879}
Axioms describing the logical equivalence by means of implication
(A3) 
(p o q) =a (p =a q)
(A4) 
(p o q) =a (q =a p)
(A5) (p q) ((q =t> p) =a (p o q))
Axioms describing the logical conjunction and disjunction
(A6) 
p v q =t> q v p
(A7) 
p a q => q a p
(A8) 
p a p v 
q
(A9) p/q 
a p
(A10) p a (q a p / q)
(All) (p =a r) A(q =a r) =a (p v q =a r)
Rules for negation
(A12) (p a q A~q) a ~p
(A13) p A~p Aq
The law of the excluded middle
(A14) p v ~p
The set of axioms Al - All corresponds to the so called positive logic (theses including negation are omitted). 
The set of axioms Al - A13 is related to the so called intuitionistic logic (Brouwer L.E.J. 1881 - 1966, Heyting A. 
1898 - 1980): see Subsection 2.4. Here the law of the excluded middle is omitted.
An example using of this axiomatic system is given below (provided there is no ambiguity, the use of Ai is denoted by 
a;, for any i).
Example 1.12
The proof of the thesis p => p can be realised as follows.
(1)
(p (q p)) 
((p q) (p p))
{RR: p // r wrt ai}
(2)
(p q) (p p)
{-C : l,ai}
(3)
(p (q p)) =a (p p)
{RR: (q =^> p) // q wrt 2}
p p-â¡
{-c : 3,ai}
A more simple is the following Lukasiewicz's implication-negation axiomatic system (Slupecki J. and Borkowski 
L. 1967).
(Al) (the first law of the hypothetical syllogism):
(A2) (is one of the laws of reduction ad absurdum)
(A3) (law of Duns Scotus)
(P q) ((q r) =A (p=>r))
(~p =t> p) =t> p 
p =a (~p =a q)
In accordance with the last system, the following proof of the above example thesis p => p can be obtained.
(1) (p =a (~p =a q)) =a (((~p =t> q) =a r) =a (p =a r))
(2) 
((~p =t> q) r) =a (p^>r)
{RR : (~ p =a q) // q wrt ai} 
{-C: l,a3}

54
(3) 
((~p =s> p) =s> p) =s> (p^>p)
P P- â¡
{RR : p // q. p // r, 2} 
{-C: 3,a2}
It is easily to express the remaining connectives in the Lukasiewicz's system (by means of implication and 
negation: left to the reader). Obviously, the proof of the above law of identity for implication, i.e. p => p becomes 
very simple if an ordinary indirect proof is used. This is shown below.
(1) 
P 
{a}
(2) 
~ p 
{aip}
contr. â¡ 
{1.2}
To be proved the equivalence between two deduction systems, it is necessary to show that any axiom in the first 
system is an axiom or a thesis in the second one and also any primitive mle in the first system is a primitive or 
derived rule in the second one. In this way it is possible to show the equivalence between the assumptional system 
and any such axiomatic system (this is omitted). But any such proof is related to the well-known deduction theorem 
given below
*.
 And so. the next considerations are a summary presentation under Slupecki J. and Borkowski L. 
(1967).
* As a precursor of this theorem it is reckoned Bernard Bolzano (1837: 1781 - 1848) and the contemporary formulation of deduction theorem 
was given independently by Alfred Tarski (1923: 1901 - 1983) and Jacques Herbrand (1930: 1908 - 1931). The term itself was first used by 
David Hilbert (1862 - 1943) and Paul Isaac Bemays (1888 - 1977): The little encyclopaedia of logic (1988).
It can be observed that any axiomatic system is equivalent to a such one. where the only primitive proof rule is 
the rule of detaclunent. i.e. - C and also having as axioms all possible replacements related to the axioms of the 
original system. As an example, the above considered Lukasiewicz's implication-negation axiomatic system is 
equivalent to the following one.
(Al) (cp^> i|/) =^> ((q/ => x) =^> (cp =^> x))
(A2) (~ cp =^> cp) =^> cp
(A3) cp => ( â cp => \p)
And so. in accordance with the above considered axiomatic systems, the letters p. q and r serve as 
metavariables for formulae.
Let - C be the only primitive proof rule in the considered propositional calculus. The notion of a proof is 
presented as follows.
Definition 1.12
Let 4>i => (fc => (4>3 =>...=> (<|>n-i => 4>n)...) be a generalised form of an expression. The finite sequence of 
formulae q/i. q/2. ... . 
is said to be a proof oi <|>n wrt the formulae (antecedents) <|>i. <|>2, ... , c|>n -1 iff q/m = <[>n
and for any i = 1. 2,... ,m: is either an axiom or belongs to {<|>i- <t>2.... . 4>n -1} or also there exist some k, j < i 
such that q/k = (Tj => Ti)-
Definition 1.13
4>i. <|)2..... <t>n-i 1= <t>n iff there exists a proof for c|)n wrt the formulae <|>i. <|>2,...,
In accordance with the last definition, we shall say that cj>â is a logical consecpience wrt (or follows logically 
from) the formulae <|>i. <|>2..... <|)n-i (see Definition 1.6, Subsection 1.5). And hence. 4>n e Cn({<|>i, <|>2,..., <|>n-i})-
Let q/i. q/2..... q/m be a proof of the implication <f> =^> From Definition 1.13 it follows that = (<|> => \p). 
Then the sequence q/i. q/2..... q/m. Tm + i. Tm + 2 is a proof of by assuming q/m + i =df <t> and next using -C . We 
can obtain: + 2 = T- And hence, the following corollary is satisfied.
Corollary 1.1

55
i= (4> => t) => (4> i= v)- â¡
Corollary 1.2
(K <|>2, ... . <|>n 1= \|/) A (\|/ 1= X) => (4>1. 
... . <|)n 1= X)
Proof:
Let <[>i. c|>2. ... . 4>n 1= V and y 1= X- In accordance with Definition 1.13, there exists sequence q/i. q/2. ... . 
q/m which is a proof of q/ wrt the formulae <|>i. <|>2..... 4>n. where v|/m = y. In a similar way, let Xb %2,..., Xr be the 
corresponding proof of x wrt q/. where Xr = X-And hence. according to Definition 1.12, the sequence q/i, q/2,..., 
Tm. Xb %2,..., Xr is a proof of x wrt <|>i, <|>2,..., <t>n. â¡
Corollary 1.3
(<|>1, <|>2, ... , <|)n 1= 
=?> X)) A (4>b <t>2. ... , <|>n 1= T) =?> (<|>1, <|>2, ... , <|>n 1= X)
Proof: left to the reader. â¡
Consider now axiomatic systems in which the only primitive proof rule is the rule of detachment, i.e. - C and 
having as theses the following formulae (C follows from A and B: see Example 1.12):
(A) 
<|> => (\|/ => <|>) 
{law of simplification}
(B) 
(c|> => (\pr => x)) =?> ((<f> => T) =2> (<f> =2> X)) {Frege's law}
(C) 
<|> => <|> 
{law of identity for implication}
The following theorem is satisfied for any such system.
Theorem 1.3 
1 (deduction theorem)
(<|>1, <|>2, ... , <|>n-l 1= 4>n) =?> (<|)b <|)2, ... , <|)n-2 1= (4>n-l =?> 4>n))
*
1'he opposite implication in Corollary 1.1 becomes a particular case with n = 2 by assuming 4>i =df 4> and 4>2=df<P-
Proof
Assume that <|>i, <|>2, ... , 4>n-1 = <t>n. Hence, in accordance with Definition 1.12. there exists a sequence qn. q/2. 
.... q/m which is a proof of 4>n wrt the formulae <|>i. <|>2..... 4>n-i.
Consider the following sequence of implications: 4>n _ i => qn. ... . <t>n-1 => q/m , where any qb is replaced by 
(fin-! => qb (i = 1.... ,m). Since q/m = <t>n the last implication in this sequence will be as follows: <|>n-i => <|>n. And 
so. after some completion, this way obtained sequence becomes a proof of the implication 4>n-1 =2> <[>â wrt <|>i. <|>2.... 
. <t>n- 2. This is shown below.
One of the next three cases follow directly by Definition 1.12 (i = 1,... ,m).
1. 
qb is an axiom
2. 
q$ belongs to {<|>i. <|>2..... <t>n-i}
3. 
there exist some k.j < i such that q/k = (q/j => TO
Let q/t be an axiom (case 1). By using - C wrt q/t and the law of simplification A, i.e. qb =2> (<|>n-i =^> 
qb). it follows that <|>n-i => qb is a thesis.
Assume that qb e {<|>i. <|>2. ... . 4>n-1} (case 2). If qb =df <t>n- i then in accordance with the law of identity for 
implication C. it follows that <|>n-i => <t>n-i is a thesis. Otherwise qb e {<|>i. <|>2. â¢â¢â¢ . <t>n-2} and hence by the law of 
simplification A, it follows that qb =2> (4>n -1 => qb) is a thesis. By using C we can obtain <|>n -i => qb. 
According to Corollary 1.1. <|>n-1 => qb is a logical consequence wrt the formulae <|>i. <|>2..... 4>n-2.

56
Consider now case 3. Since (4>n -1 => q/k) = (4>n-i => (Tj => TO) and <k -1 => 'I'j are earlier formulae 
than <|>n-i => q/t then in accordance with Frege's law B, (<|>n-i => (Tj => '$)) => ((<t>n-i => Tj) => (<k-i => 
q/i)) is a thesis. And hence. <|>n -1 => q/i can be obtained by using two times 1 - C1.
According to the above considered three cases, any formula <|>n-i => q/i (i = 1. ... .m) of the sequence 4>n_i => 
q/i. ... . 4>n -1 => q/m is either a thesis or a logical consequence wrt the formulae <|>i. <|>2. ... . 4>n - 2 or also obtained 
from earlier formulae of this sequence by using - C. The last sequence of implications can be completed as 
follows: any thesis 4>n-i =a q/i is completed by the corresponding proof preceding this thesis (wrt the axioms) and 
any formula 4>n - 1 =a q/i being a logical consequence wrt the formulae <|>i. <|>2. ... . <|>n - 2 is completed by the 
corresponding proof of 4>n - 1 =a q/i wrt <|>i. <|>2. ... . <|>n- 2. And this way completed sequence of implications is a 
proof of 4>n-1 =a <|>n wrt the formulae <|>i. <|>2. ... . 4>n- 2. In fact, in accordance with Definition 1.12, any formula of 
the last obtained completed sequence is either an axiom or belongs to [<|>i. <|>2........... <k - 2} or also obtained from
preceding formulae using - C and the last formula of this sequence is 4>n -1 =a 4>n- â¡
It can be observed that, intuitively, the construction used in the above proof can be recognised as a ramified direct 
proof from assumptions (see Subsection 1.3). The above deduction theorem can be considered as a substantiation of 
the (earlier existing) natural deduction methods. In fact, the next two theorems hold.
The following theorem can be obtained by using multiple times Theorem 1.31.
Theorem 1.3 2
(<|>1. <|>2. ... . <k-l 1= K> != (<I>1 
(<l>2 =?> (4>3 =?> ... =?> (4>n-l 
<t>n) â¢â¢â¢))â¢ â¡
The following formula is a thesis in the last two axiomatic systems.
(D) 
(~4> =a q/) =a ((~4> =^> ~ q/) =a 4>)
Assume that Theorem 1.31 and thesis D are satisfied in our propositional calculus. Then the following 
theorem is also satisfied.
Theorem 1.33
(<|>1. <|>2. ... . 
~ <l>n 1= q/) A (<|>1. (|>2. ... . <|>n-l. ~ <|>n 1= ~ q/) 
1= (<|>1 =?> (<|>2 =?> (<|>3 =^>... =?> (<|>n-l^>
<k) â¢ â¢ â¢))
Proof:
(1) 
<t>b <t>2. â¢â¢â¢
(2) 
<bi- 'k- â¢â¢â¢
, 4>n - 1, ~ 4>n I23 T
, 4>n - 1, ~ <|>n I23 ~ T
{a}
(3)
k- ... . 4>n- 1 1= ( ~ <t>n => T)
{T 1.31: 1}
(4)
k- ... . 4>n- 1 1= ( ~ <t>n => ~ T)
{T 1.31:2}
(5)
(~<k =?> T) 1= ((~ 4>n =>~V) =A <|>n)
{D. Coroll. 1.1}
(6)
k- ... . <t>n- 1 1= ((~ 4>n => ~ T) => <k)
{Coroll. 1.2: 3.5}
(7)
<|>1. <|>2. ...
1= (k =>
. l= <k
(4>2 =?> (4>3 =?> ... =?> ((k-l^ <k)---))-Â°
{Coroll. 1.3: 
{T 1.32: 7}
4.6}
The notion of logical consequence introduced in Definition 1.12 can be extended by including beyond of - C 
also rules Â± K, Â± A, and Â± E. The proof of the obtained extent of Theorem 1.31 would be similar. And this extent of 
Theorem 1.31 would correspond to the rule of joining an implication + C used in the assumptional system. And 
hence. Theorems 1.32 and 1.33 would correspond to the rules for constructing a direct and indirect proof from 
assumptions, respectively. The above rules Â± K, Â± A. and Â± E which are primitive in the assumptional system 
become derived in the considered axiomatic system. On the other hand, any axiom of the axiomatic system becomes 
either a thesis or primitive rule in the assumptional system. And then, the last two systems become equivalent.

57
In general, the deduction theorem can be considered as a formalisation of the common proof teclmique in which 
in proving some implication it is sufficiently to assume its antecedent and try to prove its consequent, using 
corresponding logical inference rules, e.g. in proving the implication p a q =v pv q it is sufficiently to assume 
the antecedent p a q and try to prove the consequent p v q using corresponding logical inference rules (left to 
the reader). And so, if (p a q) 1= (p v q) is true then by deduction theorem and C it follows that 1= (p a q 
a p v q) is true. And this theorem provides rules for constructing proofs in the natural deduction systems. A 
more general version of the above theorem, known as a metatheorem of first-order predicate logic, can be presented 
as follows:
(<I>. <p 1= ip) => (<]> 1= (<p => \|/)) or (cp |= xy) => |= (q> => ip), for <3> = 0, 
where <I> is a set of formulae in this theory and cp is a closed formula, i.e. a logic formula with no free variables 
(see Section 3 of Chapter 11).
There is also satisfied the opposite implication of this theorem, called sometimes "opposite deduction theorem". 
which is presented as follows (The little encyclopaedia of logic 1988):
(<I> |= (cp => \p)) =v (<I>. cp 1= vp) or |= (cp => xp) => (cp 1= xp), for <I> = 0.
By using the opposite deduction theorem we have a possibility of introducing new inference rules wrt the already 
proved earlier formulae, e.g. having proved (or assumed as an axiom) the law â cp => cp we can accept the rule 
â cp 1= cp, i.e. it is allowed to deduce cp by assuming â cp (see T 1.3a: rule of omitting double negation N').
The deduction theorem is an important property of the well-known Hilbert's style systems where this theorem is 
used as a primitive rule of inference. But this approach is not generally followed. Moreover, there are first-order 
systems in which new inference rules are added for which the deduction theorem fails (Kohlenbach U. 2008). And 
finally, there exist systems in which this theorem is not satisfied, e.g. the classical deduction theorem does not hold 
in paraconsistent logic. Here, only the following "two-way deduction theorem" does hold in one form of this logic 
(Hewitt C. 2008): 1= (cp => \p) => (cp 1= \p) a (~ \p l= ~ cp), i.e. the contrapositive inference is also required 
(see T 1.14 of Subsection 1.3)* *.
* The Free Encyclopaedia. The Wikimedia Foundation. Inc.
I The same designation is used as in the case of the corresponding rule of negating a conjunction.
* Gerhard Karl Erich Gentzen (1909 - 1945).
Â§ Another interesting approach having similar notation is the Lambek's calculus (concerning formal grammars'. Joachim Lambek 1922 - 
2014): a syntactic calculus that formalised the function type constructors along with various rules for the combination of functions. This approach 
In general, methodological problems such as consistency, completeness, independence, etc. arise when a given 
axiomatic system is considered (in ways analogous to assumptional systems). Obviously, the most important of these 
properties is the consistency of a system.
1.8. Sequent calculus
Reasoning is the ability to make inferences, and automated reasoning is concerned with the building of 
computing systems that automate this process. Although the overall goal is to mechanise different forms of 
reasoning, the term has largely been identified with valid deductive reasoning as practised in mathematics and formal 
logic. In this respect, automated reasoning is a kind of mechanical theorem proving (Portoraro F.D.2001).
The above-considered logical calculi were based on a system of rules, which define the methods used in proofs 
from assumptions. Some elements concerning direct reasoning and automated deduction methods are related to the 
Gentzen's sequent calculus (called also sequent deduction or consecution calculus) , originally denoted by LK, in 
contradistinction to the natural deduction calculus, denoted by NK1': Gentzen G.K.E. (1934, 1935)i. A brief 
introduction to the notion of sequent is given below. Axioms and some used logical inference rules for a Gentzen's 
style presentation (called below in short: reduction rules) are also presented5.

58
Let cp and be some propositional formulae (see Definition 1.1). Next by T and A we shall denote some 
sequences of such formulae.
Definition 1.14
Any expression of the form A I- T is said to be a sequent. The first and the second elements of a sequent (here 
A and T ) are called its antecedent and its consequent, respectively.
Any sequent of the form 
H 
can be represented in an unique way by some
propositional formula (known as a generic interpretation). In fact, the last sequent can be represented as follows:
epi A cp2 A...A cpm =A T1 V '|'2 V...V \|/n
An illustration of Definition 1.14 are the following sequents: pHp, q or p/r. p =>q Hqvr or 
also 
lâ (p v q) o ~p A~q .etc.
Provided there is no ambiguity and to explain the use of the reduction rules given below, before using a rule wrt a 
given sequent, any missing element in this sequent is interpreted as an empty such one and denoted by the symbol /.. 
After using this rule, X symbols are omitted in any new obtained sequent. And this process is continued as long as 
only elementary sequents are obtained (see below).
For example, the last of the above given sequents can be interpreted as follows: X I- X, ~ (p v q) o ~ p a 
~ q. And hence, in accordance with the rule ' â Ec' and for convenience, the missing symbols A and T can be 
interpreted by /. And so. by using this rule the following two new sequents can be obtained: ~ (p v q), X I- X, ~ p 
a ~ q and ~ p / - q. /. H - (p v q). In the next step any such empty symbol is omitted. Then we have: ~ 
(p v q) I p A~q and ~ p a ~ q Iâ (p v q). Similarly as in the case of using E', i.e. the classical 
rule of omitting an equivalence. In the same way. the following simplified rule of removing an implication in the 
consequent of a sequent can be obtained: - C*: -------------- or e.g. the rule of removing an equivalence in the
is an effort to capture mathematical aspects of natural language syntax in logical form (a very influential work in computational linguistics)'. The 
Free Encyclopaedia, The Wikimedia Foundation, Inc. The logical system called full Lambek's calculus is obtained by removing the following 
three structural rules: exchange, contraction and weakening. On the other hand, by adding all or some of the last three structural rules we can 
obtain various intuitionistic substructural logics (Kawaguchi M.F. et al. 2005). See Subsection 2.4 of this book: linear logic.
' In fact, any Gentzen's system uses only one axiom: A i- A, known as 'identity' and denoted by Id. Moreover, introduction rules become 
an important proof technique (e.g. see Subsection 2.4: Relevance logic).
In particular, such rules are used in relevance logic, e.g. + Ca or + Cc (known also as 'arrow on the left' and 'arrow on the right', 
respectively: see Subsection 2.4).
' A i- B
I A B
consequent of a sequent: - E*: ------------------------- (a more formal treatment is omitted: see rules - C and
' A i- B A i- B
- Ec given below).
The considered system includes only one axiom*. This is a sequent having at least one elementary formula (i.e. at 
least one tiny latin letter such as: p. q. r, s. ...) in coimnon in its antecedent and its consequent. So. according to the 
above example sequents. only the first of them p I- p, q is an axiom. Any sequent A I- T having A and T as 
elementary sequences, i.e. sequences of elementary formulae without any logical connectives, is said to be an 
elementary sequent or atom. So any axiom is an atom, but not vice versa, e.g. the atom p I- r, q is not an axiom.
In general, the Gentzen's sequent calculus can be used wrt some sequent transformations. This is done by 
introducing some (finite) set of rules. The used set of rules may be different depending on the following two cases:
(i) Generation of some true formula (i.e. thesis) for a priori given axiom by using introduction rules1' (e.g.
Glushkov V.M. 1964: 1921 - 1982). or also

59
(ii) Validation if a priori given formula is a thesis by using reduction (called also: elimination) rides (e.g. Pawlak 
Z. 1965, Huzar Z. 2002. etc.).
Example 1.13
(i) +Ca :
A |- A. A B. r |â Â©
A => B.A.T i- A.0
is an example rule, shortly denoted by '+ Ca', of adding an implication to the antecedent of a sequent (composed wrt 
the previously given two sequents A I- A , A and B, T I- Â© , where A, A, T and Â© denote some sequences 
of propositional formulae).
(ii) - Ca :
A.A^B I
A.Bi-T A|-EA
is an example rule, shortly denoted by Ca' , of removing an implication in the antecedent of a sequent. In 
consequence, two new sequents are obtained. â¡
Any rule of the considered Gentzen's sequent calculus can be represented in an equivalent way by some 
propositional formula, which is a thesis. Some proofs of the above given two rules + Ca and - Ca are given in the 
next example.
Example 1.14
Below any sequence, say A , of propositional formulae <pi,q>2,...,<pk is replaced by some conjunction cpi a cp2 
A...Acpk (if A belongs to the antecedent of the considered sequent) or also by some disjunction qu v q/2V...vq/k 
(if A belongs to the consequent of this sequent, in accordance with the above given sequent interpretation). By Ta 
we shall denote the obtained propositional formula associated with A (similarly: Ti and TÂ®, associated with T 
and Â©, respectively).
(i) +Ca: 1= (Ta =i> Ta v A) a (B a Tr =a TÂ®) =a ((A =a BJaTaaTf =a T\ v TÂ®)
Proof:
(1)
Ta =a Ta v A
(2)
Ba'I'i =a TÂ®
(3)
A =a B
[1.2.3.4.5 / a}
(4)
Ta
(5)
Tr
(6)
~ (Ta v TÂ®)
{aip}
(7)
~ Ta
[NA : 6}
(8)
~ TÂ®
(9)
Ta v A
[-C: 1,4}
(10)
A
{-A: 7,9}
(H)
B
{-C : 3,10}
(12)
B ATr
{ +K : 5,11}
(13)
TÂ®
[-C: 2,12}
contr. j
{8,13}
Unfortunately, the opposite implication is not satisfied (the reader is invited to use the Hilbert's abbreviated 
verification).
(ii) - Ca : 1= (U a (A a B) a Tr) =i> (Ta a B =a Tr) a (Ta a 'B a/ A)

60
Proof:
(1)
Ta a (A =a B) =a Tr
{a}
(2)
~ ((Ta a B a Ti) a (Ta a T v A))
{aip}
(3)
Ta a B a ~ Tr v Ta a ~ Tr a ~ A
[NK.NC.NA: 2}
(1.1)
Ta
(1.2)
B
[1.1.1.2.13 /ada}
(1.3)
~ Tr
(1.4)
~ (Ta a (A => B))
[Toll: 1,1.3]
(1.5)
~ Ta v ~ (A =a B)
[NK: 1.4}
(1.6)
~ (A B)
[-A: 1.1.1.5}
(1.7)
A
[NC: 1.6}
(1.8)
~B
contr.
[1.2,1.8}
(2.1)
Ta
(2.2)
~ Tr
[2.1,2.2,23 / ada}
(2.3)
~ A
(2.4)
~ (Ta a (A => B))
[Toll: 1.2.2}
(2.5)
~ Ta v ~ (A =a B)
[NK: 2.4}
(2.6)
~ (A B)
[-A: 2.1,2.5}
(2.7)
A
[NC: 2.6}
(2.8)
~B
contr. â¡
[2.3r2.7}
Without loss of generality and for simplicity, instead of T.. T\. Tr. TÂ®, A, B, etc. we can use some 
propositional variables, e.g. such as: p. q. r, s ...pi. P2. etc. For example, in the case of proving (ii), i.e. the above rule 
- Ca. we can obtain the following propositional formula: (p a (q => r) => s) => (p a r => s) a (p => s v q). 
And hence, it is sufficiently to prove that this formula is a thesis.
According to case (ii). the opposite implication, i.e. (Ta a B => Tr) a (Ta => Tr v A) => (Ta a (A =>
And so the following rule can be generated:
B)
Tr). is also satisfied.
Proof:
(1)
Ta a B =a Tr
(2)
Ta =a Tr v A
[1.23.4 / a}
(3)
Ta
(4)
A =a B
(5)
~ Tr
{aip}
(6)
Tr v A
[- C : 2.3}
(7)
A
[-A : 5,6}
(8)
B
[- C : 4.7}
(9)
Ta a B
[ + K : 3.8}
(10)
Tr
[- C : 1.9}
contr. â¡
[5.10}
A.B|-r Ai-EA
A.A^B I'
The last rule can be obtained from + Ca by interchanging T with A and next A and Â© with 1 .

61
Below we shall restrict our attention only to the problem of validation of propositional formulae. For any of the 
logical functors (i.e. the basic symbols ~ . a , v , => and o ) two reduction rules are given, depending on the fact 
if this logical functor belongs to the antecedent or also to the consequent of the considered sequent. So the following 
ten reduction rules can be used*.
(1)
Rule of removing a negation 
antecedent of a sequent
in
the
-Na:
~A,Ai-r 
A|- r,A
(2)
Rule of removing a negation
in
the
a i- e~ a
consequent of a sequent
IN c .
a, a i- r
(3)
Rule of removing a conjunction in the
AaB.A - 1
antecedent of a sequent
Ka â¢
A,B,A|-r
(4)
Rule of removing a conjunction in the
K â¢
AhEAaB
consequent of a sequent
JX-C â¢
A-EA A-EB
(5)
Rule of removing a disjunction
in the
A â¢
AvB.A ;-f
antecedent of a sequent
Aa â 
A,A|-1' B.A-f
(6)
Rule of removing a disjunction
in the
A â¢
A - l.AvB
consequent of a sequent
A|- EA,B
(7)
Rule of removing an implication in the
c
A.A^B 1
antecedent of a sequent
El â¢
A,Bi-r AHr,A
(8)
Rule of removing an implication in the
r â¢
A|- EA=>B
consequent of a sequent
â 
A,A|-EB
(9)
Rule of removing an equivalence in the
F â¢
A.Ao B 1
antecedent of a sequent
A,B,A;-f A|-I,A,B
(10)
Rule of removing an equivalence in the
F â¢
A|- EAoB
consequent of a sequent
A,A -EB B,A|-EA
As an example, since a is distributive over v, the rule of removing a disjunction - Aa can be proved directly by 
using the law of addition of antecedents of two implications having the same consequent. Also, the following two 
different indirect proof versions for - Ea, i.e. (p a (q o r) => s) => (p a q a r => s) a (p => q v r v s), 
can be obtained.
Proof of - Ea (the first version is ramified)'.
(1) 
p a (q o r) =a s
(2) 
~ ((p a q a r =a s) a (p =a q v r v s))
(3) 
pAqArA~svpA~qA~rA~s
{a}
{aip}
[NK.NC.NA.SR : 2}
Since the rules corresponding to the first three connectives are very simple, only these rules can be considered as sufficient. But the obtained 
proof's may be longer than these ones related to the use of'complete set of'rules, e.g. the obtained proofs of f 1.10 (the law of compound constructive 
dilemma) without using Ca' and with using Caz have different complexity (left to the reader). We observe that commas placed in the 
antecedents or consequents are "commutative" (since a and v are commutative). In general, any of the above inference rules ( called also 'cut 
rules' can be considered as a generalisation of the classical modus ponens, i.e. Cz. It was shown (the Gentzen's cut-elimination theorem, 1934) 
that any judgement that possesses a proof in the sequent calculus making use of the cut rule also possesses a cut-free proof (Ehe Free 
Encyclopaedia, The Wikimedia Foundation, Inc.).

62
(1.1) 
P
(1.2) 
q
(1.3) 
r
(1.4) 
~s
(1.5) 
~p v ~(q o r)
(1.6) 
~(q o r)
(1.7) 
qA~rv~qAr
(1.8) 
qArA(qA-rv-qAr) 
contr.
(2.1) 
p
(2.2) 
~ q
(2.3) 
~r
(2.4) 
~ s
(2.5) 
~ p v ~ (q o r)
(2.6) 
~(q o r)
(2.7) 
qA~rv~qAr
(2.8) 
~qA~rA(qA~rv~qAr) 
contr. â¡
{1.1.1.2.13.1.4 / ada}
[Toll.NK.SR: 1.1.4}
{-A: 1.1.1.5}
[SR: 1.6}
[+K: 1.2.1.3.1.7} 
{1.8}
{2.1,2.2,23,2.4/ada}
[Toll.NK.SR: 1.2.4}
{-A: 2.1,2.5}
[SR: 2.6}
[+K: 2.2,2.3,2.7} 
[2.8}
Since q r <=>df ~ (q o r) the above-ramified proof can be simplified. In fact, by using the (corresponding 
short forms of the derived) rules of omitting an exclusive disjunction - EA" (wrt lines (1.2) and (1.6) we can 
obtain a contradiction: r and ~ r) and -EA' (wrt lines (2.2) and (2.6): the same two contradictory lines can be 
obtained, see remark to A', Subsection 1.2). Another proof technique is given below.
Proof of - Ea (the second version):
(1) 
p a 
(q o r) =a s
(2) 
~ ((p a q a r 
=a s) a (p 
=a q v r v s))
(3) 
p a q a r a â s v p a â qA~ r a~ s
(4) 
pA~SA(qArv~qA~r)
(5) 
p A 
(q o r)
(6) 
~ s
(7) 
s
{a}
[aip}
[NK.NC.NA.SR: 2}
{a is distributive over v}
{â K, A is commutative and associative, SR : 4}
contr. is
{-C: 1.5} 
{6.7}
Another version can be obtained by using Toll wrt the lines (1.6) and then - A (this is omitted). Instead of two 
contradictory lines, in the first version two contradictory formulae are obtained (in accordance with the considered 
cases). Similarly, the last rule of removing an equivalence - Ec can be proved directly by using the following two 
theses (this is left to the reader): |= (p => q v (r o s)) => (p => q v (r => s)) and l= (p => q v (r o s)) => 
(p => q v (s => r)), etc. The reader is invited to prove the rule -Ec by using T 1.5.
In general, any Gentzen's mle is provable using indirect proof techniques.
Any propositional formula cp can be considered as a sequent of type ' I- cp ' , where the symbol ' I-' is said 
to be the main sequent connective for cp . The validation of cp and so the process of reduction of the logical 
functors associated with cp is started always wrt the main sequent connective. This process is repeated as long as 
the whole set of logical functors is reduced and so only a set of atoms is obtained. Hence. <p is a thesis iff any such 
atom is an axiom.
Any of the above presented rules (1-10) can be considered as a derived (or secondary) wrt the natural deduction 
approach. The corresponding proofs are similar to these ones given in Example 1.14 (the reader is invited to present 
proofs for the remaining rules). Moreover, as in the axiomatic approach, the proof style used is always the direct 
style. The methodological aspects of the above calculus are omitted here. The proposed system is exact wrt any 
propositional formula >p.

63
An illustration of the above-considered approach is given in the next example (the proof style used below is related to 
the so called "turnstile').
Example 1.15
(a) 
Let consider the proof of the law of implication (see T 1.15).It is assumed below the first line of the proof 
always is corresponding to the main sequent connective (shortly: msc ).*
(1)
H p =a q o ~P v q
{msc}
(2)
p q i-
~P v q
[2,3 / â Ec: 1}
(3)
~p v q H
p q
(4)
q H ~p v q
[4,5 / â Ca: 2}
(5)
1------P v q, p
(6)
p, ~ p v q
i- q
{- Cc: 3}
(7)
q H ~ p. q
{-Ac: 4}
(8)
à¥¤â p- q- P
{-Ac: 5}
(9)
p, ~ p H q
[9.10/-Aa: 6}
(10)
p, q H q
{axiom}
(H)
p, q H q
{- Nc : 7} 
{axiom}
(12)
P h q-p
{- Nc : 8} 
{axiom}
(13)
p H q, p. â¡
{- Na : 9} 
{axiom}
(b) 
The following proof of the law of negating a disjunction (see T 1.7) can be obtained.
' In general, in accordance CR and SR, the sequent Iâ cp => vp can be equivalently represented as: I- ~ <p v ip. Next by using 
- Ac and then -Nc we can obtain: <p I- ip. In a similar way, by using - E and SR, the sequent I- <p <=> ip can be equivalently 
represented as: I- (<p => ip) a (ip => <p). According to - Kc, the following two sequents can be obtained: I- <p => ip and Iâ vp => <p. 
And finally, we have: <p I- ip and ip I- <p.
(1)
H~(p v q) o ~p a ~q
{msc}
(2)
~ (P v q) H ~ p a ~ q
{2.3/- Ec : 1}
(3)
~p a ~ q H ~ (p v
q)
(4)
H ~p a ~q, p v q
{-Na: 2}
(5)
~p. ~q H ~(p v q)
{- Ka : 3}
(6)
1------p.p v q
{6.7/- Kc: 4}
(7)
1------q, p v q
(8)
~q H ~(p v q).p
{- Na: 5}
(9)
p H p v q
{-Nc: 6}
(10)
q H p v q
{-Nc: 7}
(H)
1------(p v q),p, q
{-Na: 8}
(12)
p H p, q
{-Ac: 9}
{axiom}
(13)
q H p, q
{-Ac:
10}
{axiom}
(14)
P v q H p, q
{-Nc:
11}
(15)
p H p, q
{15.16 / -Aa: 14}
{axiom}
(16)
q H p, q . â¡
{axiom}

64
The reader is invited to show the law of addition an arbitrary proposition to the antecedent and consequent of a 
given implication (see Example 2.7 of Subsection 2.2) and also the following two theses: 
(p a q) a p o p a q 
and 
(p => q v r) a (s a t => u) => ((r => s) a p a t => q v u).
It can be observed that the size of the generated proof for a given cp will depend on the number of possible 
brandlings (i.e. the size of the obtained branch-out tree, in each step of the reduction process for cp ). For example, 
the direct proof of the converse implication T 1.5b (of the law MC of multiplication of consequents) requires two 
times C' and then '+ K'. At the same time, the corresponding sequent calculus will require eight possible 
brandlings. The reader is invited to prove the following laws: addition of antecedents, compound constructive and 
compound destructive dileimnas. and the law of conversion of implications (i.e. T 1.9, T 1.10, T 1.11. and T 1.13, 
respectively).
An extension of the above given set of reduction rules (1 - 10) is omitted here. It will be given in the next 
chapter, where the (first-order) predicate logic is presented. And hence, four new reduction rules should be added wrt 
the universal (V) and existential (3) quantifiers (depending on the fact if any such quantifier is in the antecedent or 
also in the consequent of the sequent associated with the considered predicate formula: see Subsection 3.4).
The sequent calculus becomes elusive for some non-classical logic systems. A generalisation of Gentzen-style 
sequent systems (known as 'hypersequent calculus') is considered in Subsection 4.1.
A brief survey of the commonly studied non-standard logics, e.g. such as: many-valued, fuzzy, modal, temporal, 
and some others is given in the next section.
2. Non-standard logics
Non-standard logics such as many-valued, fuzzy, modal, temporal, etc. have been increasingly gaining the 
attention mainly wrt the following two reasons. First, the natural desire to extend the existing classical deduction 
techniques to new domains of logic. And second - the need of providing a suitable foundation for artificial 
intelligence. Any such system is constructed on the basis of classical logic, e.g. by deleting or also introducing some 
axioms (e.g. intuitionistic logic or paraconsistent logic), by introducing some new connectives ( called also functors, 
e.g. such as: â¡. O. =a>. <o> , ! , 8 , o , /, U , etc. in the modal and temporal logics), by introducing more than two 
(but a finite number of) logical values or also an extension to a non-countable set of values in the closed interval, i.e. 
based on the truth-values set [0,1] (e.g. many-valued or fuzzy logics) and so on. The first non-classical systems were 
introduced to the middle of the 20th century, e.g. such as: the 3-valued Lukasiewicz's system (Lukasiewicz J. 1917), 
system of strict implication (Lewis C.l. 1918), intuitionistic logic (Heyting A. 1930, Gentzen G.K.E. 1935 and 
Klccnc S.C. 1952)
*.
The Lukasiewicz's intention in the construction of the 3-valued system was to use a third additional truth value 
for "possible", and to model in this way the modalities "it is necessary that" and "it is possible that"(considered as 
special or aletluc such ones). This intended application to modal logic was not materialised. The outcome of these 
investigations are. however, the Lukasiewicz's systems, and a series of theoretical results concerning these systems, 
e.g. such as: the basic idea of additional truth degrees wrt problems of the representability of functions (Post E.L. 
1921), reasoning the intuitionistic logic in terms of many truth degrees (Gbdel K. 1932), an infinite valued 
characteristic matrix for intuitionistic logic (Jas S. 1936), a philosophical application of 3-valued logic to the 
discussion of paradoxes (Bochvar D.A. 1938), and a mathematical one to partial functions and relations (KJeene S.C.
See Subsection 2.4: intuitionistic and fuzzy intuitionistic logics.

65
1938), the determination of the fixed points in the revision theory of truth (Kripke S. 1975), and so on (see Gottwald 
S. 2000).
The construction of the systems of many-valued logic can be considered as one of the most important logical 
discoveries in the past century (Slupecki J. and Borkowski L. 1967). Below we shall first concentrate our attention to 
some such systems.
2.1. Systems of many-valued logic
Many-valued logics are non-classical logics. But they are similar to classical logic because they accept the 
principle of truth-functionality, i.e. the truth of a compound proposition is determined by the truth-values of its 
component propositions (and so remains unaffected when one of its component propositions is replaced by another 
having the same truth-value). Here a fundamental fact is that the above logics do not restrict the number of truthÂ­
values to only two, e.g. in the grey-scale images the assertion that some colour is not white is not equivalent to the 
assertion that this colour is the black itself and vice versa. And this is because the set of all possible colours in the 
grey level scale gradation {0,1, ... , 255} includes more than two elements (i.e. the black colour 10 1 and the white 
one 1255 1).
There are two kinds of semantics for systems of many-valued logic: standard logical matrices and algebraic 
semantics. The main types of logical calculi are all available for these systems (such as: the natural deduction 
approach, Gentzen's type sequent calculi or tableau calculi). The main systems of many-valued logic often come as 
families, which comprise uniformly defined finite-valued as well as infinite-valued systems such as: Lukasiewicz's 
logics, Godel's logics, t-norm related systems, 3-valued systems, product systems, Dunn/Belnap's 4-valued system, 
etc. (Gottwald S. 2000).
Lukasiewicz's logics (Jan Lukasiewicz 1878 - 1956)
The systems Lm and L,j are defined by means of the following two truth degree sets:
r k 
V
W,â =df s------ Ik e {0,1, ...,m - \fm > 2 > and WÂ® =df [0,1] c p (the set of all nonnegative real numbers),
[m-1 
J
respectively
*.
* The first Lukasiewicz's system (a ternary logic system with W; -dt {0. 1/2. 1)) was given in 1918: usually 0. 1/2 and 1 are denoted by 
the logical constants F, U (unknown) and T, respectively.
t Below we shall assume the logical value of a propositional formula <p , denoted by v(<p) e Wm or also v(<p) e Wâ , depending on the 
used system. Provided there is no ambiguity, for simplicity instead of v(<p) the same formula <p is used, e.g. p instead of v(p), q instead of 
v(q), p a q instead of v(p a q), etc. Moreover, to minimise the number of used parentheses we shall assume the logical functors bind more 
strongly than the sign of equality. Hence, e.g. (p q ! a p a q I denotes ((p => q) a p q ) = 1 or equivalently: v((p => q) a p => 
q) -''1.
The degree 1 is the only designated truth degree. The main conjunctions, of these systems are the strong and 
weak conjunctions, denoted by & and a , respectively. The following two truth degree functions are used:
p & q =df max{0,p + q - Ip and
p a q =df min{p,q}.
It can be observed that the logical value p & q = p a q = 0 for p = 0 or q = 0. Let now p, q > 0. 
Then we have: p&q = p a q, for p + q>l and max{p,q} = 1. Similarly p & q p a q, for p +
q < 1. For example, p&q = p a q = â , for p = â and q = 1. In a similar way, p & q = 0 
â
2 
2 
3
= p a q, for p = â and q = â . But the above two truth degree functions coincide for m = 2.
2 
3

66
In accordance with the above two conjunctions, the following two (strong and weak) disjunction connectives can 
be introduced: 
p Y q =df min{l,p + q} and 
p v q =df max{p.q}.
The last two disjunctions also coincide for m = 2 (a similar verification of the relations '=' and V' between 
the logical values of p Y q and p v q is left to the reader).
The Lukasiewicz's negation and implication connectives are defined as follows: 
~p =df 1 - p and 
p =q> q =df min{l,l - p + q} (or equivalently: p => q =df if p Y q then 1 else 1 - p + q).
There were given also another many-valued logic systems, e.g. Kleene's ternary logic (1952: Stephen Cole 
Kleene 1904 - 1994): Kleene's ternary implication differs in its definition in that 'U implies U' is 'U' (instead of 
'T', as in the case of Lukasiewicz's one): In accordance with the law of implication (T 1.15 , Subsection 1.3), the 
logical value of this implication, p => q =df ~ p v q =df max{l - p, q}. The corresponding definitions for 
negation, conjunction and disjunction connectives are the same as in Lukasiewicz's system: concerning the weak 
conjunction and disjunction connectives. Instead of W3 =<jf {0, 1/2, 1}, there was used the set {F, U, T}, where 0, 
1/2 and 1 correspond to F, U and T, respectively: Kleene's symbol 'U' denotes ''unknown'. Kleene's ternary 
implication was used as a natural way of generating a paraconsistent logic (see Subsection 2.4: left to the reader).
Proposition 2.1
(p =a q) a (q =a p) = (p =a q) & (q =a p)
Proof:
Let L =df (p => q) a (q => p) = min{min{l,l - p + q}.min{l,l - q + p}}. Also assume that R =df (p 
=> q) & (q => p) = max{0,min{l,l - p + q} + min{l,l - q + p} - 1}. Obviously, for p = q we have: L/ 
p-q - 1 - R / p-q.
Assume now that p < q. Hence min{l,l - p + q} = min{l,l + (q - p)} = 1 and min{l,l - q + p} 
= min{l,l - (q - p)} = 1 - q + p. And so we can obtain: L/P<q = min{l,l - (q - p)} = 1 - q + p = 
max{0.1 + (1 - (q - p)) - 1} = R/p < q.
In a similar way for p > q we can obtain: L/P>q = 1 + q- p = R/p>q.n
It can be observed that v(cp) = v(q/) will implicate <p e> i|/. An example equivalence connective defined for 
L i is shown in the next table (independent on the used type of conjunction: strong or weak). This table is a 
generalisation of the classical corresponding to L2 .
<=>
0
1/3
2/3
1
0
1
2/3
1/3
0
1/3
2/3
1
2/3
1/3
2/3
1/3
2/3
1
2/3
1
0
1/3
2/3
1
Next we shall assume that the symbol of negation binds more strongly than the remaining symbols. An algebraic 
interpretation of De Morgan's laws is given below.
(i) 
~(p & q) = ~p Y ~q,
(ii) 
~(p Y q) = ~p & ~q.

67
(iii) 
~(p a q) = ~p v~q. and
(iv) 
~(p v q) = ~p A~q.
Proof (i):
The following equality has to be shown:
1 - max{0,p + q - 1) = min{l,(l - p) + (1 - q)}
We have three cases for consideration depending on the value of the sum p + q ( = 1 or < 1 or > 1). For 
example, assuming p + q > 1 the left side L =df 1 - max{0, p + q - 1} = 2 - (p +q). Since p + q > 1 
then 2 - (p + q) < 1. Hence the right side R =df min{1.2 - (p + q)} = 2 - (p + q) = L (similarly for the 
rest two cases). â¡
It is easily to show the weak operations a and v satisfy the coimnutative. associative, absorptive, idempotent, 
and distributive axioms. Unfortunately the strong conjunction and disjunction are only commutative and associative.
For example, the absorptive axioms are not satisfied for p = â and q = 1 (or 0, depending of the considered 
2
axiom), the distributive axioms are not satisfied for p = â and q = r = â, etc. In fact, the following 
3 
2
properties are satisfied:
(v) 
p & q = q & p.
(vi) 
p Y q = q Y p ,
(vii) 
(p & q) & r = p & (q & r), and
(viii) 
(p Y q) Y r = p Y (q Y r).
According to the associative axiom, the above strong and weak operations can be generalised for a finite number 
of more than two arguments. As an example, the proof of (vii) is illustrated below.
Proof (vii):
The following equality has to be shown:
max{0,max{0,p + q-l}+r-l}=L max{0,p + max{0,q + r - 1} - 1}
Hence the following 32 = 9 cases have to be shown depending on the values of p + q - 1 and q + r -
1 (if they are = 0 or < 0 or also > 0 ). For example, assuming 
p + q - 1 <0 and 
q + r - 1 > 0
the left side L =df max{0,r - 
1} and the right side R =df max{0,p + q + r - 2}. Since 0 < r< I we have: L
= 
0. On the other hand: p + q + r=(p + q) + r < 1 + r < 2. Hence R = 0 and so L = R (the rest cases
can be analysed in an similar way). â¡
The following monotonic property is satisfied
p < q =y> p & r < q & r 
and
p < q =a p a r < q a r.
Post's logics (Emil Leon Post 1897 - 1954)
Let i. m e N (the set of natural numbers) be some parameters such that i < m and m > 2. Consider the 
following family of many-valued logic systems Pâ¢ =df (A, B, nm, am). where the sets A =df {0,1,2, .... m - i - 1, 
m - i, m - i + 1,... . m - 1}, B =df { m - i, m - i + 1, ... . m - 1} Â£ A and the two functions nm and am are 
defined as follows (see: Formal logic. Encyclopedical outline with applications to informatics and linguistics 1987): 

68
nm(x) =df if x = 0 then m - 1 else x - 1 fi and 
am(x,y) =df max{x,y} (for any x. y e A).
The above two functions are functionally complete. It can be observed that n2 and a2 in I',2 correspond to the 
classical negation and disjunction (i.e. logical alternative), respectively.
Example 2. 1
Consider the example system P)' = ({0,1,2}, {2}, n3. a3). In accordance with the above definitions, the following 
two tables for n3 and a3 are shown below.
X
n3(x)
0
2
1
0
2
1
a3(x.y)
0
1
2
0
0
1
2
1
1
1
2
2
2
2
2
Since n3 and a3 are functionally complete in , any other function can be expressed by them. â¡
Example 2. 2
It can be observed that the variables x and y in the above given definitions can be considered as logical 
values of some propositional variables, say p and q, respectively. This is in accordance with our previous style, 
and so nm(x) can be denoted by ~p and am(x,y) by p v q , and vice versa. So, e.g. assuming m = 3, the 
Lukasiewicz's negation and implication connectives can be defined as follows: n^fx) =df 2 
- x and
Cj (x, v) =df min{2,2 - x + y} (multiplying each element in W3 by 2). And hence, e.g. in the Lukasiewicz's 
implication can be expressed as follows: c| (x. v) = a3(a3(n[(x),y),n[(a3(n3(x),n3(y)))). The last obtained 
expression is equivalent to the original one, i.e. min{2,2 - x + y}. In fact, the columns in the corresponding 
two truth tables will be identical (for any (x.y) e {0,1,2}2). The reader is invited to find the expression related 
to n[(x).
The logical values 0, 1, and 2 can be expressed as follows: n3(n3(a3(a3(x, n3(x)),n3(n3(x))))), 
n3(a3(a3(x,n3(x)),n3(n3(x)))) (is the famous Slupecki s t function) , and a3(a3(x,n3(x)),n3(n3(x))), 
respectively. In accordance with the previously used style, e.g. the last expression corresponds to the following 
propositional formula: p v ~ p v â p. â¡
It can be observed that the involutivity property is not satisfied in the case of Post's negation, i.e. 
nm(nm(x)) x (in contradistinction with the Lukasiewicz's negation, see below: t-nonn related systems). 
Obviously, different expressions may correspond to the same function, e.g. g = h (i.e. g(x) = h(x), for any x 
e {0.1.2)). where g(x) =df n3(n3(a3(n3(a3(x,n3(x))),a3(x,n3(x))))) and h(x) =df n3(n3(a3(x,n3(x)))) (the 
corresponding propositional formulae are equivalent and hence we can obtain a thesis).
The following interesting interpretation was proposed by Post. So. any element of the universe A can be 
interpreted as a binary sequence of length (m - 1). Moreover, if some element of a given sequence is equal to 1. 
then all rest elements of this sequence are also equal to 1. And hence, the logical value m - 1 e A is 
interpreted as a sequence of 1's of length (m - 1). The value m - 2 e A is interpreted as a binary sequence 

69
having the first element equal to 0 and the rest (m - 2) elements equal to 1. Similarly, the element I e A is 
interpreted as a binary sequence of length (m - 1) having all elements 0's except the last one, equal to 1. And 
finally, the logical value 0 e A is interpreted as a sequence of length (m - 1) having all elements equal to 0. In 
accordance with the above given interpretation, the distinguished elements of B Â£ A are considered as binary 
sequences of length (m - 1) having less than i 0's. Moreover, it can be observed that the logical values in A 
for different systems Pâ¢ will be also different. And hence, the elements of A (and B Â£ A) will depend on 
the parameter m. And so, more formally the above sets A and B can be introduced as follows: A =df 
{0m,lm,2m, ... , m - i - lm, m - im, m - i + lm, ... , m - lm} and B =df { m - im, m - i + lm, ... , m - lm}, 
respectively.
Example 2. 3
Let A =df {0,1,2,3,4,5}. Consider the system P36 =df ({0,l,2,3,4,5}, {3,4,5}, n6, a6). The following 
interpretation of the elements of the universe A can be obtained:
06
I6
26
36
46
56
(0,0,0,0,0) 
(0,0,0,0,l) 
(0,0,0,l,l) 
(0,0,l,l,l)
(0,l,l,l,l) 
d.1,1,1,1)
the strongest false value
the weakest false value
the weakest true value
the strongest true value
It was shown by Post that any many-valued formula can be presented by a composition of classical logic 
formulae. In fact, according to the above interpretation, any x, y e A can be considered as binary vectors x. y 
e [0.1; where x =df (xi, x2, ... , xm-1) and y =df (yi, y2, ... , ym-1). Let a, k and n be the functions 
corresponding to the classical disjunction, conjunction and negation, respectively. Also assume that z : {0,1} 
1 
{0,1} be a map such that z(x) = z(xi, x2, ... , xm-i) =df a(a( ... (a(a(xi,x2), x3)...), xm-2), xm-1). Hence,
the following interpretation can be obtained for nm and am.
nm(x) = (n(z), a(n(z), k(xi, x2)), a(n(z), k(x2, x3)), ... , a(n(z), k(xm-2, xm-i))) and
am(x,y) = (a(xi, yi), a(x2, y2),..., a(xm-b ym-1)).
Example 2. 4
Let consider the system P/of Example 2.1. We have: A = {03, I3, 23}. Since z = a(xi,x2), the following 
interpretation can be obtained for n3 and a3.
n3(x) = (n(a(xi,x2)), a(n(a(xi,x2)), k(xi, x2))) and
a'(x.y) = (a(xi,yi), a(x2,y2)).
The integers 03, I3 and 23 (i.e 0, land 2 with m = 3) are interpreted as follows: 03 = (0,0), I3 = (0,1) 
and 23 = (1,1). Directly by the above definitions we can obtain, e.g. n3(0) = 2 and also a3(l,2) = 2. By 
using the last interpretation we can obtain for n3 and a3 binary vectors corresponding to the same values. In fact, 
we have: n3(0) =df (n(a(0,0)), a(n(a(0,0)), k(0,0))) = (n(0), a(n(0), 0)) = (l,max{l,0}) = (1,1) = 23. Since 
x = (0,1) and y = (1,1) then in a similar way we can obtain: a3(l,2) =df (a(0,l), a(l.l)) = (1,1) = 23. The 
reader is invited to find the corresponding interpretation for the functions n6 and a6 of Example 2.3. â¡
From historical point of view the philosophical hopes related to Lukasiewicz's logics have not been 
completely satisfied. Doubtless, the Lukasiewicz's three-valued system is now recognised as one of the most 

70
important developments of the past century*. On the other hand, the Post's interpretations initiated the today's use 
of many-valued logics in such areas as: discrete mathematics, in particular combinatorics and (the chain-based) 
Post algebras and their teclmical applications in multiple-valued switching theory (e.g synthesis of multipleÂ­
valued or also quantum logic circuits). And so. all these applications are a confinnation of their own increasing 
importance.
* Early ideas for construction of systems having more than two logical values were presented of the turn of 19th and 20lh centuries, e.g. 
by the following forerunners of multi-valued logics: Hugh MacColl (1837 1909): "logic of three dimensions", Charles S. Peirce (1839 - 
1914): "trichotomic mathematics" based on "triadic logic" and Nikolai Alexandrovich Vasiliev (1880 - 1940): "imaginary non-Aristotelian 
logics". Vasiliev is reckoned also as the forerunner of paraconsistent logic: see Subsection 2.4.
Some other many-valued systems were also introduced, e.g. such as: Sobocihski's logics (using two 
connectives related to the Lukasiewicz's negation and implication), Slupecki's logics, etc (see: The little 
encyclopaedia of logic 1988). In particular, the last system can be considered as the largest finite such one. A 
brief presentation of this system is given below.
Slupecki logics (Jerzy Slupecki 1904 - 1987)
Consider the system S"'=dr (A, B, C. R. S). where i < m and m A 2 (i, m e N). The universe R =<jf 
{1.2, ... , m} and B =df {1.2, .... i} is the subset of distinguished elements. The logical connectives C. R and S 
are defined as follows (for any p, q e A):
1. 
if 1 < p <. i then Cpq = q else Cpq = 1.
2. 
if 1 < 
p <. m - 1 then Rp = p + 1 else Rp = 1 and
3. 
if p = 
1 (2) then Sp = 2 (1) else Sp = p.
The used designation C corresponds to the Lukasiewicz's symbol of implication. It was shown that any S" 
is a semantically and syntactically complete system (see Definitions 1.9 and 1.10 of Subsection 1.6). Moreover, 
with any such system a corresponding set of axioms was associated (a more formal treatment is omitted).
Godel's logics (Kurt Gbdel 1906 - 1978)
The systems Gm and G, are defined by means of the above two truth degree sets: Wm and W.Â« . The 
degree 1 is the only designated truth degree.
The basic connectives of these systems are a conjunction and a disjunction, denoted by a and v , 
respectively. They are defined as follows:
p a q =df min{p.q] and
p v q =df max{p.q}.
The negation and the implication connectives are defined as follows:
~p =df if p = 0 then 1 else 0 fi and
p => q =df if p < q then 1 else q fi.
The Lukasiewicz's and Godel's systems L.,, and GÂ« are directly related to fuzzy logic (see the next 
Subsection 2.2). These two systems together with product logic are defined as basic (Hajek P. 1998). Another 
two many-valued systems are summarised below.
Three-valued systems (Stephen Cole Kleene 1904 - 1994)
Multiple-valued logics have been introduced for many reasons: philosophical, as with Lukasiewicz, or purely 
mathematical, as with Post. Three-valued systems seem to be particularly simple cases, which offer intuitive 

71
interpretations of the truth degrees. Few have been as useful or as natural as the three-valued logics of Kleene 
(1952), introduced for computer science purposes (or at least they would have been if computer science had 
existed at the time).Kleene thought of the third truth value as undefined or undetermined, rather than as 
contingent or of probability â. This third truth degree for "undefined" was introduced in the context of partial 
' 2
recursive functions. So this reading suggests a natural condition: the behaviour of the third truth value should be 
compatible with any increase in information. That is, if the value of some propositional letter, p say, is changed 
from undefined to either true or false, the value of any formula cp with p as a component should never change 
from tme to false or from false to true, though a change from undefined to one of false or tme is allowed (Fitting 
M. 1990). The above condition, originally referred as regularity can be considered in terms of monotonicity in an 
ordering that places undefined below both false and tme. It was observed (Kleene S.C. 1952) among three-valued 
logics satisfying the regularity condition there is a weakest and a strongest logic and also there are several 
intermediate ones. An illustration of Kleene 3-valued systems is given below (Fitting M. 1990).
Most implementations of Pascal require that (classical) truth values of all components of a Boolean 
expression be available before the value of the expression itself is calculated. Consider the propositions p and q. 
In particular, pAq must be given the value "undefined", i.e. Â±, if either p or q has the value Â±. Otherwise 
p a q behaves classically. Similarly for v and ~ . This is the weak Kleeene logic. The third value Â± can be 
interpreted, e.g. as a nontennination of a procedure call calculating some Boolean expression (Fitting M. 1990) or 
also as an "indeterminate" value of a signal line (Breuer M.A. and Friedman A.D. 1977).
On the other hand, one can imagine a language allowing a degree of parallelism, in which the calculation of a 
value for p a q proceeds as follows. Values for p and q are calculated in parallel, if either p or q turns out 
false, work on the other is halted and p a q is assigned the value false on the grounds that the value of the other 
won't matter. If one of p or q turns out true (say p), work must continue on the other component (q) because 
its value now is critical. And so, the value of p a q is whatever the value of q turns out to be. In such a system p 
a q is true if both components are true, p a q is false if one component is false and p a q is Â± otherwise. This 
means p a q is Â± if one of p or q is true but the other is Â± , or if both are Â± . Similarly for v and ~ . This 
is the strong Kleeene logic.
There could also be a sequential evaluation of p a q, say from left to right, so that p is evaluated first. If p 
evaluates to false, work stops and p a q is assigned false. If p evaluates to true then q is evaluated, and its 
value becomes the value assigned to p a q. This is an asymmetric logic, e.g. if p is false but q is 1 . p a q 
evaluates to false, but q a p evaluates to Â± . This logic is also regular in Kleene's sense, and its connectives 
correspond to the AND, OR and NOT of Lisp (also the logic of Prolog with its left-right, top-down evaluation).
The importance of many-valued logics in computer science is generally recognised. They have been used in 
artificial intelligence (Ginsberg M.l. 1988), logic programming (Fitting M. 1985), algebraic specification of data 
types (Pigozzi D. 1990), epistemic structures (to represent the generally many-valued truth values of propositions 
about the external world: Muravitsky A.Y. 1994), digital circuits (e.g. Breuer M.A. and Friedman A.D. 1977, Lu 
H. and Lee S.C. 1985, Muzio J.C and Wesselkamper T.C. 1986), etc. As an illustration, an application of threeÂ­
valued (strong Kleeene) logic to hazard detection is given below.
Hazard detection using three-valued algebra
One of the most coimnon causes of circuit malfunction is due to circuit delays. Delay is an inherent property 
of all circuit elements and interconnections. In combinational circuits one form of malfunction caused by delays 
associated with elements is referred to as a hazard. A simple model for gate delays is shown in Figure 2.1 below, 
where only pure delay elements are considered, i.e. elements whose output value at time t is equal to its input 
value at time (t - d) and gate Gi have delay di (here Gf is assumed to have 0-delay, i = 1,2,3).
Suppose that the inputs at some time ti are xi = x2 = x3 = 1 and at time t2 > ti, xi changes to 0. 
Ideally, the output of the circuit should be 1 both before and after the change. However, if di < d2, even by a 
very small amount s, the output may contain a 0-pulse. Hence, due to delays a combinational circuit may 
produce a transient error or spike. This is called a hazard (strictly: static 1-hazard. i.e. 0-pulse in a stable 1- 
signal). Such an error, if applied to the input of a flip-flop, may result in a permanent incorrect state. In 

72
synchronous circuits this possibility is eliminated by ensuring that no clock pulse occurs until the combinational 
circuit stabilises. In asynchronous circuits hazards cannot be masked in this way and they must be eliminated by 
proper design, or the circuit must be designed to operate properly in spite of the presence of transients caused by 
hazards (Breuer M.A. and Friedman A.D. 1977).
Figure 2.1 A gate delay model
One of the first hazard detection procedures was given by Eichelberger E.B. (1965). It was observed that 
when a signal line changes values, it goes through a transition period where its value may be interpreted by each 
of its loads, independently, as either a 0 or 1. To denote this undefined value the symbol 'u' was used by Breuer 
M.A. and Friedman A.D. (1977), to represent the fact that the value is unknown (Eichelberger used the symbol ' 
â ' rather than 'u': here 'Â±' is denoted by u). And so, it was developed a ternary algebra ({0,u,l};0,l; +, â¢ , -), 
2
where +, â¢ correspond to v, a in the strong Kleene logic (the same as the weak disjunction and the weak 
conjunction in the Lukasiewicz's system) and u =df u (it can be observed that any multi-valued logic involves 
corresponding algebraic system).
Consider a combinational circuit C having input signals x =<jf (xi, x2, .... xn). Let the current input vector be 
x(t) =df (ai, a2, .... an) and the next input vector be x(t + 1) =df (ci, c2, .... cn), where ai.Ci e {0,1}. Assume 
now that x(t +) =df (bi, b2, .... bn) is a pseudo input vector such that bi =df if a- = Ci then a; else u (for any 
i). Let the response on line z in C to the input sequence x(t)x(t +)x(t + 1) be z(t)z(t +)z(t +1). The following 
necessary and sufficient condition was shown.
Proposition 2.2
Let X =df x(t)x(t +)x(t +1) be an input sequence for C and Z =df z(t)z(t +)z(t + 1) be the corresponding 
response to X. Then a static hazard on line z exists iff Z e {OuO, lul}. â¡
Example 2. 5
Consider the circuit C of Figure 2.1. Assume that x(t) =df (1,1,1) and x(t+l) =df (0,1,1). Hence x(t+) = 
(u.1.1) and X = (1,1,1) (u. 1.1) (0,1,1). Then Z = (l)(u)(l) or for simplicity lul (here u + u = u). We have 
a static 1-hazard. â¡
In accordance with the last example, assuming two OR gates (Gi, G2) and one AND gate (Ga), a static 0- 
hazard can be obtained for x(t) =df (0,0,0) and x(t + 1) =df (1,0,0). Then Z = OuO. Moreover, the above - 
considered model can be extended in the case of asynchronous sequential circuits (by using an appropriate 
defined iterative array model: this is omitted).
The above proposition was used in the logic level simulation domain*. Systems of many-valued logic were 
also used in circuit design and test generation for m-logic circuits, e.g. (Lu H. and Lee S.C. 1985, Tabakow LG.
' Logic simulation is the process of building and exercising a model of a digital circuit on a digital computer. By exercising we mean the 
evaluation of signal values in the modelled circuit as a function of time for some applied input sequence, there are two main applications for 
a logic simulator: design oriented simulation, i.e. the evaluation of a new design, and fault analysis simulation. In the first case the logic 
designer is interested in testing for logical correctness, as well as timing and signal propagation characteristics. He may desire information 
related to race, hazard and oscillator)- circuit conditions. In the second case the test engineer or logic designer may desire information related 
to what faults are detected by a proposed test sequence, what is the operational characteristic of the circuit under specific fault conditions, or

73
1993) . Some interesting and practical uses of many-valued logic have been done. e.g. such as: Intel's flash 
memory with more than two levels of logic, applications to standard binary logic synthesis and optimisation, 
highly integrated devices, programmable gate arrays, resonant tunneling diodes, vlsi chips, biocomputing, 
variable-valued logic, Lukasiewicz's machines to control mini-robots, etc.
Dunn /Belnap's* four-valued system
Figure 2.2 A double Hasse diagram for 
the four-valued system
Relevance logics are non-classical logics (called ''relevance logics" in North America and "relevant logics" in Britain 
and Australasia) these systems have been developed as attempts to avoid the paradoxes of material and strict 
implication (e.g. such as: p => (q => p). p =a (~ p =a q), (p q) v (q => p), (p => q) v (q => r), 
p a ~ p =a> q, p =>> (q v ~ q), , p =>> (q =a> q), etc.)t Relevant logicians claim that what is unsettling 
about these so-called paradoxes is that in each of them the antecedent seems irrelevant to the consequent. In 
addition, relevant logicians have had qualms about certain inferences that classical logic makes valid. They have 
attempted to construct logics that reject theses and arguments that commit "fallacies of relevance" (Mares E.D. 
1998). Hence, any such system assumes a semantical relationship between the antecedent and consequent of the 
considered true implication. A shift in emphasis from programming languages to databases makes it natural to 
move from a three to a four-valued logic. This particularly interesting many-valued system was the result of 
research on relevant logic but it also has significance for computer science applications (Fitting M. 1990, 
Gottwald S. 2000). The following truth degree set is assumed (Gottwald S. 2000): {0, {Â±},{T},{Â±,T}}. The
what degree of fault resolution is obtainable with a given test sequence? However, for many simulation applications two logic values (0.1) are 
not sufficient, e.g. in ambiguity delay processing, circuit race or hazard detection, etc.(Breuer M.A. and Friedman A.D. 1977).
' Nuel D. Belnap. Jr., bom 1930 and J.Michael Dunn, bom 1941.
t In general, these logics can be considered as a kind of paraconsistent logic systems: for a more formal treatment: see Subsection 2.4: 
Relevance logic. A more formal definition of strict implication is given in Subsection 2.3 (see: Modal logic).

74
truth degrees can be interpreted as indicating (e.g. wrt a database query for some state of affairs, in short: soa) 
that there is: no information concerning this soa, information saying that the soa fails, information saying that 
the soa obtains, and conflicting information saying that the soa fails as well as obtains.
In accordance with the above given double Hasse* diagram (see: Figure 2.2), the set of truth degrees has two 
natural (lattice) orderings: a truth ordering (in short: A t) which has {t} on top of the incomparable degrees 0, 
{Â±,T}, and has {J.} at the bottom and also an information ordering (or: knowledge ordering, denoted by A k ) 
which has {Â±.t} on top of the incomparable degrees {Â±},{t}, and has 0 at the bottom. The truth degree 
functions for the conjunction and disjunction connectives can be defined in an unique way by using the 
corresponding inf- and sup-operations under A t . A negation is determined by a truth degree function which 
exchanges the degrees {Â±} and {t}, and which leaves the degrees {Â±.t} and 0 fixed. The definition of 
implication connective and the choice of the designated truth degrees is depending on the used application 
(computer science or relevant logic). This is still an open research topic.
Direct-product systems
The truth degrees can be interpreted as different aspects in the evaluation of a given proposition. By assuming 
e.g. k different aspects, the truth degrees may be chosen as k-tuples of values which evaluate the single aspects. 
The compound truth degree function over such k-tuples can be defined "componentwise" from truth degree (or: 
truth-value) functions for the values of the single components. In this manner, k logical systems may be 
combined into one many-valued product system. In this way. the truth degrees of Dunn/Belnap's 4-valued system 
can be considered as evaluating two aspects of soa related to a database: whether there is positive information 
about the truth of this soa or not. and whether there is positive information about the falsity of this soa or not. 
Both aspects can use standard truth-values for this evaluation. In this case, the conjunction, disjunction, and 
negation of Dunn/Belnap's 4-valued system are componentwise definable by conjunction, disjunction, and 
negation of classical logic, respectively. And so. this 4-valued system is a direct-product of two copies of 
classical two-valued logic (Gottwald S. 2000). A more formal treatment of topics such as: algebraic systems, in 
particular lattices, Cartesian (or: direct-) products of such systems, logical bi lattices . etc., is omitted in this part 
of study (will be presented in Part 11 of this book, e.g. see MacLane S. and Birkhoff G. 1967, Kerntopf P. 1967, 
Ginsberg M.L. 1988, Bronstein l.N. et al. 2001, etc.).
2.2. Fuzzy logic
Consider a set of propositions. To any element of this set may be assigned some degree of truth, which may 
be "absolutely true", "absolutely false" or some intermediate truth degree', a proposition may be more true than 
another one. And so. any proposition can be represented with some degree of truthfulness and falsehood. In the 
analogy to various definitions of operations on fuzzy sets (such as: intersection, union, complement, etc.) one 
may ask how propositions can be combined by logical connectives (such as: conjunction, disjunction, negation, 
etc.). And also, if the truth degree of a composed proposition (or equivalently: propositional formula) is 
determined by the truth degrees of its components, i.e. if the connectives have their corresponding truth functions 
(like truth tables of classical logic). Saying "yes" (which is the mainstream of fuzzy logic) one accepts the truthÂ­
functionality principle. And this makes fuzzy logic to something distinctly different from probability theory since 
the latter is not truth-functional. In fact, the probability of conjunction of two propositions is not determined by 
the probabilities of those propositions (Hajek P. 2002).
The following two main directions in fuzzy logic can be distinguished: fuzzy logic in the broad sense and 
fuzzy logic in the narrow sense, i.e. in senso stricto. In the broad sense (older, better known, heavily applied but
' Helmut Hasse (1898 - 1979)
t A bilattice is a system .z =# (B, <a, At, ~ ) such that B is a non-empty set containing at least two elements, (B,At), (B_At) are 
complete lattices, and ~ is a unary operation on B that has the following properties: a At b => ~a^t~b, a<tb => -a.i^-b, and âa = 
a (for any a,b 6 B: see Ginsberg M.L. 1988).

75
not asking deep logical questions) this logic serves mainly as apparatus for fuzzy control*, analysis of vagueness 
in natural language and several other application domains. It is one of the techniques of soft computing, i.e. 
computational methods tolerant to suboptimality and impreciseness (vagueness) and giving quick, simple and 
sufficiently good solutions.
* traditional control systems are based on mathematical models in which the control system is described using one or more differential 
equations that define the system response to its inputs. Such systems are often implemented as "proportional-integral-derivative (FID)" 
controllers. 1'hey are the products of decades of development and theoretical analysis, and are highly effective. If PID and other traditional 
control systems are so well-developed, why bother with f uzzy control? It has some advantages, hi many cases, the mathematical model of the 
control process may not exist, or may be too "expensive" in terms of computer processing power and memory, and a system based on 
empirical rules may be more effective. Furthermore, tiizzy logic is well suited to low-cost implementations based on cheap sensors, low- 
resolution analogue-to-digital converters, and 4-bit or 8-bit one-chip microcontroller chips. Such systems can be easily upgraded by adding 
new rules to improve performance or add new features. In many cases, tiizzy control can be used to improve existing traditional controller 
systems by adding an extra layer of intelligence to the current control method. Hence, the broad sense fuzzy logic has become a common 
buzzword in machine control. However, the term itself inspires certain scepticism, sounding equivalent to "half-baked logic" or "bogus logic". 
Some other nomenclature might have been preferable, but it's too late now. and this fuzzy logic is actually very straightforward. Ihis logic is 
a way of interfacing inherently analogue processes, that move through a continuous range of values, to a digital computer, that likes to see 
things as well-defined discrete numeric values (Goebel G. 2003).
t Karl Menger (1902-1985)
In accordance with T 1.19 and CE (the law of transposition or contraposition of equivalence) we have: p => q <=> ~ (p a ~ q). 
Let e.g. x' =df 1 - x be the Lukasiewicz's fizzy negation and x o y =df min{x,yj be the Zadeh's t-nonn. Hence, the following S- 
implication can be obtained: x => y =# 1 - min{x, 1 - y) = max{l - x, y) (the logical value of this implication: the proof of the last 
equality is left to the reader). Obviously, it is possible also the use of other frizzy negations and / or t-nonns. It can be observed that 
sometimes the above two S- and R-implications may coincide, e.g. in L,-BI. (and hence in L-BL, assuming Yager's fuzzy negation: see 
Corollary 2.4 of this subsection).
Basic fuzzy propositional logic (called also: basic many-valued logic, in short: BL) is symbolic logic with a 
comparative notion of truth developed fully in the spirit of classical logic (syntax, semantics, axiomatisation, 
truth-preserving deduction, completeness, etc. both propositional and predicate logic). It is a branch of mayÂ­
valued logic based on the paradigm of inference under vagueness. BL is a strict fuzzy logic system using the 
logic of continuous triangular nonns.
Triangular norms (in short: t-norms) are a generalisation of the classical two-valued conjunction. They were 
originally introduced by Menger K. (1942)^ in the framework of the probabilistic (statistical) metric spaces as a 
generalisation of the classical triangle inequality for ordinary metric spaces.This paper was followed almost 
immediately by a paper of Wald A. (1943). The next investigations (Schweizer B. and Sklar A. 1960. 1963) were 
related with axiomatic of these nonns. A more detailed treatment was given in (Schweizer B. and Sklar A. 1983. 
2005). For infinite valued systems with truth degree set W ,. =dt [0,1], the influence of fuzzy set theory (Zadeh 
L. A. 1965, 1974) quite recently initiated the study of a whole class of such systems of many-valued logic. In 
fuzzy logic systems, the basic aggregation operations are perfonned by the logical connectives AND and OR 
which provide point wise implementations of the intersection and union operations. It has been well established 
in the literature that the appropriate characterisations of these operations in the multi-valued logic environment 
are the triangular norm operators (Hajek P. 1998). In general, the most of the studies concerning Hajek's system 
BL focus attention on methodological problems such as compactness, consistency, decidability or satisfiability of 
t-tautologies. various proving techniques or also introducing some new t-norms. e.g. (Hajek P. and Godo L. 
1997, Klement. E.P. and Navara M. 1999, Navara M. 2000, Cintula P. and Navara M. 2004, etc.).
The basic fizzy propositional logic is a relatively young discipline, both serving as a foundation for the fuzzy 
logic in a broad sense and of independent logical interest, since it turns out that strictly logical investigation of 
this kind of logical calculus can go rather far (Hajek P. 1998). It is broadly accepted that t-norms (dually, t- 
cononns) are possible truth functions of fuzzy conjunction (of fuzzy disjunction). The best-known candidate for 
fuzzy negation is the Lukasiewicz's negation x' =df 1 - x. However, some other notions, e.g. such as Sugeno's 
fuzzy negation or Yager's fuzzy negation are also applicable (Bronstein LN. et al. 2001: see below). The fuzzy 
implication connective is sometimes disregarded but is of fundamental importance for fuzzy logic in the narrow 
sense. A straightforward but logically less interesting possibility is to define implication from disjunction and 
negation or conjunction and negation using the corresponding theses of classical logic T 1.15 and T 1.19, 
respectively (see Subsection 1.3). Such implications are called S-implications^. In fact, more useful and 
interesting are the so-called R-implications (any such implication is specified as a residuum with respect to the 
used t-nonn).

76
There exist two classical approaches in constructing of the propositional calculus: the axiomatic approach and 
the approach from assumptions (Slupecki J. and Borkowski L. 1967). In general, the actual research 
methodology and extensions have been related to the Hajek's axiomatic approach in constructing of the fuzzy 
propositional calculus.
The subject of this subsection is fuzzy propositional calculus. The proposed approach is related to the infinite 
valued Lukasiewicz's system, recognised as one of the most important basic fuzzy propositional logics (in 
common with Godel's and product logic systems, in short: L-BL, G-BL and tt-BL). There are first introduced 
some basic notions and definitions concerning t- norms and t-cononns. A proof method for fuzzy propositional 
logics based on natural deduction is next presented (Tabakow I.G. 2006). This approach seems to be more 
attractive, more simpler and natural in practical use than the axiomatic one. Next, a new t-nonn and t-conorm are 
introduced and then it is defined a generalised Lukasiewicz's system, denoted by LÂ«-BL (a > 0), where the 
previous one becomes a particular case with a = 1. The system LÂ«-BL is presented in two versions, called first 
and second order LÂ«-BL, depending on the used continuous fuzzy negations (Lukasiewicz's one or the more 
general Yager's one, respectively). And hence, in accordance with the generalised De Morgan's laws, two 
possible t-cononns are obtained. The used fuzzy implication is specified as a residuum of the above t-nonn 
(which is continuous) and hence, the last implication is unique. This subsection is an extension of the previously 
study (Tabakow I.G. 2006). As an illustration, various assumptional proofs and conesponding derived rules are 
given.
Triangular norms and conorms: basic notions and definitions
The t-norm operator (called also: fuzzy t-norm) provides the characterisation of the AND operator. It is a 
binary operation Â®: [0,l]2 
[0,1] with the following properties (for any x,y,u,v e [0,1]: Hajek P. 1998,
Klement, E.P. and Navara M. 1999, Bronstein LN. et al. 2001, etc.):
x 0 y = y 0 x 
xÂ®yiuÂ®vforxiu and y A v
x 0 (y 0 z) = (x Â® y) Â® z 
xÂ®l=lÂ®x=x
commutative 
monotonic 
associative
has 1 as unit element
The dual t-conorm operator (called also: fuzzy t-conorm or fuzzy s-norrn), characterises the OR operator.lt 
is a binary operation Â©: [0,l]2 
[0,1] having properties as follows (for any x,y,u,v e [0,1]):
xÂ®y = y Â© x
xffiy>uffivforxku and y 2 v
x Â® (y Â® z) = (x Â® y) Â® z
xÂ©0 = 0Â©x = x
commutative 
monotonic 
associative
has 0 as unit element
In accordance with the monotonic property, any t-norm is non-decreasing in both arguments having 1 as unit 
element and 0 as zero (or null) element, i.e. x 0 0 = 0 (for any x e [0,1], similarly for any t-conorm with 
respect to 1 as a zero element). In fact, the system sT =df ([0,1] : 1,0 ; Â®) is an Abelian* algebraic system with 
the above monotonic property, similarly for TS =df ([0,1] ; 0 , 1 ; Â®), where 1, 0 and 0, 1 are the constants of 
these two algebraic systems. Obviously, the systems jv and TS can be considered as Abelian monoids1' with 
respect to the constants 1 and 0, respectively.
Any algebraic system ji' =df (A ; o) is said to be groupoid. where 'o' is a binary operation, i.e. o : A2â> A. Tire system se" is
Let or'-jf (A ; e ; o) be an algebraic system having e e A as unit element and 'o' as a binary operation. If 'o' is associative
In general, the notion of (continuous) fuzzy negation can be introduced as a function f : [0,1] 
[0,1] with
the following properties (for any x, y e [0,1], Bronstein LN. et al. 2001):
f(0) = 1 and f(l) = 0
x < y =} f(x) > f(y)
the terminal point values 
monotonicity
Abelian if o is commutative (Niels Henrik Abel: 1802- 1829).
then or' is said to be monoid.

77
f(f(x)) = x 
involutivity
f(x) is a continuous function continuity (for any x e [0,1])
It can be observed that a very simple function satisfying the above properties is the classical Lukasiewicz's 
negation fL(x) =dt 1 - x. Some generalisations were also introduced, e.g. such as: Sugeno's fuzzy negation
*
 fs(x)
* Michio Sugeno, bom 1940.
Ronald R. Yager, bom 1941.
* Named after Archimedes (287 b.c. - 212 b.c. axiom v of Archimedes) and first used in some algebraic systems by Otto Stolz (1842 - 
1905). hr general, this property is related to the impossibility of having infinitely large or infinitely small elements.
Â§ More generally, each continuous Archimedean t-norm can be obtained by using an increasing (decreasing) bijection called a 
multiplicative (additive) generator, which is not uniquely determined (public domain).
" The set of idempotents of each continuous t-norm is a closed subset of [0.1] and its complement is a union of countable many non 
overlapping open intervals. The restriction of the t-norm to any such interval (including its endpoints) is Archimedean. And hence, the 
obtained restriction is isomorphic either to the Lukasiewicz's t-norm or to the product t-norm. for such x. y that do not fall into the same 
open interval, the t-norm evaluates to the min{x,y). These conditions are known as the Mostert-Shields theorem. And hence any continuous t- 
nonn is decomposable (public domain). Another characterisation theorem was given by Schweizer and Sklar (this is omitted here: see Larsen 
H.L. 1998).
1 â X 
1 /ft
=df -------â, where X e (-1, co) or also Yager's fuzzv negation? fY(x) =df (1 - x") , where a e =df
1 + Lx
(0, oo). For example, the involutivity property for fx(x) is presented as follows:
1 â y 
1 + Xx x â¢ (X + 1)
Let y =df fs(x). Then fs(y) = ------ â = ----------;-------- = ------------- = x. Similarly for the Yager's
! + Xy 1 + x.X ~ x A + 1
1 + Xx
fuzzy negation fY(x) (this is omitted).
It can be observed that the continuity property is not satisfied for the following fuzzy negation, used in G-BL 
and rt-BL (HajekP. 2002): x' =df if x = 0 then 1 else 0 fi.
Let x' =df f(x) be a continuous fuzzy negation. So any t-conorm is dual to the corresponding t- 
norm under the order-reversing operation which assigns x' to x on [0,1], And hence, for a given t- 
norm the complementary conorm is defined as follows (a generalisation of De Morgan's laws): x Â© y 
=df(x'Â®y')'-
As a continuous fuzzy negation may be selected any one. But the most important representatives are as 
follows: the Lukasiewicz's fuzzy negation x' =dfl-x (assumed in L-BL, i.e LÂ«-BL with a = 1) and Yager's 
l/tt
fuzzy negation x' =df(l - x") (which is a generalisation of the previous one with a = 1), where a > 0. 
Since t-conorms are "negation oriented", we have the possibility of constructing two different versions of the 
generalised Lukasiewicz's BL system. The last two versions are presented below, where traditionally the 
Lukasiewicz's fuzzy negation is first assumed.
We shall say that Â® is continuous t-norm if it is continuous as a function, i.e. V s > 0 V xi, x2, yi, y2 e [0,1] 
3 8 > 0 ( |xi - x2| < 8 a |yi - y2| < 8 => | xi Â® yi - x2 Â® y2 | < e ). The left- and right-continuity can be 
introduced in a similar way (this is omitted). And Â® is said to be an Archimedean t-norm if it has the 
Archimedean property?. i.e. V x, y 6 (0,1) 3 n e N (x11 < y). Any x is nilpotent if 3 n e N ( x" = 0), where x11 
denotes xÂ®xÂ®... Â®x (n times) and N is the set of natural numbers. An element x is idempotent if xÂ®x = 
x. Any continuous t-norm is Archimedean if it has no idempotents between 0 and 1, i.e. there is no any 
idempotent x e (0,l)s\ And this t-norm is strict if 0 is its only nilpotent element, i.e. if xÂ®x > 0 for all 
x >0. Continuous Archimedean t-nonns which are not strict are called nilpotent. For example, the product t- 
norm. i.e. x Â® y =df xy is strict and the Lukasiewicz's t-norm x Â® y =dt max{0, x + y - 1} is nilpotent. All 
nilpotent t-norms are isomorphic with the Lukasiewicz's t-norm being their prototypical representative. 
Similarly, all strict t-norms are isomorphic with the product t-norm". The partial ordering of t-norms can be 

78
introduced in an usual manner, i.e. Â®i < Â®2 Odf V x, y e [0,1] (x Â®i y < x Â®2 y). The point wise larger t- 
nonns are sometimes called stronger. It was observed that min{x,y} 2. xÂ®y and max{x,y} < xÂ®y (for any 
x, y e [0,1] and t-nonn / conorms Â® and Â©). It can be observed the linear convex combination of two different 
t-nonns is not necessary t-nonn, e.g. for x Â®i y =df min{x,y} and xÂ®?y =df xy the obtained linear convex 
combination Z( x Â®i y) + (1 - Z)( x Â®2 y) is not associative ( X e [0,1] ). It is desired sometimes to be 
introduced some operators which are interpolating between t-nonns and t-cononns. Any such operator is said to 
be compensating (Bronstein LN. et al. 2001), e.g. the /-operator xOxy =,iV-xy + (1 - /.)(x+ y- xy) and the 
y-operator. xOYy =df (xy)' - (x + y - xy)7 (Lye [0,1]). In general, these operators are also not associative (a 
more fonnal treatment is omitted).
Some example t-nonns with the conesponding dual t-cononns are given in the next table (the parameter 
a e K: Bronstein I.N. et al. 2001)
*.The
 aggregations modelled by Zadeh's t-nonn and t-cononn are sometimes 
refened as the pure AND, and the pure OR, respectively.
* Sometimes there are required additional interpolating operators between t-nonns and t-cononns: see Subsection 7.1.
Author
t-norm
t-conorm (s-norm)
Zadeh
xÂ®y =df min{x,y}
xÂ®y =df max{x,y}
Lukasiewicz
x Â® y =df max{0, x + y - 1}
x Â© y =df min{ 1, x + y }
algebraic 
product and 
sum
xÂ®y =df xy
xÂ©y =dfx + y- xy
drastic product 
and sum
x Â® y =df if (x = 1) or (y = 1) then min{x,y} 
else 0 fi
x Â©y =df if (x = 0) or (y = 0) then max{x,y} 
else 1 fi
Hamacher 
(oc^O)
x Â® y
xy
x Â®y
x + y- xy-(l - a)xy
"df
a + (l-a)(x + y-xy)
"df
1 - (1 - a)xy
Einstein
xy
xÂ®y -df
â¢ 
l + (l-x)(l-y)
x + y 
xÂ®y -df
1 + xy
Frank 
(a > 0, a 1)
xÂ®y =df loga
(ax-l)(ay-l)
1 +------------------------
a-1
xÂ®y =df l-loga
(a1-x - l)(a'y -1)
1 +------------------------------
a -1
Yager 
(a > 0)
xÂ®y =df 1-min{l, ((1-x)" + (1-y)")1/a}
xÂ®y =df min{l,(x"+ y)")1Z"}
Schweizer 
(a > 0)
x Â® y =df max{0, (x " + y " - 1)'1/a}
xÂ®y =df
l-max{0,((l-x)" + (1-yF- 1)'1Z"}
Dombi
(a > 0)
xÂ®y =df â 
à¥¤ 
à¥¤ 
5 ____
1 
1 V
^1
+
& _____
1 
~
1 
1 X
~ 1
1_________
1
4Â­
X_____ _____ â¢'
-1
xÂ®y =df .
- 
-i l/a '
z 
x az 
\ a
1 + 1 â1 +1 
1
<i-x ) vi - y )
-1
>
Weber 
(a>-l)
X Â® y âdf max{ O, (1 + a)(x + y â 1) }
X Â© y âdf min{ 1, x + y + czxyi

79
Dubois
xy
x + y - xy - min{x, y, (1 - a)}
(0Â£a<l)
x Â® v -df
max{x, y, a}
xÂ©v -df
max{(l-x),(l-y),a}
A proof method for fuzzy propositional BL-system based on natural deduction
Next we shall say that Â® and Â© are t- conjunction and t- disjunction, respectively. The fuzzy implication 
connective is sometimes disregarded but it is of fundamental importance for fuzzy logic in the narrow sense. Next 
only continuous t-nonns are considered as good candidates for truth functions of a conjunction. Each t-nonn 
determines uniquely its corresponding implication =Â£> (not necessarily continuous) satisfying for any x.y.z e 
[0,1] the following crucial adjointness condition', z Â£ (x => y) iff x Â® z Â£ y. For all those t-nonns which have 
the sup-preservation property, i.e. x Â® sup, y; = sup, (x Â® yd
*  there is a standard way to introduce the related 
implication connective with a truth degree function. In fact, any t-nonn based fuzzy implication can be 
interpreted as a binary operation over [0,1] and specified as a residuum of the corresponding t-nonn (called also 
R-implication). It was shown that this residuum is unique if the considered t-nonn is at least left-continuous. In 
general, the logical value of any R-implication can be defined as follows: x => y =df sup{z e [0,1]/x Â® z < 
y} (for any x, y e [0,1] and any left-continuous Â®: Hajek P. and Godo L. 1997, Hajek P. 1998, Navara M. 
2000, Gottwald S. 2000, etc.). Also, the implication and negation connectives are assumed under
Let Â® be an arbitrary left-continuous t-nonn and x < y. In accordance with the monotonic property, we can 
obtain: x Â® z < y Â® z and y Â® z Â£ y Â® 1 = y. Then x Â® z < y (for any x, y, z e [0,1] and x Â£ 
y). In general, the following well-known property of the logical value of any R-implication is satisfied: x => y 
= 1 iff x Â£ y.
Below we shall use the same names for the primitive and/or derived rules as in the case of classical 
propositional calculus (see Section 1). Some additional inference rules of the first-order predicate logic calculus 
are also used, e.g. such as: the rule of negating an universal quantifier (denoted by NV), the rules of omitting an 
universal and an existential quantifiers (denoted by: -V and -3. respectively: see Subsection 3.3 of the next 
Chapter II).
In the fuzzy propositional calculus any formula is constructed by using the following three kinds of symbols: (i) 
propositional variables (denoted by p, q, r, s,...,pi,p2,...), (ii) some fuzzy connectives (depending on the used 
system), e.g. such as: the Lukasiewicz's (strong) fuzzy conjunction, fuzzy disjunction, implication, logical 
equivalence, and negation, denoted by: &, Y, =>, o, and ~, respectively or the Godel's (weak) fuzzy 
conjunction, fuzzy disjunction, implication, logical equivalence, and negation, denoted by: a, v, =>. o, and ~, 
respectively or also the product logic's fuzzy conjunction, fuzzy disjunction, implication, logical equivalence, and 
negation, denoted by: â¢ ,V, =Â£>, o, and ~, respectively and also (iii) parentheses (left: '(' and right: ')' ). The 
truth and falsity constants, corresponding to 'T' and 'F' in the classical case, are denoted by 1 and Q (or also by 
T and Â± respectively). To minimise the number of used parentheses in an expression, some priorities for logical 
connectives can be introduced. The following convention is assumed below (Slupecki J. and Borkowski L. 
1967): ~, Â®, Â®, =Â£>, o (i.e. the symbol of negation binds more strongly than the symbol of t-conjunction, the last 
binds more strongly than the symbol of t-disjunction, etc.), where Â® e {&, a, â¢} and Â© e {Y, v, v} are 
depending on the used system (L-, G- or tt-BL). It can be observed that the fuzzy connectives related to L- and 
G-BL are the same as in the case of many-valued logic systems (see Subsection 2.1) but extended to the whole 
interval [0,1], The negation connective in it-BL is the same as in G-BL. The fuzzy conjunction and disjunction
' Let (X, L) be a partially ordered set. An element a e X is said to be an upper bound of Y Â£ X iff a C y (for any y 6 Y). Tire 
upper bound a of Y is said to be a least upper bound (i.e. supremum ) of Y iff for any upper bound a'of Y: a' i a . Tire least upper 
bound of Y is denoted by sup(Y) (also supY or sup, t Y y ) â  The notions of a lower bound of Y Â£ X , a greatest lower bound (i.e. 
infimum) of Y and inf(Y) can be introduced in a similar way. e.g. for Y "ar {- 1. + 1/2. - 1/3, + 1/4, ... , (- l)'7n, ...) we can obtain: 
inf(Y) = - 1 and sup(Y) = 1/2. The used term 'sup-preservation" is related to the well-known distributive property wrt an algebraic 
system. If Y has a supremum, then the supremum is unique. Let Si and s2 are two different suprema of Y (aip).We have: Si < s2 and s2 < 
Si. Since < is weak antisymmetric it follows that Si - s2.

80
connectives in rt-BL are defined as follows: xy (the usual arithmetic product) and x v y =<jf x + y - xy 
(called algebraic or "probabilistic" sum). The following proposition is satisfied.
Proposition 2.3
The sup-preservation property is satisfied for any a e [0,1] and Â® e {a, &, â¢}.
Proof:
(i) 
Let Â® =df a. We have: aÂ®supxe[o,i] x = inin{a, supx e [o,i] x} = min{a. sup[0,l]} = min{a.l} = a. 
On the other hand supx e [o,i] (a Â® x) = sup{x e [0,1] / inin{a,x}} = sup{min{a.O}, ..., inin{a,l}} = sup[0,a] = 
a.
(ii) 
For Â® =df & we can obtain: aÂ® snpxe[o,i] x = max{0, a + supxe[o,i] x - 1} = max{0, a +1-1} 
= max{0,a} = a. The right side supx e [o,i] (a Â® x) = sup{x e [0,1] / max{0, a + x - 1}} = sup{ x e [0,1]/ 
max{0, a - (1 - x)}} = sup{a - 1,..., a} = sup[a - 1, a] = a (for 0 < x <, 1 we have a-lia- 
(1 - x) a).
(iii) Assuming Â® =df â¢ We have: aÂ®snpxe[o,i] x = a-snpxe[o,i] x = a-1 = a. In a similar way the right 
side supx e [o.i] (a Â® x) = sup{x e [0,1] / a â¢ x} = sup{a â¢ 0,..., a â¢ 1} = sup[0,a] = a. &
The next example is an illustration of the notion of R-implication introduced in the Hajek's system BL.
Example 2. 6 (L-BL, G-BL and 7t-BL implications)
(i ) Let xÂ®y =dfx&y = max{0,x + y - 1}. So the implication in the Lukasiewicz's logic system with the 
strong conjunction '&' can be defined as follows: x => y =df if x < y then 1 else 1 - x + y fi (or 
equivalently: x => y =df min{l,l - x + y}).
(ii ) Let xÂ®y =dfXAy = min{x,y}. In the case of the Godel 's logic system with the weak conjunction 'a' we 
have: x => y =df if x i y then 1 else y.
(iii ) Let now x Â® y =df x â¢ y = xy (the usual arithmetic product). So, for the product logic (in short: n-logic) 
we can define: x => y =df if x < y then 1 else y / x (is the usual arithmetic division: since a > b then a + 
0). â¡
The logical value of the fuzzy equivalence (a => b) Â® (b => a) is equal to 1 for a = b (L-, G-, rt-BL) 
. 
, 
min{a,b]
and equal to: 1 - max{a,b} + min{a,b} = 1 - a-b or min{a,b}, or also ------ -ââ, for a + b
max{a,b]
(depending on the considered system: L-, G- or rt-BL, respectively). The absolute value | a - b | corresponds to 
the value of the L-BL fuzzy difference a b defined as follows: ~ (a o b). And this fuzzy difference 
coincides with the notion of M-difference given by LuH. and Lee S.C. (1984).
In accordance with the associativity axiom, any t-nonn (s-nonn) can be extended to more than two 
arguments. And hence, the logical values of the obtained generalised connectives are given below (the 
corresponding proofs are inductive wrt n and they are left to the reader).
&p. = max{0, - n+1}, v p. = min{l, Â£p } and " Pt = Ap1 - 
Â£ p, â  p,
i-l 
j=i 1 
z=l 
zâI 
i=l 
q,z2=l./?i<?2 q '2
1 iff pi = 1 (for any i = 1,..., n).
n
+ ... + 
(-l)n+1-rip, (for any pi e [0,1] (i = 1, 2,..., n; n > 2). The algebraic sum connective is very similar
!=1
n
to the well-known Poincare's formula concerning the probability P(UAi). The above sum can be also 
i-i
n 
n 
n
equivalently represented as follows: vp =1-11(1- p ). Obviously, for any 0 e {a, &, â¢}: 0pi = 
i=l 1 
z=l 1 
i=l

81
It can be shown that min and max are definable from Â® and =0 . i.e. the following identities are satisfied 
(for any continuous t-nonn Â®: Hajek P. and Godo L. 1997): (i) min{x,y} = x 0 (x =0 y) and (ii) 
max{x,y} = min{(x => y) => y, (y => x) => x}.
In general, the class of all t-nonns. even of those, which have the sup-preservation property, is very large. 
And so. the infinite valued Lukasiewicz's and Godel's systems, also the product logic can be considered as some 
particular cases.
The set of fuzzy propositional formulae (called equivalently fuzzy propositional expressions, in short: 
expressions or also sentential formulae) of this propositional calculus can be considered as the smallest set which 
includes propositional variables, and which is closed under the operations of forming the negation, conjunction, 
disjunction, implication and equivalence. Hence, any propositional variable can be considered as an expression 
and also the compound formulae formed from them by means of the corresponding logical functors. More 
formally, the following inductive definition can be used (a generalisation of the classical one: see Definition 1.1).
Definition 2.1
A fuzzy propositional formula is:
1. Any propositional variable.
2. If cp and 'p are some fuzzy propositional formulae, then such formulae are also: ~ (cp), (cp) 0 Op), (cp) Â© 
(\p). (cp) =0 (\p). and (cp) o (\p).
3. Every fuzzy propositional formula in this propositional calculus either is a propositional variable or is formed 
from propositional variables by a single or multiple application of rule (2). And this should be in accordance 
with the used definitions of fuzzy connectives, depending on the considered system, where Â® e {&. a, â¢} 
and Â© e {y,v,v}.
The main purpose of this calculus is the same as in the classical case. Hcrc.'^> and o' denote R- 
implication and R-equivalence. respectively.
Any evaluation of fuzzy propositional variables can be considered as a map v assigning to each fuzzy 
propositional variable p its truth-value in [0,1], This extends to each fuzzy propositional formula cp as an 
evaluation of propositional variables in cp by truth degrees in [0,1] (Hajek P. and Godo L. 1997, Hajek P. 1998). 
Below by vo(cp) e [0,1] (in short: cp e [0,1], e.g. cp = a e [0,1]) we shall denote the logical value of the fuzzy 
propositional formula cp with respect to Â®. In a similar way. e.g. by cp < eg we shall denote: cp = a. = b. and 
a < b (a.b e [0.1]).
Definition 2.2 (Hajek P. 2002)
Let Â® be a given continuous t-nonn and vo(cp) e [0,1] be the logical value of the fuzzy propositional 
formula cp wrt 0. So. we shall say cp is t-tautology, t-thesis or also standard BL-tautology of that calculus if 
vo(cp) = 1 for each evaluation of propositional variables in cp by truth degrees in [0,1] and each continuous t- 
nonn.
The following t-tautologies are taken as axioms of the logic L-BL (the used letters p. q and r serve as 
metavariables for fonnulae).
AL
A2.
A3.
A4.
A5a.
A5b.
A6.
(P q) ((q =0 r) =0 (p =0 r))
p & q => p
p & q => q & p
p & (p =0 q) =0 q & (q =0 p)
(P =0 (q =0 r)) =0 (p & q =0 r)
(p & q =0 r) =0 (p =0 (q =0 r))
((p =0 q) =0 r) =0 (((q =0 p) =0 r) =0 r)

82
A7. 
0 
p
A8. 
~~p => p
In the G-and rt-BL systems, instead of A8 , the following two axioms are used: p =â¢ p / p and âp => 
((p =a p â¢ q) =a q â¢ â q), respectively. It was shown that any formula cp is a t-thesis iff it is provable under 
BL (Cignoli. R. et al. 2000). But. the main problem here is the time and space effectiveness of the corresponding 
proofs using only C' and RR . Another approach is proposed below.
Let now cp be a fuzzy propositional formula obtained under Definition 2.1. Hence, as in the classical case, the 
main task is to verify if cp is a t-thesis. Unfortunately, the usefulness of Definition 2.2 seems to be limited 
considering arbitrary t-nonns. Next we shall assume only t-norms related to the basic fuzzy propositional logics. 
Any such t-thesis is said to be a strong t-thesis (or equivalently: strong t-tautology. strong standard BL- 
tautology). The last definition can be modified assuming "t-nonn dependence", i.e. the following definition can 
be introduced.
Definition 2.3
Let 0 be a given continuous t-nonn and vo(cp) e [0,1], orv(cp) if 0 is understood, be the logical value of the 
fuzzy propositional formula cp wrt 0. We shall say cp a weak t-thesis if vo(cp) = 1 for each evaluation of 
propositional variables in cp by truth degrees in [0,1],
The proof in the fuzzy propositional calculus can be interpreted as a process of joining new lines by using 
some primitive or derived rules and/or other theses in accordance with the used assumptions. The proposed 
approach is an extension of the classical one (Slupecki J. and Borkowski L. 1967). An illustration is given in the 
next example.
Example 2. 7
Consider the following well-known classical law (of addition an arbitrary proposition to the antecedent and 
consequent of a given implication)'.
(P =0 q) =0 (P v r =a q v r)
This law can be proved both using a direct or also an indirect proof. In general, the indirect proof is a more 
universal approach, but corresponding to more proof lines than the direct one (if it exists). The following indirect 
proof can be obtained (a thesis is also (p => q) => (p a r => q a r): left to the reader).
Proof.
(1)
(2)
(3)
(4)
(5)
(6)
(7)
p => q
{1.2/a}
p V r
~ (q v r) 
{aip}
~q 
{4.5/NA: 3}
~ r
P 
{-A: 2.5}
q 
{-C:1.6}
contr. â¡ 
{4,7}

83
Since any cp e {a} u {aip} is assumed to be a true formula (i.e. true in any interpretation), the following 
proof technique can be equivalently introduced*.
* Since the logical value of any (tizzy propositional formula <p e [0,1] and provided there is no ambiguity, in the next considerations 
of this subsection any quantifier restricted to [0,1] is interpreted in standard predicate logic style (the subset over which ranges any such 
quantifier coincides with the universe of discourse, i.e. [0,1] ). And hence, the used designations have only an auxiliary sense. A more formal 
treatment concerning the notion of a restricted quantifier is presented in Chapter if.
(1)
(2)
Vp. q e {0,1} (p => q = 1)
{1.2/a}
Vp, r e {0,1} (p v r = 1)
(3)
~Vq, r e: {0,1} (q v r = 1)
{aip}
(4)
3 q. r e {0,1} (q vr^l)
{NV: 3}
(5)
qo v r0 == 0
{-3:4}
(6)
(qo = 0) A(r0 = 0)
{df.V: 5}
(7)
qo = 0
(8)
ib = 0
{7.8/-K: 6}
(9)
po => qo = 1
{-V: 1}
(10)
po V To == 1
{-V:2}
(ID
po X qo
{df=>-: 9}
(12)
(Po = 1) v(r0 = 1)
{df.V: 10}
(13)
po = 0
{7.11}
(14)
lb = 1
{-A: 12,13}
contr. â¡
{8.14}
The above proof technique can be easily extended to the whole interval [0,1], Hence, the following 
implication is satisfied.
Thesis 2.1 (law of addition an arbitrary fuzzy proposition to the antecedent and consequent of a given 
implication)
(p => q) => (p Â© r => q Â© r)
Proof (e.g. L-BL: Â®=df y):
(1)
Vp, q e
[0,1] (p q = 1)
{1.2/a}
(2)
Vp, r e
[0,1] (p x r = 1)
(3)
~Vq. r i- [0,1] (q x r = 1)
{aip}
(4)
3 q, r e
[0,1] (q x r 1)
{NV: 3}
(5)
qo x r0
1
{-3:4}
(6)
qo + r0
< 1
{df' x': 5}
(7)
po =x qo = 1
{-V: 1}
(8)
po x r0 == 1
{-V: 2}
(9)
po X qo
[df'l.-=': 7}
(10)
po + r0 > 1
{df x': 8}
(H)
po + r0
< qo + r0
{+^9}
(12)
qo + r0 > 1
{10,11}
contr. â¡
{6.12}

84
In accordance with our considerations. T1 is a strong t-thesis. Also, the following example strong t-theses are 
satisfied (the corresponding proofs are omitted here).
Thesis 2. 2 (law of compound constructive dilemma)
(p => q) 0 (r => s) 0 (p Â© r) => q Â© s. â¡
Thesis 2.3 (law of compound destructive dilemma)
(p =^> q) 0 (r =^> s) 0 ~ ( q Â© s) =^> ~ (p Â© r). â¡
Thesis 2.4 (De Morgan's law of negating a t-disjunction)
~ (p Â© q) o ~ p 0 ~ q. â¡
Thesis 2.5 (De Morgan's law of negating a t-conjunction)
~ (p 0 q ) c> ~ p Â© ~ q. â¡
Thesis 2.6 (rule modus tollendo tollens)
(p => q) 0 ~ q => ~ p. â¡
Thesis 2. 7 (law of transitivity for implication)
(p => q) 0 (q => r) => (p => r). â¡
Thesis 2.8 (laws of exportation and importation)
p 0 q => r o p => (q => r). â¡
Thesis 2.9 (law of reduction ad absurdum)
(p =^> q 0 ~ q) =^> ~ p. â¡
Thesis 2.10 (law of transposition or contraposition of implication)
P => q <?> ~q => ~p. â¡
Thesis 2.11 (law of the hypothetical, called also conditional, syllogism)
(P => q) => ((q => r) =^> (p =^> r)). â¡ 
{T2.7. T2.8}
T 2.11 corresponds to the first axiom Al of the logic BL (Hajek P. and Godo L. 1997, Hajek P. 1998, Hajek 
P. 2002). It is easily to show any of the remaining axioms (this is omitted). An example proof of A4 is given 
below.
Thesis 2.12 (the A4 axiom)
p 0 (p => q) =^> q 0 (q => p). â¡
Proof (L-BL: <3 =jf &, the proof is the same for G- and it-BL):
(1) 
Vpe[0.1](p=l)
(2) 
Vp.q e [0.1] (p => q = 1)
(3) 
-Vq.p e [0.1] (q & (q => p) = 1) {aip}
(4) 
3 q.p 6 [0.1] (q & (q p) 1) {NV: 3}
(5) 
q0 & (q> =} p0) 
1 
{-3:4}

85
(6)
(qo * 1) v (q0 =o- po * 1)
[df.'&": 5}
(7)
po = 1
{-V: 1}
(8)
po => qo = 1
{-V:2}
(9)
po < qo
{df.'L8}
(1.1)
qo 1
{ada}
(1.2)
qo S 1
{7.9}
(1.3)
qo 1
{qo e [0.1]}
(1.4)
qo = 1
{1.2. 1.3}
contr.
{1.1. 1.4}
(2.1)
qo =s> po
1
{ada}
(2.2)
qo > po
{df.'L2.1}
(2.3)
qo > 1
{2.2,7}
(2.4)
qo Â£ 1
{qo e [0.1]}
contr. â¡
{2.3. 2.4}
The proof of T 2.12 is a ramified indirect one with joined additional assumptions (see proof lines (1.1) and 
(2.1)). An illustration of this technique is also the proof of the next thesis T 2.13: see below).
Thesis 2.13 (law of converting implications, called also law of a closed system of theorems or Hauber's law) 
(p =o- q) Â® (r =^> s) Â® (p Â© r) Â® ~ (q Â® s) =o- (q =o- p) Â® (s =s> r). â¡
Thesis 2.14 (law of multiplication of consequents)
(p => q) Â® (p =o- r) o p =^> q Â® r. â¡
As an example, the used in T 2.1 assumptional system style is also illustrated in the proof of T 2.13 below, 
where L-, G- or rt-BL are considered..
Proof (L-BL: Â® =jf &, Â® =jf y):
(1)
Vp. q e [0.1] (p =o> q = 1)
(2)
V r, s e [0,1] (r => s = 1)
(3)
Vp. r e [0.1] (p v r = 1)
(4)
Vq.s e [0.1] (~(q & s) = 1)
(5)
~Vp. q. r. s e [0.1] ((q =^> p) & (s =o> r) = 1)
(6)
3 p. q. r. s e [0.1] ((q =^> p) & (s =o> r) 1)
(7)
(qo =o> po) & (so =s> r0) * 1
(8)
(qo =o> po 1) v (so =o> r0 1)
(9)
(qo > po) v (so > r0)
(10)
po =O> qo = 1
(H)
po Â£ qo
(12)
r0 =o> So = 1
(13)
r0 < so
(14)
po X r0 = 1
(15)
po+ r0 S 1
(16)
~ (q0 & so) = 1
(17)
qo & So = 0
(18)
qo + So 1
(19)
po+ r0 < q0 + so
{1.2.3.4/a}
{aip}
{ NV: 5}
{-3: 6}
{df.'&': 7}
{df.'L-=>',SR: 8}
{-V: 1}
{df.'L-=>',SR: 10}
{-V: 2}
{df.'L-=>',SR: 12}
{-V: 3}
{df.-r: 14}
{-V: 4}
{df.'L - ~',SR: 16}
{df.'&-: 17}
{11 + 13}

86
(20)
(21)
po+ r0 = 1 
qo + So = 1
[20,21 /15,18,19}
(1.1)
qo > po
{ada}
(1.2)
r0 = 1 - po
{20}
(1.3)
so = 1 - qo
{21}
(1.4)
1 - po Â£ 1 - qo
{13}
(1.5)
po S q0
{14}
contr.
{1.1, 1.5}
(2.1)
so > r0
{ada}
(2.2)
po = 1 - r0
{20}
(2.3)
qo = 1 - So
{21}
(2.4)
1 - r0 < 1 - so
{11}
(2.5)
r0 so
{2.4}
contr. c
{2.1, 2.5}
Proof (G-BL: 0 j/ a, &=% v):
(1)
Vp.q e [0,1] (p =a q = 1)
(2)
Vr.se [0,1] (r => s = 1)
{1.2.3.4/a}
(3)
Vp.r e [0,1] (pvr = 1)
(4)
Vq,s e [0,1] (~ (q a s) = 1)
(5)
~Vp. q, r, s e [0,1] ((q :=> p)A(s =a r) = 1)
{aip}
(6)
3 p, q, r, s e [0,1] ((q =a P)a(s =a r) 1)
{NV: 5}
(7)
(qo =a Po)a(so =a r0)
1
(-3: 6}
(8)
(qo =a po 1) v (so =a r0 1)
{df.- a': 7}
(9)
(qo > po) v (so > r0)
{df.'G-=>',SR: 8}
(10)
po =a qo = 1
{-V: 1}
(H)
po < qo
{df.'G-=>',SR: 10}
(12)
r0 =a So = 1
{-V: 2}
(13)
r0 so
{df.'G-=>',SR: 12}
(14)
pov r0 = 1
{-V: 3}
(15)
(po= 1) V (ro = 1)
{df.' v-: 14}
(16)
~ (q0 a so) = 1
{-V: 4}
(17)
qo a so = 0
{df.'G - ~',SR: 16}
(18)
(qo = 0) v (so = 0)
{df a': 17}
(19)
(qo - po) => (so > r0)
{+ N, CR, SR : 9}
(20)
(so r0) =s> (qo > po)
[CC : 19}
(1.1)
po= 1
{ada}
(1.2)
qo= 1
{1.1,11: qo e lo.ij}
(1.3)
So = 0
{-A : 18,1.2}
(1.4)
r0 = 0
{1.3,13: ro e [0.1]}
(1.5)
qo= po
{1.1,12}
(1.6)
so > r0
{-C: 19,1.5}
(1.7)
so = r0 
contr.
{1.3,14}
{16,1.7}
(2.1)
r0 = 1
{ada}
(2.2)
So = 1
{2.1,13: so e [0.1]}
(2.3)
qo = 0
{-A : 18,2.2}
(2.4)
po = 0
{2.3,11: po e [0.1]}
(2.5)
so = r0
{2.1,2.2}
(2.6)
qo > po
{- C : 20,2.5}
(2.7)
qo = po 
contr. â¡
{2.3,2.4}
{2.6,2.7}

87
Proof (n-BL: Â®=df â , Â©=df v):
(1)
Vp.q e [0,1] (p =a q = 1)
(2)
(3)
(4)
V r, s e [0,1] (r => s = 1)
Vp, r e [0,1] (pvr = 1)
Vq,s e [0,1] (~(q â¢ s) = 1)
{1.2.3.4/a}
(5)
-Vp.q.r.s e [0,1] ((q =^> p) â¢ (s =a r) = 1)
[aip]
(6)
3 p, q, r, s e [0,1] ((q =^> p) â¢ (s =a r) 1)
[NV: 5}
(7)
(qo =a p0) â¢ (so =a r0) * 1
{-3: 6}
(8)
(qo =a p0 1) v (so =a r0 * 1)
{df.--:7}
(9)
(qo > p0) v (so > r0)
{df.'7U-=>\SR: 8}
(10)
Po =a qo = 1
{-V: 1}
(ID
Po < qo
{df.'7U-=>\SR: 10}
(12)
r0 =0- So = 1
{-V: 2}
(13)
r0 Â» so
{df.'7U-=>\SR: 12}
(14)
po v r0 = 1
{-V: 3}
(15)
(po= 1) V (ro = 1)
{df.'V: 14}
(16)
~ (qo â¢ so) = 1
{-V: 4}
(17)
qo â¢ so = 0
{df.'7U-=>\SR: 16}
(18)
(qo = 0) v (so = 0)
{df.' â  17}
(19)
po+ r0 qo + so
[11 + 13}
(20)
po+ r0 L 1
[15: po, ro e [0.1]}
(21)
qo + So Â® 1
{19,20}
(22)
~ (qo + So > 1)
{18}
(23)
qo + So = 1
{-A : 21,22}
(24)
po+ r0 = 1
{19,20,23}
(1.1)
qo > po
{ada}
(1.2)
r0 = 1 - po
{24}
(1.3)
So = 1 - qo
{23}
(1.4)
1 - po Â£ 1 - qo
{13,1.2,1.3}
(1.5)
po i qo 
contr.
{1.4}
{1.LL5}
(2.1)
so > r0
{ada}
(2.2)
po = 1 - r0
{24}
(2.3)
qo = 1 - So
{23}
(2.4)
1 - r0 S 1 - So
{11}
(2.5)
r0 L so 
contr. m
{2.4}
{2.1, 2.5}
The following simple property is also a strong t-thesis: p Â® q =a p Â® q (the corresponding proofs in L-, GÂ­
and rt-BL are left to the leader.
The following example weak t-theses are satisfied (L-BL only): â p o p (the law of double negation, and 
hence the rules Â± N), p=>qo~pyq (the law of implication, i.e. the rule CR), ~(p=>q)op&~q 
(the law of negating an implication, i.e. NC), p => p a p (idempotence of t-conjunction: G-BL only, the 
opposite implication is strong t-thesis related to - K), the following axiom (Hajek P. and Godo L. 1997): â p 
=a ((p p Â® q) =a q Â® â q) is not satisfied for G-BL, the well-known absorptive and distributive axioms 
are satisfied only in G-BL, the law of addition of antecedents (p a r) 0 (q a r) e> p Â® q a r is satisfied 
only in G- and rt-BL, etc. The corresponding proofs are omitted.
In general, any strong t-thesis can be considered as a new derived rule. The following strong t-theses are 
considered as a generalisation or extension of the classical primitive and derived rules.

88
-C â¢
(p=> v
<p , 
+ K
<P
K -
<pÂ® \|/
. . . 
A-
<p Â® \|/
~<P ,
(P^ V
+ E : v => cp ,
-r A . 
, 
â¢
V
<p Â® \|/
<p \ \|/ \
V
t/rou
E â¢
cpo V
Toll â¢
<P^ V
cc- tp^V|/
NA :
~(pÂ®V)
q> => \|/'
LL . 
,
~ q>' 
~ <p\ ~ y \
=> 
\ 
=> <p \
~<p
~ \|/ => ~(p
(P => 'P 
V
SR: 
ipQ'y . TO: 
MC.
~^Â®~Y 
XÂ«X(<P//V) 
-â" 
ââââ
The following example proofs are an illustration of using the above rules (for simplicity only L-BL proofs are 
presented below).
Example 2.8
Consider the proof of T2.1 under the above-introduced primitive rules. This proof can be realised as follows.
(1)
p q
{1.2 /a}
(2)
p y r
(3)
~(q y r)
{aip}
(4)
~q
{4.5/NA. NK: 3}
(5)
~ r
(6)
P
{-A: 2.5}
(7)
q
{-C: 1.6}
contr. â¡
{4.7}
A more extended (ramified indirect) proof is given in the next example.
Example 2.9
Let consider the proof of the Hauber's law T2.13. Since NC is a L-BL weak t-thesis. the following proof can 
be obtained.
(1)
p q
(2)
r s
{1.2.3.4/a}
(3)
p y r
(4)
~ (q & s)
(5)
~ ((q =s> p) & (s =y r))
{aip}
(6)
~ (q =y p) y ~ (s =y r)
{NK: 5}
(7)
q&~p y s & ~ r
{NC. SR: 6}
(1.1)
q
{i.i.1.2 / ada}
(1.2)
~p
(1.3)
r
{-A: 3.1.2}
(1.4)
s
{-C: 2.1.3}
(1.5)
q & s
{+K: 1.1.1.4
contr.
{4.1.5}
(2.1)
s
{2.1.2.2/ada}
(2.2)
~ r
(2.3)
P
{-A: 3.2.2}

89
(2.4) q
(2.5) q & s
contr. e
[-C: 1.2.3}
[+K: 2.1.24}
{4.2.5}
The next definition is an extension of the corresponding classical one.
Definition 2.4
Let cp = cp(pi. p2. ... . pn) be a fuzzy propositional formula under Definition 2.1. We shall say that cp is a 
contradictory formula iff V pi, p2. .... pn e [0.1] (cp(pi, p2. ... . pn) = 0).
Proposition 2.4
Let cp be a fuzzy propositional formula under Definition 2.1. Then cp Â® ~ cp is a contradictory formula.
Proof.
(1) 
L-BL: 
cp & ~ cp = max{0, cp + (1 -cp) - 1} = 0,
(2) 
G-BL: 
cp a ~ cp = min{cp,~cp) = 0, and
(3) 
Tt-BL: 
cp â¢ ~ cp = 0. â¡ 
{Df.2.4, df.'L-.G-.and7t-~'}
In accordance with Proposition 2.4 and + K, any two contradictory proof lines cp and ~ cp will correspond to a 
contradictory formula cp Â® ~ cp. A contradictory formula has any proposition as its consequence (the law of Duns
Scotus). A more general form of a contradictory formula, e.g. may be the following: 
~ cpt Â® q/j), where
1-1
cpi and q/i are arbitrary fuzzy propositional formulae (i = 1. 2,..., n).
The following proposition is satisfied.
Proposition 2.5
Let cp be a t-thesis (either strong or weak). Then ~ cp is a contradictory formula.
In fact, this property follows immediately by the definitions of the notions of fuzzy negation, t-thesis and a 
contradictory formula. A more formal proof is given below.
Proof (L-BL):
Let cp = cp(pi.p2.......pn) be a t-thesis. So we have:
(1) 
Vpi........Pn 6 [0.1] (cp(pi.p2......Pn) 
=1) 
{a}
(2) 
~ V pi........ pâ 6 [0.1] ( ~ cp(pi. p2.Pn) = 
o ) 
{aip}
(3) 
3pi,...,pn e [0.1] (~cp(pi.p2. ... ,pn) *0) 
{NV: 2}
(4) 
~cp(ai.a2.... . an) 0
 
{-3:3}
*
(5) 
1 - cp(ai. a2..... an) 0
 
{df.'Lâ': 4}
*
(6) 
cp(ai. a2..... an) 
1 
{5}
(7) 
cp(ai..a3t.... an) 
= 1 
{-V: 1}
contr. â¡ 
{6.7}
In the case of G- or n-BL the proof is similar and hence it is omitted. A more general form of a contradictory 
formula is used in the proof of the next example.
Example 2.10
Consider the following rule of the well-known Gentzen's sequent calculus called 'rule of removing an 
equivalence in the antecedent of a sequent' (in short: - Ea, the sequent symbol is denoted by ' |â ' ):

90
G.AoBi-A
A.B.0|-A 0|-A.A.B
Since any sequent can be interpreted in an unique way by some propositional formula, the following fuzzy 
propositional formula can be obtained (without loss of generality and for simplicity, the used sequences of 
formulae 0, A, Band A are interpreted as propositional variables, e.g. p. q. r and s. respectively). And this 
formula is a L-BL weak t-thesis as it is shown below.
(p & (q o r) =y s) =y (p & q & r =y s) & (p =y q y r y s)
Proof.
(1)
p & (q o r) => s
{a}
(2)
~ ((p & q & r =y s) & (p =y q y r y s))
{aip}
(3)
~(p&q&r =y s)Y~(p =y q y r y s)
{NK: 2}
(4)
p&q&r&~s y p&~q&~r&~s
{NC.NA. SR: 3}
(1.1)
P
(1.2)
(1.3)
q 
r
[i.i,1.2,1.3,1.4 / ada}
(1.4)
~s
(1.5)
~ (p & (q o r))
{Toll: 1.1.4}
(1.6)
~ P y ~ (q o r)
{NK: 1.5}
(1.7)
~ (q <=> r)
{-A: 1.1.1.6}
(1.8)
~ ((q =s> r) & (r =y q))
{-E, SR: 1.7}
(1.9)
~ (q => r) y ~ (r => q)
{NK: 1.8}
(1.10)
q & ~r y r & ~q
{NC. SR: 1.9}
(l.H)
(q & ~r y r & ~q) & q & r
{+K: 1.2.1.3.1.10}
contr.
{1.11}
(2.1)
P
(2.2)
(2.3)
~q
~r
{2.1.2.2.2.3.2.4/ada}
(2.4)
~s
(2.5)
~ (p & (q o r))
{Toll: 1.2.4}
(2.6)
~ P y ~ (q o r)
{NK: 2.5}
(2.7)
~ (q o r)
{-A: 2.1,2.6}
(2.8)
~ ((q =s> r) & (r =y q))
{-E, SR: 2.7}
(2.9)
~ (q => r) y ~ (r => q)
{NK: 2.8}
(2.10)
q & ~r y r & ~q
{NC. SR: 2.9}
(2.H)
(q & ~r y r & ~q) & ~q & ~r
{+K: 2.2.2.3.2.10}
contr. â¡
{2.11}
The considered formula is also a weak t-thesis in it-BL. but it is not satisfied in G-BL, e.g. for p, q, r, and s 
equal to â. â. â . and â . respectively (the value of the main implication is equal to â y 1).
2 4 5 
3 
3
Let <[> be a classical / many-valued logic formula (see: Subsection 2.1) and t(<|>) be the corresponding fuzzy 
propositional formula obtained under Definition 2.1 (by interchanging the classical two-valued / many-valued 
connectives and the corresponding t- and s-nonns ones). Since {0,1} Â£ wia Â£ [0,1], the following proposition 
is satisfied.
Proposition 2.6
If l=t t(<|>) then 1= <|>.

91
And hence, the condition that a formula cp is a thesis is not sufficient for l( <p) to be a t-thesis.
Definition 2.5
Let <|>i. .... <|>n. cp be formulae under Definition 2.1. We shall say that cp is a (fuzzy) t-consequence of c|>i, .... 
n
c|>â (in short: cp e Cnt({c|>i...... c|>n})) iff l=t Â®<t>i => cp.
i=l
The above-proposed approach preserves the BL-provability property, i.e. the following proposition is 
satisfied.
Proposition 2.7 (BL-provability)
Any t-thesis provable under the Hajek's axiomatic approach of the logic BL is also provable under the aboveÂ­
proposed approach from assumptions.
Proof.
Let A =df {ai. a?. .... an} be a finite non-empty set of BL-axioms and cp e Cnt(A). Since cp e Cnt(A) then 
l=t Â® ai => cp. Since any a, e A isa t-thesis (e.g. T2.12 is a proof of A4, i.e. 34) then any fuzzy propositional 
i=i
formula cp e Cnt(A) can be considered as a consequence of the above-proposed approach from assumptions. A 
more formal treatment is given below.
Let Ri = 0 be the subset of (primitive and/or derived) inference rules of the first-order predicate logic 
calculus related to the proof of a; e A (including the rules for constructing an indirect proof from assumptions) 
and R =df uRj the whole set of rules covering A. For simplicity, let R =df {n, r2..... rm}.
i=l
In general, any inference rule can be interpreted as some axiom. Assume that cp is a fuzzy propositional 
formula under Definition 2.1 such that cp is provable by A. Since any a; e A is a t-thesis in our system then a 
e Cn(Ri). On the other hand Ri c R. Then Cn(Ri) c Cn(R) and a, e Cn(R). Hence, the following 
implication is necessary to be shown.
V ai e A (ai e Cnt(R)) Â® (cp e Cnt(A)) => (cp e Cnt(R)).
Hence we have:
(1) 
V ai e A (ai e Cnt(R))
(2) 
<p 6 Cnt (A)
(3) 
Va, e A( 0 rk=-ai)
m
(4) 
<8> rk =s> ai
(5) kÂ® r'< a-
(n+3)
m
<8> rk =>an
Jc=l
(n+4)
m 
n
<8> rk =+ 0 a,
k=l 
1=1
(n+5)
0 3i =4> Cp 
i=l
(n+6)
m
<3> rk =+ cp 
k=l
cp 6 Cnt (R). â¡
{1.2/a}
{Df.2.5.SR: 1}
{4.5....n+3 / SR.- K.: 3}
[MC: 4.5.....n+3}
{Df.2.5.SR: 2}
[TC: n+4.n+5}
{Df.2.5.SR: 7}

92
Since any cp is a t-thesis iff it is provable under BL (Cignoli, R. et al. 2000) then the above presented 
assumptional approach and the axiomatic approach are equivalent. A more formal treatment of this equivalence 
seems to be realised in a similar way as in Subsection 1.7, i.e. by extending the notion of proof, i.e. t-proof 
including beyond of C also the above obtained rules (or their representative subset). And next, by introducing 
a (fuzzy) deduction theorem similarly as in the classical case, i.e. Theorem 1.31. But any such approach seems to 
be difficult and it is omitted here.
Below it is introduced a new t-nonn and then it is defined a generalised Lukasiewicz's system, denoted by LÂ«- 
BL (a > 0), where the previous one becomes a particular case with a = 1 (Tabakow LG. 2010).
A generalisation of the Lukasiewicz's BL system
Let now consider the following two similar Abelian systems, i.e. of the same type (0,0,2): jÂ»T =df ([0,1]; 
1, 0 ; Â® ) and svy =df ( [0,1] ; 1, 0 ; Â® ), where Â® and Â® are two t-nonns. We shall assume that Â® is a 
priori given t-nonn called source t-norm (or prototypical representative). Assume that f : [0,1] -> [0,1] is a 
given increasing bijection
*
 and jÂ»'i and jvL are isomorphic with respect to f. Hence, the following two 
conditions should be satisfied (for any x, y e [0,1]):
* A bijection (bijective function', in general bijective map or one-to-one correspondence) is a map f: X â> Y which is at the same time 
one-to-one (injective, i.e. Xi # x2 => f(xi) # f(x2), foranyxbx2 e X) and onto (i.e. surjective).
1. f(l) = 1, f(0) = 0 (the algebraic constants preservation)
2. f(xÂ®y) = f(x)Â®f(y) (the algebraic operations preservation).
Since f is bijection and in accordance with the above assumptions, there exists an inverse function f 
(having the same properties as the original function f) such that f-1(f(xÂ®y)) = f (f(x) 0 f(y)). Therefore, 
the new Â® can be obtained in an unique way by the following well-known equality: x Â® y =df f 1 (f(x) Â® f(y)).
Let now consider the increasing bijection y= f(x) =df x" defined in [0,1], The inverse function y = f 1 (x) 
=df Vx , where x 0 0 and a > 0. It is selected as a source t-nonn the Lukasiewicz's one, i.e. x Â® y =df 
max{0, x + y - 1}. And hence, the following generalised t-nonn can be obtained.
A 
l/ct 
1/(X
xÂ®y =df (max{0, x" + y" - 1}) 
= max[0, x" + y" - 1} 
.
By assuming Lukasiewicz's fuzzy negation the following t-cononn is obtained as below.
A 
1/(X
xÂ®y =df 1 - max{0, (1 -x)" + (1 -y)" - 1} .
Assume now Yager's fuzzy negation. For simplicity, let z =df x' Â®y'. By definition we have:
. 
1 /a
z max{0, (x)" + (y)" - 1 }
= max{0, 1 - x" - y"} 1Z" .
Hence we can obtain:
xÂ®y =df (i _ zÂ«)1/a
= 
(1 - max{0, 1 - x" - y"}) 1Z".

93
Since (1 - max{0, 1 - x" - y"}) = min{l. x" + y"} (The left side and the right side coincide for x" 
+ y" Â£ 1 and x" + y" < 1). And so. the following generalised Lukasiewicz's t-conorm is obtained: xÂ©y =df 
. 
1/ct *
' The generalised Lukasiewicz's t-nonn / conforms can be generalised for more than two (but a finite number of arguments), e.g. 
n 
n
gjj.v, = min{ 1-X vf (thÂ® corresponding profs are inductive wrt n : left to the reader) 
i=l
1/a 
l/Â« 
l'o
t Obviously, the systems its and .ay are isomorphic with respect to the inverse function y = x .hi fact, since 0 
=0 and 1
= 1, it is necessary to show that: f'-1 (x Â® y) = L 1 (x) <8> f (y). This is left to the reader (as in Prop.2.8, starting with the right side of the 
last equality), hl general, any such isomorphism can be considered as a binary relation of equivalence, i.e. reflexive, symmetric and transitive, 
denoted below by ' as' and defined on the set of all similar algebraic systems (a more formal treatment will be presented in the next part of 
this work) . And hence, the use of the inverse function corresponds to the symmetric property of this relation. More formally: jÂ»y aq
=> Zi'2
It can be observed that hi the case of using as a source t-nonn the usual arithmetic product xy, the new obtained t-nonn would be 
identical with the source one ( since yx'y" = xy).
imn{l, x" + y"} . â¡
Proposition 2.8
The above systems jÂ» i and are isomorphic with respect to y = x" defined in [0,1],
Proof:
A 
1 /ft
We have: f(l) =1" =1, f(0) = 0" = 0 and f(xÂ©y) = f(max{0, x" + y" - 1} ) = max{0, x" + 
y" - 1} = max{0, f(x) + f(y) - 1) = f(x) Â® f(y)t â¡
Moreover, the above two nonns are well-defined and the corresponding axioms are satisfied (this is omitted)!.
Corollary 2.1
Let Â® and Â© be the new obtained t-nonn and t-cononn. Assume that Â® and Â© are the conesponding source 
Lukasiewicz's ones. Hence, if a = 1 then Â® = 0 and Â© = Â©.
Proof:
Since 0 = 0 is obvious, we shall show that Â© = Â©. And so, let a = 1 and x. ye [0,1], Then we can 
obtain: xÂ©y = 1 - max{0, l-x+l-y-l}=l - max{0, 1 -(x+y)} = min{l,x + y} (since 1 - 
max{0, 1 - a} = min{l, a}: this is omitted). â¡
It can be observed that the graph of (i.e. of the two-argument function z = xÂ® y ) and this one associated 
with Lukasiewicz's t-nonn are different. In fact, assuming z = 0, all points of plane XOY conesponding to the 
1/ft
Yager's negation y = (1 - x") will be located on the left side and the right side of the line y = 1 - x (the 
Lukasiewicz's negation), depending on the used values for a (a < 1 or a > 1, respectively). And the last two 
functions will coincide with a = 1. In accordance with Proposition 2.8, 0 is a continuous t-nonn (it is a 
superposition of continuous functions). Moreover, there is no any idempotent x e (0,1) and hence Â® is 
Archimedean t-nonn. In fact, by assuming x Â® x = x.forsome x e (0,1), we can obtain: max{0,2x" - 1} = x". 
And so, if x" = 0 then x = 0 (a contradiction, since x 0). If x" = 2x" - 1 then x" = 1 and hence x = 
1 (a contradiction, since x 1).
Proposition 2.9

94
The binary operation 0 is a nilpotent Archimedean t-nonn.
Proof:
Let x e (0,1) be a nilpotent element in J0
*
. So, there exists n e N such that x Â® x Â® ... Â® x = 0. Assume 
that this is satisfied for n = no. Then xnÂ° = 0. In accordance with Proposition 2.8. the two algebraic systems 
j0i and JI are isomorphic and hence we have: (x Â® x Â® ... Â® x)" = x" Â® x" Â® ... Â® x" (no times) = ( x") 
nÂ° = (xnÂ° )" = 0" = 0. Hence x Â® x Â® ... Â® x = 0 and x is nilpotent in jvL And so, the only idempotents 
are 0 and 1. Since Â® is continuous then Â® is a nilpotent Archimedean t-nonn. â¡
Consider the following R-implication: x 00 =df sup{z e [0,1]/xÂ® z < y}, where xÂ®z =df max{0, 
1/(X
x" + z" - 1} and a > 0. According to the last considerations, x 00 = 1 iff x < y. In fact, assume 
that z = 0. Since x"< 1 then x"- 1 L 0 and max{0, x"- l}la= 1/0 = 0 y is satisfied. Let now z = 1.
Then max{0, x" + 1 - l}l a^ y iff ylxa = x i y. Andhence, x 00 y = 1.
Assume now that x > y. The case z = 0 is the same as in the previous considerations and hence it is 
omitted. Since z = 1 implies x < y then x > y implies z 1, i.e. z < 1 (contraposition of implication). 
Consequently, assuming x > y the above supremum will be associated with some subinterval [0,z] c [0.1], 
__ 
1/(X
The least upper bound of [0,z] can be obtained as follows: max{0, x" + z" - 1} < y iff max{0, x" + z" -
__ 
1/(X
1} 
y". Let x" + z" - 1 > 0. Then we have: z i (1 - x" + y") , where 1 - x" + y" k. 0 (since 1 -
x" k 0 and y" > 0). And hence, the following proposition is satisfied.
Proposition 2.10
Let Â® be the above introduced t-nonn. The fuzzy implication x 0. y having logical value as follows: x 
1/ct
00 =df if x < y then 1 else (1 - x" + y") is a well-defined and unique R-implication, where a > 0.
Since x" is increasing in [0,1] then x" Â£ y" if x i y. Andhence, y"- x" L 0. Then 1 + y"- x" L 
l/tt 
1/ct
1 and (1 - x" + y") L 1. Ina similar way, assuming x > y we can obtain (1 - x" + y") < 1. And so, 
the following corollary is satisfied.
Corollary 2.2 
. 
1/ct
x 00 = min{l, 1 - x" + y"} . â¡
Corollary 2.3
The Lukasiewicz's implication is a particular case with a = 1. â¡
Corollary 2.4
The S- and R-implications coincide in LÂ«-BL if Yager's fuzzy negation is assumed.
Proof:
x 00 y =df (x Â® y')'
= 
(1 - (max{0, x" + ((1 - y")1/a)" - l}1/a)")1/a
= 
(1 - max{0, x"- y"})1/a
= min{l, 1 - x" + y"}1/a. â¡

95
In accordance with Proposition 2.8, the considered two algebraic systems jÂ»'i and are isomorphic all 
original properties are preserved. In particular, the following proposition is satisfied.
Proposition 2.11
The sup-preservation property is satisfied for Â® and any a e [0,1].
Proof:
1 /ft 
1 /ft
We can obtain: a Â® supxe[o,i] x = max{0, a" + (supxe[o,i] x)" - 1} 
= max{0, a" + 1" - 1} 
=
1 /ft
a. On the other hand: supxe[o,i](a Â® x). = sup{x e [0,1] / max{0, a" + x" - 1} } = sup{max{0, a" -
1/ft 
1/ft 
.
1} ,..., max{0, a" } } = sup[0,a] = a (since a" - 1 .< 0). â¡
The relations between the Zadeh's t-nonn and t-conorm and the presented ones are given in the next 
proposition.
Proposition 2.12
1/ft 
1/ft
min{x,y} > max{0, x" + y" - 1} and max{x,y} < min{l,x" + y"}
Proof:
Assume that x <, y. Then min{x,y} = x and max{x,y} = y (x, y e [0,1] ). Since x <> 0 and y <. 1
1/ft 
1/ft 
1/ft
it is sufficient to show that x > (x" + y" - 1) and y < (x" + y") . We have: x (x" + y" - 1)
1/ft
iff x" 2 x" + y" - 1 iff y" < 1. On the other hand, y < (x" + y") iff y" Â£ x" + y" iff x" 2 0 
(the proof for x > y is omitted). â¡
l/(i 
1 /a
Therefore, max{0, x" + y" - 1} < min{l, x" + y"} . The following fuzzy propositional system, 
called generalised Lukasiewicz's system and denoted by LÂ«-BL is presented below (in short: first-order LcrBL). 
The propositional variables p, q e [0,1]* and oc > 0.
* As in Subsection 1.4 and for simplicity, instead of v(<p) the same formula <p will be used. Hence, e.g. such notions as:'<p = ..." or 
'<p e [0,1]'or also '<p i i|f, etc. should be interpreted as: 'v(<p) = ..." , 'v(<p) e [0,1]' and 'v(<p) < v(q/)', respectively. Moreover, as in 
the previous section and to minimise the number of used parentheses we shall assume the logical functors bind more strongly than the sign of 
equality. Hence, e.g. (p=>q)Ap=>q=l denotes ((p => q) a p => q) = 1 or equivalently: v((p => q) a p => q) = 1.
1. t- conjunction'.
2. t- disjunction'.
3. t-implication:
1/a
p&Â«q =df max{0, p" + q" - 1} ,
1/a
p q =df 1 - max{0, (1 - p)" + (1 - q)" - 1} 
,
p =df if p Y q then 1 else (1 - p" + q") ' and 
4. fuzzy negation'. ~ p =df 1 - p.
Another system, called second order La-BL can be obtained by using the Yager's fuzzy negation, where the 
logical value of the obtained t- disjunction is specified as below.
Proposition 2.13

96
1/CL
Let ~p =df (1 - p") be the Yager's fuzzy negation. Then the logical value of pYÂ«q = min{l.p" 
1/a 
+ q"} â¢
Proof:
1/tt
Let ~p =df (1 - p") (p e [0,1]). In accordance with generalised De Morgan's laws, the logical value 
1/ct 
1/ct 
1/tt
pYÂ«q =df ~ (~ p &Â« ~ q). Since ~ p &Â« ~ q = (1 - p") &Â« (1 - p") = max{0. 1 - (p" + q")} .
1/tt
Hence, p YÂ«q = (1 - max{0, 1 - (p" + q")}) . Since 1 - max{0, 1 - (p" + q")} = min{Lp" + q"} 
1/a 
then pYÂ«q = min{Lp" + q"} .â¡
The second order generalised Lukasiewicz's system (in short: second order LcrBL) is defined as follows.
1. t- conjunction'.
2. t- disjunction'.
3. t-implication:
1/tt
p&Â«q =df max{0. p" + q" - 1} 
.
1/a 
pYaq =df mm{l.p" + q"} 
.
p ^>Â«q =df if p Y q then 1 else (1 - p" + q") ' and 
4. fuzzy negation'. ~p =df (1 - p")
Proposition 2.14
1 /tt
For any order LÂ«-BL the logical value of fuzzy equivalence poÂ«q is equal to (1 - |p"- q"|) .In the
1 /tt
case of the second order LÂ«-BL the logical value of fuzzy difference p q is equal to I p" - q"| (for any 
p. q e [0.1]).
Proof:
By definition the logical value of p q is equal to the logical value of the following t- conjunction: (p 
^â a. q) &Â« (q =y>Â« p). And hence, in accordance with Corollary 2.2 we can obtain: (p q) &Â« (q =y>Â« p) =df 
1/tt 
1/tt 
1/tt
max{0, inin{l, (1 - p" + q") }*  + min{l, (1 - q" + p") }a - 1} . Then the logical value of p 
q is equal to 1 if p = q. Assume that p < q. Hence, the logical value of poÂ«q is equal to (1 - q" + p") 
1/tt 
1/tt
. In a similar way. for p > q this logical value is equal to (1 - p" + q") . And finally we have: (p =^>Â«
I 
1 /tt
q)&Â«(q p) = (1 - |p"- q"|) .
1/tt
According to the Yager's negation, the logical value of p q is equal to (1 - (pc>,1q)") and hence
â  â  <i 
FÂ®
it is equal to I p" - q" I . â¡
Since &Â« is associative it can be extended to more than two. i.e. a fimte number of arguments. And so. the 
following proposition is satisfied.
Proposition 2.15
The logical value of the generalised t- conjunction &a p, = max{0, Z p" - n +1} 
1=1 
i-i
Proof:

97
The proof is inductive with respect to n. In consequence, finally it is necessary to show that max{0, p + 
(X 
(X 
k
Pk+i - 1} = max{0, max{0, p} + pk+1 - 1}. where p =df 2L p" - k + 1. But this equation is satisfied for any 
i = 1 1
P < 0 or p > 0 (a more formal treatment is omitted). â¡
Similarly, the logical value of the generalised t- disjunction in the second order La-BL (the corresponding 
n 
n u 1/a
proof is left to the reader): vap. = min{l, Ip1 } 
i=l 1 
i=l ' 
'
Provided there is no ambiguity, and to simplify the corresponding proofs, the logical value vt(cp) e [0,1] of 
any fuzzy propositional formula cp will be also denoted by cp (depending on the context and used t-nonn). 
Moreover, since any R-implication is associated with some t-nonn, for convenience instead of 'R-implication' 
the tenn 't-implication' is equivalently used. As an illustration, in the next some proofs in (first or second order) 
La-BL are presented and new derived rules are given, where the assumptional proof system is used (Tabakow 
l.G. 2006).
Assumptionalproofs in LcrBL and derived rules
As in the previous section, the used names for the primitive and/or derived rules given below are in 
accordance with the Lukasiewicz's symbols of negation, conjunction, disjunction, implication, and equivalence 
denoted by N, K., A, C, and E, respectively. The following (generalised primitive) rules are considered below: - 
C (rule of detachment for t-implication or omitting a t-implication), Â± K (rules of joining / omitting a t- 
conjunction), Â± A (rules of joining / omitting a t-disjunction), and Â± E (rules of joining / omitting a t- 
equivalence). The rule of substitution is denoted by SR. Some additional rules are also used, such as: Â± N (rules 
of joining / omitting double negation), CR (implication rule), CC (the law of transposition or contraposition of 
implication), NA (rule of negating a t-disjunction), NK (rule of negating a t-conjunction). Toll (rule modus 
tollendo tollens), TC (the law of transitivity for implication), MC (the law of multiplication of consequents of two 
or more implications having the same antecedents). Some additional inference rules of the first-order predicate 
logic calculus are also used below, such as: the rule of negating an universal quantifier (denoted by NV), the 
rules of omitting an universal and an existential quantifiers (denoted by: -V and -3, respectively: see Subsection 
3.3 of Chapter 11). The used construction of any formula in La-BL (first or second order) is the same as in 
Definition 2.1 and the same priorities for logical connectives are assumed. Provided there is no ambiguity, the 
notion of t-thesis is interpreted under Definition 2.3.
As in the classical case, the main task of this calculus is to verify if cp is a t-thesis. If yes then there exists a 
proof. Any such proof in the fuzzy propositional calculus can be interpreted as a process of joining new lines by 
using some primitive or derived rules and/or other theses in accordance with the used assumptions. The proposed 
here approach is an extension of the previous one (Tabakow l.G. 2006) to La-BL. Some proofs and new derived 
rules are given below.
The next thesis is an illustration of using the same proof technique as in L-BL (i.e. using first-order predicate 
logic calculus, see: Example 2.7 and Thesis 2.1).
Thesis 2.15 (law of addition an arbitrary fuzzy proposition to the antecedent and consequent of a given 
implication)
(p =Y>a q) =Y>a (p Ya T =^>a q Ya r)
Proof 7first-order LcrBL'.
(1) 
Vp, q e [0,1] (p =>aq= 1)
[1.2/a}
(2) 
V p, r e [0,1] (p Ya r = 1)
(3) 
~V q, r e [0,1] (q Ya r = 1) 
[aip]
(4) 
3q. re [0,1] (q Ya r 1) 
[NV: 3}

98
(5)
qo Ya r0 * 1
{-3:4}
(6)
Po =Y>a qo = 1
{-V: 1}
(7)
po Ya r0 = 1
{-V: 2}
(8)
Po < qo
{dfL-=>Â«-: 6}
(9)
(1 -qo)" + (l-r0)" > 1
{df. ' vp 5}
(10)
(1 -po)" + (l-r0)" < 1
{df. 'vp 7}
(ID
(l-qo)" > l-(l-r0)"
{9}
(12)
(l-qo)" < l-(l-r0)"
{Since q0 i p0 then - q0 Â£ - po and 1 
- qo < 1-po- Hence (l-q0)" < (1- 
po)" < 1 - (1 -r0)": 8.10}
contr. â¡
{11.12}
Proof / second order LcrBL'.
(1) 
Vp.q e [0.1] (p ->Â»q = 1)
(2) 
Vp.r e [0.1] (p Ya r = 1)
(3)
~V q. r e [0.1] (q Ya r = 1)
{aip}
(4)
3 q. r e [0.1] (q Ya r 1)
{NV: 3}
(5)
qo Ya ro 1
{-3:4}
(6)
po â><â  qo = 1
{-V: 1}
(7)
po Ya ro = 1
{-V: 2}
(8)
po < qo
{dfL-=>Â«-: 6}
(9)
q0" + r0" < 1
{df. ' v^: 5}
(10)
po" + r0" > 1
{df. 'vp 7}
(H)
qo" + r0" > 1
{Since q0 i p0 then q " Â£ p" and
- qÂ® Â£ - p" . Hence. 1 - q" < 1 -
contr. â¡ 
{9.11}
The above two proofs of T2.15 are very similar, in fact the first eight proof lines are identical. In accordance 
with our considerations, as an example, the following derived rules have been obtained (the corresponding proofs 
are omitted: the used assumptional system style is very similar to this one shown in the proof of T2.15):
<P Â°a V
<P â\ V/
<P
<P
<P ~'a V
C: 
<p . +K:
v|7 
. -K:
. +A:
-A:
~(p .
+ E :
V "a'/''
V
<p \ q/ \
<P Ya V
V
<P Â«a V
~ Ya V)
<P V 
Toll: 
~ \|/
-E : ------------------------------------------
- \ 
\ V 
v
<P -,o w \ y (p \
V 
<P
~<p
~W^a~<P
NA :

99
~ (y <*-g  V)
~ V Yg ~ v'
q> v
TC:
NK :
(p âV!7
MC : <P ^aX â¢
<P --Y w &a X
^-g V . 
X <=>g X(^//V) '
SR :
where %(cp // q/) is obtained from % by the replacement of its parts q/ by the formula cp.
The rules NA, NK and Â± N are direct consequence of the involutivity property, which is by definition 
satisfied for any continuous fuzzy negation (Bronstein l.N. et al. 2001). The above derived rules are satisfied as 
well as in first and in second order La-BL. An illustration of using these rules are the next proofs. The proof of 
Thesis 2.15 is first presented. It is of the same complexity as in the classical case.
Proof of 12.15:
(1)
(2)
p =Y>aq 
p Ya r
{1.2 /a}
(3)
~(q Ya r)
{aip}
(4)
~q
{4.5/NA: 3}
(5)
~ r
(6)
P
{-A: 2,5}
(7)
q
{-C: 1,6}
contr. â¡
{4.7}
Thesis 2.16 (law of multiplication of consequents of two or more implications having the same antecedents: NIC) 
(p =Y>a q) &a (p =Y>a r) Oa (p =^>a q &a r)
In accordance with the rule of omitting t-equivalence, i.e. - E. the following two implications have to be 
proven.
Thesis 2.16a (if-implication)
(p =Y>a q) &a (p =Y>a r) =^>a (p =^>a q &a r)
Thesis 2.16b (only-if-implication)
(p =Y>a q &a r) =^>g (p =^>g q) &Â« (p r)
Proof of T2.16a:
(1)
p =Y>aq
(2)
(3)
p ^al
P
{1.2 /a}
(4)
~ (q &a r)
{aip}
(5)
q
{-C: 1.3}
(6)
r
{-C: 2,3}
(7)
q&at 
contr. â¡
{+K: 
{4.7}
5,6}

100
The proof of T2.16b is left to the reader. It can be observed that some rules satisfied in the classical L-BL 
may be or not satisfied in the generalised La-BL depending on the used system version. For example. CR and NC 
which are satisfied in L-BL, are not satisfied in the first-order La-BL, but they are satisfied in the second order 
La-BL, e.g. the left side and the right side of the formula ~ (p q) p &Â« ~ q are different in the first- 
order La-BL forp = 1/2 , q = 1/3, and a = 2: 1 - 731/6 and 0, respectively.
An illustration of a more complete use of the above introduced proof rules is given in the proof of the next 
thesis. Here, a construction of ramified indirect proof with joined additional assumptions is presented (Slupecki J. 
and Borkowski L. 1967).
Thesis 2.17 (law of converting implications, called also law of a closed system of theorems or Hauber's law) 
(p ^o. q) &a (r =y>Â« s) &Â« (p r) &Â« ~ ( q &a s) (q p) &a (s =>a r)
Proof 7second order LcrBL'.
(1)
p ^- .-.q
(2)
r s
(3)
p Yat
{1.2.3.4.5 / a}
(4)
~ (q &a s )
(5)
~ ((q =>a p) &a (s =>a r))
{aip}
(6)
q &a ~ P Ya S &a ~ r
[NR, NC, SR : 5]
(1.1)
q
{ada}
(1.2)
~P
(1.3)
r
{-A: 3,1.2}
(1.4)
s
{-C: 2,1.3}
(1.5)
q &a s
{+K.: 1.1,1.4}
contr.
{4,1.5}
(2.1)
s
{ada}
(2.2)
~ r
(2.3)
P
{-A: 3,2.2}
(2.4)
q
{-C: 1,2.3}
(2.5)
q &a s
{+K : 2.1,2.4}
contr. c
{4,2.5}
It can be observed that in accordance with MC, it is sufficient to prove the following two implications.
(p =>a q) &a (r =>a S) &a (p Yat) &a~(q &a S) =^>a (q =^>a p)
(P =>a q) &a (r =>a S) &a (p Yat) &a~(q &a S) =^>a (S =^>a r)
The proof of the first implication is given below. The proof of the second one is very similar and hence it is 
omitted.
Proof:
(i) 
p =â 
 q
*
(2) 
r =>o.s
(3) 
pYat 
[1.2.3.4.5 / a}

101
(4)
~ (q &a s )
(5)
q
(6)
~p
{aip}
(7)
~q YÂ«~ s
{NK: 4}
(8)
~ s
{-A: 5,7}
(9)
~ r
{Toll: 2,8}
(10)
P
{-A: 3,9}
contr. â¡
{6,10}
In accordance with Proposition 2.7, any formula which is satisfied in (the first or second order) LÂ«-BL is also 
satisfied in L-BL and hence provable by using the Hajek's axiomatic approach, but not vice versa.
The above-introduced approach from assumptions seems to be more attractive, more simpler and natural in 
practical use than the axiomatic one and it is related to the infinite valued Lukasiewicz's system L-BL, 
recognised as one of the most important basic fuzzy propositional logics (in common with Gbdel's and product 
logic systems). The use of Yager's continuous fuzzy negation seems to be the most natural extension of L-BL. In 
application the obtained t-connectives have very similar properties as the classical ones. And hence, we have a 
new possibility of extending the classical notion of logical consequence in terms of the obtained generalised 
Lukasiewicz's system LÂ«-BL. In fact, with any fuzzy propositional formula in LÂ«-BL, which is a logical 
consequence of a finite set of another such formulae, can be associated some "crisp" formula by using a threshold 
value (e.g. 0.5, as in fuzzy sets). And so, we have the possibility of introducing a new generation control systems 
using fuzzy logic and corresponding fuzzy rules in senso stricto. Moreover, the obtained LÂ«-BL is directly related 
to binary operations in multiple-valued algebras. Any methodological aspects, e.g. such as compactness, 
consistency, decidability or satisfiability of t-tautologies have been omitted in this research. Obviously, the most 
important of these properties is the consistency of LÂ«-BL. Several areas for future investigations of LÂ«-BL may be 
also related to approximative reasoning and automated theorem proving, and also extension of the Hajek's 
axiomatic L-BL system to LÂ«-BL. In particular, Gentzen's sequents can be easily introduced as derived rules in 
our system.
The notion of fuzzy flip-flop was first introduced in (Hirota K. and Ozawa K. 1989): in particular, there was 
also considered a group of bounded fuzzy operations. The last operations were also used in (Diamond J. et al. 
1994). As an example, it is shown below an application of the above generalised Lukasiewicz's fuzzy t-nonn / - 
conorm in the area of modelling and synthesis of control systems using fuzzy interpreted Petri nets (Gniewek L. 
and Kluska J. 1998, 2004), (Gniewek L. 2012).The presented here transformation procedure (net into logic circuit) 
is based on fuzzy flip-flops using bounded fuzzy operations: there were introduced four such JK flip-flops, of 
type SA, AA, AB and SB.
Example 2.22 (fuzzy JK flip-flop of type >8'4 )*
* Instead of Qn+i and Q, the next and present states are here denoted by Y and y, respectively.
Let Â® , Â© and ' be the generalised Lukasiewicz's fuzzy t-nonn, t-cononn and Yager's fuzzy negation, 
1 /ci 
1 /ft 
1 /ft
where: x<S>y =df max{0, x" + y" - 1} 
, xÂ®y =df min{l.x" + y"} and x' =df (1 - x") (for
any x, y e [0,1] and a e (0, oo)). The following generalisation of the first version SA of the fuzzy JK 
flip-flop can be obtained: Y = [(J Â® y') Â® y | 0 (K' Â© y'). where the boundary values of the primary inputs 
of this flip-flop are as follows: Y = max{J",y"}, for K = 0 and Y = min{ (K')",y"}, for J = 0. A proof is 
given below.
For simplicity, let a =df J Â® y', b =df a Â© y and c =df K' Â© y' (and hence: Y = b c ). And so, we can 
obtain:
1 /ft
a = max{0, J" + (y')" - 1 }

102
" max{0, J" - y"} 1Z" .
b = a Â®y
l/a
imn{l. a" + y"}
_ 
l/a
imn{ 1. max{0. J" - y"} + y"} 
c = K' Â®y'
_ 
l/a
min{l. (K)" + (y )"}
l/a
= min {1,2 - K" - y"} 
.
Y = b Â® c
1 /ft
= max{0, b" + c" - 1 }
l/a
= max{0, min{l, max{0, J" - y"} + y"} + min{l,2 - K" - y"} - 1}
Assume that K = 0. Since Y/k = o = max{0, min{l, max{0, J" - y"} + y"} + min{l, 2 - y"} - 1}, 
the following equality should be shown. In fact. The left side and the right side coincide for: J = y, J < y, and 
J > y.
max{0, min{l, max{0, J" - y"} + y"} + min{l, 2 - y"} - 1}
max{J",y"}
Let J = y. Then (the left side) L = max{0, min{l, y"} + min{l,2 - y"} - 1}. Since y < 1 then y" < 
1" = 1 and 1 - y" i 0. Hence 2 - y" k 1. So min{l, 2 - y"} = 1 and L = max{0, y" + 0} = y". 
Since (the right side) R = y" then L = R.
If J < y then J < y then J" < y" and hence R = y". Since J" - y" < 0 and 2 - y" 2 1, we can 
obtain: L = max{0,y" + l- l}=y" = R.
Let now J > y. We have: J" - y" > 0, 2 - y" > 1 and R = J". Hence: L = max{0, min{l, J" - y" 
+ y"} + 1 - 1} = J" = R.
1/ft
Assume now J = 0. We have: Y/j-o = max{0, min{l, y"} + min{l, 2 - K" - y"} - 1} 
-
1/ft
max{0, y" + min{l,2 - K" - y"} - 1} . And hence, the following equality should be shown.
max{0, y" + min{l,2 - K" - y"} - 1} 
= min{ (K')"y"}
By definition, (K')" =&â¢ ((1 - K") )" = 1 - K". And hence. It is easily to show the left side and the right 
side coincide for: 1 - K" = y" 1 - K" < y" and 1 - K" > y".
Let 1 - K" = y". Then 1 - K" - y" = 0 and L = max{0, y" + min{l, 1 + 1 - K" - y"} - 1} = 
max{0, y" +l-l}=y" = R.
If 1 - K" < y" then R = 1 - K". Since 1 - K" - y" < 0 then 1 
+ (1 - K" - y") < 1 and
min{l, 1 + (1 - K" - y")} = 2 - K" - y". Hence L = max{0, y" + 2 - 
K" - y"} - 1} = 1 - K" 
=
R.
Assume now 1 - K" > y". We have: 1 - K" - y" > 0 and 2 - 
K" - y" 
> 1. Hence: 
L =
max{0, y" + min{l,2 - K" - y"} - 1} = max{0, y" + l- l}=y" = R.

103
The above cited fuzzy JK flip-flop of type SA becomes a particular case with a = 1. And so. there exists a 
possibility of using more flexible such control systems (i.e. easily changed to suit new conditions: Oxford dictionary). â¡
In general, among the most important examples of t-nonns is the Luasiewicz's one. It have been introduced 
a new generalised such t-nonn which implies some new applications, e.g. such as: fuzzy sets, fuzzy rough sets, 
intuitionistic fuzzy sets and intuitionistic fuzzy rough sets, fuzzy similarity and fuzzy equivalence relations, 
specification of new probabilistic metric space (by using as a definition of the corresponding triangle function the 
above introduced t-nonn), and so on. Several areas for future investigations may be related to the introduction of 
new t-nonn based measures or also computations related to the probability of fuzzy events, specification of new 
commutative and associative copulas, new possibilities to combine criteria in multicriteria decision making (for 
evaluation the truth degrees of compound fonnulae). new kind of fuzzy t-equivalence relation and hence new 
possibilities of using this relation in image processing (fuzzy segmentation and clusterisation), artificial 
intelligence (approximative reasoning and automated theorem proving using Gentzen's sequents. fuzzy 
consequence), and so on. Another area of application seems to be the fault isolation in discrete event systems 
with partially degradable components or fuzzy control in the narrow sense, in particular interval type-2 fuzzy sets 
and systems (Mendel J.M. 2001)*: e.g. instead of the algebraic product t-norm, using the generalised 
Luasiewicz's one (concerning the notion offiring interval). etc. And so. essentially most remains to be done.
2.3. Modal, deontic and temporal logics
A modal is an expression (like 'necessarily' or 'possibly') that is used to qualify the truth of a judgement. 
Modal logic is .strictly speaking, the study of the deductive behaviour of the expressions 'it is necessary that' 
and 'it is possible that'. However, the term "modal logic may be used more broadly for a family of related 
systems. These include logics for belief, for tense and other temporal expressions, for the deontic (moral) 
expressions such as 1 it is obligatory 1 and 1 it is permitted1. etc. Temporal logic (sometimes used to refer to tense 
logic) is a deduction system in which the times at which propositions bear certain truth-values can be indicated, 
in which the 'tense' of the assertion can be indicated, and in which truth-values can be affected by the passage of 
time {public domain). A brief introduction to the modal, deontic and temporal logic systems is given below .
Modal logicf
Some preliminary study concerning modal logic have been observed in ancient times (e.g. Aristotelian 
syllogistic. Stoic School or also Megarian School of philosophy: Diodorus Cronus' ideas related to ''strict" or 
"strong" implication, died c.284 b.c.. etc.) or also in the middle ages (e.g. John Duns Scotus 1266 - 1308, 
William of Ockham 1288 - 1348, etc.). In antiquity and in the middle ages modality was understood as the truth 
value of a proposition: it can be necessarily, actually, or possibly true. e.g. (Sulkunen P. and Tbrrbnen J. 1997): in 
nowadays called "alethic" (from the Greek word aletheia: refers to the various modalities of truth, such as necessity, 
possibility or impossibility) or sometimes also "special" modality (from the Latin "species"). However, contemporary 
theory of modal logic systems is related to the notion of strict implication introduced by Lewis C.l. (1883 - 1964) 
and inspired by the earlier work of McCool H. (1837 - 1909). The above strict implication system was extended 
in the next work of Lewis C.l. and Langford C.H. (1932).
In general, the main approach in constructing of modal logic systems is the axiomatic one. In fact, there were 
proposed several different systems, e.g. such as: SI - S5 systems5 (Lewis C.L and Langford C.H., Becker O.).
' Jerry M. Mendel, bom 1938.
t For a more information see: The little encyclopaedia of logic (1988) or Formal logic. Encyclopedical outline with applications to 
informatics and linguistics (1987) or also The Free Encyclopaedia. The Wikimedia Foundation. Inc.
The sequent calculus becomes elusive for such logics as: modal logics, intermediate (i.e. consistent superintuitionistic) logics and 
substructural logics (logics lacking one of the usual structured rules such as: weakening, contraction. exchange or associativity, e.g. two of the more significant 
such logics are relevance logic and linear logic), see: The Free Encyclopaedia. The Wikimedia Foundation. Inc. To treat such systems, a 
hypersequent calculus should be used. In particular, hypersequents can be also used to obtain analytic calculi for various fuzzy logic systems 
As an illustration, see Subsection 4.1.
Â§ âS": an abbreviation from ..Strict".

104
T - (called also M -) system (Feys R., Wright G.H. von.), K. Godel's system, McKinsey J.C.C. and Tarski A., 
Kripke S., and so on. In particular, the set of axioms in SI is a proper subset wrt S2, S4 and S5. As an example, 
a version of S5 is shown below (Lewis C.I. 1918, new edition 1960: Clarence Irving Lewis 1883 - 1964). A8 
was introduced by Becker O. (1930: Oskar Becker 1889 - 1964) and this axiom corresponds to the Godel's 
axiom G3 (see the next considerations). Here ' =Â»' and 'o' denote strict implication and the modal functor of 
possibility, respectively.
(Al) p a q =a> q a p
(A2) p/q a> p
(A3) p A> p A P
(A4) (p A q) A r =A> p A (q A r)
(A5) p =Â» ~(~p)
(A6) (p -Â» q) A(q =Â» r) =Â» (p ^>> r)
(A7) p a (p -Â» q) =Â» q
(A8) 
~ O ~ p =A> ~ O ~ (~ O ~ p)
A new approach to S4 was introduced in Godel's system, i.e. to any classical propositional calculus there are 
added the following three axioms* (for any modal propositional formulae cp and q/, see Definition 2.6 given 
below):
(Gi) nep =a cp,
(G2) â¡ (cp => q/) => (â¡ cp =a â¡ cp) and
(G3) â¡ cp =A â¡ â¡ cp.
Moreover, the following Gddel's rule was assumed (necessitarian)-.
(GR) 1= cp =A 1= â¡ cp.
As in the classical logic, the above axiomatic approach uses rules - C and RR, but extended also with GR. 
Here, the Godel's axiom (G2) represents the familiar distribution axiom schema. A more formal treatment is 
omitted (see Encyclopedical outline with applications to informatics and linguistics 1987).
The set of constants of the classical propositional calculus can be extended by introducing the following two 
new connectives related to the above considered two expressions: â¡ (box) and o (diamond) , i.e. the modal 
functors (called also "operators") of necessity and possibility (sometimes also known as: potentiality), respectively: O 
can be considered as a dual modal functor wrt â¡. It can be observed that any of the last two connectives can be 
expressed by the another one, i.e. nep <=>df ~ O ~ cp and O<p odf ~ ~ cp. The strict impli cation and strict 
equivalence can be introduced as follows: p =a> q Odt n(p =a q) and p <o> q <4>df n(p o q). 
The next inductive definition is a generalization of the classical one (see Definition 1.1).
Definition 2.6
A modal propositional formula is:
1. 
Any propositional variable.
' Axioms (Gl) and (G2), sometimes denoted by ' T ' and ' K ' respectively, are sufisient for introduction of the so called standard 
modal logic system. For convenience, this rule we shall also denote by

105
2. 
If cp and are some modal propositional formulae, then such formulae are also: ~ (cp) , (cp) a (q/), (cp) v 
(y). (cp) =?> (\p). (cp) o(\p).n(cp). O(cp). (cp) -Â»(\p).and (cp) Â«-Â» (\p).
3. 
Every modal propositional formula in this propositional calculus either is a propositional variable or is formed 
from propositional variables by a single or multiple application of rule (2).
The main purpose of this calculus ic the same as in the classical case.
Let cp be the implication cpi =a cp2. According to GR. we have: 1= (cpi => cp2) => 1= â¡ (cpi =a cp2). 
Next, by using the above introduced notion of strict implication, SR and TC (transitivity for implication) we 
can obtain: 1= cpi =a> cp2. And hence, the following corollary is satisfied.
Corollary 2.5
1= (cpi =?> cp2) =a 1= (cpi =a> cp2). â¡
Corollary 2.6
1= (cpi <=> cp2) =a 1= (cpi <o> cp2)
Proof:
It can be observed that any event requiring the necessity of a conjunction p a q' can be considered as an 
equivalent to the event requiring the necessities of each of its arguments p and q. In fact, next we shall assume 
that: â¡ (p a q) o â¡ p a â¡ q (see T 2.23 given below). And this observation can be generalised for any two 
formulae cp and
According to the notion of strict equivalence, we can obtain: p <o> q Odt â¡ ( p o q ). Next, by using 
two times SR and the corresponding definitions of strict implication and strict equivalence we have: â¡ (p <=> 
q) o â¡ ((p =a q) a (q =a p)). And hence: â¡ (p o q) o â¡ (p => q) a â¡ (q => p). Then: p <o> q 
o (p -Â» q) a (q -Â» p).
Assume now that 1= (cpi => cp2) 1= (cpi =a> cp2) and 1= (cp2 => cpi) => 1= (cp2 =a> cpi) are two 
implications under Corollary 2.5. Then, in accordance with the law of multiplication of the antecedents and 
consequents of two implications (MAC: see T 1.21, Subsection 1.3), SR and the corresponding definitions for 
equivalence and strict equivalence connectives we can obtain: 1= (cpi =a cp2) a (cp2 => cpi) => |= (cpi =>> cp2) a 
(cp2 =a> cpi). And hence, we have this corollary. â¡
Let now cp be arbitrary. By G1 it follows that â¡ ~ cp => ~ cp. And hence, in accordance with the law of 
transposition or contraposition of implication CC (i.e. T 1.14, Subsection 1.3), SR and the definition of the 
modal functor of possibility we can obtain: cp => ~ â¡ ~ cp o cp => O<p. By Corollary 2.5 it follows that cp 
=a> O<p is a thesis. Moreover, by definition of the above two modal functors, the law of transposition or 
contraposition of equivalence CE, - N and SR we have: ~ â¡ cp Odt O ~ cp and ~ Ocp Odt â¡ ~ cp.
In particular, the following rules are used below.
(1) Pule of omitting a necessity modal functor  
(denoted below by â¡'):
*
â¡ cp 
- â¡ : .
<P
' In accordance with Godel's axiom G1.

106
(2) Rule ofjoining a possibility modal functor 
(denoted below by '+ o'):
cp
+o : 
Ocp
(3) Rule of negating a necessity modal functor 
(denoted below by ' N â¡'):
O ~ cp
(4) Rule of negating a possibility modal functor 
(denoted below by 'No'):
â¡ ~ cp
(5) Rule of joining a strict implication 
(denoted below by '+ SI'):
1= (cpi =^> cp2)
+ SI: 
_____________
1= (cpi =>> cp2)
(6) Rule of joining a strict equivalence
(denoted below by '+ SE'):
1= (cpi Â« <P2)
+ SE : 
_____________
1= (cpi <o> cp2)
It can be observed that the above two rules + SI and + SE are directly related to the Godel's rule GR. 
Another way of joining and/or omitting a strict equivalence are the following two rules (see the above Corollary 
2.6). The obtained mles are very similar to the classical ones and hence they are said to be ordinary.
(7) Ordinary rule of joining a strict equivalence 
(denoted below by '+ OSE'):
cp =>> \p 
+ OSE : 
>i< â>> CD
cp <o> cp
(8) Ordinary rule of omitting a strict equivalence 
(denoted below by -OSE ):
cp <o> cp
-OSE :
cp =^>> cp/cp =^> cp/ cp =^>> cp
cp =^>> cp
It is illustrated below the use of the assumptional system style. As in the classical propositional calculus, the 
obtained theses related to some propositional variables, e.g. p. q. r, etc. are generalised for arbitrary modal 
propositional formulae, e.g. cp, cp, %, etc., respectively. Moreover, by rules + SI and + SE it follows that it is

107
sufficiently to show the corresponding proofs for the usual, i.e. non-strict connectives. And such an approach is 
realised below, e.g. see T 2.22.
The following simple property is satisfied.
Thesis 2.18
â¡ p =a op
Proof:
(1) np
(2) p
Op . â¡
{a}
{-â¡: 1}
{+ O : 2}
Thesis 2.19
(p q) (np oq)
Proof:
(1) 
p =a q
(2) 
np
(3) 
p
(4) 
q
Oq. â¡
{1,2/a}
{-â¡: 2} 
{-C: 1.3} 
{+0:4}
Assume that l= cp => cp , where cp <=>df cpi a cp2 a ... a cpn. In accordance with the Gbdel's rule GR. we can 
obtain 1= â¡ (cp => cp). And hence, by G2 and - C it follows that 1= â¡ cp =a â¡ cp. Since â¡ (cpi a cp2 a ... a 
cpn) o â¡ cpi a â¡ cp2 a ... a â¡ cpn then by SR it follows that 1= â¡ cpi a â¡ cp2 a ... a â¡ cpn => â¡ cp. And hence by 
using + SI we have: 1= â¡ cpi a â¡ cp2 a ... a â¡ cpn =a> â¡ cp. And so. as in the classical case (T 1.23, Subsection 
1.5), the notion of modal logical consequence may be introduced, i.e. cp may be considered as a modal logical 
consequence wrt cpi,cp2, ... , cpn. And then, any classical logical consequence involves some modal logical 
consequence (a more formal treatment is omitted).
As an illustration of the assumptional system style, some example theses and corresponding proofs related to 
the T-system
*
 are presented below. Obviously, any thesis of the classical propositional calculus belongs to this 
system. And so. the following formulae are theses in this system (see: The little encyclopaedia of logic 1988).
Thesis 2.20
â¡ p - â¢> p. â¡
Thesis 2.21
P =A> Op. â¡
Thesis 2.22
â¡ p Op. â¡
Thesis 2.23
{T 2.18. + SI}
Robert Feys (1889- 1961)

108
â¡ (p a q) <o> np a â¡ q.â¡
Thesis 2.24 
o(p v q) <o> op v oq.â¡
Since a and v are associative the last two theses can be generalised for more than two. but a finite number, 
arguments. Moreover, in accordance with T 2.23 and T 2.24, the modal functors â¡ and O are distributive 
wrt the logical connectives a and v, respectively. An example proof of T 2.24 by using T 2.23 is given below. 
In a similar way, the proof of T 2.23 can be realised by using T 2.24. In accordance with the duality property one 
of these two theses can be obtained from the another by using the rule CE (contraposition of equivalence: left to 
the reader). In particular, e.g. the formulae: 'â¡(pAq)onpAnq' and o(pv q) o op/ oq 1 arc 
also theses in Feys' T-system *.
* Provided there is no ambiguity and for simplicity, it is assumed that any rule corresponding to a formula having as a main connective 
logical equivalence is two-sided binding (i.e. from top to down and from bottom to up, e.g. NA, NK, N â¡, NO, etc. Another possibility was 
considered in Subsection 1.3 where the "from bottom to up" case was interpreted by the prefix '+', e.g. + NA, + NK, + N â¡, + NO, etc.). 
Moreover, the used priorities for logical connectives are similar as in the classical case, see Subsection 1.1, e.g. the symbol of disjunction 
binds more strongly than the symbol of strict implication, the last binds more strongly than the symbol of strict equivalence, etc.
Proof T 2.24a:
(1)
O(p V q)
(2)
~(Op V oq)
(3)
â¡ ~p /V n~q
(4)
â¡ (~p A~q)
(5)
â¡ ~(p vq)
(6)
~ O(p v q)
contr. â¡
{a} 
{aip}
{NA, NO, SR: 2} 
{T 2.23 : 3} 
{NA, SR: 4} 
{No: 5} 
{1,6, +SI}
Proof T 2.24b:
(1)
Op V oq
{a}
(2)
~ O(p v q)
{aip}
(3)
â¡ (~p A~q)
{NO, NA, SR: 2}
(4)
â¡ ~p /\ â¡ ~q
{T 2.23 : 3}
(5)
~ op
{NO, SR, -K:4}
(6)
~ oq
(7)
oq
{-A: 1,5}
contr. â¡
{6,7, + SI, + SE}
Thesis 2.25
â¡ p v nq =a> n(p v q).â¡
It is obvious that the possibility of a conjunction of two or more (a finite number) arguments implicates the 
conjunction of the possibilities of its arguments, i.e. by CC, NK. and SR it follows that a conjunction p a q' is 
not possible if it is not possible at least one of its arguments. In fact, the following necessaiy condition holds.

109
Thesis 2.26
O(p a q) =a> Op a Oq. â¡
T 2.25 can be used as a derived rule in the proof of T 2.26. and vice versa. An example proof of T 2.25 using 
T 2.26 is given below (the proof of T 2.26 by using T 2.25 is left to the reader).
Proof T 2.25:
(1)
â¡ p V nq
{a}
(2)
~ n(p v q)
{aip}
(3)
o(~p A~q)
{ N â¡. NA. SR : 2}
(4)
o~p ,
o ~q
{-C : T2.26. 3}
(5)
o~p
{K: 4}
(6)
o ~q
(7)
~ np
{N â¡ : 5}
(8)
~ nq
{N â¡ : 6}
(9)
nq
{-A: 1.7}
contr. â¡
{8.9. + SI}
It is obvious that any thesis gives a new derived rule. e.g. the following derived rules follow from T 2.22 - T 
2.26.
(9) 
Rule of changing a necessity modal functor into 
possibility modal functor
(denoted below by ' â¡ /<>'):
â¡ cp
â¡ /o: ___
Ocp
(10) Rule of exchanging a necessity of conjunction by 
conjunction of necessities
(denoted below by 'â¡Â£'):
â¡ ( Cp A \|/)
â¡ K : 
â -------------------
â¡ cp/ â¡ cp/ nep
â¡ q/
(11) 
Rule of exchanging a possibility of disjunction by 
disjunction of possibilities
(denoted below by ' oA'):
O(<P v cp)
OA: .__________
Ocp V Ocp
(12) 
Rule of disjunction of necessities
(denoted below by 'An'):
â¡ cp V â¡ cp 
An : _________
n (cp v \p)
(13) 
Rule of possibility of conjunction
(denoted below by ' OK.'):

110
OK:
O(q> A \|/)
Ocp / O\|/ / Ocp
Ot|/
By the law of idempotence: p v p o p. Hence, according to CR.'-N'and SR we have: ~p => p o 
p. And so. by using SR and 1 + SE 1 the following thesis can be obtained.
Thesis 2.27
â¡ p <o> â¡ (~p =a p). â¡
Thesis 2.28
(p =Â» q) a p -Â» q
Proof:
It is sufficient to show the following implication: (p =a> q) a p =a q.
(1)
(2)
(3)
(4)
p -Â» q
P
â¡ (p => q)
p q
q. â¡
{a}
{df. '=Â»'â . 1}
{- â¡ : 3}
{- C : 2,4; + SI}
The next two theses (T 2.30 and T 2.31) belonging to the Feys' T-system are related to the axiom G2 
introduced in Godel's system. And hence, the proof of this axiom is first given below.
Thesis 2.29 ( G2 )
â¡ (p =a q) =a (dp =a nq)
Proof:
(1)
â¡ (p => q)
(2)
â¡ p
(3)
-â¡q
(4)
â¡ (p =a q) a â¡ p
(5)
â¡ ((p =a q) a p)
(6)
â¡ (p a q}
(7)
â¡ q
contr. zy
Thesis 2.30
{a}
{aip}
[+K: 1.2}
{â¡K:4}
{1= ((p =?â  q) a p â¢=â  p a q). SR : 5}
{â¡K: 6}
{3.7}
(P =^> q) A â¡ p =A> â¡ q
Proof:
(i) 
p -Â» q
(2) 
np
(3) 
â¡ (p =a q)
(4) 
np =a nq
{a}
{df. '=Â»'â . 1}
{-C : T2.29. 3}

Ill
â¡ q. â¡
{-C : 2.4; + SI}
Thesis 2.31
(P =^> q) A O ~q =a> O~p
Proof:
(1)
p -> q
(2)
o ~q
(3)
~ o~p
(4)
â¡ (p => q)
(5)
â¡ p => â¡ q
(6)
â¡ p
(7)
â¡ q
(8)
-â¡q
contr. m
{a}
{aip}
{df. '=Â»'â . 1}
{-C : T2.29. 4}
{NO ,-N. SR: 3}
{- C : 5.6}
{ Nd : 2}
[7.8; + SI}
The above theses T 2.30 and T 2.31 can be considered as equivalent (wrt the laws of exportation and 
importation T 1.12, the law of transposition or contraposition of implication T 1.14 and SR (see Subsection 1.3). 
In fact. T 2.31 can be transformed as follows: (p =>> q) a ~ â¡ q =a> ~ â¡ p . left to the reader).
Thesis 2.32 
(P^> q) A~q =a> ~p
Proof:
(1)
(2)
p =Â» q 
~q
{a}
(3)
P
{aip}
(4)
â¡ (P => q)
{df. 
1}
(5)
p => q
{- â¡: 4}
(6)
q
{-C:3.5}
contr. â¡
[2.6; + SI}
The following derived rules can be obtained (according to T 2.28, T 2.29, T 2.31 and T 2.32).
(14) 
Rule of detachment for strict implication 
(or omitting a strict implication) 
(denoted below by ' - SI'):
-SI:
cp =a> \i/
<P
(15) 
Rule of necessity of implication (denoted 
below by ' â¡ C'):
â¡ (q>=>q/) 
â¡ C :
â¡ cp => â¡

112
(16) 
Modal necessity tollens (denoted below
by ' n-Toll'):
â¡ -Toll:
<P^> T 
~ â¡ \|/
~ â¡ cp
(17) 
Strict implication tollens (denoted below 
by ' S-Toll'):
S-Toll:
<P =>> T 
~T
~<P
Thesis 2.33 
(P =^> q) A (q =a> r) =a> (p =a> r)
Proof:
(1)
p 
q
fal
(2)
q^> r
(3)
â¡ (p => q)
{df. â =Â»â â . 1}
(4)
â¡ (q => r)
{df. 
2}
(5)
â¡ ((P =v q)'7 (q r))
{â¡K:3,4}
(6)
â¡ ((P =v r) /
[SR : 5, i.e. it is assumed that there exists some formula c
such that the formulae (p q) a (q => r) and (p => r) a c
are equivalent, see below)
(7)
â¡ (p => r)
{â¡K : 6}
p =a> r. â¡
{df. '=Â»': 7, + SI}
The construction of 7 is related to the notion of interpretation (see: Definitions 1.3 and 1.4 of Subsection 
1.4). Let now cp =df (p => q) a (q => r) and =df (p =v r) a l,. According to T 2.33, the new introduced 
formula c, should satisfy the following conditions: (1) c, should not be equivalent to the previous ones, i.e <p 
and p => r1, (2) c, should depend on the same propositional variables, i.e. p, q and r, and (3) cp and q/ 
should be equivalent. In fact, by using the Karnaugh's map method
*
 different such formulae can be obtained, e.g. 
L =t (p a q) v q a r or 1; =di (q a r) v ~ p a r or also Â£3 =df ~ p a r v p a q v ~ (q v r), 
etc. (left to the reader).
Thesis 2.34 
(p a q _Â» r) _Â» (p _Â» (q =?> r))
Proof:
(1) 
p a q -Â» r
(2) 
â¡ (p a q a r)
(3) 
â¡ (p =a (q =a r))
{a}
{df. 1}
[T 1.12 : 2, i.e. laws of exportation 
and importation: see Subsection 1.3 }
{df. '=>>': 3, + SI}
p =a> (q =a r). â¡
Thesis 2.35
' Maurice Karnaugh: 1953, a refinement of Veitch's diagram: Edward W. Veitch: 1952 (e.g. see Breuer M.A. and Friedman A.D. 1977).

113
â¡ p -â¢>> (q =Â» p)
Proof:
(1)
â¡ p
{a}
(2)
~(q ->>p)
{aip}
(3)
~ n(q => P)
{df. '=>>', SR : 2}
(4)
O(q a ~p)
{ Nn.NC. SR: 3}
(5)
o ~p
{OK : 4}
(6)
-â¡p
{Nn : 5}
contr. â¡
[1.6; +SI}
Thesis 2.36
â¡ ~ p =a> (p =a> q)
Proof:
(1)
â¡ ~p
{a}
(2)
~(p
Â» q)
{aip}
(3)
~ n(p
q)
. SR : 2j
(4)
o(p A ~q)
{ Nn.NC. SR: 3}
(5)
op
{OK: 4}
(6)
~ op
{ NO : 1}
contr. .â¡
[5.6; + SI}
The following (Godel's system G3) axiom can be introduced to Feys' T-system *: â¡ p => â¡ â¡ p. And 
hence, the following thesis of reduction holds: nap o â¡ p (left to the reader). In accordance with CE (i.e. 
law of transposition or contraposition of equivalence: see T 1.14 and the next text. Subsection 1.3), we can 
equivalently obtain: ~ nap <=> ~ â¡ p. Then:oo~p o o ~ p. Since p is an arbitrary proposition we have:
â¡ â¡ cp o â¡ cp and oo ~ cp o o ~ cp.
And hence, from T 2.18 it follows that the following two formulae are theses: n op => oop and nn~p 
=> o o ~ p (left to the reader). In fact, the following two rules can be introduced.
(18) Rule of reduction of necessity (denoted below by 
'Rn'):
â¡ â¡ cp
Rn :
â¡ 
cp
(19) Rule of reduction of possibility (denoted below by 
'Ro'):
o o ~ cp
Ro:
O ~ cp
' The little encyclopaedia oj logic (1988)

114
The following thesis is satisfied.
Thesis 2.37
â¡ (p -Â»p)
Proof:
(1) 
~D(p =Â»p)
(2) 
O ~ (p =Â» p)
(3) 
O ~ â¡ (p =a p)
(4) 
OO~(P P)
(5) 
O ~ (p =?> p)
(6) 
~ â¡ (p =?> p)
(7) 
â¡ (p => p)
contr. â¡
{aip}
{ N â¡ : 1}
{df. '=>>', SR : 2} 
{Nn,SR:3}
{ Ro : 4}
{ N â¡ : 5}
{GR. - C : since 1= (p => p), 
i.e. law of identity for implication) 
{6.7}
The proofs of the next three theses are left to the reader: Theses 2.38 and 2.39 are known as strict 
implication paradoxes. Another one is also the following: p =a> (q =a> q)*. In fact, since p => (q => q) 
is a thesis, in accordance with + SI . we have: p =a> (q =a q). The remaining part of this proof is left 
to the reader.
Thesis 2.38
p a ~p =a> q. â¡
Thesis 2.39
p =a> q v ~q. â¡
Thesis 2.40
{+SI}
{+SI}
(p -> q) -> (np â¡ q). â¡ {T 2.29, + SI}
Some additional theses directly related to the above-considered Feys' T-system are given below.
Thesis 2.41
(p =a> q)A(p =a> r) <o> p =a> q at
Proof T 2.41a:
(1)
p -Â» q
{a}
(2)
p =a> r
(3)
â¡ (p => q)
{df. '=Â»'â . 1}
(4)
â¡ (p => r)
{df. 
2}
(5)
â¡ ((p =?> q) a (p =a r))
{â¡K:3.4}
(6)
â¡ (p =a q a r )
{MC. SR : 5, i.e. law of multiplication
of consequents T 1.5: see Subsection 1.3}
p a> q / r.
{df. 
6, + SI. + SE}
It can be observed that there are no propositional variables in common on the left and on the right sides of the corresponding main 
implications.

115
Proof T 2.41b:
(1) 
p -Â» q Ar
(2) 
â¡ (p =a q a r )
(3) 
â¡ ((p =?> q) a (p =a r))
(4) 
â¡ (p =a q)
(5) 
â¡ (p =a r)
(6) 
p -Â» q
(7) 
p -Â» r
(p =a> q) a (p =a> r). â¡
{a}
{df. 1}
[MC, SR : 2, i.e. law of multiplication 
of consequents T 1.5: see Subsection 1.3}
{â¡K:3}
{df. 
4}
{df. 
5}
{+K.: 6,7; + SI}
The proof of the next thesis is very similar to the previous one. And hence, it is left to the reader.
Thesis 2.42 
(p =^> r) a (q =a> r) <o> p v q =a> r. â¡
Thesis 2.43 
(p =A> â¡ q) A (q =A> nr) =a> (p =^> â¡ r)
Proof:
(1)
p -Â» â¡ q
(2)
(3)
q =a> â¡ r
P
{a}
(4)
â¡ (p =a â¡ q)
{df. â =:>â â . 1}
(5)
â¡ (q => nr)
{df. 
2}
(6)
p nq
{- â¡ : 4}
(7)
q => â¡ r
{- n:5}
(8)
â¡ q
{-C : 3,6}
(9)
q
â¡ r.?:e
{- n:8}
{- C : 7,9; + SI}
Thesis 2.44
(Op => oq) =a O (p =a q)
Proof:
(1)
Op => Oq
{a}
(2)
~ o (p =a q)
{aip}
(3)
â¡ (p a ~ q)
{ NO , NC, SR : 2}
(4)
â¡ p
{â¡K:3}
(5)
â¡ ~q
(6)
op
{â¡/O: 4}
(7)
oq
{-C: 1,6}
(8)
~ oq
{ No : 5}
contr. â¡
{7,8}

116
Thesis 2.45
(P =>> o q) A ~ o q =a> o ~ p
Proof:
(1)
p -:â > O q
{a}
(2)
~oq
(3)
~ o~p
{aip}
(4)
â¡ (p a o q)
{df. â =Â»â â . 1}
(5)
p
{- â¡ : 4}
(6)
â¡ p
{No,-N, SR: 3}
(7)
p
{- n:6}
(8)
oq
{-C : 5,7}
contr. a:
[2,8; + SI}
The following De Morgan 's laws are satisfied.
Thesis 2.46
~ â¡ (p a q) <o> ~ â¡ p v ~ â¡ q
Proof:
O (~ p v ~ q)
O ~ p v O ~ q
~ â¡ p v ~ â¡ q. â¡
~ â¡ (p a q)
{N â¡ , NK, SR}
{OA}
{Nn , SR. + SE}
Thesis 2.47 
~ o (p v q) <o> ~ op a ~ oq. â¡
The proof of T 2.47 is similar to the proof of the previous thesis and it is left to the reader. The next rules 
follow directly from the last considered theses (T 2.38, T 2.39, T 2.41, T 2.42, T 2.44 - T 2.47).
(20) 
Strict rule of Dims Scotus (denoted below by 'SDS'):
<P
SDS:
V
(21) 
Contrapositive strict rule of Duns Scotus (denoted below 
by 'CSDS'):
<P 
CSDS: -------------
V v~V
(22) 
Strict law of multiplication of consequents (denoted 
below by 'SMC'):
<P =A> V
SMC : 
m v
<P =:â > q/ a %

117
(23) 
Strict law of law of addition of antecedents (denoted 
below by 'SAA'):
<P -Â» %
SAA . 
yy â >> y
<P v y -Â» %
(24) 
Rule of implication of possibilities (denoted below by 
'C
'):
o
O cp -> O i|f
Co :
O (cp => \|/)
(25) 
Modal possibility tollens (denoted below by '
Toll'):
O-
o ~ cp
(26) 
Modal De Morgan's law for necessity of conjunction 
(denoted below by 'NnK'):
~ â¡ (cp A \p)
NDK :
~ â¡ cp V ~ â¡ cp
(27) 
Modal De Morgan's law for possibility of disjunction 
(denoted below by 'N A'):
o
~ O (cp V cp)
NoA:
~ o cp / ~ o cp / ~ o cp
~ o cp
There exist two approaches concerning semantics of modal logic systems: algebraic semantics and Kripke's 
semantics (called also relational or frame semantics: see Kripke S. 1959, 1963, 1965)*. Since the most of 
research is related to the second approach, a short review is given below.
Let consider the following system JT =df (K ; g ; p). where K 0 is the set of all possible "worlds". g e 
K is said to be "real world", and the binary relation p K x K is said to be an accessibility relation, where 
hi p h2 iff the world h2 is possible wrt hi (i.e. any proposition which is satisfied in h2 should be possible in 
hi, for any hi, h2 e K). In accordance with the law of contraposition of implication, any proposition which is 
not possible in hi should not be satisfied in h2.
Let h e K and cp be a formula which is satisfied in h. Then cp is possible in h. And hence, it is assumed 
that the above relation p is reflexive in K, i.e. h p h (for any h e K). Next we shall assume that K is 
partitioned into two disjoint and non-empty subsets of normal and non-normal (or quarrel) worlds, denoted by 
N and Q, respectively. Any such system JT is said to be a Kripke's frame (or a modal frame). It can be 
observed that contradictions are excluded in normal worlds, but in the case of non-normal worlds all becomes be 
possible. The need of introducing non-normal worlds follows from the analysis of some modal logic systems 
where the Godel's rule GR fails.
' The models introduced by S. Kripke were oriented to some modal propositional calculi (Saul Aaron Kripke, bom 1940). An earlier 
similar constructions concerning deontic logics was presented by Kanger S. (1957).

118
Let P be the set of modal propositional formulae obtained under Definition 2.6. The Kripke's model is 
introduced as a pair (x.f). where f : P x K -> {0,1} is an arbitrary map. We shall say that f is a modeling 
function for <p e P wrt Di' and that <p is satisfied in h e K iff f(cp. h) = 1. A formula <p is a thesis in 
Kripke's model (JT, f) iff f(cp, h) = 1 (for any h e K ). And this formula is a thesis in Kripke's frame Di' iff 
it is a thesis in (JT, f) (for all possible choices of f). In a natural manner the last two notions can be extended 
for classes of such frames or models by assuming that <p is a thesis in any member of the corresponding class. 
The contents of the frame Di' is introduced as the set of all formulae satisfied in any h e K and for all possible 
choices of f.
The values of f for compound formulae can be defined by an inductive way, e.g. f(~ cp, h) = 1 iff f(cp, h) 
= 0, f(cp =x> cp, h) = 1 iff f(cp, h) = 0 v f(cp, h) = 1, f(cp a cp, h) = 1 iff f(cp, h) = 1 a f(cp, h) = 1, etc.
Next by hp =df { Il e K / hi p 112 } we shall denote the subset of all worlds out-incident to hi e K. We 
shall say that cp e P is necessary in the world hi, i.e. f(n cp, hi) =1 iff V I12 e hi* ( f(cp. I12) = 1). Ina 
similar way, cp e P is possible in the world hi, i.e. f(Ocp. hi) =1 iff 3 I12 e hi* (f(cp. I12) =1).
There exists a possibility of obtaining some different Kripke's frames depending on the required properties 
for p. e.g. by assuming a restriction of p to N and g e N we can obtain the S2 - Kripke's frame (related to 
the Lewis' system S2) or also S4 - and S5 - Kripke's frames, assuming that the accessibility relation p is 
transitive and equivalence, respectively, etc.
The above presented notion of thesis, related to a given modal logic system, allows for introducing the 
completeness problem associated with any such system (this is omitted here).
The above presented semantics can be generalised for fuzzy modal systems by assuming as a codomain of f 
the whole closed interval [0,1], The last may be topic for a further research.
There exist very many applications in modal logic field, e.g. such as: agentive and situational applications, 
terminological logic, topological applications and complex systems, model constructions in set theory (such as: 
forcing and non-wellfounded set theory), unravelling, etc. One of them is related to the notion of grounding in 
communications*, first introduced by Clark H.H. and Brennan S.E. (1991). And this notion was used in the case 
of grounding modal language in communications of artificial cognitive agent systems (Katarzyniak R.P. 2007). 
Here, the analysis of grounding requirements was given in the case of logic equivalences extended with modal 
functors of possibility, belief and knowledge (a more formal treatment is omitted).
The two basic modal functors of necessity and possibility are used below in the case of constructing deontic 
logic systems.
Deontic logic
Deontic logic is a deduction system in which theses appear logical constants such as: 1 it is obligatory that1 
(or ' it ought to be the case that'), ' it is permitted (or permissible) that' and ' it is forbidden (or prohibited) 
that'. The term 'deontic ' is derived from ancient Greek "8eov", roughly meaning "that which is binding or 
proper".
This deduction system is a formal study of the normative concepts of obligation, permission and prohibition 
represented by the above logical constants. These concepts and their logical relationships to one another are 
distinguished from value concepts such as: goodness and badness (or evil) as well as from such agent-based 
concepts as: act. choice, decision, freedom, and will. And hence, deontic logic is not itself an ethical theory that 
tells us what in fact is permitted, obligatory or forbidden, but it is or should be a part of such a theory. A complete 
ethical or moral theory would encompass the logic of all these different concepts and not just the normative ones. 
And so. with any ethical theory should be associated some deontic logic system. The study of different deontic 
logics is a part of metaethics. Moreover, the normative concepts of obligation and permission are similar in many
Grounding in communication involves mutual knowledge, mutual beliefs, and mutual assumptions, which are necessary for 
communication between two people: "They cannot even begin to coordinate on content without assuming a vast amount of shared information 
or common ground - that is, mutual knowledge, mutual beliefs, and mutual assumptions. And to coordinate on process, they need to update 
their common ground moment by moment".

119
respects to the modal concepts of necessity and possibility. In fact, the above nonnative concepts are also modal 
ones (Cocchiarella N.B., in the late 1960s).
Some logical relations based on deontic concepts have been observed in ancient times, e.g. Indian Mimamsa 
school as a part of Hindu philosophy (* 1 Mimamsa 1 derived from the Sanskrit word
*
 1 investigation1 and having 
as a central aim the elucidation of the nature of 'dharma'. understood as a set ritual obligations and prerogatives 
to be perfonned properly and hence this nature is not accessible to reason or observation...). similar constructions 
have been observed in Ancient Greece, also in the late middle ages (a comparison of deontic concepts with the 
alethic ones. e.g. the logical relations between the notions licitum, illicitum, debitum. and indifferens wrt the 
notions possible impossible, necessarium, and contingens, respectively: Gottfried Wilhelm Leibniz 1646 - 1716), 
etc. However, the first modem formal system of deontic logic was proposed by Maliy E. (1926: Ernst Maliy 1879 
- 1944). In the Maliy's deontic system were introduced two logical constants, one unary and two binary 
connectives. But this system led to some counterintuitive results. (Sart F. 2009). In fact, such earlier attempts 
were fragmentary. And so, the first viable system of deontic logic was introduced by von Wright (1951: Georg 
Henrik von Wright 1916 - 2003). The formula validation in the last system bears many resemblances with 
Wittgenstein's troth table method (Wittgenstein L. 1922: Ludwig Wittgenstein 1889 - 1951). As in modal logic 
systems, the general approach in constructing deontic logic systems is the axiomatic one. An example deontic 
system is considered below.
* Sanskrit (samskpta vale "refined speech"), is a historical Indo-Aryan language and the primary liturgical language of Hinduism and 
Buddhism as laid out in the grammar of PSnini. around the 4lh century b.c. Its position in the cultures of the Greater India is similar to that of 
Latin and Greek in Europe and it has significantly influenced most modem languages of the Indian subcontinent, particularly in India. 
Pakistan and Nepal. Today, it is listed as one of the 22 scheduled languages of India and is an official language of the state of Uttarakhand 
(The Free Encyclopaedia. The Wikimedia'Pbnndation. Inc.).
I Alan Ross Anderson (1925 - 1973)
The notion of deontic propositional formula can be introduced in a similar way as in the case of modal logic. 
We have the following definition. Provided there is no ambiguity, below the deontic functors of obligation ( O ). 
permission ( P ) and forbiddance (F ) are denoted by (the Maliy's unary connective) !,8 and ct. respectively.
Definition 2.7
A deontic propositional formula is:
1. 
Any propositional variable.
2. 
If cp and are some propositional formulae, then such formulae are also: ~ (cp). (cp) a (\p), (cp) v (\p), 
(cp) =a (\p). and (cp) (rp). ! (cp). 8 (cp). and ct (cp).
3. 
Every propositional formula in this propositional calculus either is a propositional variable or is formed from 
propositional variables by a single or multiple application of rule (2).
The main purpose of this calculus is the same as in the classical case.
In the next considerations we shall use some deontic constant (i.e. 0-ary modal operator), standing for some 
sanction or related to some violation (e.g. bad tiring, prohibition, conflict situation, etc.) and denoted by asterisk 
(*).
 By using this constant we have a possibility of defining the above unary functor ! in terms of the alethic 
modal functor â¡ (Anderson A.R. 1958)k
!cp Odf â¡ (~ cp => *).
for any deontic propositional formula cp.
The following two definitions are also used below.
Sep Odf O (cp a~ *)  and

120
CTtp Odf ~ Sep.
There are a number of possible choices that one can make in regard to what deontic logic to adopt. Much will 
depend on various metaethical considerations. The axiomatic approach in any deontic logic system is restricted to 
the use of the following three inference rules: RR. - C and also the following implication {obligation rule).
(OBR) 1= cp =4> 1= !cp,
i.e. that what is provable in deontic logic is obligatory (Cocchiarella N.B.. in tire late 1960s)
*.
Let <p =df y => %. According to OBR, the following derived rules can be obtained.
(Di) 
l= (\p =a x) =^> 
>= O'!7 => !%)-
(D2) 
1= (\p =a x) => 
1= (8\|/ =A Â§x),
(D3) 
1= (\p =A X) => 
1= 
=> <w) and
(D4) 
l= (\p o x) => 
1= (!q/ <=> !x).
The first two derived rules are directly related to theses T 2.55 and T 2.59 given below. The next rule is 
related to SR and the law of contraposition of implication CC.
Let xp o x be a thesis. Hence, by -E1 it follows that l= (xp => x) and != (x => M7)- According to DI, 
we have: |= (xy => x) => â¢= O'!7 => ^X) and (x => M7) => Ox => ! M7)- And then, by using MAC 
(rule of multiplication of the antecedents and consequents of two implications), + E1 and SR we have D4 (a 
more formal treatment is omitted).
The assumptional system style is used in the next considerations. Some example theses and their 
corresponding proofs are given. Moreover, the following formula is accepted, said to be a basic axiom (of 
negating the twofold standards).
~ !(cp a ~q>).
And so, contradictory obligations are not allowed. Any iteration of deontic constants, e.g. such as !!p, !op, 
!(!p =^> p), etc. is omitted below. In fact, such iterations may lead to difficult interpretation problems. The 
following two theses are satisfied (! and 8 are mutually dual and any of these two connectives can be expressed 
by the another one).
Thesis 2.48
~ !P Â« 8~p
Proof:
~ !P
~n (~p =a *)  
O ~ (~p =A *)
{df.'!', SR} 
{Nn} 
[NC, SR} 
{df. 8 }
O (~P A~ *)  
8 ~ p. â¡
Thesis 2.49
" But not vice versa, in fact it can be observed the opposite implication may involve some speculative inference.

121
~ 8p o ! ~ p
Proof:
8p
~ O (P A ~ *)
â¡ (~P V *)
â¡ (P => *)  
! ~ p. â¡
{df. 'S'. SR}
{NO.NK, -N, SR}
[CR. SR}
{df.'!'}
In accordance with T 2.48 and T 2.49. the following two rules can be obtained.
(28) Rule of negating a deontic functor of obligation 
(denoted below by 'N!'):
N!: AT
8 ~ <p
(29) Rule of negating a deontic functor of permission 
(denoted below by 'NS'):
~ Sep
N8:
! ~<P
Thesis 2.50
! (p a q) o !p a !q
Proof:
! (p a q)
â¡ (~ (p a q) =a )*
â¡ (~p v ~q =a )*
â¡ ((~p =?> )  a (~q =a ))
*
*
â¡ (~ p => )  a â¡ (~ q => )
*
*
{df. â !'} 
[NK. SR} 
[AA. SR} 
{â¡K}
Thesis 2.51
!p a !q. â¡
{df. â !'}
8 (p v q) o 8p v 8q
Proof:
8 (p v q)
o o ((p v q) a ~ *)
o O(pA~
*vqA~
*)
o O (p a ~ *)  v O (q a ~ *)
8p v 8q. â¡
{df. '8'}
{a is distributive over v}
{OA}
{df. '8'}
Since a and v are associative T 2.50 and T 2.51 can be generalised for more than two. but a finite number, 
arguments.
Thesis 2.52
!p v !q =a !(p v q)

122
Proof:
!p v !q
o â¡ (~ p =a *)  v â¡ (~ q =a *)  
=^> â¡ ((- p *)  v (~q =?> *))
o â¡ (~ (p v q) =?> *)
!(p v q). â¡
{df.'!', SR} 
{An} 
[AA, SR} 
{df. â !'}
Thesis 2.53
8 (p a q) =a 8p a 8q
Proof:
8 (p a q)
o (p a q a~ *)
o ((p a~ *)  A(q a~ *))
=A O (p A ~ *)  A O (q A ~ *)
{df.'S' associativity for a, SR}
{associativity and commutativity for a. 
idempotence for '~ * '. SR}
{OK}
{df. '8'}
Thesis 2.54
!p =a 8p
Proof:
(1)
!P
(2)
~8p
(3)
!~p
(4)
!p A !~p
(5)
!(p A ~p)
(6)
~!(p a ~p)
contr.
{a} 
{aip} 
{N6:2} 
{+K : 1.3} 
{T 2.50 : 4} 
{is an axiom} 
{5.6}
The following inference rules can be obtained (T 2.50 - T 2.54).
(30) 
Rule of exchanging an obligation of conjunction by 
conjunction of obligations
(denoted below by '! K'):
!K:
!(cp A y)
!q> / !q/ / !cp
(31) 
Rule of exchanging a permission of disjunction by 
disjunction of permissions
(denoted below by ' SA'):
8A :
8(cp v qt)
Sep v Stp
(32) 
Rule of disjunction of obligations 
(denoted below by 'A!'):

123
A! :
!cp v !\p 
!(cp v \p)
(33) 
Rule of permission of conjunction (denoted below 
by ' 8K'):
8(cp A \|/)
8K: 
----------------
Sep / 8\p / Sep
Sep
(34) 
Rule of changing an obligation deontic functor into 
permission deontic functor
(denoted below by ' !/8 '):
!/8 :
!cp
Sep
The deontic form of the Gbdel's axiom (G2) is presented as follows.
Thesis 2.55
!(p =>q) =?> (!p =?> !q)
Proof:
(1)
!(p =^q)
{a}
(2)
!p
(3)
!(p =>q) a !p
{+K : 1,2}
(4)
!((p =>q) a p)
{!K: 3}
(5)
!(p a q)
{1= ((p => q) a p Â« p a q), SR : 4}
!q. â¡
{!K:5}
Thesis 2.56
(8p =?> 8q) =?> 8(p =?> q)
Proof:
(1)
8p =a 8q
{a}
(2)
~8(p =a q)
{aip}
(3)
1 ~ (P => q)
{NS: 2}
(4)
!(p a ~q)
{NC, SR: 3}
(5)
(6)
!P
! ~q
{!K:4}
(7)
~8q
{N8 : 6}
(8)
8p
{!/Â§ : 5}
(9)
8q
contr. â¡
{-C: 1,8} 
{7.9}
In accordance with the laws of exportation and importation, T 2.55 and the next thesis are equivalent (see T 
1.12 of Subsection 1.3). By the way, another two proofs of T 2.57 are given below.
Thesis 2.57
!(p =>q) a !p =a !q

124
ProofT2.57(by using T 2.50)
(1) 
!(p Aq)
(2) 
!P
(3) 
!((p=>q)Ap)
(4) 
!(p a q)
!q. â¡
{'K: 1,2}
{SR : 3, (p => q) A p o p A q}
{!K: 4}
Proof T 2.57(by using T 2.55)
(1)
(2)
(3)
!(P =^q)
!P
!p =a !q 
!q. â¡
{a}
{-C : T 2.55.1]
{-C:2.3}
Thesis 2.58
!(p =Aq) a ~8q =a ~ 8p
Proof:
(1)
(2)
!(p =Aq) 
~8q
{a}
(3)
! ~q
{N8 : 2}
(4)
!((p =a q) a ~q)
{+K, !K: 1.3}
(5)
!(~p A ~q)
{l=((p q) A ~q Â« ~p A ~q). SR : 4}
(6)
! ~P
{!K:5}
~ 8p. â¡
{N8 : 6}
And hence, by using the forbiddance functor ct 
follows.
and SR. the last thesis can be presented equivalently as
!(p =Aq) a aq =a op.
Thesis 2.59
!(p =>q) =a (8p =a 8q)
Proof: 
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
!(p =^q)
8p
~8q
! ~q
!((p =a q) a ~q)
!(~P a ~q)
! ~P
~8p 
contr. â¡
{a}
{aip}
{NS : 3}
{+ K. !K: 1.4}
{1= ((p =?â  q) a ~ q â¢=â  ~p a ~ q). SR : 5}
{!K:6}
{N 8 : 7}
{2.8}
Since !(p => q) o ~ 8 ~ (p => q), the following thesis can be obtained (by using rules NC. SR and 
definition of ct: left to the reader).
Thesis 2.60

125
!(p =>q) o ct(p a ~q). â¡
De Morgan's laws of deontic logic are presented in the next two theses.
Thesis 2.61
~ !(p a q) o ~ !p v ~ !q
Proof:
~ !(P a q)
8(~p v ~q) 
8 ~ p v 8 ~ q 
~ !p v ~ !q. â¡
{N!,NK, SR}
{SA}
{N!, SR}
Thesis 2.62 
~ 8(p v q) o ~ 8p a ~ 8q
Proof:
~ 8(p v q)
!(~P a ~q) 
! ~P A ! ~q 
~ 8p a ~ 8q. â¡
{N8, NA, SR}
{!K}
{N8, SR}
In an equivalent way T 2.62 can be presented as follows.
ct(P v q) o ap a aq.
Thesis 2.63
!(p =a r) a !(q =^> r) o !(p v q =a r)
Proof:
!(p =a r) a !(q =a r)
!((p => r) a (q =a r)) 
!(P v q =a r). â¡
{!K}
{SR}
In fact, since l= ((p => r) a (q => r) o p v q => r) the above T 2.63 follows directly from the rule D4, 
!K and SR. In a similar way the following thesis can be obtained.
Thesis 2.64
!(p =a q) a !(p =?> r) o !(p =a q a r). â¡
Thesis 2.65
!(p =a q) a !(r =^> s) =a (!(p a r) =a !(q a s))
Proof:
(1)
(2)
(3)
(4)
(5)
(6)
!(P =s> q) 
!(r =a s) 
!(p a r) 
!p =a !q 
!r =a !s 
!P
{a}
{-C : T2.55, 1}
{-C : T 2.55, 2}

126
(7)
(8)
(9)
!r
!q
!s
!(q a s). â¡
{-C : 4.6}
{-C : 5.7} 
{!K:8.9}
The proof of T 2.65 can be also obtained by using the rule DI, !K., SR. T 2.55 and T 2.69 (given below: left 
to the reader).
Thesis 2.66 
8(p =?> q) =a (!p v 8r =a 8(q v r))
Proof:
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
8(p =a q) 
!p v Sr 
~ 8(q v r) 
~8q 
~8r
8 ~ p v 8q 
!P 
8~p
~ !P 
contr. â¡
{a}
{aip}
{T 2.62, - K.: 3}
{CR. SR. 8A: 1} 
{-A: 2.5} 
{-A: 4.6} 
{N!:8} 
{7.9}
Thesis 2.67
!p =a !(p v q)
Proof:
(1)
!P
(2)
~ !(p v q)
(3)
8( ~ p a ~ q)
(4)
8~p
(5)
~ !P
contr. â¡
{a}
{aip}
{N!.NA. SR: 2}
{8K.: 3}
{N! : 4}
{1.5}
Thesis 2.68
ap =A !(p =A q)
Proof:
(1)
CTP
(2)
~ !(p =A q)
(3)
~8p
(4)
8(p a ~q)
(5)
8p
contr. â¡
{a}
{aip}
{ df. a : 1} 
{N!.NC. SR: 2}
{8K : 4}
{3.5}

127
In accordance with the law of transitivity for implication TC. we have: 1= ((p =a q) a (q r) (p 
r)). And hence by the obligation rule OBR andC it follows that l= !((p => q) a (q => r) => (p => r)). 
And so. the following thesis is satisfied.
Thesis 2.69
!(p =a q) / !(q =^> r) =a !(p =a r)
Proof:
(1) 
!((p =} q) a (q =} r) (p r)) {TC. OBR.-C}
(2) 
!((p q) a (q =} r)) =} !(p r) {-C:T2.55.1}
!(p => q) a !(q => r) =a !(p =a r). â¡ {!K. SR: 2}
Obviously, the proof of T 2.69 can be also realised without using the obligation rule OBR. In fact, since (p 
=> q) a (q =a r) and (p =a t)a^ are equivalent the following proof can be obtained (see the proof of T 2.33).
Proof T 2.69:
(1) 
!(P 
q) a !(q =a r) 
{a}
(2) 
!((p 
=?> q) a (q =a r)) 
{!K: 1}
(3) 
!((p 
=> r) A Q 
{SR : 2. (p => q) A(q => r) and
(p => r) a c are equivalent} 
{!K:3} '
!(p =a r).
Thesis 2.70 
!(p =?> q) =a (!(p v r) =a !(q v r))
Proof:
(1)
(2)
(3)
!((p =?> q) =a (p v r =a q v r))
!(p a q) a !(p v r a q v r)
!(p v r =a q v r) =a (!(p v r) =a !(q v r))
!(p =?> q) =a (!(p v r) =a !(q v r)). â¡
TCp qi =Ap v r =â¢ q v r)). OBR.- C} 
{-C:T2.55.1}
{T2.55}
{T 2.69 : 2.3}
The proof of the next thesis is similar to the proof of the previous one and hence it is left to the reader.
Thesis 2. 71 {Hauber's deontic law of conversion of implications')
!(p =a q) a !(r =^> s) a !(p v r) a ct( q a s) =a !(q =a p) a !(s =a r). â¡
Some derived rules related to the above proved theses are given below.
(35) 
Rule of obligation of implication (denoted below by '
!C'):
!(<p^T)
(36) 
Rule of implication of permissions (denoted below by 
'C8'):
8(cp => q/)

128
(37) 
Deontic rule of detachment for implication (or omitting 
an implication, denoted below by !C ):
!(cp =a ep)
-!C: !cp
(38) 
Deontic obligation tollens (denoted below by ' !-Toll):
!(cp =a ep)
I-Toll:
~ Sep
(39) 
Deontic De Morgan's law for obligation of conjunction 
(denoted below by 'N!K'):
~ !cp v ~ !\|/
(40) 
Deontic De Morgan's law for permission of disjunction 
(denoted below by 'N8A'):
~ 5(cp v ep)
N8A: 
--------------------------
~ Sep / ~ Sep / ~ Sep
~ Sep
(41) 
Deontic law of addition of antecedents (denoted below 
by '!AA'):
!(cp =a x)
!AA :
!(<p v ep =a x)
(42) 
Deontic law of multiplication of consequents (denoted 
below by '!MC'):
!(cp =a ep)
!MC : 
!(cp %)
!(cp =a V a x)
(43) 
Deontic rule of multiplication of the antecedents and 
consequents of two implications (denoted below by 
'!MAC'):
!(cpi =A epi)
!MAC : 
!(<p2
!(cpi a cp2) =a !(epi a ep2)
(44) 
Deontic rule of joining a disjunction (denoted below 
by '+!A'):
!cp
+!A :
!(cp v ep)
(45) 
Deontic rule of transitivity for implication (denoted 
below by '!TC'):

129
!(cp =a q/)
!TC : 
!(V=> 
X)
!(cp =a x)
Let q/ be a logical consequence wrt cpi,cp2. .... cpn. Then by T 1.23 (see Subsection 1.5) it follows that 1= cpi 
a q>2 a ... a <pn =a q/. Using in turn rules OBR, - C. !C. !K, and SR we can obtain: 1= !cpi a !cp2 a ... a !cpn 
=a ! v|/_ And hence, as in modal logic, any logical consequence involves some deontic logical consequence.
Besides the beginning of intensive investigations in deontic systems, there can be observed calls in question in 
regards to certain theses, i.e. any such thesis have been considered as non-intuitive and hence distinct from the 
common sense. As an example, the above thesis T 2.67 is a deontic representation of the well-known Ross' 
paradox for obligation
*
 (Ross A.N.C. 1941). It was argued that a proposition of the form !(p v q) is a 
confirmation of possessing a choice between realisation of two activities. The contra-argumentation was mainly 
based on the fact that the possessing of choice should be depending on some additional circumstances. And 
hence, the sense of the above proposition do not decide in advance if really such choice is necessaiy (similar 
considerations have been given wrt T 2.51, etc. (see: The little encyclopaedia of logic 1988). In fact, a good 
intuition should not necessary be a correctness criterion for a given proof.
Generally, there were presented various deontic systems, e.g. DKr, D, DM, DBr, etc. In particular, there have 
been made an attempt of constructing the deontic logical constants !. 8. and a in a way more adequate to their 
common sense. And so. the interpretation difficulties seem to be the main reason in constructing relative deontic 
systems. Such extensions are based on the idea that a de re obligation may depend on circumstances in different 
situations. And this idea suggests that a conditional binary concept of obligation and similarly of permission may 
be more appropriate than the above monadic one (Cocchiarella N.B., in the late 1960s). For example, the 
propositional formula !(cp / q/), associated with the conditional (or relative) obligation functor !(â¢â¢â¢/â¢â¢â¢). might 
be read as: "'it is obligatory that cp given (or conditional on) the circumstances that q/". where cp and q/ may be 
arbitrary classical logic formulae (see Definition 1.1 of Subsection 1.1). Obviously, if q/ is a thesis then this 
functor becomes equivalent to the previous unary one. The rest two conditional deontic functors, i.e. 8(â / â¢â¢â¢) 
and ct(â / â¢â¢â¢) can be introduced in a similar way. In fact, the conditional forbiddance functor can be defined as 
follows: A(<p / q/) <=>df 
!( ~ cp / q/). But. in the case of conditional permission functor the corresponding
definition 8 (cp / q/) Odf ~ a(cp / q/) will contribute a more specific sense of this notion (The little 
encyclopaedia of logic 1988). The following two axioms are presented in the last work (some example derived 
rules and theses are also given below).
(RDl) !(cp a q//% v f) o !(cp/%) a !(q//%) a !(cp/Q a !(q//Q
(RD2) ~(!(cp/q/v ~q/) a !(~cp/q/v ~ q/))
Since cp. q/. % and Â£ may be arbitrary in accordance with the laws of idempotence and SR. the following two 
shortened versions of RDl can be obtained.
(RDl . 
)
' SV / v=1Jt V
(RDl /c )
sv / q =df % 7
!(cp/% V ;) A2> !(cp / x) A !(cp/Â£) 
!(cp A q//x) Â« !(cp/%) A !(q//x)
Moreover, since 1= (q/ v ~ q/) (the Aristotelian law of excluded middle), by Thesis 2.50 it follows that RD2 
is equivalent to the basic axiom: ~ !(cp a ~ cp).
Let l= (cp => q/) be a classical logic thesis. Then the following rules can be considered as derived:
' Alf Niels Christian Ross (1899 - 1979)

130
(Ri) !(% / v) !(% /cp)
(R2) !(cp /%) =a !(q//%)
Similar rules can be derived by assuming the conditional deontic functors 8 and ct (this is omitted: see 
Formal logic. Encyclopedical outline with applications to informatics and linguistics 1987). Some example 
theses are given below. Obviously, any such thesis should involve some new derived rules related to arbitrary 
classical logic formulae (the use of assumptional system style in the proofs given below is left to the reader).
Thesis 2.72
!(p/q) =a !(p/q a r)
Proof:
Since l= (q a r => q), corresponding to K', the proof follows directly from the above rule Rl. by 
assuming: % =df p. q/ =df q. and q> =*  q a r. â¡
The proof of the next thesis is similar wrt R2 and classical rule '+ A', since 1= (p => p v r).
Thesis 2.73
!(p/q) =a !(p v r/q). â¡
Thesis 2.74
!(p =a q/r) o !( ~p v q/r)
Proof: left to the reader. â¡
Thesis 2.75
!(p => q/r) a !(p/r) =a !(q/r)
Proof:
In accordance with the law of transitivity for implication TC, we can obtain.
!(p =a q/r) a !(p/r) =a 
!((p a q) a p/r) 
(RD1 ,t 
)
sv / q =1Jt z'
=A 
!(p A q/r) 
Hp A qr.- p A p A qi. SR}
=A 
!(p/r) A !(q/r) 
(RD1 ,t 
)
=a 
!(q/r). â¡ 
{-K}
The following theses are also satisfied.
Thesis 2.76
!(~p/q) => !(p=> q/q Ar)
Proof:
Thesis 2.77
(~ p /q)
=A
!(~p 'v' q/q)
[T 2.73. r -dl q}
=A
!(p =a q/q)
[T 2.74. SR. r =df q}
=A
!(p =A q / q a r). â¡
[T 2.72}

131
!(p => q/s) a !(q => r/s) => !(p => r/s)
Proof:
!(p => q /s) a !(q => r/ s)
=a !((p =s> q) a (q =a r)/s)
=a !((p =a r) a r/s)
(RD! )
sv / 5 Ar Z
{SR. it is assumed that there exists some 
formula g such that the formulae (p => 
q) a (q => r) and (p => r) a g are 
equivalent: e.g., see the proof of T 2.33)
Thesis 2.78
=a !(p =a r/ s). â¡
!( ~ (p v q)/r) o !( ~p/r) a !( ~q/r)
Proof:
!( ~ (p v q)/r)
!( ~ p a ~q/r)
!( ~p/r) a !( ~q/r).
{NA. SR}
(RD! , c )
sv / / Ar Z
Thesis 2.79
!(p/~(q a r)) o !(p/~q) a !(p/~r)
Proof:
!(p / ~ (q a r))
!(p/~q v ~r)
!(p / ~ q) a !(p /~ r). â¡
{NK. SR} 
(RD! , 
sv / tir=.,o
Any temporal logic system uses the notion of time. The next considerations are a brief introduction to such 
logic systems.
Temporal logics
Temporal logic (or in general: logics) is a deduction system for representing and reasoning about propositions 
qualified in terms of time. This logic is sometimes also used to refer to tense logic, a particular modal logic - 
based system of temporal logic, with reference to the grammatical tenses and introduced by Prior in the late 
1950s (e.g. see: Prior A.N. 1957, 1967)
*.
 And so, there was studied the possibility of using Diodorus Cronus' 
ideas (related to ''strict" or "strong" implication) to contemporary works in modal logic by taking into 
consideration time. Subsequently, it was shown a possibility of defining the whole temporal functors in terms of 
"since" and "until" (by assuming a continuous linear ordering: Kamp H. 1968).
Typical examples of dependencies between modal notions having application also to temporal notions are 
given below (Formal logic. Encyclopedical outline with applications to informatics and linguistics 1987).
If always cp then cp
If cp then sometimes cp
If always cp then sometimes cp
It is not true that always <p iff sometimes not <p
â¡ cp => cp
cp =A Ocp
â¡ cp => Ocp
~ â¡ cp O O ~ cp
' Arthur Norman Prior (1914 1969)

132
It can be observed that any relationship between the grammatical tenses is not possible to be described using 
classical propositional logic. An example of such inference may be the following: " If you have finished this 
course then you were given a student visa" (obviously, the opposite implication is not always satisfied). And 
hence, the above linguistic motivation was well-argued. In fact, there were also some philosophical motivations 
of using such logic (e.g. the notion of determinism*).
* Determinism is the general philosophical thesis that states that for everything that happens there are conditions such that, given them, 
nothing else could happen. There are many versions of this thesis. Each of them rests upon various alleged connections, and 
interdependencies of things and events, asserting that these hold without exception. The wide variety of deterministic theories throughout the 
history of philosophy have sprung from diverse motives and considerations; some of which overlap considerably. All should be considered in 
the light of their historical significance, together with certain alternative theories that philosophers have proposed (see The Free 
Encyclopaedia, The Wikimedia Foundation, Inc).
Subsequently, temporal logic has been developed further in the area of computer science, in particular it has 
found an important application in formal verification to state requirements of hardware or software systems. For 
instance, one may wish to say that whenever a request is made, access to a resource is eventually granted, but it is 
never granted to two requestors simultaneously. Such a statement can conveniently be expressed in a temporal 
logic (public domain).
The use of Petri nets is another way for modelling such processes as above (in general: for modelling of 
discrete event systems, e.g. computer or communication networks, automated manufacturing systems or other 
large-scale plants, reactive programs such as computer operating systems, embedded and process control 
programs or other concurrent and real-time programs, office information systems and so on). These nets, as a 
general purpose mathematical model, were originally introduced for describing relations existing between 
conditions and events (Carl Adam Petri 1962: 1926 - 2010). The Petri nets has gained increased usage and 
acceptance as a basic tool for representation, analysis, and synthesis. So firstly, by using Petri nets we have a 
possibility to model and visualize types of behaviour involving parallelism, concurrency, synchronization and 
resource sharing. Secondly, the theoretical results are plentiful. The properties of these nets have been and still 
are extensively studied. There exist many net models (from special to higher net models, e.g. condition-event 
nets, place-transition nets, individual-token nets, etc. see: High-level Petri Nets 2000, 2005). Petri nets are 
conventionally represented in terms of sets and operations on sets (a more formal treatment is omitted in this part 
of the study).
The following two aspects of temporal logic systems are considered below. Initially it is considered the 
Prior's tense logic system (f ormal logic. Encyclopedical outline with applications to informatics and linguistics 
1987). An extension of tense logic in the area of computer science was originally given by Manna Z. and Pnueli 
A. (1992. 1995).The proposed temporal logic system was used in the specification and verification of reactive 
programs. A brief introduction to this excellent work is next presented.
Prior's tense logic
The logical features of the grammatical tenses can be described by means of introducing the following two 
primary tense functors: 'it was the case that...' and 'it will be the case that...' corresponding to the past and 
future tenses and denoted below by P and F . respectively. Moreover, it is assumed that the lack of functor is 
associated with present tense. Let cp be arbitrary classical logic formula. The next two functors can be 
introduced as follows.
Gcp <=><jf ~ F ~ cp , i.e. 'it will always be the case that...'
Hep Odf ~ P ~cp , i.e. 'ithas always been the case that...'
In accordance with the last two definitions, the conjunction Gcp a Hep can be interpreted as: '<p is eternal 
truth '. Moreover, by using the law of contraposition of equivalence CE and N' we can obtain: F ~<p o

133
~ Gcp. Since cp may be arbitrary, by assuming cp Odf ~ \p and using SR we have: F'p o ~ G ~ cp. In a 
similar way, P'p o ~ H ~ \p. And hence, F and P can be dually introduced by using G and H.
The following minimal tense logic system was introduced by Prior A.N. (1967).
(Pl) G(cp => \p) => (Gcp =a Gcp)
(P2) FT(cp => cp) => (Hep =A Hip)
(P3) cp =a HFcp
(P4) cp =a GPcp
In addition to the rule of detachment for implication, i.e. C', the following two rules have been also 
introduced.
(46) 
Tense logic rule of joining G functor
(denoted below by '+ G'):
<P
+ G :
Gcp
(47) 
Tense logic rule of joining H functor 
(denoted below by '+ H'):
+ H :
Hep
The assumptional system style is illustrated below. As in the classical propositional calculus, the obtained 
theses are generalised for arbitrary tense logic formulae. The following example theses are satisfied.
Thesis 2.80
G(p => q) a Gp =a Gq
Proof:
(1) 
G(p => 
q)
(2) 
Gp 
1 '
(3) 
Gp => 
Gq 
{-C:P1.1}
Gq. â¡ 
{-C:2,3}
Thesis 2.81
G(p => q) a ~ Gq => ~Gp
Proof:
(1) 
G(p => q)
(2) 
~ Gq 
1 1
(3) 
Gp => 
Gq 
{-C:P1,1}
~Gp. â¡ 
{Toll: 2,3}
The proofs of the next two theses are similar and can be obtained by using axiom P2. Hence they are omitted.

134
Thesis 2.82
H(p => q) a Hp =a Hq. â¡
Thesis 2.83
H(p => q) a ~ Hq => ~ Hp. â¡
Similar theses can be also proved in replacing formulae G(p =a q) and H(p => q) in the antecedents of the 
main implications of T 2.80-T 2.83 with the (present tense) implication p => q and next using rules + G and 
+ H (left to the reader).
The following two additional distributive axioms are assumed below.
(P5) G(cp a \|/) O Gcp A Gcp
(P6) H(cp A \|/) <=> Hep A Hip
For example, by P5 it follows that G(p o q) o G((p => q) a (q => p)) o G(p => q) a G(q =a p). 
Similarly for H using P6.
In accordance with CE, we have: F ~ cp o ~ Gcp and P ~ cp o ~ Hep. And hence, the next two 
distributive properties can be obtained (the proof of T 2.85 is left to the reader).
Thesis 2.84
F(p v q) o Fp v Fq
Proof:
F(p v q)
F~ ~ (p v q)
~ G ~ (p v q)
~ G (~ p a ~ q)
~ (G ~ p a G ~ q) 
~G~p v~G~q 
Fp v Fq. â¡
{-N, SR}
{f ~<p Gcp}
[NA. SR} 
[P5. SR} 
{NK}
{r ~ cp <=> ~ Gcp, â N, SR}
Thesis 2.85
P(p v q) o Pp v Pq. â¡
The following De Morgan's laws are satisfied. The proofs of T 2.86 and T 2.87 given below follow directly 
by P5, P6 and SR. And so. they are left to the reader.
Thesis 2.86
~ G(p a q) a ~ Gp v ~ Gq.
Thesis 2.87
~ H(p a q) o ~ Hp /~ Hq. â¡
The proofs of the next two theses are direct consequence of T 2.84 and T 2.85, respectively and they can be 
obtained by means of CE, NA and SR (left to the reader).
Thesis 2.88

135
~ F(p v q) <=> ~ Fp a ~ Fq. â¡
Thesis 2.89 
~ P(p v q) o ~ Pp a ~ Pq. â¡
The following transitivity property is satisfied.
Thesis 2.90
G(p =a q) a G(q =?> r) =a G(p =a r)
Since (p => q) a (q => r) and (p =a r) a l, are equivalent, where c, = c, (p. q. r), the following proof 
can be obtained (see the proof of T 2.33).
Proof:
(1)
G(p =^> q) a' G(q =p r)
(2)
G((p =a q) ,a (q r))
(3)
G((p =} r) /
Q
(4)
G(p =A r) A g;
G(p =a r). â¡
[P5: 1}
{SR : 2, (p => q) a (q => r) and 
(p => r) a c are equivalent}
{P5 : 3}
{-K:4}
The corresponding proof of the transitivity property for 
inference rules related to T 2.80 - T 2.90 are illustrated below.
IT functor is left to the reader. The obtained
(48) 
Tense logic G rule of detachment for implication (or 
omitting an implication, denoted below by GC'):
G(cp =a q/)
" GC : G.p
G\p
(49) 
Tense logic H rule of detachment for implication (or 
omitting an implication, denoted below by H'C'):
H(cp =a q/)
" KC : Hip
H\p
(50) 
Tense logic G tollens (denoted below by ' G-Toll'):
G(cp =a q/)
G-Toll: ~ &|/
~ G<p
(51) 
Tense logic H tollens (denoted below by ' H-Toll'):
H(cp =a y)
H-Toll . 
~ |_|-y
~ Hep

136
(52) 
Distributive property rule of F functor (denoted below 
by ' FA'):
F(cp v ep)
FA : 
â _________
Ftp v Fep
(53) 
Distributive property rule of P functor (denoted below 
by 'PA'):
P(cp v \p)
PA : 
â _________
Pep v Pep
(54) 
Tense logic De Morgan's law for G functor of 
conjunction (denoted below by 'NGK'):
~ G(cp A ep)
NGK:
- Gcp v - Gep
(55) 
Tense logic De Morgan's law for H functor of 
conjunction (denoted below by 'NHK'):
~ H(cp A ep)
NHK: 
_____________
~ Hep v ~ Hep
(56) 
Tense logic De Morgan's law for F functor of 
disjunction (denoted below by 'NFA'):
~ F(cp v ep)
NFA:
- Fcp / - Fep / - Fcp
~ Fep
(57) 
Tense logic De Morgan's law for P functor of 
disjunction (denoted below by 'NPA'):
~ P(cp v ep)
NPA:
~ Pep / ~ Pep / ~ Pep
-Pep
(58) 
Tense logic rule of G-transitivity for implication 
(denoted below by 'GTC'):
G(cp =A ep)
GTC : 
X)
G(<P =P X)
(59) 
Tense logic rule of H-transitivity for implication 
(denoted below by ' HTC'):
H(cp =A ep)
HTC : 
K(ep =A %)
HXcp =A x)
It can be denoted that the Prior's tense logic system is semantically complete under Definition 1.9 (see: 
Subsection 1.6). However, the corresponding proof would require the introduction of the following two 

137
additional conditions related to F and P. where T/Z 1= <pT' denotes 'the formula cp in time instance r is 
satisfied in model aZ ' and 0 is a time instance set ( a more formal treatment is omitted here).
(Cl) M' 1= FcpT <=><jf 3 v 6 0 (r < v a M' 1= cpv) 
(C2) M' 1= PcpT Odf 3 v 6 0 (v < r a M' 1= cpv)
Manna and Pnueli's temporal logic
Temporal logic, first proposed by Pnueli A. around 1976. see: (Pnueli A. 1977).* * In the next research, this 
logic was used in the process of specification properties of reactive and concurrent systems (Manna Z. and 
Pnueli A. 1992, 1995)t Some introductory notions related to Manna and Pnueli's temporal logic are given 
below . First, the notions of reactive program and fair transition system are briefly considered. Next it is 
illustrated the proposed language of temporal logic as a tool for specification of reactive systems (i.e. the 
description of the desired behaviour or operation of the system, while avoiding references to the method or details 
of its implementation).
* The usefulness of (linear) temporal logic for specifying global properties of concurrent systems for the future fragment. The advisability 
of using past modalities was introduced in (Lichtenstein O. et al. 1985). Other earlier works: (Kroger F. 1977) and (Mos/kowski B. 1983), 
see: file:///F:/Temporal%20predicatel!o20calculus/paper%206.pdf.
t Zohar Manna (1939 - 2018), Amir Pnueli (1941 - 2009).
* An extension of this system by additional axioms and rules, to deal with the first-order elements such as: variables, equality and 
quantification is given in Subsection 4.2 (temporal predicate calculus).
Â§ hi fact the variables are partitioned into rigid and flexible ones. A rigid variable must have the same value in all states of computation. 
Rigid data variables do not appear in the program itself and they are used to relate values at different states in the sequence. All state variables 
of transition systems are flexible.
" this interpretation is related to the theory of Pawlak's machines (Pawlak Z. 1971)
From theoretical point of view, programs and systems that they control can be partitioned into 
transformational and reactive programs and systems. A reactive program is a program whose role is to maintain 
an ongoing interaction with its enviromnent rather than to compute some final value on termination (as in the 
case of transformational programs). A fundamental element in reactive programs is that of concurrency. By 
definition, a reactive program runs concurrently with its enviromnent. A reactive program is often strongly 
intertwined with the hardware system that it controls. The software component is then considered as an integrated 
part of the whole system referred to as "embedded". Hence, the notion of a reactive program is sometimes 
considered more generally as a reactive system and there is no preferred a sharp distinction between the program 
and the system that it controls. In fact, the most of proposed techniques, with very few changes, are applicable 
and have been successfully used for digital circuit specification and verification (Manna Z. and Pnueli A. 1992, 
1995).
The main part of the Manna and Pnueli's generic model of reactive systems is given by a basic transition 
system. Any such system is considered as a quadruple including a finite set offlexible state variables (i.e. data or 
control variables which may assume different values in different states)5, a set of states, a finite set of transitions. 
and an initial condition. Next the above basic computational model is completed by introducing two different 
notions of transition fairness (called weak and strong fairness) representing some additional restrictions on the 
computations allowed by this model (justice and compassion requirements, respectively). This way. any 
computations that do not correspond to actual executions of real concurrent programs are excluded. The obtained 
model containing two additional subsets of transitions (justice and compassion sets of transitions) is said to be a 
fair transition system.
The behavioural level for describing semantics of reactive systems is assumed below. And hence, the 
semantics of any such system is identified with its behaviour and represented by the set of computations. 
Subsequently, any program is interpreted as a generator of a set of computations".

138
The Manna and Pnueli's temporal logic can be considered as an appropriate, and at the same time convenient 
language for specifying the dynamic behaviour of reactive programs and describing their properties (the 
interaction either between a program and its environment or between concurrent processes within a program). 
This language defines predicates over infinite sequences of states. Hence, any temporal logic formula is (in 
general) satisfied by some sequences and not satisfied by some other sequences and this formula, interpreted over 
a computation, will express a property related to this computation.
Let p be a property required for a given program P. We shall say that p is a valid property of P iff p is 
true of all computations generated by P. It can be observed that the finite set of all required properties related to 
P can be considered as a specification of P. And this approach enjoys the important advantage of incrementalify. 
Moreover, this notion viewed as a set (or list) of properties can be used to any other program requiring the same 
set. In fact, a specification rarely specifies an unique program. Next we shall say that P has a valid specification 
or equivalently that P is an acceptable solution iff all required properties are valid. And hence, in accordance 
with Theorem 1.23 of Subsection 1.5, the specification validity of a reactive program should be a logical 
consequence wrt the a priori required properties associated with this program.
Example 2.1 1 (Manna Z. and Pnueli A. 1992)
Consider a program P implementing mutual exclusion between two processes Pi and P2. The following 
example properties of computations of P can be expressed in temporal logic.
(po) For all states of computation . it is never the case that Pi and P2 occupy their critical sections at the 
same state.
(pi) If a computation ct contains a state at position j L 0 in which Pi is waiting to enter the critical 
section then ct also contains a state at position k X j in which Pi is inside the critical section.
(P2) The same requirement as pi but for process P2.
In other words, here two processes request one distributed resource. At any time, only one of the processes at 
the most is allowed to use the resource.
Let po. pi and P2 be valid properties of a program P. Hence, the compound property p0 a pi a p2 is 
valid and P should be considered as an acceptable solution of the mutual exclusion problem, ts
Let Sot(p) =df [ct/ct satisfy p] and Comp(P) =df [ct/ct is a computation of P}. The following definition 
was introduced.
Definition 2.8
We shall say that P implements the single specification p or P satisfies p iff Comp(P) Â£ Sat(y>).
Corollary 2.7
Let [po. pi. ... . pn-i} be a specification of P. If this specification is implemented by P then Comp(P) 
c n&zrtp ). 
i=0
Proof:
Assume that all single specifications pi are implemented by P. And so. by Definition 2.8 it follows that 
V i e {0,1, ... ,n - 1} (Comp(P) Â£ Sat(yy)). But the following implication is a thesis:
*
 V i e {0,1, ... ,n - 1}
"Vi (X Â£ X.) => X Â£ AX. : see Subsection 5.3 of Chapter III. 
' 1
(Comp(P) Â£ So/fp,)) =x> Comp(P) Â£ n,S'Â«/(p). Hence, the proof is obtained immediately by using-C". 
i-0 
'

139
The main advantage of the Manna and Pnueli's temporal logic is the possibility of obtaining a succinct and 
natural expression of frequently occurring program properties using a set of special operators (called below 
functors). The proposed language of temporal logic is built from a state language, used to construct state 
formulae and a set of logical and temporal functors. A state formula can be evaluated at a certain position j > 0 
in a sequence a and it expresses properties of the state Sj occurring at this position. The vocabulary T"~ of the 
state language consists of a countable set of typed data and control variables. The data variables range over data 
domains provided in the programming language, such as Booleans, integers, lists and sets. The control variables 
assume as values locations in programs. The type of each variable indicates the domain over which this variable 
ranges. The Boolean variables are usually referred to as propositions. In addition to the variables of 7' there are 
also assumed constants, functions and predicates (considered as concrete individual elements). An example 
semantics of some introduced constructs is given below.
Let V Â£ 73 A state s over V is defined as an interpretation that assigns to each variable u e V a value 
from the appropriate domain, denoted by s[u], A model a over V is an infinite sequence of the form a: So. Si. 
S2..... where each Si is a state over V.
For any state s and expression e over V. the value of an expression e at s. denoted by s[e] is defined 
inductively as follows: (1) the value of any variable x e V (possibly Boolean) is s[x] and (2) the value of 
an expression f(ei, e2.... .em). i.e. s[f(ei, e2.... .em)] =df f(s[ei], s[e2],.... s[em]).
The logical value of a formula of classical logic cp over a state s. denoted by s|cp|. is defined as follows: (1) 
the logical value of any atomic formula s[P(ei, e2, ... , em)] =df P(s[ei], s[e2], ... , s[em]) and (2) the logical 
values of any propositional formulae cp and cp: s[~ cp| =df ~ s|cp|. s|cp Â° cp| =df s|cp| Â° s|cp|. for Â° 6 {a, v, 
^>. o}.
Let s and s' be two states over V and x e V. We shall say that s' is a x-variant of s iff s'[y] = s[y] 
(for any y e V - {x}). Any (propositional) state formulae cp and cp over V are evaluated as follows: s 11= 
cp iff s[cp] = true, where s 11= cp' denotes cp is true or holds at s'. Obviously, the last two-argument 
predicate can be interpreted as a binary relation (called a satisfaction relation). And hence, in the case that s|cp| 
= true we shall say that s satisfies cp and s is said to be a p-state. In a similar way: s 11= ~ cp iff s II# cp 
and s 11= (cp v cp) iff (s 11= cp) v (s 11= cp). The remaining logical functors can be expressed in terms of 
negation and disjunction and this is left to the reader (the quantification is omitted here: see Subsection 4.2 of 
Chapter II). Next any formula cp is said to be a state-satisfiable iff 3 s (s 11= cp ). And cp is state-valid iff V s 
(s 11= cp ). We shall say that cp and cp are state-equivalent iff V s ((s 11= cp) o (s 11= cp)) (or equivalently: V s 
(s 11= (cp o cp)). It is sufficient to consider in these definitions only states over V that contain only the variables 
appearing in cp.
Example 2.1 2
Let a. b. c e 2 (the set of integer numbers) and x e V be an integer variable. Assume that b =df a + 1 
and c =df b + 1. The formula cp =df (a < x) a (x < c). in short: a < x < c. is state-satisfiable for s: (x: b) 
since s 11= cp. On the other hand, the formula cp =df ~ ((a < x < b) v (b < x < c)) is state-valid since the 
disjunction (a < x < b) v (b < x < c) is false in all states. It can be observed that cp and % =df x = b are 
state-equivalent, i.e. cp o % is state-valid. â¡
The above notions of state-satisfiability, state-validity and state-equivalence can be restricted to some subset 
of states. Assume that C is a set of sequences, e.g. C may be the set of computations ('omp(P) related to a 
program P. We shall say that a state s is C-accessible iff 3 a e C3 j > 0 ((a = so. Si. ... . Sj.... ) a (s = 
Sj)). Let now cp and cp be two state formulae. We shall say that cp is C-state-satisfiable iff 3 s ((s is C- 
accessible) a (s 11= cp)). Similarly, cp is C-state-valid iff V s ((s is C-accessible) =a (s 11= cp)). The formulae 
cp and cp are C-state-equivalent iff V s ((s is C-accessible) =a ((s 11= cp) o (s 11= cp))).
In accordance with the proposed Manna and Pnueli's language of temporal logic, a temporal formula is 
constructed from state formulae to which are applied some temporal functors. Boolean connectives and 

140
quantification. The proposed set of temporal functors is partitioned into two classes: future and past functors*. 
The interpretation of any temporal formula is based on the notion of a formula cp holding at a position j. j > 0, 
in a sequence ct, denoted by (o.j) 1= cp. where ct: So. Si. ... . Sj. ... . And then (o.j) 1= cp iff 3 j > 0 (Sj 11= cp). 
Hence: (o.j) 1= ~ cp iff (o.j) I# cp and (o.j) 1= (cp v q/) iff (((ct,j) 1= cp) v ((o'j) 1= t)). The extension 
of these definitions to other logical functors is left to the reader.
A more formal inductive definition of the notion of a temporal propositional formula is omitted here. As an 
example, this definition would be very similar to Definition 2.6 (a modal propositional formula), having some 
modification in step (2) wrt the introduced below future and past functors. And so, the future functors are first 
presented.
Assume that cp is a temporal propositional formula. Then such formula is also ocp, read as 'next cp .The 
semantics of this formula is defined as follows: (o.j) 1= ocp iff (o.j + 1) 1= cp, i.e. ocp holds at position j iff 
cp holds at the next position j + It
An illustration of using the last temporal functor are the next two examples. As in the case of modal or 
deontic logic systems, the priorities of the new introduced temporal functors can be introduced in a natural way. 
Obviously, any such functor should bind more strongly than the classical two-argument conjunction, 
disjunction, implication and equivalence. The elementary state formulae are denoted below by p. q. etc. And any 
such formula is related to the notion of a propositional variable. The verification process described below is very 
similar to the classical Hilbert's zero-one verification method (see Subsection 1.4). However, this verification 
will require the use of the above definition of ' o1 by considering a pair of adjacent positions in ct, e.g. j = k 
and j = k + 1. Provided there is no ambiguity, instead of 0 and 1 (reserved for positions) the logical constants 
F and T are used.
Example 2.13
state formula
k
k+ 1
P
T
F
~p
F
T
op
F
o~p
T
-
~ op
T
The following formula is satisfied: ~ op o o ~ p. To check this property, we have 2-2 = 4 possible 
cases. Since any pair of values can be presented as vertex of a graph, we can obtain the clique K2,2 (Berge C 
1973). The verification process related to the case p =df T at j = k and p=dfFatj = k+l is presented 
in the above given table. Any other case can be considered in a similar way (left to the reader). And this property 
can be generalised for any state formula cp. â¡
Example 2.14
Consider the following formula: o(p v q) o op v oq. The set of all possible logical values for the 
above formulae p and q should be taken into account for each of these two adjacent positions. And hence, we 
have 4 â¢ 4 = 16 possible cases to be analysed (corresponding to the clique K4 4).
The verification related to the case (p. q) =df (T. F) at j = k and (p. q) =df (F. T) at j = k + 1 is 
presented in table given below. Any other case can be considered in a similar way (left to the reader). Since
' As an extension of Prior's tense logic system in the area of computer science
This approach is very similar to the notion of an iterative array model (for synchronous sequential machines) where positions are 
known as time frames' (Breuer M.A. and Friedman A.D 1977).

141
disjunction is associative the above considered formula can be extended for more than two. but finite number of. 
arguments.
A similar analysis is related to the following state formula: o(p a q) a op / oq (left to the reader). And 
hence, the temporal functor o is distributive wrt the classical disjunction and conjunction. And this can be 
generalised for arbitrary state formulae cp and cp and also for arbitrary (finite) linear combinations of such 
connectives. â¡
The following rules can be obtained.
state formula
k
k+ 1
P
T
F
q
F
T
pvq
T
T
op
F
oq
T
o(p v q)
T
op v oq
T
(60) Rule of negating a temporal next functor 
(denoted below by 'No'):
No :
~ o cp
o ~ cp
(61)
Distributive property rule for temporal next functor of 
disjunction (denoted below by 'oA'):
o(cp v cp)
oA: 
_________
ocp v ocp
(62)
Distributive property rule for temporal next functor of 
conjunction (denoted below by 'oK'):
o(cp a cp)
oK: 
_________
Ocp A O\p
The following De Morgan's laws are satisfied (the proof of T 2.92 is left to the reader).
Thesis 2.91
~ o(p v q) o ~op A~oq
Proof:
~ o(p v q)
o ~ (p V q) 
o (~ p a ~ q) 
o ~ p a o ~ q 
~ op a ~ oq. â¡
{No}
[NA. SR}
{oK}
{ No. SR}
Thesis 2.92
~ Â°(p a q) o ~ op v~ oq.

142
In accordance with the last two theses, the following rules are obtained.
(63) De Morgan's law for temporal next functor of 
disjunction (denoted below by 'NoA'):
~ O(cp V \|/)
NoA:
~ Ocp A ~ O\p
(64) De Morgan's law for temporal next functor of 
conjunction (denoted below by 'NoK'):
~ O(cp A \|/)
NoK:
~ ocp V ~ ocp
The next two functors are very similar to the modal functors of necessity and possibility. Hence, provided 
there is no ambiguity, the same designations are used. The 'always' functor (known also as 'henceforth' or 'from 
now on' functor) is first presented.
Let cp be a temporal propositional formula. Such formula is also â¡ cp, read as 'always cp1 (or 'henceforth cp1). 
Its semantics is defined as follows: (o.j) 1= â¡ cp iff V k (k j => ((o.k) 1= cp )), i.e. â¡ cp holds at j iff cp 
holds at j and all following positions 'from now on' and hence the set of positions satisfying â¡ cp in a sequence 
is upwards closed. Consequently, the following implication is satisfied (if â¡ cp holds at j): â¡ cp => cp, read as 
'if always cp then cp1 (similarly to the GodeTs axiom Gl).
If cp is a temporal formula, then so is Ocp, read as 'eventually cp1 (or 'sometimes cp1). Its semantics is as 
follows: (o.j) 1= Ocp iff 3 k 2 j ((o.k) 1= cp ). The set of positions satisfying Ocp in a sequence is 
downwards closed, i.e. if Ocp holds at j. then it also holds at any k such that 0 < k ^ j. As in modal logic, 
this functor is dual to the previous one. i.e. Ocp holds at j iff â¡ ~ cp does not hold there. And these two future 
functors are mutually dual and any of these two connectives can be expressed by the another one. In fact, directly 
by the above two definitions and in accordance with De Morgan's laws for quantifiers we have: ~ J 4>(k) o ,V 
~ 4>(k). where 4>(k) =df (o.k) l= cp1 (see Subsection 3.3 of the next Chapter II). Here, for convenience, instead of 
the standard quantifiers their equivalent bounded versions are used. i.e. restricted to the range of k.
According to the existing dependencies between some modal and temporal expressions, some theses in modal 
logic can be in a natural way interpreted as theses in temporal logic, e.g. â¡ cp => Ocp, i.e. T 2.18, T 2.29 (G2). De 
Morgan's laws, and so on. An example is illustrated by the next thesis (here, the set of all k such that k > j is 
considered as an universe and denoted by J).
Thesis 2.93
â¡ p =A Op
Proof
(1)
â¡ p
{a}
(2)
~ op
{aip}
(3)
X *< k>
[df. â¡ . SR: 1}
(4)
[df. o , SR: 2}
(5)
y_+(k)
[N3
*
: 4}

143
Thesis 2.94
(6)
(7)
k0 > j =o> 4>(ko)
k0 > j =a ~ <|>(ko)
{-V
*:
 3}
{-V
*:
 5}
(8)
k0 j
{ko e J}
(9)
<|>(ko)
{-C:6,8}
(10)
~ 4>(ko)
{-C:7,8}
contr. â¡
{9, 10}
â¡ (p a q) o np a nq
Proof:
Since (n(p a q) o np a nq) o ((ct,j) 1= â¡ (p a q) <=> ((ct,j) l= np a (ctj) l= nq) we can obtain: 
(nj) k n(p a q) o V ((CT.k) k (p a q)) 
{df. 'â¡'}
Â° XÂ«(CT'k) p) A ((CT'k) ^q)) {df-'Â°(PAq)'}
Â° X ((CT'k) P) A X ((CT'k) 
q) {?= aTx)(B(X) A C(X)) Â° AW B(X) A aX c(x) }
o (o,j) l= np A (o,j) l= nq. â¡ 
{df. 'â¡'}
Here A(x), B(x) and C(x) denote one-argument predicates. The proofs of the next theses is very similar to 
the proof of the above T 2.94 and hence it is left to the reader. And so. the first-order predicate calculus should be 
used (bounded quantifiers', see: Subsection 3.3, Chapter 11), e.g. the proof of T 2.99 given below is related to the 
following thesis: ( 3 B(x) => 3 C(x)) => 3 (B(x) 
).
Thesis 2.95 
o(p v q) Â« op v oq. â¡
Thesis 2.96
â¡ p v nq =a n(p v q). â¡
Thesis 2.97
O(p a q) -> Op / Oq. â¡
Thesis 2.98
â¡ (p => q) => (np =a nq). â¡
Thesis 2.99
(Op =a Oq) =a O(p =a q). â¡
De Morgan's laws are presented as follows.
Thesis 2.100 
~ â¡ (p a q) o-npv-nq. â¡
Thesis 2.101

144
~ o (p v q) o ~ o p a ~ o q. â¡
Obviously, as in the previous considerations. T 2.93 - T 2.101 can be generalised for any temporal formulae 
(this is omitted).
Let now cp and be two temporal formulae. Then such formula is also <p U \p. read as 'cp until \p'. Since 
O\p predicts the eventual occurrence of and nep states that cp will hold continuously from now on. then the 
above until-formula will combine these two statements by predicting the eventual occurrence of and stating 
that cp holds continuously at least until the (first) occurrence of The semantics of this formula is defined as 
follows: (a.j) l=cpUq/iff3k^j ((rr.k) kq/)AVi(jSi<k => (o,i) 1= cp ). If cp U holds at j 
then also Oq/ holds there, i.e. since ' 3 k > j ((rr.k) kq/)AVi(jii<k => (o,i) 1= cp ) => 3 k > j 
((rr.k) 1= q/) is a thesis, the following implication is satisfied.
Thesis 2.102
p U q =a> Oq. â¡
The last of the presented class of future functors is the unless (waiting-for) functor W introduced as follows: 
(a,j) 1= cp W iff ((ct,j) 1= cp U \|/) v ((CTJ) != 1=1 <P)- where the formula cp W qt is read as 'cp unless q/' (or 'cp 
â waiting-for q/'). This weaker property states that cp holds continuously either until the next occurrence of or 
throughout the sequence.
The above Manna and Pnueli's set of basic future functors can be completed by introducing the following 
one: cp / read as 'first cp then q/'. The proposed semantics can be as follows: (o.j) 1= cp / iff 3 k 3 i ((j A k 
< i) a ((CT.k) 1= cp ) a ((CT.i) 1= y )). Since 3 k 3 i ((j i k < i) a ((a.k) 1= cp ) a ((a.i) 1= y )) iff 3 k > 
j ((n,k) i= cp ) a 3 i > k ((er.i) 1= 
)*  then by assuming (o.j) 1= cp / we can obtain 3 k > j ((o.k) 1= cp )
and hence the following thesis is satisfied.
Thesis 2.103
(p / q) =a Op. â¡
The last functor is transitive and we have (the proof is left to the reader).
Thesis 2.104
(p / q) a (q / r) =a (p / r). â¡
The above presented future temporal functors require analysis also of forward positions of the considered 
program computation ct. A similar analysis related also to the backward positions of ct corresponds to the past 
temporal functors. A brief presentation of the Manna and Pnueli's past functors is given below. It is first 
presented the one-argument functor previous, denoted by ' Â©'.
Let cp be a temporal propositional formula. And so. such formula is also 0cp, read as 'previously cp'. The 
following semantics is introduced: (o.j) i= Â©cp iff (j > 0) a (o.j - 1) [= cp. And hence, Â©cp is false at 
position 0.
The properties of the temporal previous functor are very similar to these associated with the functor 'next'. 
And so we can obtain (for any j > 0): ~Â©p o Â©~p, Â©(p v q) o Â©p v Â©q and Â©(p a q) o Â©p a
3x(A(x)) a 3y(B(y)) <=> 3x3y(A(x) a B(y)) : see Subsection 3.3 of Chapter II.

145
0q. e.g. the verification process of the last formula related to the case (p. q) =df (T. F) at j = k - 1 and (p. 
q) =df (F. T) at j = k (k > 0) is presented in table given below.
state formula
k- 1
k
P
T
F
q
F
T
pAq
F
F
op
T
0q
F
0(p a q)
-
F
0p a 0q
F
The following De Morgan's laws are satisfied (for any j > 0: the proof is left to the reader).
Thesis 2.105 
~ 0(p v q) o ~ 0p a ~ 0q. â¡
Thesis 2.106 
~ 0(p a q) o ~ 0p v ~ 0q. â¡
The properties of the next two past functors are very similar to the corresponding future functors 'always' and 
'eventually'. The functor 'has-always-been', denoted by 
is introduced as follows: (o.j) 1= Hep iff V k(0 Â£
k Â£ j => ((ci.k) l= cp)), i.e. Hep holds at j iff cp holds at j and all preceding positions. And hence, the set of 
positions satisfying Hep is downwards closed.
The functor 'once', denoted by ' <$>' is specified as follows: (o.j) 1= <Â»cp iff 3 k ((0 < k Â£ j) a ((o.k) 1= 
cp)). And so. <Â»cp holds at j iff cp holds at j or some preceding position. And this functor is also dual to the 
previous one, i.e. <Â»cp holds at j iff H~cp does not hold there, i.e. â¡ and <Â» are mutually dual.
Example 2.15
An example evaluation of the last two past functors is presented in table given below.
j
0
1
2
3
4
5
X
1
2
5
2
3
4
x = 3
F
F
F
F
T
F
â¡ (x<3)
T
T
F
F
F
F
^(x<3)
T
T
T
T
T
T
~0(xÂ£3)
F
F
T
T
T
T
<8>(x>3)
F
F
T
T
T
T
^(x = 3)
F
F
F
F
T
T
<->(x^3)
T
T
T
T
T
T
â¡ (x = 3)
F
F
F
F
F
F

146
~0(x = 3)
T
T
T
T
T
T
It can be observed that ~h(x=3) o <s>(x^3) and ~0(x<3) o <Â»(x>3). â¡
The semantics of the next past functor 'since'. denoted by S' is defined as follows: (ct.j) 1= <pS\|/ iff 3 k ((0 
< k j) a ((ci.k) 1= q/)) / Vi ((k < i <j) a ((rr.i) l= cp)). And directly by this definition we have.
Thesis 2.107
pSq =a <Â»q. â¡
A weaker version of the above functor since is the functor 'back-to'. denoted by B and defined as follows: 
(ctj) 1= cpBtp iff either (ctj) 1= Hep or (ctj) 1= cpSq/.
The above introduced version of the functor 1 previous ' can be considered as a strong one. i.e. 0cp is false at 
position 0. In a similar manner as in the case of the functors 1 until' and 'since', the following weaker version of 
the functor 'previous' was introduced, read as 'weak previous': (ctj) 1= Sep iff either j = 0 or ((j > 0) a 
(ctj -1)1= cp). And hence. Sep is always true at the first position. At all other positions these two versions are 
equivalent, i.e. 0cp o Sep (for any temporal propositional formula cp).
The notion of the Manna and Pnueli's temporal propositional formula is summarised by the next inductive 
definition.
Definition 2.9
A temporal propositional formula is:
1. 
Any propositional variable.
2. 
If cp and are some temporal propositional formulae, then such formulae are also: ~ (cp), (cp) a (q/), (cp) 
V (y). (cp) =?> (y). (cp) (y) . O(cp). 0(cp). 0 (cp). â¡ (cp). H(cp). O(q>). <S>(cp). (cp) U (y). (cp) S (y). (cp) W 
(q/). and (cp)B(\p).
3. 
Every temporal propositional formula in this propositional calculus either is a propositional variable or is 
formed from propositional variables by a single or multiple application of rule (2).
The notions of satisfiability and validity (see Definition 1.5, Subsection 1.4) can be extended to the case of a 
given temporal formula cp (Manna Z. and Pnueli A. 1992). And so, we shall say that (ctj) 1= cp iff the model 
ct satisfies cp at position j.j is said to be a <p-position. The model ct satisfies cp (or equivalently: the program 
computation ct is a <p-model), i.e. ct 1= cp iff (ct.O) 1= cp. Let C be the set of computations Comp(P) related 
to a program P. Then we shall say that cp is C-satisfiable iff 3 ct e C (ct 1= cp) or also C-valid iff V ct e C 
(ct 1= cp). Moreover, we shall say that cp and are equivalent iff cp o q/ is valid (have the same truth value at 
the first position of every model) and also cp and are congruent iff â¡ (cp o q/) is valid (have the same 
truth value in all positions of every model). The following abbreviations were introduced: cp =a> q/ for â¡ (cp 
=a \p ) and cp <o> for â¡ (cp o q/), known in modal logic as strict implication and strict equivalence, 
respectively
*.
Let 5atCT(cp) =df {j / (ctj) 1= cp }. And so. we can obtain: ct satisfies cp =a> iff 5atCT(cp) Â£ Sataty) 
and ct satisfies cp <o> iff 5atCT(cp) = Sataly).
Originally denoted as: cp => eg for â¡ (cp â> eg) and cp <=> eg for â¡ (cp eg)

147
The temporal interpretation of SR is related to the above two notions of formulae equivalence and formulae 
congruence.
And so, the corresponding rules of substitution for equivalence Mi&fbr congruence are introduced as follows:
1. If cp and are equivalent then %(cp) and %(q/) are equivalent (the state substitutivity case) and
2. If cp and 'p are congruent then %(cp) and %(q/) are congruent (the temporal substitutivity case).
For example, since â¡ q <o> ~o ~ q then p U (â¡ q) <o> p U (~O ~ q), similarly: o(p v (~ oq )) 
<o> op v o(o ~ q) for ~ oq <o> o ~ q, etc.
A state formula can be considered as a formula without any temporal functors. Moreover, a past (a future) 
formula can be considered as a formula that contains no future (past) functors. The Manna and Pnueli's basic set 
of temporal functors is presented as follows: ~, v, o, W, o, B. And hence, the remaining temporal functors can 
be expressed using the basic ones as it is shown below.
op <o>~o~p
â¡ p Â«7>> pWF 
â¡ p <o> pBF 
Op <O> ~ ~ p 
op <o> ~ ~ p 
pUq <o> (pWq) a Oq 
p S q <o> (p B q) a <Â»q
And so, to prove a certain property it is sufficient to consider only the above set of basic functors and all of 
their Boolean combinations.
In accordance with the above considerations, the present is considered to be a part of both the future and the 
past. A strict basic set of temporal functors, in which the present is neither a part of the future nor of the past, was 
also presented. Moreover, some basic properties of these temporal functors and corresponding inference rules 
were proposed.
And so, the proposed by Manna Z. and Pnueli A. (1992, 1995) proof system for temporal logic uses some 
sets of future and past axioms, primitive (originally called 'basic') and also derived inference rules. Hence, the 
axiomatic system style was used. To obtain a proof system with a small number of temporal functors, as basic the 
above presented four functors (o, W, e>, B ) were accepted. The following future and past axioms were proposed.
(FAl) â¡ p =A p
(FA2)
o ~p <o> ~ op
(FA3)
o(p =a q) <o> op =a oq
(FA4)
â¡ (p => q) =Â» (â¡ p => â¡ q
(FA5)
â¡ p =a nop
(FA6)
(P =Â» Op) =7> (p -Â» â¡ p)
(FA7) pWq <o> q v p a o(pWq)
(PAI)
Â©p =A> Â©p
(PA2)
o(p =a q) <o> op =a oq
(PA3)
â¡ (p =t> q) =Â» (Hp =7> Hq)
(PA4)
â¡ p => HOp
(PA5)
(p -Â» Â©p) =7> (p -Â» Hp)
(PA6)
p B q <o> q v p a o(p B q
(PA7)
OF
(FA8) â¡ P ->> pWq
For example, in accordance with FAl if p holds at all positions, then in particular p holds at the first 
position. FA2 corresponds to the self-dual property of the next functor and this functor is also distributive wrt 
implication (FA3). FA5 (if always p then always next p) is in accordance with the used definitions for â¡ 
and o. Axiom FA7 represents a future expansion formula, i.e. p W q holds at position j iff either q holds at 
j or p holds at j and p W q holds at j + 1. Similarly e.g. FA8 claims â¡ p as one of the ways to satisfy p W q 
at j (since p holds at j and all following positions). The above presented past axioms are almost symmetric wrt 
the future ones. For example, PA6 represents a past expansion formula, i.e. p B q holds at position j iff either 

148
q holds at j or p holds at j and p B q holds at j - 1, if it exists. Axiom PA7 states that the first position of 
every sequence satisfies St7. By the above introduced semantics of the weak previous functor it follows that (o.j) 
1= <3f iff j = 0.
In general, a future (a past) expansion formula expresses the value of a future (past) functor at position j as a 
function of the values of its arguments at j and the value of the functor itself at j + 1 (at j - 1. if it exists). The 
following expansion formulae for the other future functors were given (Manna Z. And Pnueli A. 1992).
â¡ p <o> p a on p 
op <O> P V oop 
p U q <o> q v p a o(p U q)
Some past expansion formulae for other past functors were also introduced, e.g. Hp <o> p a Â©Hp, i.e. 
â¡ p holds at position j iff p holds at j and Hp holds at j - 1. if it exists. Similar expressions were given for 
Op and p S q (are symmetric to the above future expansion formulae: left to the reader). The obtained 
expansion formulae are provable, e.g. the proof of Hp <o> p a oop follows immediately in accordance 
with the used definitions for â¡ and 0.
It can be observed that any such future (past) expansion formula is provable in this system (a more formal 
treatment is omitted).
The following two mixed axioms were also presented.
(FA9) P -Â» O0p
(PA8) P -Â» Â©Op
For example, in accordance with FA9, if p holds at position j, then going forwards one step to j + 1 and 
then backwards one step, the same property for p at j is obtained.
In a natural manner the above axioms can be generalised for any two temporal propositional formulae cp and 
The state-tautology axiom (denoted by TAU) was introduced as follows.
<P
TAU: 
-
11= cp
Let cp be a state-valid formula. Then as a new proof line we can introduce ll= cp. The last axiom shows the 
link between state validity and temporal validity in this deductive system. In fact. IF cp' requires the state 
validity of cp, i.e. cp holds on every state. On the other hand, ' 1= cp1 requires validity of cp, i.e. cp to hold at the 
first state (of any sequence of states ct: so. Si. S2. .... i.e. of every model). Obviously, as in the case of modal 
logic, any thesis of the classical propositional calculus is a state-valid in this system.
Primitive rules
*
Any state-valid formula IF cp , obtained by axiom TAU can be transformed into temporally valid one. And 
hence the following generalisation rule (in short: GEN) was introduced.
IF cp
GEN : ---------
1= â¡ cp
' Originally called "basic inference rules

149
And so. if cp is state-valid then â¡ cp is temporally valid. The opposite implication originally called 
"specialisation ' (in short: SPEC) is also satisfied.
1= â¡ cp
SPEC: 
---------
11= cp
Since cp is state-valid iff â¡ cp is temporally valid, the main connective is two-sided binding. And hence, 
without loss of generality. GEN and SPEC can be reduced to only one rule.
INST :
x[q>]
This instantiation rule (in short: INST) allows to infer the instantiated formula %[cp] from the more general 
%. We observe that INST is related to RR (the mle of definitional replacement of one formula by another: 
Subsection 1.7).
And finally, the rule of omitting an implication C is used (i.e. modus ponens. originally denoted by 
MP ). Here the main implication is represented in a more general form (related to the notion of logical 
consequence: see T 1.23 of Subsection 1.5). An illustration of using C is the following thesis.
Thesis 2.108
â¡ p pWq
Proof:
(1) 
np-Â»pWq 
{FA8}
(2) 
â¡(â¡p-pWq) 
{df.^Â»: 1}
(3) 
â¡(â¡p =â¢ pWq) => (np =â  pW q) 
{ FA1. INST}
â¡ p => pW q. 
{-C : 2.3}
In a similar way. e.g. Â©p =^> Â©p (the proof is left to the reader). As in the case of classical propositional 
calculus, any proof in this system can be interpreted as a process of joining new lines by using some axioms, 
primitive or derived rules and/or other theses in accordance with the used assumptions. Some selected derived 
rules of the Manna-Pnueli proof system are presented below*.
Derived rules
The following temporalisation rule can be obtained by assuming l[= p and then using in turn GEN, FA1 and 
- C (in short: TEMP: this is left to the reader).
11= cp
TEMP :
1= cp
The next derived rule ofparticularisation (in short: PAR) is represented as follows.
Originally, the notions of "conditional proof' and "premise" were used (instead of the notions of assumptional proof and assumption, 
respectively).

150
â¡ cp
PAR:
<P
The proof of PAR can be obtained by assuming â¡ p, FA1 and - C (left to the reader). PAR corresponds 
to the rule ' used in modal logic. For example, according to Toll (see T 1.6 of Subsection 1.3) the following 
implication is satisfied.
Thesis 2.109
(â¡ p => Oq) a ~ Oq =a ~ â¡ p
Proof:
(1) 
IF (p =a q) a ~q =a ~p
(2) 
â¡ ((P =a q) a ~q =a ~p)
{TAU}
{GEN : 1}
(3) 
â¡ ((â¡ p =a Oq) a ~ Oq =a ~ â¡ p) 
{INST : 2}
(â¡ P =a Oq) a ~ Oq =a ~ â¡ p. â¡ 
{PAR: 3}
Let now cpi, cp2. ... . cpn, q/ be propositional state formulae and be a logical consequence wrt cpi, cp2. ... . 
cpn*.  Since cpi a cp2 a ... a cpn =a qc is a thesis, i.e. state-valid, then having lines cpi, cp2..... cpn to our proof we 
can join 
(using + K1 and - C ). To abbreviate this process, in the Manna-Pnueli proof system was
* see T 1.23 of Subsection 1.5
introduced a special derived rule called '"propositional reasoning' (in short: PR) as it is shown below.
Cpi, Cp2. ... . Cp,
PR:
The following formula is a classical logic thesis (the proof is left to the reader).
(q o F v p a r) =a (q =a p)
And hence, the last formula is state-valid, i.e. IF (q o F v p a r) => (q => p). It is used in the proof of 
the next thesis.
Thesis 2.110
p B F =a p
Proof:
(1) 
pBF <o> F v p a 0(pBF) 
{PA6:q-dtF}
(2) 
pBF o F V p a e(pBF) 
{ df. <Â«>'. PAR : 1}
P B F =a p. â¡ 
{PR : 2}
In accordance with T 2.110, the above text "PR : 2" is equivalent to the following one: "{if (q Â« F v p a r) 
=> (q => p). q =df p B F, r =df s(p B F). TEMP, INST, - C : 2}". In a similar way pWF => p1 (left to the reader).
The following thesis is satisfied.
Thesis 2.111

151
(pi A p2 A ... A pn =A> q) =A (â¡ Pl A â¡ p2 A ... A â¡ pn =A â¡ q)
Proof:
Pl A p2 A ... A pn -â > q
(1)
(2)
â¡(Pi 'X P2 A. .. A pn)
(3)
â¡(Pi '\ P2 A. .. A pn =A q)
(4)
â¡(Pi >X P2 A. .. A pn) => â¡ q
â¡ Q. â¡
{df. 1}
{- C : T 2.98 / ip =df Pi a p2 a ... a pâ 
and ip -df q: 3}
{- c : 2.4}
Obviously, proof line (4) of the last thesis can be obtained by using in turn FA4, df. =Â»1 and PAR (left to 
the reader). Consequently, the following derived rule of entailment* omission of implication is obtained. This rule 
was originally called '"entailment modusponensf in short: E-MP). Equivalently bellow is used "E(- C)".
' The notion of entailment is used in (at least) three meanings: implication connective (having some properties), the name of the logical 
system characterising this connective as well as the area in which this system is defined (see Subsection 2.4: Relevance logic).
Cpi A Cp2 A ... A Cpâ =A> \|/
E(- C):
â¡ <P1
â¡ q>2
â¡ 'Ri
â¡ \|1
The following proof of the next rule '"entailment transitivity" (in short: E-TRNS) was given. For 
convenience instead of E-TRNS. the abbreviation "ETC", i.e. entailment transitivity for implication, is used 
below.
Thesis 2.112 
(p -> q) a (q -Â» r) =a (p -Â» r)
Proof:
(1)
p -Â» q
{a}
(2)
q =a> r
(3)
â¡ (p => q)
{df. ^> :1}
(4)
â¡ (q => r)
{df. 
2}
(5)
IF (p => q) a (q => r) =s> (P =s> r)
{TAU}
(6)
â¡ ((p =?> q) a (q =a r) =s> (P =s> r))
[GEN : 5}
(7)
(p =a q) a (q =a r) =Â» (p =?> r)
{df. '=Â»': 6}
(8)
â¡ (p => r)
{ E(- C) : 3,4,7}
p =^>> r. â¡
{ df. '=Â»': 8}
The proof of T 2.112 can be realised without using E(- C): see T 2.33 (modal logic: left to the reader). 
Consequently, the following derived rule is obtained.

152
p -Â» q
ETC : q -Â» r
p =a> r
In accordance with rule PR. cpi a q>2 a ... a cpâ =o vp is a thesis (i.e. state-valid). Hence, using in turn 
GEN, FA4, df. PAR, T 2.94 (extended for more than two formulae) and SR. we can obtain.
â¡ cpi A â¡ q>2 A ... A â¡ cpn => â¡ T
We observe that the last formula is similar to the notion of modal logical consequence (see modal logic). And 
so. as a result, the rule of " entailment propositional reasoning' (in short: E-PR) can be obtained. Below is used 
the abbreviation "EPR".
â¡ Cpi. â¡ Cp2. ... . â¡ Cpn
EPR:
â¡ eg
And so. using EPR the proof of T 2.112 can be reduced. In fact, we have a possibility of omitting proof 
lines (5), (6) and (7).
The rule of omitting a strict equivalence in the Manna-Pnueli proof system is the same as in the case of modal 
logic (see rule OSE'). In particular, the following thesis is satisfied.
Thesis 2.113
(p Â«-Â» q) =s> (p -Â» q)
Proof:
(1) 
p <Â«> q 
{a}
(2) 
â¡ (p o q) 
{df 
1}
(3) 
Â° ((p =A q) A (q p)) 
{-E, SR . 2}
(4) 
â¡ (p 
=a q) a â¡ (q =o p) 
{T 2.94 : 3}
(5) 
â¡ (p 
=> q) 
{-K : 4}
p =^>> q. â¡ 
{ df 5}
Thesis 2.114
o(p => q) o op => oq
Proof:
o(p =a q) o o(~p v q) 
{CR. SR}
o~ p v o q
~ o p v o q 
op â => oq. â¡
{oA : see Example 2.14: O(p v q) <=> Op v Oq}
{ NO, SR : see Example 2.13: ~ Op <=> O ~ p}
{CR}
The following two theses are satisfied (the monotonicity property of a temporal next functor).
Thesis 2.115
(p -,> q) =s> (op -Â» oq)
Proof:

153
(1) 
p -Â» q
(2) 
â¡ (P q)
(3) 
nÂ°(p q)
(4) 
n(op =a oq)
op =a> oq. â¡
{a}
{df. ^> :1}
{- C : FA5, 2 / <p =df 'p => q'}
{T 2.114. SR: 3}
{df. '=Â»': 4}
The proof of the next thesis is left to the reader.
Thesis 2.116
(p <o> q) =^> (op <o> oq). â¡
Any (primitive or derived) rule of the classical propositional calculus is a state-valid formula. And hence, the 
following two formulae are state-valid: p a q => p and p a q => q (in accordance with -K':see 
Subsection 1.2). The following thesis is satisfied.
Thesis 2.117 
op a Hp ââ > op
Proof:
(1) 
H= p a q p
(2) 
â¡ (P a q =a p)
(3) 
â¡ (op A Hp =A op )
op A Hp â :â > op. â¡
{TAU}
{GEN: 1}
{INST : 2 / <p=df'o p. i|/=df0p'}
{df. 3}
In a similar way we can obtain: op a Hp =a> Hp (left to the reader).
To end with this Subsection, it is given below a proof of the following example formula (Manna Z. and Pnueli 
A. 1992).
Thesis 2.118
Op A Hp =A> OEJp
Proof:
(1)
Â©â¡p =A> OHP
{PAI / <p=df'â¡ p'}
(2)
(3)
(4)
(5)
(6)
(7)
(8)
OOHp =A> OOHp
â¡ p =^>> OOHp
â¡ p =^>> OOHp
op 
A Hp =A> op
Op 
A Hp =A> Hp
Op 
A Hp =A> OOHp
(Op A Hp => Op) 
A (Op A Hp => OOHp)
{â C : T 2.115, 1 / <p=df'Â©â¡ p, q/=dfÂ©Q p'}
{FA9 / <p=df'â¡ p'}
{ETC : 2,3}
{T 2.117}
{ similarly as in 5 }
{ETC : 4.6}
{T 1.5b : generalised for arbitrary <p, i|/ and T|:
(9)
=A (Op A Hp => Op /
(Op A Hp => Op) A
\ OOHp)
(Op A Hp => OOHp)
by INST we have: <p=df'Op a Bp', 14/ =df Op' 
and r| =df' O Â§ â¡ p'}
{GEN, df. '=>>': 8 / 8 is state-valid}
(10)
=A> (Op A Hp => Op 
â¡ (Op A Hp => Op)
A OOHp)
{df. 
5}

154
(11) â¡ (Op A Hp => OOHp)
(12) â¡ (op A Hp =A op A OSHp)
(13) Â°P A HP =^>> Â°P A oSHp
(14) p A OHp =^>> Hp
(15) o(p a Â©Hp) =Â» OHp
(16) op A OOHP â:â > O(P A OHP)
(17) Â°P A o50p =A> OEJp 
op A HP =A> OHp. â¡
{df. '=Â»': 7}
{ E(- C):9.10.11]
{df. 12}
{T 2.113: â¡ p Â«=Â» p a Â©â¡ p /apast 
expansion formula}
{â C : T 2.115,14 / <p =df 'p a Â©â¡ p', vp =df 
'â¡p'}
{T 2.115, Example 2.14: O(p a q) <=> Op a 
Oq / <p=df p. ' q/=df GEN, df. '=>>'}
{ETC : 15.16}
{ETC : 13.17}
The above presented Prior's tense logic and the extension of this system in the area of computer science, i.e. 
the Manna-Pnueli proof system, can be considered as two basic temporal logic systems. Other important such 
systems have been also developed, e.g. interval temporal logic (reasoning about periods of time, see: 
Moszkowski B. 1986), p-calculus and so on. Some introductory notions related to the theory of the modal p- 
calculus are given below (for a more detailed information, see: Venema Y. 2008)*.
* See also: The Free Encyclopaedia, The Wikimedia Foundation, Inc.
Jaco W.de Bakker (1939 - 2012)
Modal u-calculus and dynamic logic
We shall give first some introductory notions concerning sets and used below (see Subsection 5.2 of Chapter 
III of the last work: Basic notions and definitions').
Let p a A x B be a binary relation, where A and B are two sets and apb <4>df (a.b) e p (for any a e 
A and b e B). By p 1 we shall denote the converse of p. i.e. ap 'b <4>df bpa. For X a A we define p[X] 
=df {b e B / 
3 (apb)} a b and p[x] =df p[{x}] if X =<jf {x} is a singleton. For Y a b the set
(p)Y =df p ^Y], while [p]Y =df {a e A / bJy (apb)} a a. Obviously, by omitting all a e A related to 
B - Y we can obtain all the elements a e A related to Y. And hence: [p]Y = A - (p) (B - Y), where 
denotes set difference (the reader is invited to show this property).
The propositional modal p-calculus (in short: /i-calculus) originates with Scott D.S. and J.W.de Bakker , 
further developed by Hitchcock P. and Park D.M.R. (1973) and others. A more complete study was presented by 
Kozen D.C. (1983). The results of the last work were mostly inspired by the work of Pratt V.R. (1981), in 
particular the Pratt's propositional Pp calculus.
In general, the propositional modal p-calculus is an extension of the classical propositional modal logic and it 
can be considered as a multimodal system having two additional fixpoint operators: a least fixpoint operator p 
and st greatest fixpoint operator v (more strictly: 'px' and 'vx', where the variable x e P, see below). Such logic is 
said to be fixed-point and it is used for description and verification of a special class of systems, called labelled 
transition systems. Any such system can be considered as a process graph.
Let P be a set of proposition letters and D be a set of atomic actions (called also labels). The following 
definition can be introduced (by IP(S) it is denoted the power set of S. i.e. the set of all subsets of S: obviously 0. 
S e IP(S)). The elements of P are denoted as: p. q. r, x, y, z, ... .and the elements of D as: d. c. e. ... Below 
we shall assume that p. q. r, ... are propositional variables, called here atomic propositions (and also any such 
propositional formulae defined inductively: see Definition 1.1 of Subsection 1.1). On the other hand, the 

155
propositional letters x, y, z, ... are here considered as some free or bound variables of a formula cp*. The last 
notions are similar to these ones, used in the first-order predicate logic wrt the introduced here (least and greatest) 
fixpoint operators.
* Provided there is no ambiguity, the originally notion "propositional variable" used for the free or bound variables is omitted here. In 
fact, this notion is contradictory to the classical one, e.g. under Definition 1.1 of Subsection 1.1 (Slupecki J. and Borkowski L. 1967).
t It can be observed that the graph of S can be equivalently described by using the following ternary labelled transition relation'. 
; Â£ S / I) / S, rather than the family R.
Definition 2.10
A (P,D)-(labelled) transition system or (P,D)-Kripke model is the following triple S =df (S.V.R), where: S 
is a set of objects called states or points. V: P -> IP(S) is a valuation and R =df {pd Â£ S x S/d e D}is 
a family of binary accessibility relations1'. The pair (P, D) is said to be a type of S. The set of all d-successors 
of s (i.e. all states t e S which are out-incident to s in pa) is defined as follows: pd[s] =df{te S / spdt}. 
for any s e S. The system S is finitely branching (or image-finite) if pd[s] is finite (for any d e D and s 
e S). The notion of a pointed transition system or Kripke model is introduced as a pair (S, s). where s is a 
designated state in S.
For convenience, the following alternative, coalgebraic representation of S can be obtained (Venema Y. 
2008): instead of V equivalently the map ov : S -> IP(P) can be used, assigning to each state s e S the 
subset of atomic propositions that hold in s (i.e. which atomic propositions are true at each state). Similarly, any 
binary relation p c s x S can be represented as a map p[ ] : S P(S). mapping a state s e S to the 
subset p[s] of its successors. And hence, the set R of binary accessibility relations can be seen as a map ctr : 
S -> tP(S)IJ. where IP(S)D is the set of all maps from D to IP(S).
As a consequence, any transition system S can be equivalently defined as a pair (S. ct). where ct : S -> 
IP(P) x [P(S)D such that ct(s) =df (ctv(s). ctr(s)). for any s e S. Next, by K = Kd.pS =df IP(P) x IP(S)D we 
shall denote the Kripke functor associated with D and P. Hence. (X.Y) e K iff X Â£ p and Y =<jf [Yd Â£ 
S/d e D}. Obviously, the last family Y corresponds in an unique way to some map hY e fP(S)IJ. In 
particular, the Kripke models are sometimes referred as Kd.pS - coalgebras or Kripke coalgebras. And so. any 
state transition system S can be equivalently considered as a Kripke coalgebra.
Example 2.16
Let D =df {di. dp. dY ( and S =df {si. S2}. Hence. IP(S) = {0. {si}.{s2}.{si.S2}}. Since D is finite. hY e 
IP(S)D may be represented as a vector, e.g. hY =df ({syj.fsyj.fsi.sy}). Then, the following multifamily can be 
obtained: Y = {{S2}.{s2}.{si.s2}}. where Ydj = Yd? = {s2} and Yd3 = {si.s2}. â¡
The polymodal logic in D and P, in short: PML(D,P), introduced here can be considered as a generalization 
of the basic modal logic system (called also ordinary or monomodal logic, see Definition 2.6, by assuming that 
D is a singleton). And so. in the case of polymodal logic tire modal functors of necessity and possibility are D- 
indexed, i.e. instead of nep and Ocp we have: Qdcp and o,i<p. respectively. The last two functors can be 
interpreted using the corresponding accessibility relation pa. And hence, the notion of truth (or satisfaction) is 
defined as follows.
Definition 2.11

156
Let S = (S. ct) be a transition system of type (P. D). The satisfaction relation ' IF' between states of S and 
polymodal logic formulae can be defined inductively as follows (Venema Y. 2008)*.
" The satisfaction relation 'IF' is very similar to this one introduced into the Manna-Pnueli proof system. Also, provided there is no 
ambiguity and for convenience, instead of T. Â± and the following symbols are used: T. F and ~. i.e. the logical constants (called also: 
constant formulae) 'true , 'false and the symbol of negation, respectively.
Here. 'S. s IF cp' denotes 'cp is true or holds at s'.
S, s IF p
Â«df
S 6 V(p).
S, s llâ p
Â«df
s Â£ V(p).
S, s IF F
never.
S, s IF T
always.
S, S IF cp A \p
Â«df
S, s IF cp and S, s IF qt.
S, s IF cp v \p
Â«df
S, s IF cp or S, s IF qt.
S, S IF Qdcp
Â«df
S, t IF cp for all t e Pd[s],
S, S IF Odcp
Â«df
S, t IF cp for some t e Pd[s]
In accordance with the above considerations, we can obtain: S, s IF Qdcp o V ( S, t IF cp ). In the same
way: S, s II- Oacp
3 ( S, t IF cp ). Hence, the following thesis (similar to T 2.93) can be obtained.
Thesis 2.119
S, S IF QdCp =A S. S II- OdCp . â¡
Let now [|cp|]s =df {s e S / S, s IF cp} be the meaning or extension of cp in S. We have: S. s II- cp iff 
s e [|cp|]s. And hence, the above semantics of modal formulae was also (equivalently) given in terms of the 
meaning [|cp|]s. Such an approach is more suitable in the context of fixpoint operators.
[|p|]s 
[|~p|]s 
[|F|]S 
[|T|]S
[|cp A t|/|]S 
[|cp V \p|]s 
[Indcpl]8 
[|^dcp|]s
V(p).
s - V(P).
0,
s,
[|cp|]s n [|\p|]s. 
[|cp|]s u [|y|]s, 
[pd][|<pl]S-
(pd) [ItI]8
The state set S can be considered as an universe. Hence, in accordance with the last set equations, we can
obtain (for any s e S ):
S 6 [|p|]S
S, s IF p
S 6 V(p). â¡

157
O 
S 6 S'
O 
S 6 0. â¡
S 6 [|~p|]S
Â«df
S, s llâ p
s Â£ V(p)
S 6 S - V(p). â¡
S 6 [|F|]S
Â«df
S, s IF F
s e [|T|]S Odf S, s IF T
<=F> S G S. â¡
S 6 [|cp A \p|]S Odf
S, S IF Cp A T
(S, s IF cp) /\ (S, s IF q/)
(S 6 [|cp|]S) A (s e [|q/|]s)
<=>
s e [ cp ]s r' [lTl]s Â°
S 6 [|cp V \p|]S O
S 6 [|cp|]S F> [|\p|]S. â¡ {left to the reader}
s e [|ndcp|]s Odf S. S II- DdCp
v ( S. t IF cp )
For any singleton {s} we have: t g pd[s] iff S, t IF cp, and hence, iff t g [|cp|]s. So, we can obtain:
[|ndcp|]s =df 
{s e S/S. s 
IF Qdcp}
= 
{s 
g S/ 
V (S.tlHcp)}
= 
{s 6 S/ 
V (S.tlHcp)}
= 
{s 6 S/ 
V (S. t IF cp ) }
tell'll]
= 
[pa] [|<p|]s. â¡
The proof of the set equality: [|Od cp|]s
(pd) [l<Pl]S is left to the reader. The following property is
satisfied.
Thesis 2.120
[lOdCpI]8 C [|Odcp|]s
Proof:
s e [|ndcp|]s
S, S IF QdCp
( S. t IF cp )
3 (S. t IF cp )
{df. [|cp|]s }
{df. S, S IF QdCp}
{ F V (S.tlFcp) 3 (S.tlFcp)}
S, S IF Odcp
S 6 [I Od epi]S.
{df. S, S IF Odcp}
{df. [|<p|]s }

158
Next we shall say that two transition systems S and S' are similar iff they have the same type (P.D). The 
notions of modal equivalence, bisimulation and bisimilarity are introduced as follows (Venema Y. 2008).
Definition 2.12
Let s and s' be two states in the similar transition systems S and S', respectively. We shall say that s and 
s' are modally equivalent, i.e. S.s â (p,d> S'.s' if for any polymodal logic formula cp we have: S, s IP cp o 
S', s' IP cp.
A transition system S is deterministic if pd[s] is a singleton, for any s e S. This determinism does not 
allow p<i[s] = 0, for any s e S.
The above considered semantics was also interpreted as a two-person evaluation board game associated with 
a fixed formula and a fixed labelled transition system S. A match of the game consists of the two players 
moving a token from one position to another. Any position corresponds to some pair (cp.s). where cp is a 
subformula of and s e S. The first of the players is trying to show that cp is true at s, and the second one is 
trying to deduce that cp is false at s (a more formal treatment is omitted here).
The notion of bisimulation between two transitions systems is one of the most fundamental in the model 
theory of modal logic and it is introduced as follows.
Definition 2.13
Let S and S' be two similar transition systems and 0 p 2 e S / S'. We shall say that 2 is a 
bisimulation iff the following three conditions are satisfied, for any pair (s.s ) e ~fi.
(prop} 
(S 6 V(p) O S' 6 V'(P)),
peP
UÂ°rtl1) W V 3 (t^t').
Two states s e S and s' e S' are bisimilar, i.e. S.s S'.s' Odf 3 (s^s'). And also. 2 is a
Q-bisimulation if the (prop) clause is satisfied only for a subset Q c p. The corresponding relation of 0- 
bisimilarity is denoted by fyz'/ â 
We observe that the bisimulation relation is very similar to the notion of machine isomorphism used in the 
theory of Pawlak's machines (Pawlak Z. 1971)1. see Example 1.5 of Subsection 1.3.
It can be shown that bisimilar states satisfy the same modal formulae, i.e. the following theorem is satisfied 
(Venema Y. 2008).
Thesis 2.121 (bisimulation invariance)
Let S and S 1 be two similar transition systems. Then:
' Instead of Z it is used the small Greek letter Q (zeta), 
t Zdzislaw Pawlak (1926 - 2006)

159
V ( S.s S'.s' =^> S.s *vv*( p.d> S',s' ). â¡ 
(s.s'leSxS'
V ( Ni bw No <=>df SM(Ni) w SM(Nq ). where BIPN denotes the class of Boolean interpreted Petrinets. SM(Nj) is the 
NâN.e BIPN
finite-state sequential machine corresponding to Ni (i - 1.2). Here, the behavioral equivalence and state machine equivalence relations are 
denoted by ' bw and , respectively: see Definition 5.23 of Subsection 5.4. We observe some relation between the notions of state 
transition systems and Petri nets.
1 As an example, another interpretation of this notion was early introduced in number theory, the so-called Hasse - Davenport lifting 
relation (Davenport H. and Hasse H. 1935).
Unfortunately, the above notions of modal equivalence and bisimilarity coincide only for some classes of 
models, satisfying the so-called Hennessy-Milner property (Hennessy M. and Milner R. 1985). In particular, this 
property holds in the class of finitely branching transition systems.
Thesis 2.122 {Hennessy-Milner property)
Let S and S * 1 be two similar finitely branching transition systems. Then:
V ( S.s S',s' o S.s â (p,d> S',s' ). â¡ 
(s.l'leS/f
The above presented bisimilarity was considered as a kind of behavioural equivalence. In fact, as a more 
general, the notion of behavioural equivalence was also used in other areas of application, e.g. trace theory: trace 
equivalence (Mazurkiewicz A. 1995), B-equivalence under a subset of distinguishable transitions (Andre C. 
1983: it was shown the set of all possible traces is not a sufficient condition to be described this kind of 
equivalence), Petri net reduction rules (Brains G.W. 1983), Boolean interpreted Petri netstbehavioural 
equivalence of two nets
*,
 and so on.
Next, by definition, S of type (P.D) is a tree-like transition svstem iff the structure (S. Upd ) isatree.lt 
' 
dsD
can be observed that any transition system can be represented, i.e. restructured in a more ordered form, into a 
bisimilar (behavioural equivalent) tree-like model. Any such process of representation is said to be unravelling". 
In fact, the following theorem is satisfied.
Thesis 2.123 (the model property of modal logic)
Let cp be a satisfiable modal formula. Then cp is satisfiable at the root of a tree-like model. â¡ {T 2.121}
It was shown that the above notion of bisimulation can be completely defined in terms of the Egli - Milner 
lifting1' (Venema Y. 2008). The last relation, here denoted by IP(^ ) or in short IP2 . is defined as follows.
Definition 2.14
Let 0 C, c S x S' and <= P>(S) x IP(S'). Then: 
n =df { (X.X1) / V 3 (xCx1) a V 
31 (xCx1) }.
XÂ£A X tA 
X GA XGA
In a similar way. for the Kripke functor K = Kd.pS the following relation can be introduced: Kc c
KS x KS' such that =df {((X.Y).(X'.Y')) / (X = X') a ^((Yd.YT) e ) }.
The above two relations Pc and Kc are called the lifting of Q wrt O' and K, respectively.
The following proposition was shown (Venema Y. 2008).

160
Proposition 2.16
Let S and S'be two Kripke coalgebras for some Kripke functor K and 0 L s= S x S' be some 
binary relation. Then c is bisimulation iff V ( (ct(s).ct (s ) ) e Kc ). â¡ 
' 
(s.s)e^ 
' 
"
In accordance with the model theory of modal fixpoint logics, the modal p-calculus is a natural generalisation 
of the basic modal logic system and it can be regarded as a bisimulation invariant, a fragment of the second order 
predicate logic. The use of fixpoint functors* can be considered as a very important extension of the modelling 
(or expressive) power of the above presented labelled transition systems.
* Provided there is no ambiguity, instead of "fixpoint operator " , here the term "'fixpoint functor"4 is used.
t Robert W. Floyd (1936 2001)
1 Edsger Wybe Dijkstra (1930 - 2002)
Â§ See also: The Free Encyclopaedia, The Wikimedia Foundation, Inc.
A good illustration of the notion of a fixpoint functor can be obtained using dynamic logic developed by Pratt 
V. R. in 1974 (e.g. see: Pratt V.R. 1980). This system, used in the area of program verification, is related to 
Hoare's logic, reasoning about program correctness (Hoare C.A.R. 1969). A system similar to Hoare's logic was 
early presented by Floyd R.W. (1967)t
Pratt's dynamic logic can be viewed as a refinement of algorithmic logic (Mirkowska G. and Salwicki A. 
1987), and the weakest-precondition predicate transformers Dijkstra E.W. (1976) . Moreover, this logic 
becomes a good connection to the axiomatic and Kripke semantics of modal logic (Venema Y. 2008).
In dynamic logic, the basic modal functors ' â¡ ' and 'O' are extended by associating to every action a' the 
(two dual) modal functors [a] and ' (a) '. where [a](? and {a)cp denote the facts that after performing a it 
is necessarily and it is possible the case that <p holds, respectively (for an arbitrary formula <p: there is one-to-one 
correspondence between [d]/>, IfF' and the polymodal logic formulae â¡,! <p ,od <p, respectively). And SO. De Morgan's 
laws are satisfied: ~ [a]r/> o (a) ~ cp and ~ {a^cp o [a] ~ cp. Moreover, as in the case of the basic modal 
functors (see T 2.23 and T 2.24), [a] and (a) are distributive wrt the logical connectives a and v, 
respectively. The monotonicity ride (in short: MON) is given as follows: (cp => y) => ([a]^> => [a]i|/).
In particular, the following rule is also satisfied: [a]((p => t|t) => ( [a]r/? 
[a]v|/), see axiom AO given
below. The corresponding proof is similar to this one given in T 2.29 (left to the reader). Also we have the 
following necessitation rule. |= 
=> |= [a]</> (see the Godel's rule GR). We shall say that this logic is normal if
it follow AO and the last necessitation rule.
The notion of a propositional formula is similar to this one used in the classical propositional calculus (see 
Definition 1.1 of Subsection 1.1). extended in step (2) by two new formulae: [a}?') and (a)(#>). Moreover, it is 
assumed that if 'a' is an event, then such events are also: (a) (b). (a) u (b). (a)*, and ?(cp). An example 
axiomatic system used in propositional dynamic logic (in short: PDL) is given below, e.g. see: (Troquard N. 
and Balbiani P. 2015), (Fischer M.J. and Ladner R.E. 1979), (Baskent C. 2010), or the Handbook of 
philosophical logic (2002) Here p serves as metavariable.
A0.
AL
A2.
A3.
[a]q)
{Kripke axiom}
(the empty promise axiom}
(the identity function axiom}
(union axiom} * * * Â§

161
A4.
A5.
A6.
A7.
[aÂ°b]p Â« [a][b]p
[a*]p Â« p a [a][a*]p
[?p]q o p =a q
[a *](p =} [a]p) =} (p -> [a *]p)
{concatenation axiom}
{fixedpoint axiom}
{test axiom}
{induction axiom}
The axiomatisation based on axiom schemes A3, A4. A5. A6 and A7 were originally introduced by 
Segerberg, K. (1977). The above used symbols: '</ , 
' and '*' are the well-known algebraic operations:
union (or nondeterministic choice of events, called also regular expressions), concatenation (called also 
catenation, sequencing or composition', sometimes' Â° ' is omitted, e.g. ab' instead of 'aÂ°b') and the Kleene 
star operator, called iteration (Kleene S.C. 1952, 1956)
*.
 The event 1 ?p , related to A6, means: "test p and 
proceed only if true". In accordance with the laws of exportation and importation (see T 1.12 of Subsection 1.2), 
A7, given e.g. in (Troquard N. and Balbiani P. 2015) or (Vetter B. 2015), can be equivalently transformed to 
the following form: pA[a*](p => [a]p) => [a *]p, e.g. given in (Baskent C. 2010) or in the Free 
Encyclopaedia. The induction axiom A7 (in short: IND1) is very similar to the third axiom (the principle of 
mathematical induction) of Dedekind - Peano? axioms. In fact, assume that p is true in the current state and 
assume further that after any number of iterations of a: if p is still true, then it will be true after one more 
iteration of a. Then p must remain true after any number next iterations, i.e. no matter how often we perform a.
To minimise the number of used parentheses in an expression, some priorities for logical connectives can be 
introduced. The following precedence of functors from highest to lowest is used below, e.g. (Baskent C. 2010): 
(a) , [a], ~ . a , v, 
, Â«, ? , * , o, u .
The following property is satisfied (Kozen D.C. 1994): a*Â°a* = a*, where a * =<jf loaÂ°a*.And 
hence, we can obtain (provided there is no ambiguity, below tire use of Ai is denoted by at, for any i).
{ar}
' Provided there is no ambiguity, instead of' ; ' the concatenation operation is here denoted by 'o'. The Kleene algebra of regular events 
will be presented in the next part of this work.
tjulius Wilhelm Richard Dedekind (1831 - 1916), Giuseppe Peano (1858 - 1932). An earlier formulation of this principle was also given 
by Pascal (Blaise Pascal, 1623 - 1662). Hie principle of induction concerns the arithmetic of natural numbers. In particular, this principle can 
be represented by means of the following rule:
F(0)
V(F(k) => F<k + 1))
---------------------- (the equivalent form of A7, represented as a rule:
V F(n)
<P
[a
*](y
 =. [a]y)
[a
, is very similar to this principle).
Here F(n)' denotes an arbitrary formula or theorem, for convenience, it is assumed here that 0 is a natural number. Obviously, 
k, n 6 N.

162
Since a**  = a*,
 in a similar way we can obtain: [a * *]p  o [a *]p
.
Proposition 2.17 (fixedpoint axiom)
[a *]p  Â« p A Mt 4
Proof: 
[a
*]p
[1 u a o a *]p
[l]p a [aÂ°a*]p  
p a [a]a
*]p
 c
{df.' a *'.  SR}
{a3}
{a2. a4. SR}
The following rule, called loop invariance (in short: LT ), was given in (Troquard N. and Balbiani P. 2015): 
(p =a [a]p)=> (p =a [a *]p).  A more simpler and equivalent version of LI is given in the next thesis.
Thesis 2.124
P a [a]p =} [a
*]p  Â« (p =} [a]p) (p [a
*]p)
Proof T 2.124a:
(1) 
p A [a]p =} [a
]p
 
{a}
*
(2) 
p [a]p
(3) 
~(P^>[a
]p)
 
{aip}
*
(4)
P 
r I
{NC : 3}
(5)
~ [a * Jp
(6)
Hp
{-C: 2.4}
(7)
P a [a]p
{+K : 4,6}
(8)
[a
*]p
{-C: 1,7}
contr. â¡
{5.8}
Proof T 2.124b:
(1)
(P Hp) =a (P [a
*]p)
{a}
(2)
~(P a [a]p =} [a
*]p)
{aip}
(3)
P a [a]p 
r i
{NC : 2}
(4)
~ [a * Jp
(5)
P a (p [a]p) =} [a
*]p
{T 1.12 of Subsection 1.2 : 1}
(6)
P a (~p v [a]p) =} [a
*]p
{CR, SR: 5}

163
(7) 
P A [a]p =} [a
*]p
(8) 
[a *]p
contr. â¡
{a is distributive over V, SR: 6}
{-C : 3,7}
{4.8}
Since 1= <p a y => (<p => y), the opposite implication, i.e. T 2.124b. can be shown by assuming: cp =dt p 
\|/ =df [a]p in line (3) and next usingC'. Moreover, a more simplified proof of T 2.124 can be obtained by 
starting with the right side of T 2.124 and next using T 1.12 of Subsection 1.2, CR and SR (left to the reader).
Thesis 2.125 (induction axiom)
[a
*](p
 =} [a]p) =} (p => [a *]p)
Proof:
(1) 
[a
*](p
 => |a]p) Â« (p => [a]p) a [a][a
*](p
 =} [a]p) 
{RR: p => [a]p//p wrta5}
(2) [a*](p  => [a]p) =s> (p => [a]p) a [aJa
*](P
 [a]p) 
{-E : 1}
(3) p => p 
{i= p p}
(4) (p => p) a [a
*](p
 => [a]p) (p [a]p) a [aja *](p  => [a]p) {+K:2,3}
(5) p a [a
*](p
 =P [alp) => p a (p ::> [alp) a [aja
*](p
 =P [aIp) {MAC, - C . (2), (3), (4) / i= (<p
LJ 
L J 
L J 
L 
J 
L 
l|/) A (p => p) => (<p A p => A
P) }
(6) p a [a *](p  
[a]p) [ajt a p a [aja *](p  
[a]p) 
<CR- A 1S "utive 0V^v^als0
(7) pA [a *](p  => [a]p) =A [a](p A [a *](p  => [a]p)) 
{ [a] is distributive over a, SR : 6 }
(8) PA [a *](p  => [a]p) =A [a
*](p
 A [a *](p  
[a]p)) 
{LI, - C : 7}
(9) PA [a *](p  => [a]p) =A [a
*]pA
 [a *]  [a *](p  => [a]p) 
{[a
*]
 is distributive over a, SR: 8}
(10) PA [a *](p  => [a]p) =a [a
*]pA
 [a
*](p^[a]p)
 
{^ [a *][a  
Â« [a *]^>,  SR : 9}
(11) [a *]p  a [a
*](p
 => [a]p) =a [a *]p  
<pa h'=â  <(>)
(12) pA [a *](p  => [a]p) =a [a
*]p
 
{TC : 10, 11}
[a *](p  
[a]p) 
(p => [a *]p)  . â¡ 
{T 1.12 of Subsection 1.2. exportation:
12}
The following diamond version of the above fixed point axiom A5 can be obtained.
Thesis 2.126 (dual fixed point axiom)
(a *)p  Â« p v (a)(a *)p
Proof:
(1) [a
*]~p
 o ~p a [a]a
*]~p
{RR: ~p//p wrta.s}

164
(2) ~[a
*]~p
 Â« ~(~p A [afa *]~p)  
(a *)p  <=> p v (a^(a *^p
. â¡
{CE : 1}
1^4+ Â« (a)~<p,-N,NK, SR: 2}
The following properties are satisfied (Harel D., Kozen D.C. and Tiuryn J. 2000): some of the presented 
properties are in accordance with the above considerations, e.g. 5, 7, 9, 10 and 11 (the right-to-left implication).
Thesis 2.127
The following formulae are valid in PDL.
1- 
[a
]p
 =a p
*
2. 
p => (a ^P
*
3- 
Mp^Mp
4. 
(a^p =a (a ^P
*
5. 
[a
]pÂ°
 [a
Â°
 a]p
*
*
*
6. 
(a )p  o (a  o a ^P
*
*
*
7. 
[a |p  o [a ]p
*
**
8. 
^a ^p  o (a  ^p
*
* *
9- 
[a ]p  Â« p a [a][a ]p
*
*
10. 
(a )p  <=> P v (a)(a )p
*
*
11. 
[a
]p
 Â« p a [a
](P  [a]p)
*
*
12. 
(a
)p
 Â« P v(a
)(~P
 a (a)p). â¡
*
*
Since 1 and 2 are valid, then so is: [a *]p  => (a
*)p  (by using rules TC and - C: as in modal logic, see 
T 2.18). Moreover, from 1 and 3, by using +K, MCand - C, we can obtain: [a *]p  => P a [a]p. According 
to T 2.124, the opposite implication is equivalent to LI. The line 4 is obtained by 3 using rule CC.
The proof of the last formula 12 can be obtained immediately by 11 and it is given below.
(1) 
[a |p  Â« p a [a
](P
 
[a]p)
*
*
(2) 
~[a | p Â« ~ (P a [a ](P  => [a]p))
*
*
(3) 
(a
)~po~pv
 (a
)(p
 a (a)~p)
*
*
(a *)p  o p v (a *)  (~ p a (a)p ). â¡
[T 2.127 : 11}
{CE: 1}
{i= ~[a]cp Â« (a)~(p,NK,NC, SR: 2}
[RR : p, ~ p // ~ p, p}
The reflexive transitive closure rule (in short: RTC) is given as follows.

165
(p v (a)q =^> q) =^> ((a *)p  =?> q)
Semantically, the properties of the Kleene star operator ' *'  follow directly from the classical notion of 
reflexive and transitive closure p*  of a binary relation p defined in a given set X. In fact, it can be shown that 
a*  is a reflexive and transitive relation containing a (see T 2.127, lines 2,6 and 4, respectively: these three 
properties are also summarised in line 10). Moreover, it is necessary to show that a * is the least such relation. 
There are several equivalent ways that this can be done: by using RTC. LI or IND, which are interderivable 
(Harel Dâ Kozen D.C. and Tiuryn J. 2000). As an example, the rule LI was used in the proof of IND (in line (7) 
of tlie proof of T 2.125), and vice versa: IND may be used in the proof of LI. This is illustrated by T 2.128, given 
below.
Let cp be valid. Then, in accordance with the necessitation rule and - C we have: [a]r/> is valid. Assume 
now that [a]r/> is valid. Then by the necessitation rule and - C it follows that [a is valid. Hence, according 
to A4, [aÂ°a]p is valid, i.e. [a-]^. etc. Hence: [a1]^ is valid (for any i > 0). Since [l](P o cp. from A2 and 
A3 it follows that a valid formula is the following: [luaua'u...]p. Therefore, the following modal 
generalisation of the necessitation rule can be obtained (in short: MGEN): 1= cp => 1= [a *\p
Thesis 2.128 (loop invariance) 
(P [a]p) (P Hp)
Proof:
(1) 
p =} [a]p
(2) 
[a
](p
 =^> [a]p)
*
(3) 
[a
](P
 
[a]p) (P => [a ]p)
*
*
P [a
*]p.
 â¡
{a}
{<P=dfP [a]p C : MGEN, 1}
{IND}
{-C:2.3}
The following equivalent dual form of the reflexive transitive closure rule. i.e. dualisation of RTC. can be 
obtained.
(1)
(P v (a)q =a q) =a ((a
*)p
 =a q)
(2)
(P v ~[i]~q => q) =a (~[a
*]~p
 =?> q)
(3)
~(P v
- a]~q) v q =a ~(~[a
*]~p)
 v q
(4)
~P A
~q v q => [a
*]~p
 v q
(5)
P A [a 
(q p
; v ~ q =?> [a *]p  v ~ q 
a [a]q) =} (q =} [a
*]p).
 â¡
{RTC}
{t=(a)<p Â« ~ [a]~ cp, SR : 1}
{CR. SR: 2}
{NA. -N. SR: 3}
{RR: p. q. ~q//~p. ~q. q}
{CR. SR: 5}
The use of LI in the proof of dual RTC is illustrated in the next thesis.
Thesis 2.129 (dual RTC) 
(q p a [a]q) =} (q [a
*]p)

166
Proof:
(1) 
q => p a |a]q
(2) 
q
(3) 
q 
P
(4) 
q =a [a]q
(5) 
q =a [a
]q
*
(6) 
[a]q =} [a]p
(7) 
[a]q
(8) 
[a]p
[a
*]p.
n
{a}
[MC.-K: 1}
[LI. - C : 4}
[MON : 3}
{- C : 2.4}
{-C : 6,7}
[MGEN : 8}
In general, the use of PDL for formal verification of programs (e.g. describing correctness, termination and 
equivalence of programs) involves program models called "regular programs" because of their similarity to 
regular expressions. Some example standard block structured programming constructs are illustrated below, by 
definitional abbreviation (Fischer M.J. and Ladner R.E. 1979), (Baskent C. 2010), (Troquard N. and Balbiani P. 
2015). Here 'aÂ°b'. 'a u b' and 'a
*'
 mean: 'begin aÂ°b end'. 'nondeterministically do a or do b' and 
'repeat a a nondeterministically chosen number of times'. The last two commands 'abort' ('fail' or 'blocked') 
and 'skip' correspond to: 'immediately terminate' and 'does no operation', respectively.
Program operator
PDL syntax
if p then a else b
?pÂ° a u ? ~ p Â°b
while p do a
(?pÂ° a)
*Â°?~p
repeat a until p
ao (? ~ po a)Â» o ?p
abort
?0
skip
?1
In accordance with the Pratt's interpretation of Hoare's triples. PDL (extended with the first-order dynamic 
logic can be considered as a generalization of Hoare's calculus. In particular, the Hoare's partial correctness 
assertion {cp}a{q/} can be equivalently encoded by the following implication: cp =a [a]v . Some rules of 
inference were used in this calculus, e.g. such as: composition rule, conditional rule, iteration (or while) rule, two 
rules of consequence, etc. As an illustration, the Hoare's composition rule is given as follows: 
{cp}a{q/}.{q/}b{%}
{cp}a;b{%}
This rule describes the elementary sequential composition of two programs 'a' and b'. The first triple 
{^}a{(//} is related to the assumption that when 'a' is executed in a state satisfying cp, then it will finish in a 
state satisfying q/, whenever it halts (similarly for (/Jb{/} ). The conclusion {^}a;b{/} of this rule concerns 
the partial correctness of the obtained program 'a;b' (denotes: 'a' sequentially composed with 'b') and follows 

167
from the above two assumptions. We can conclude that if 'a;b' is executed in a state satisfying cp, then it finishes 
in a state satisfying % . whenever it halts (Troquard N. and Balbiani P. 2015).
The proof of the Hoare's composition rule is given below.
Thesis 2.130 {composition rule)
(P [a]q) A (q =} [b]r) =} (P =} [aÂ°b]r)
Proof:
(1)
P => [4
(2)
q =^> [b]r
{a}
(3)
P
(4)
[a]q =^> [a][b]r
[MON : 2}
(5)
Hq
{-C: 1,3}
(6)
[aIbt
{- C : 4.5}
[a Â°b]r. â¡
[A4 : 6}
A little more complex than the previous one. is the proof of the Hoare's rule of iteration. This rule is shown 
as follows.
!<P A q/}a{cp} 
{cp} while cp do a {~ cp a cp}
A version of the proof of the Hoare's rule of iteration, given in (Troquard N. and Balbiani P. 2015) is 
illustrated below. Here, the program operator while q do a' is equivalently represented by its corresponding 
PDL syntax, i.e. '(?qÂ° a)Â»Â°~ q'. And so, we have the following thesis.
Thesis 2.131 (iteration rule)
(P a q [a]p) =} (p =} [(?qÂ°a)
*Â°
 ? ~q](~ q a p))
Proof:
(1) 
p a q => [a]p
(2) 
P
(3) 
p =A (q =A [a]p)
(4) 
p 
[?q][a]p
(5) 
p 
[?qoa]p
(6) 
p => [(?qoa)
]p
*
(7) 
p =a (~ q =a ~ q a p)
{a}
{ T 1.12 of Subsection 1.2 : 1}
[A6, SR: 3}
[A4, SR : 4}
{LI,-C:5}
<p =â¢ ci' â 'i' A (p);

168
(8)
[(?qÂ°a)*]p =s> [(?qÂ°a)*](~q => ~q /\ P)
[MON : 7}
(9)
p =x> [(?qoa)
*](~q
 =â  ~q A p)
[TC : 6,8}
(10)
p =x> [(?qÂ°a)
*]
 [?~q](~q a p)
[A6, SR: 9}
(H)
p =a [(?qÂ°a)
*Â°
 ? ~q](~ q a p)
[A4. SR: 10}
[(?qÂ°a)*Â° ?~q](~q a p). â¡
[-C: 2,11}
It was shown by Pratt V.R. (1981) that Pp subsumes PDL and extends the exponential-time decision 
procedure for PDL to Pp. However, it was not known whether strictly PDL is contained in Pp. Moreover, a 
deductive system was not given (Kozen D.C. 1983).
In general, the proposed and studied by Kozen D.C. (1983), calculus Lp contains essentially of propositional 
modal logic with a "least fixpoint operator". It was shown that Lp is syntactically simpler yet strictly more 
expressive than PDL.
In accordance with the above considerations, the use of fixpoint functors is a very important extension of the 
expressive power of any labelled transition system S. Provided there is no ambiguity, below an event 'a' is 
denoted by'd' and interpreted as an atomic action, d e D (the set of atomic actions or labels).
Let now consider the PDL formula (d *)p . By definition, this formula holds at those states in S from which 
there exists a finite pa-path, of unspecified length, leading to a state in which p is true, where: a path through S 
is defined as a non-empty sequence of the form (so,di,si,... ,dn,sn) such that s^p^, for any i < n (VenemaY. 
2008). According to T 2.126, we have: Sll-(d*)p <=> p v (d)(d *)p, for any S (here, it is used '(d)' 
rather than 'Od'). And hence, the following example was presented.
Example 2.17
In accordance with the above dual fixed point axiom, (d *)p might be informally interpreted as a fixed point 
or solution of the following'equation': x o p v (d)x.
Let oc,i be a formula that is valid at those states of S from which an infinite pa-path emanates. Then, the 
formula (d *)p v ood is another such fixed point. Moreover, it can be shown that these two fixpoints are the 
smallest and the largest such possible solutions, respectively. â¡
Generally, the modal p-calculus allows us to refer explicitly to such smallest and largest solutions, according 
to the last example: px. p v (d)x and vx. p v (d)x, respectively (Venema Y. 2008).
The polymodal logic PML(D,P) can be extended as a polymodal fixpoint logic in D and P, in short: 
uPML(D.P). by introducing the following two additional formulae: px.cp and vx.cp, where 'px' and 'vx' are 
called the least and greatest fixpoint operators (x e P)
*.
 The last two fixpoint formulae are called p- and v- 
formulae, respectively. Moreover, any fixpoint formulae are usually assumed to be in positive normal form. i.e. 
the only admissible occurrences of the negation symbol is in front of atomic formulae. And so, no occurrence of 
x in ip may be in the scope of the negation functor. The notions of subformula and proper subformula are 
similar, as in the classical case. So, they are omitted.
' It can be observed that the used designations of these two fixpoints coincide with this one used in ^calculus (Alonzo Church 1903 - 
1995), in particular the notion of ^abstraction'. /.x.t. binding the variable x in the term t, e.g. Xx. 2x3+5 is a lambda abstraction for the 
function f(x) =df 2x3 + 5. see: (Church A. 1941) or e.g. (Cardone f. and Hindley J.R. 2006).

169
Syntactically, the fixpoint operators px and vx are very similar to the quantifiers of first-order logic in the 
way that they bind variables (see Section 3 of Chapter II). Let p e {p, v}, FV(cp) and BV(cp) be the sets of 
free and bound variables of a formula <p. The inductive definition of the last two sets and also the definitions of 
the notions of a clean formula <p. dependency order on B V(cp) and a guarded variable (or formula) are presented 
below (Venema Y. 2008). Here, for convenience, are exclusively assumed such formulae in which every bound 
variable uniquely determines a fixpoint operator binding it. Moreover, there is no overlap, i.e. partly cover, 
between free and bound variables.
Definition 2.15
The sets FV(cp) and BV(cp) are defined as follows.
FV(F)
=df
0
BV(F)
=df
0
FV(T)
=df
0
BV(T)
=df
0
FV(p)
=df
{p}
BV(p)
=df
0
FV(~p)
=df
{p}
BV(~p)
=df
0
FV(cp a cp)
=df
FV(cp) u FV(cp)
BV(cp a cp)
=df
BV(cp) c.j BV(cp)
FV(cp v cp)
=df
FV(cp) u FV(cp)
BV(cp v cp)
=df
BV(cp) c.j BV(cp)
FV(Qdcp)
=df
FV(cp)
BV(Odcp)
=df
BV(cp)
FV(Odcp)
=df
FV(cp)
BV(Odcp)
=df
BV(cp)
FV(r]x.cp)
=df
FV(cp) -
{*}
BV(r]x.cp)
=df
BV(cp) c.J {x}
Definition 2.16
Any <p e pPML(D.P) is clean iff there are no two distinct occurrences of fixed point operators in >p that 
bind the same variable, and there is no variable that has both free and bound occurrences in <p.
Let x be a bound of the clean formula cp. By cpx =df rpxA we shall denote the unique subformula of cp, 
where x is bound by r|x.
Let cp e pPML(D.P) be a clean formula and x, y e B V(cp). The following partial ordering relation, called 
dependency order (or a ranking relation) on BV(cp) and denoted by'<<P'. can be introduced.
Definition 2.17
x y Odf cpx < cpy, where '< 'denotes: 'is a subformula of'.
In fact, if y ranks higher than x then the meaning of cpx will depend on the meaning of cpy. And finally, the 
notion of guardedness is presented as follows.
Definition 2.18
Let cp, % e pPML(D.P). We shall say that a variable x is guarded in cp iff any occurrence of x in cp is 
in the scope of a modal functor. A formula % is guarded iff for any subformula of % of the form qx.8, x is 
guarded in 8.
The semantics of modal fixpoint formulae can be described algebraically or also by means of evaluation 
games (the more easier variant). In fact, the algebraic semantics of px.cp and vx.cp in S is related to some 
algebraically defined meaning formulae. Any cp can be represented as an operation on the power set of S. And 
hence, it would be necessary to show the existence of a least and greatest fixpoint for any such operation (a more 
formal treatment is omitted here, see: Venema Y. 2008).
The above introductory notions related to modal fixpoint logics are an illustration of the last excellent work. 
Another topics concerning the modal p-calculus were also presented, e.g. such as: deterministic and 

170
nondeterministic stream automata and their logical presentations, transition system theory, some methodological 
aspects with regard to the notions of decidability, expressive completeness, preservation results, axiomatisation 
and so on The existence of an effective procedure transforming a given alternating Kripke automaton into an 
equivalent nondeterministic one was presented (using bisimulation based on the notion of relation lifting, see 
Definition 2.14). And this can be considered as the most fundamental result concerning the automata-theoretic 
approach with respect to the modal p.-calculus.
In general, the modal p.-calculus can be considered as a very interesting and important theory in mathematics 
and theoretical computer science. This calculus is a well-behaved extension of the basic modal logic and at the 
same time by using mathematical structures that model processes, such as labelled transition systems, it can be 
considered as a good balance between computational efficiency and expressiveness.
The relationship between a program's syntactical structure and its behaviour is fundamental in program 
analysis. This relationship is often exploited to phrase program correctness problems in terms of the structure of a 
program rather than in terms of its behaviour. However, in the other direction, this relationship is much less 
understood and more complex: given a program behaviour, how can one capture the program structures that 
admit this behaviour? A natural way to capture both program structure and behaviour is the use of temporal logic 
formulae: structural properties are concerned with the textual sequencing of instructions in a program, while 
behavioural properties consider their executional sequencing (Gurov D. and Huisman M. 2013). Here, it was 
shown that every disjunction-free behavioural formula can be precisely characterised by a finite set of structural 
formulae: a program satisfies the behavioural formula if and only if it satisfies some structural formula from the 
set. Several extensions to behavioural formulae with disjunction were also considered. As a property specification 
language, it was used a fragment of the modal p.-calculus with boxes and greatest fixed points only. The obtained 
temporal logic system, called a simulation logic and capable of characterising simulation, was suitable for 
expressing safety properties. However, in accordance with the proof correctness requirements, sometimes the full 
modal p.-calculus was used. In fact, the considered simulation logic was defined as a restriction of the full logic, 
where negation was restricted to atomic propositions only. The last research paper is a good study concerning 
use of the modal p.-calculus in program verification and correctness. Some introductory notions are given below.
Let E c S be a set of entry states. The pair (S, E) is said to be an initialised transition system. For 
convenience, the set of proposition letters P is partitioned into the following two disjoint and non-empty 
subsets: the set of atomic propositions (e.g. p. q. r, ...) and the set of free or bound variables (e.g. x, y, z, ...), 
denoted below by A and X, respectively. It can be observed that the graph of S can be equivalently described 
by using the following ternary labelle d transition re lati on', c eS / D / S, i.e. some subset of ordered triples, 
rather than the family R (used in Definition 2.10). Also, the valuation V, restricted to the set A of atomic 
propositions and denoted here by /.. is defined as follows: /. : S IP(A). Simulation logic can be considered 
as a fragment with negation over atomic propositions only. The language of this logic is obtained recursively as 
follows: cp =dfp/x/~cp/cpAq//cpvq/ / [d]<7> / vx.cp (p e A, d e D, x e X). The considered labelled 
transition system S is said to be a model*. And hence, this model can be represented as follows: S =df (S. D, g. 
A, X).
* Provided there is no ambiguity, instead of V, L, â> and the model (Gurov D. and Huisman M. 2013), the letters X, I).; and S 
are used here, respectively. And also, Instead ofbig letters, in the next considerations we shall denote variables by small letters (e.g. x. Xi, x2, 
etc. instead of X, Xi, X2, etc.).
The semantics of the used simulation logic was defined in the standard fashion (Kozen D. 1983), through the 
notion || cp || ^ .where cp is a formula relative to the model S and environment e. The corresponding meaning or 
extension of cp in S wrt s is given as follows (S is considered as an universe).
||p||Â® 
= 
[S 6 S/p 6 
X(S)},
l|x|| Â® 
= 
s(x),
ll-cpll" 
= 
S-llcpIlL

171
llcp/KVll! 
= 
M
*
 
n |Mt
* Provided there is no ambiguity, in the place of "box-operator" here it is used the term "box-functor".
t Only for convenience, sometimes ' o ' is omitted.
The principle of instantiation or exemplification, known in ancient times (Socrates, Platon) is a concept in metaphysics and logic (e.g. 
see: Monaghan P.X. 2011 or 17;e Pree Encyclopaedia. The Wikimedia foundation. Inc.). In nowadays, the term "instantiation" have some 
different interpretations, e.g. an event can be considered as an exemplification of a property in an entity. And this identity is represented as an 
ordered triple of an entity, property type and time (see: exemplification theory). In the case of computer science, the notion of instantiation 
have applications e.g. in generic programming (algorithms are written in terms of types) or also in object-oriented programming, where 
instantiation is a process of creating of instance of an object from a class (and hence, as in the above given considerations).
llcpvvll! 
= 
llcpll^ IMlL
II fak II e 
= 
{s 6 
S / V_((s,d,t) 6 C, 
=i> t 6 lltpllb:
l|vx.cp|| Â® 
= 
U{S' 
c S / S' c ||cpC(s,.x)}.
In accordance with the above extensions, e.g. the dynamic logic formula [dj^9 holds in a state s e S if cp 
holds in all states accessible from s via an edge labelled by d e D. The initialised transition system (S, E) 
satisfies a formula cp. i.e. (S, E) IF cp iff all its entry states satisfy cp. It is assumed here that formulae have 
pair-wise distinct fixed-point binders, and unless stated otherwise, are closed, i.e. all variables x e X are in the 
scope of a fixed-point binder and guarded, i.e. every occurrence of a variable x is in the scope of a box-functor 
(Walukiewicz I. 1995)*.
For convenience, let s ->,i t Odf (s.d.t) e g . We shall say that 's ->,i f is an usual (or strong) transition. 
(for any s. t e S and d e D). Let now a e D be a distinguished (silent or understood) action. The notion 
of a weak transition is introduced as follows: s =>Â« t Odf s ( ->Â« )* t and s =>d t Odf s =>Â« = ->d = =>Â« t 
(for all d a, where: '= 'denotes composition of relations^ and '( ->Â« )* ' is the corresponding transitive and 
reflexive closure of '->a' ). And hence, the observable behaviour of a system can be described by using only 
weak transitions. In fact, we have a possibility of interpretation the box modality of the logic over the weak 
transitions rather that the strong ones. And so (S. s) ifw [d]^ holds iff cp holds in all states accessible from s 
e S via an edge labelled by d . preceded and followed by an arbitrary number of a-steps (Gurov D. and 
Huisman M. 2013). Here, the existence of a standard translation of formulae interpreted over weak transitions 
into equivalent formulae interpreted over strong transitions, was also cited (Stirling C.P. 2001). This translation, 
denoted by '8' has the following property: (S, s) IFW cp exactly when (S, s) IF 8(cp).
The presented in (Gurov D. and Huisman M. 2013) program model is control-flow based and there are 
considered two different views on programs: a structural and a behavioural one. Both these views are 
instantiations of the general notion of model (see also: Soleimanifard S., Gurov D. and Huisman M. 2011). In 
particular, these instantiations yield a structural and a behavioural version of the logic. Any program structure, 
i.e. program's flow graph, is considered as a collection, i.e. disjoint union of control-flow graphs (called below 
"method graphs": one for each of the program's methods). Moreover, all data in the original program is 
abstracted away. The question of adding data to the program model is also discussed (related to the notion of a 
Boolean flow graph'. Ball T.and Rajamani S.K.. 2000 - Boolean programs were proposed as a model for software 
analysis, and in fact, as "a starting point for investigating model checking of software", in the context of air abstractionÂ­
refinement. In tills model, Boolean variables, or sets of such variables, are used as an abstraction of the actual program 
variables. A Boolean program is essentially a C program over Boolean values; it has global and local variables and methods 
that take Boolean arguments and return Boolean values).
The next definition is an extension of the notion of a Boolean flow graph, that allows a faithful representation 
of Boolean programs based on models over finite sets of labels and atomic propositions (Gurov D. and Huisman 
M. 2013).

172
Let Meth be a countably infinite set of method names. M Â£ Meth be finite and m e M
*.
 The notion of a 
method graph is introduced as follows (for convenience. 'Sm' is used below, instead of 'Vm'. given in the 
original definition (obviously, there is one-to-one correspondence between states in Sm and vertices, called also nodes or 
points in Vm)-
* More precisely, any m e M should be understood as a method definition, consisting of a method name, the types of the return value 
and the parameters and its implementation: concerns the modular verification of temporal safety properties. Modularity at the procedure-level 
is a natural instantiation of the modular verification paradigm, where correctness of global properties is relativised on the local properties of 
the methods rather than on their implementations, and is based here on the construction of maximal models for a program model that abstracts 
away from program data (Soleimanifard S.. Gurov D. and Huisman M. 2011).
It i s required I" to contain the methods that are not provided by I+.
Definition 2.19
A flow graph for method m e Meth over a finite set M Â£ Meth of method names is a finite model 
Sm =df (Sm. Dm. <;m. Am. X.m). where: Sm is the set of control nodes of m. Dm =df M u {a}. Am =df {m. r} 
and /.m : Sm -> IP(Am) so that m e Xm(s) for all s e Sm . i.e. each node is tagged with its method name. 
The nodes s e Sm with r e Am(s) are said to be return points. A method graph for method m e Meth over 
M is an initialised model (Sm. Em) such that Sm is a flow graph for m over M and 0 0 Em Â£ Sm is a set of 
entry points of m.
In accordance with the above definition, there are assumed only two types of atomic propositions: related to 
method names, and to return points.
The control flow graph sequencing can be realised by means of some "interface", ensuring that these graphs 
can only be composed if their interfaces math. The notion of 'flow graph interface' is given below.
Definition 2.20
Let I+ . I" Â£ Meth be two finite sets of names of provided and externally recpiired methods, respectively t A 
flow graph interface is the pair 1 =df (I+ . I ). Let now I, =df (1^. I, ) and 12 =df (1G 12) be two such 
interfaces. The following binary operation, called interface composition, is introduced: I, u I2 =df (Iju I2, 
(Ifu 1") - (l^u 12)).
In accordance with the above considerations, the program's flow graph is essentially a disjoint union of its 
method graphs. The following notion '(Si, Ei) w (S2. E2)' of disjoint union of initialised models is used below, 
where each state is tagged with 1 or 2, respectively and (s. i) -xi/tSj.Ep w (s2,e2) (t, i) Odf s ->.i/(s,,e.) t 
(i = 1.2: Gurov D. and Huisman M. 2013).
Definition 2.21
A flow graph G with interface 1, written G : I', is defined inductively by: (1) (Sm. Em) : ( {m} , M - 
{m}) if (Sm. Em) is a method graph for m e Meth over M and (2) Gj 1+) G2 : I; u I2 if G,: I, 
and G2 : I2.
In accordance with the last work, the above flow graph is said to be closed if I" = 0, i.e. if G does not 
require any external methods. Satisfaction, instantiated to flow graphs and denoted by 'IES'. is said to be 
structural one. And hence. G II-s cp <=>df G II- cp.
The instantiation of the initialised models on the behavioural level requires the use of the following three 
kinds of labels.

173
(1) the transition label r: to designate internal transfer of control.
(2) mi call m2: for the invocation of method m2 by method mi and
(3) 
m2 ret mi: for the corresponding return from the call.
The following definition was introduced (Gurov D. and Huisman M. 2013).
Definition 2.22 (flow graph behaviour)
Let G =df (S, E) : I be a closed flow graph where S =df (S. D, g. A, X). The behaviour of G . denoted by 
b(G). is defined as follows: b(G) =df (SB, EB). where SB =df (SB. DB, gB. AB, XB) such that SB =df S x S . 
i.e. elements of SB are pairs of control points s and stacks* ct (also called configurations). DB =df {r. 
mi call rm. rm ret mH (mi, rm e I+). AB =df A, XB((s, ct)) =df X(s). and cB c SB x DB x SB is defined 
* A stack or LIFO (last in, first out) is an abstract data type model considered as a collection of elements having two basic operations: 
push (insert element mto stack), which adds an element to the collection and pop (remove element from stack), which removes the last added element 
{The Free Encyclopaedia, The Wikimedia Foundation, Inc. For a more detailed information, see: Knuth D.E. 1997: Donald Ervin Knuth, 
bom 1938).
Java (first designed by James Gosling: 1995) is one of the most popular today's programming languages because of its possibilities in 
the implementation of concurrence, application of classes, object orientation and platform independence.
by the rules:
(transfer) 
(s-CT) "^/b (S . ct) 
jf
(call) 
(Si, ct) â>m1callm^ / B (S2. Si'-o) 
if
(return) 
(s2. Si'-cr) ->moretm1/B (Si. a) 
if
me I+ . s ->oc/m s', s IF ~ r
rm. rm e I . Si -âºmj/mj sf. Si IF ~r. 
S2 I- rm. S2 e E
im.im e I+.S2 IF rm a r. si IF im
Here is a stack push. The set of initial configurations is defined as: EB =df E x (ej. where 'e' denotes 
an empty sequence over S.
An alternative approach of describing the behaviour of a flow graph was also cited (using a pushdown 
automaton, i.e. a type of automaton extended with a stack (a more formal treatment is omitted).
Figure 2.3 A simple Java class and its flow graph
Example 2.18 (Gurov D. and Huisman M. 2013)
A simple Java class and the corresponding (simplified) flow graph that it induces are shown in the above 
Figure 2.3. The flow graph consists of two method graphs: one for method even and one for method odd. The 
entry nodes are depicted as usual through edges without source.
Let U be the set of edges of the above flow graph and u+ and u be the terminal vertices of u e U (we 
shall assume u is connected from u+ to u" : Mayeda W. 1972). We shall say p. =df (ui. m. ... . Uk) is a 

174
(directed) path if all edges have the same orientation, i.e. nr = Ui++1 (i = 1,2,..., k - 1)*. By p. =dt ]lx| ui+, in- ] 
we shall denote a path having ui+ and tn- as initial and terminal vertices, respectively. Below by l(u) e DB 
we shall denote the label associated with u.
* Because of the one-to-one correspondence between vertices and states, instead of v, the states s, are used below (i - 0. 1........9).
Similarly, instead of s the distinguished action is here denoted by a. Moreover, provided there is no ambiguity, the Greek letter 'j.t' also 
denotes a path ( of a graph G. e.g. Berge C. 1973): depending on the context.
t In computer programming, a subroutine is a sequence of program instructions that perform a specific task. A tail call is a subroutine 
call perforated as the final action of a procedure. If a tail call might lead to the same subroutine being called again later in the call chain, the 
subroutine is said to be tail-recursive, which is a special case of recursion. Tail recursion (called also: tail-end recursion) is particularly 
usefill, and often easy to handle in implementations (see T/ie Free Encyclopaedia. The Wikimedia Foundation. Inc). In accordance with the 
last considerations, any subroutine can be considered as a subprogram similar in most respects to a function. Moreover, recursion is generally 
favoured over iteration in very many languages because of its elegancy, minimal form, implementation with regular functions and easier to 
analyse formally, hi particular recursion is preferred and promoted in functional programming (starting with Church's L-calculus, as a 
theoretical framework for describing functions and their evaluation: Alonzo Church 1903 - 1995 and since the introduction of Lisp, in the late 
of 1950's: John McCarthy 1927 - 2011, many partially and fully functional languages have been developed, e.g. the Haskell's language in 
the late of 1980's: Haskell Brooks Curry 1900 - 1982). However, some languages may not have iteration, e.g. the general purpose logic 
programming language Prolog (developed in 1972, see: Colmerauer A. and Roussel P. 1996). Moreover, in the case of more functional calls 
and stack operations (context saving and restoration) recursion can also be less efficient.
According to Definition 2.22, the elements of Sb are ordered pairs of type (s, ct), considered as vertices in 
the above program's flow graph. An example execution of the program is illustrated by the following path: p = 
p|(so, e). (S3, e)]. Moreover, instead of the original given brandling structure a table representation is shown 
below. â¡
u+
l(u)
u
(So, e)
t/b
(Si, e)
(Si, e)
t/b
(S2, e)
(S2, e)
even call odd / B
(S5, S3)
(S5, S3)
t/b
(Se, S3)
(Se, S3)
t/b
(S7, S3)
(S7, S3)
odd call even / B
(So, S9 â¢ S3)
(So. S9 â¢ S3)
t/b
(Si, S9 â¢ S3)
(Si, S9 â¢ S3)
t/b
(S4, S9 â¢ S3)
(S4, S9 â¢ S3)
even ret odd / B
(S9, S3)
(S9, S3)
odd ret even / B
(S3, e)
The behavioural satisfaction related to G and denoted by ' IIâ B ' is introduced in a similar way, i.e. G IIâ B vp 
<=>df b(G) IF ip.
The above presented two kinds of satisfaction (structural and behavioural) will also involve and two kinds of 
formulae. For example, in accordance with the last example, the structural formula 'vx.[evCT?]r a [odd]r a [oc]x' 
expresses the property: ''on every path from a program entry node, the first encountered call edge goes to a 
return node", in effect specifying that the program is tail-recursiver. Similarly, the behavioural formula 'even 
vsfieven call eve/?]ff a [t]x' expresses the property: "in every program execution, starting in method even, the 
first call is not to method even itself', where Tf ' denotes the constant formula 'false' (Gurov D. and Huisman 
M. 2013).
Method graphs allow return points to have outgoing edges. However, the proposed characterisation of 
behavioural properties by a set of structural formulae, defined in the last work, is only correct if the flow graph 
has no such edges and such graphs are called clean. The operation of cleaning, defined on method graphs, can be 
lifted to flow graphs. In fact, the following definition was introduced.
Definition 2.23 (the unary operation of cleaning)

175
Let Sm =df (Sm. Dm, <^n. Am. Xm) be a method graph. The unary operation of cleaning is defined as follows: 
(Sm) df (Sm. Dm. {(S.d.t) G Cm / f Lm(s)}, Am, /-in).
In accordance with the last definition, we have: (G
*)*
 = G*  (the idempotence
*
 of cleaning) and G*  ILb 
o G IHb 'I' (the behaviour preservation). Moreover, the following implication is satisfied: (G',s) II-s r =u 
V V ((G'.s) IHS d kp). And hence, the structural box formulae are trivially satisfied by return points.
* A property of some operations that can be applied multiple times without changing the result beyond the initial application (Benjamin 
Peirce 1809- 1880): see The Free Encyclopaedia. The Wikimedia Foundation. Inc.
Objective Categorical Abstract Machine Language, in short: Ocaml is an extension of the Caml programming language, created by 
Xavier Leroy at all in 1996, with object-oriented constructs (see The Free Encyclopaedia. The Wikimedia Foundation. Inc). Not be confused 
with the concurrent programming language Occam, first developed by David May at all. 1984 (advised by Tony Hoare, communicating 
sequential processes: Charles Antony Richard Hoare. bom: 1934 and named after William of Ockham of Occam's razor fame: 1285 - 
1347). Occam was mainly considered as a programming language for transputer microprocessor systems, e.g. hardware realisation of data 
flow Petri nets.
t see: Definition 1.14 of Subsection 1.8
Â§ Provided there is no ambiguity and for convenience, the symbols used for variables are "overloaded": for reasons related to the notion 
of an induced structural formula, later considered in (Gurov D. and Huisman M. 2013). hi addition, the/rame E we shall denote by the 
symbol F.
d c= T~) 
L J
The mapping behavioural into structural properties was realised by a map II, defined as follows (Gurov D. 
and Huisman M. 2013): G ILb <=>df 
3 
( G ILS cd ). It is assumed that the considered flow graphs are
peHjd//)
clean, and that behavioural properties are disjunction-free. An extension of II to behavioural formulae with 
disjunction was also considered (though at the expense of completeness).
It was shown that II computes a set of structural formulae that characterises xg and 1 (for any behavioural 
property 4/ and closed interface 1, i.e. for any closed flow graph G : 1 and that only mentions labels that 
are in the behaviour of G: see DB, Definition 2.22).
An implementation of the above explicit translation II was developed in Ocaml and it can be tested on-line. 
Moreover, this translation of simulation logic formulae also allows the label sequences to appear in box 
modalities. And so we have: [e]% =df % and [doÂ®]% =df [d]o] %, where co denotes a label sequence, % is 
already a standard formula and d e D. The map II was defined by a finite tableau construction, in accordance 
with the fixed-point formulae of this logic. And hence, the obtained translation was based on a symbolic 
execution of the behavioural property by means of a such construction. When tracing a symbolic execution path, 
subformulae of t|Â» are tagged with unique constants related to the variables associated with this path. The set of 
all constants is denoted by fo. Let T =df {y / G II-B y}. The following global, injective map was introduced:
: T -> z to map formulae to their tags and this map was considered as an implicit parameter of the tableau 
construction. Moreover, this tableau construction operates on sequents of the shape 'Hh,u,c t parameterised 
on (Gurov D. and Huisman M. 2013):
(1) 
A non-empty history stack H e (L / (Lu {a} u fo )
 + is a pair consisting of the 
current method name and a sequence, called frame and denoted by F, of edge labels and 
constants abbreviating subformulae of y. By F it is denoted F cleaned from constants 
x? e L: e = e. mÂ°o = mog, go <3 = gÂ°G and x_Â»o = 0. 
*
*Â§

176
(2) 
A fixed-point stack U. defining an environment for variables by a sequence of definitions 
of the form x = vx.%. An open formula q/ in a sequent parameterised by U can then 
be understood via a suitable notion of substitution. Let %(0 / x) be a substitution of a 
formula 0 for a variable x in a formula %. And so. the substitution of q/ under U is 
inductively defined as follows: q/[e] =df q/ and [(x = vx.x) Â»U] =df (q/(vx.% / x)) [u].
(3) 
A store C. used for accumulating structural constants during symbolic execution (using 
stores can in principle be dispensed with, but simplifies the presentation of the extraction of 
structural formulae and the correctness proofs).
Let 0H,m . 0U and 0c be the single-element history stack (m, e), the empty fixed-point stack and the empty 
store, respectively. The construction of a maximal tableau with root oc q/ that induces a set of structural 
formulae through its leaves was described as below (for any given closed behavioural formula q/ and method 
m).
Let 7tm(q/) be the set of induced structural formulae associated with q/ and m. The translation of q/ wrt a 
given interface I is defined as all possible conjunctions of the induced structural formulae for each method m 
that is proved by I: n,(\|/) =df { A <pm / <pm e Mt) }â¢ 
me I
During tableau construction the stacks H and U. and the store C are updated as follows (it is assumed that 
the current sequent is not a repeat of an earlier one. see: Gurov D. and Huisman M. 2013 ):
(1) 
First, if q/ is not a fixed-point formula, the constant A'(q/) tagging the behavioural 
property q/ of the current sequent is appended to the end of the frame of the top element 
of H (instead of using constants as tags, alternatively there exists a possibility of introducing fresh 
variables, and add their defining equations to U);
(2) 
Next.
(2.1) if q/ is a conjunction, both conjuncts are explored in two separate branches:
(2.2) if q/ is (the negation of) an atomic proposition, exploration terminates for this 
branch, and a set of structural constraints based on the atomic proposition and the 
current history stack are produced;
(2.3) if the behavioural property of q/ prescribes an internal transfer of the form [t]q/. 
then a is appended to the end of the frame of the top element of H and the 
symbolic execution is continued with formula q/;
(2.4) if \|/ prescribes a call from a to b of the form [a call b]q/. and the top element 
of H is in method a. then b is added at the end of the frame of the top element 
of H, a new element (b. e) is pushed onto H, and the symbolic execution is 
continued with formula q/;
(2.5) if \|/ prescribes a return from a to b of the form [a ret b]q/, the top element of 
H is in method a and the next element is in method b. then a new structural 
constraint is added to C. reflecting the possibility of currently not being at a return 
point, the top element is popped from H, and the symbolic execution is continued 
with formula q/;
(2.6) if q/ is a fixed-point formula vx. q/, then a new equation x - vx. q/ is pushed 
onto U. if not already there, this conditional addition being denoted by 
(x = vx. q/') o U. and the symbolic execution is continued with formula x;
(2.7) if q/ is a variable x for which there is an equation x = vx. q/ in U. then the 
symbolic execution is continued with formula q/. â¡

vn
The tags were used to signal repetition in the symbolic execution of the considered formula and for ensuring 
termination of the tableau construction. The structural constraints and the elements in the call stack denote 
conditions under which the actual property holds. Moreover, each step of the symbolic execution adds new 
constraints. An informal illustration of symbolic execution is given below (Gurov D. and Huisman M. 2013).
Example 2.19
Consider the following behavioural property of a formula '|/: 'invocation of a method cannot return without 
making a method call", formalised as follows: vx. ~ r a [t]x. The obtained steps, when executing \|/ 
symbolically for method a, are given below.
(1) 
It is started with the initial H, i.e. (a, e) and formula '|/ =df vx. ~r a [t]x;
(2) 
The equation x = vx. ~ r a [t]x is pushed onto U, and it is proceed with formula x;
(3) 
The definition of x is retrieved from U, and it is continued with formula ~r a [t]x;
(4) 
Each conjunct of the last conjunction is explored separately:
(5) 
The first conjunct ~ r is the negation of an atomic proposition, and hence exploration 
terminates for this branch, producing a constraint that essentially requires ~ r to hold;
(6) 
The second conjunct [t]x appends a to the frame, i.e. H becomes (a, a), and it is 
proceed with formula x;
(7) 
This is recognised as a repeat of a situation that arose before (at step 3), therefore the 
exploration terminates, producing a constraint that essentially requires x to hold for all 
nodes that can be reached by passing a transfer edge. â¡
In accordance with the last example, the two constraints produced by this symbolic execution can be 
combined for obtaining the following recursive structural formula: a =a vx. ~ r a [d]x (see steps 5 and 7). 
Formally, this symbolic execution should require the introduction of the next notions given in (Gurov D. and 
Huisman M. 2013): tableau system, repeat conditions and structural formulae induced by a tableau. The last 
three notions are briefly presented below.
The tableau system is a proof system, considered as a labelled tree T with a set of goal-directed axioms 
called rules with an empty set of premises denoted by In particular, the used in return rules condition 
Rettf a, b, H) Odf (i = a) a (H e) a 3 (h =df (b, F) â¡ H'). The labelling function, denoted here by f, 
maps each node of T to a triple consisting of a sequent, a rule name (the rule applied to this sequent), and a set 
of triples of the form (i, F, q) where q are literals (i.e. atomic propositions in positive or negated form or 
variables x e X)*. The triple sets are non-empty only at applications of axiom rules. Such leaves are termed 
contributing. The corresponding set of triples is depicted (by convention) as a premise to the rule. A tableau for 
formula tp and method m (in short: Tm(\|/) ) is a tree with root Hoâm. oâ. oc tp obtained by applying the rules. 
Tm(\|/) is maximal if all its leaves are axioms.
Let Hij) o h, u, c% be a leaf node for which there is an internal one H(1j , o h .u , c % such that F'is a prefix 
of F, U' is a suffix of U, and C' c C. The former node is said to be a pseudo-repeat and any node of the latter
' In accordance with the above work, the used symbol X denotes: a valuation, labelling function or a choice set (depending on the 
context). Provided there is no ambiguity, the labelling function and the choice set are here denoted by f and A , respectively. Moreover, 
instead of p(n), the return depth of a tableau node n is here denoted by rd(n).

178
kind is called a companion. An internal tableau node is said to be stable if all its descendant leaves are axioms or 
pseudo-repeats. A tableau is called stable if its root node is stable.
The process of tableau construction was realised as follows. A minimal stable tableau is first computed (i.e. 
pseudo-repeat nodes are not further explored). If all pseudo-repeats in this tableau satisfy some repeat condition 
for any of their companions (see below), the tableau is maximal and construction is complete. Otherwise, all 
pseudo-repeats that are not satisfying any of the repeat conditions are simultaneously unfolded, using a breadth- 
first exploration strategy, and tableau construction continues until the tableau is stable again, upon which the 
checking for the repeat conditions is repeated. As it was shown, this process is guaranteed to terminate, resulting 
in a finite maximal tableau. The tableau system is shown in Figure 2.4 given below (Gurov D. and Huisman M. 
2013).
The following three repeat conditions were introduced into the above tableau system: internal, call and return 
repeat conditions, involving tree types of nodes. The internal repeats are related to recursion in structural 
formulae. In contrast, the other two call and return repeat conditions only recognise that a similar situation has 
been reached before. In fact, the first repeat condition requires only the examination of the top frame of H of the 
current sequent, the second one requires the examination of the whole path from the root to the pseudo-repeat, 
while the third one requires the examination of all remaining paths.
The return depth of a tableau node n, denoted by /v/(n). was defined as the maximal difference between the 
number of applied return mles and the number of applied call rules on any path from n to a descendant node. By 
using the translation 8 (of formulae interpreted over weak transitions into equivalent formulae interpreted over strong 
transitions) we have:
r<7'(e) -df 0,
rd'(x o 8)
r rd'(8) + 1, if r e {reto. reti}
rd'(8) - 1, if r e [calk, calf}
V r<7'(8), otherwise
and
/v/(n) =df max({r<7'(n//ra(p)) / p is a path from n to a descendant node} u {0}),
where r and 8 range over rule names and sequences of rule names, respectively and rules(\i) denotes the 
sequence of rule names along a tableau path p.
Let x be ^(rp). c be the companion node of the pseudo-repeat, and Hc be the history stack at c. More 
formally, the above three repeat conditions were defined as follows.
IntRep(x, (i.F) o H) <=>df x 6 F
('allRep(\. (i.F) o H, c) <?>df (x Â£ F) a (take(rd(c) + 1, (i.F) o H) = take(rd(c) + 1. Hc))
RetRepis. (i.F) o H, c) <=>df (i-F) o H = Hc.
Figure 2.4 Tableau system

179
Let Tm(\|/) be maximal. The set 7tm(<p) of induced structural formulae was generated in the following 
manner (Gurov D. and Huisman M. 2013)
(1) 
Let S' be the family of non-empty triple sets collected from the leaves of the tableau. 
Build a family of choice sets A(ja) by choosing one triple from each element in
(2) 
For each choice set a g A(ja),
(2.1) 
Group the triples of a according to method names: for each m e I+ . define 
Hm =df {(F.q) / (m.F.q) e a};
(2.2) 
For any non-empty Em build a formula m =a Q(Hm). where Q(H) 
=df 
xp and Q'(H) =df {[a]ffl(E') / a e I+ a 0 =df {(F.q)/
(a = F. q) e u {vx.Q(H')/x e a 0 H' =df {(F.q)/(x = F. q) e 5} 
u {q/(e.q) e S};
(2.3) 
The induced formula cp for a is the conjunction of the formulae obtained in the 
previous step;
(3) 
The set Ttm('p) is the set of induced formulae for a g A(ja). â¡
A formal symbolic execution of xp of Example 2.19 is given in Figure 2.5 below.
Figure 2.5 An example tableau Ta(vx. ~ r a
The non-emptiness of H and closedness of xp are invariants during the construction of such a tableau 
system. In particular, it was shown that the proof tree induced by the unfolding of the tableau for behavioural 
formula \p and method m generating the set of structural formulae 
constitutes a proof that every flow graph
satisfying some <p e /: also satisfies xp. In fact, the following fundamental properties were shown: maximal 
tableaux are finite; / l=oâ.m.o,,.oc xp holds whenever there is a proof with root / Hoâ.m.o,,.oc xp; translation II from 
behavioural to structural formulae is sound and complete. A more formal treatment is omitted here (left to the 
reader).
In general, the above proposed tableau construction gives rise to a correctness argument that allows to view a 
maximal tableau as a proof that the structural formulae resulting from the tableau entail the original behavioural 
formula. The combination of this construction with the above properly translation II provides a solution to the 
problem of computing maximal program structures from behavioural properties. Further, this translation can be 
used to reduce infinite-state verification of behavioural control flow properties to finite state verification of 
structural properties. Thus, tools for checking structural properties can in effect be used for verifying behavioural 
ones. Unfortunately, computing the set of induced structural formulae is exponential (i.e. the running time 
increases exponentially). And hence, some ad hoc simplifications were also used (e.g. see: ProMoVer.

180
Soleimanifard S.. Gurov D. and Huisman M. 2011). The possibility of introducing more optimisations was also 
discussed. In particular, a considerable difficulty is presented by (greatest fixed-point) recursion in the 
behavioural formula rp. which has to be captured by recursion in the structural ones. So. this recursion was 
handled by means of a tableau construction that maintains (during the symbolic execution) a symbolic "call 
stack" indicating which subformulae have been explored for which method m. The study of a parallel 
implementation of the above proof system seems to be an interesting topic for further research. Moreover, there 
exist problems that can be described by different algorithms (e.g. see Example 1.4 of Subsection 1.3, we shall say 
that these two algorithms are functionally equivalent)* *. Each such algorithm should involve different program's 
behaviour and hence different program's syntactical structure (in consequence: different degrees of 
computational complexity).
* There exist also problems that cannot be algorithmically solved, and so their solution cannot be automatically found by means of 
computers (public domain).
T The model of nested words, introduced by Alur R. and Madhusudan P. (2004), was proposed for representing and querying data with 
dual linear-hierarchical structure. A nested word consists of a sequence of linearly ordered positions, augmented with nesting edges 
connecting calls to returns (or open-tags to close-tags). The edges do not cross creating a properly nested hierarchical structure, and we allow 
some of the edges to be pending. This nesting structure can be uniquely represented by a sequence specifying the types of positions (calls, 
returns, and internals). Words are nested words where all positions are internals. Ordered trees can be interpreted as nested words using the 
following traversal: to process an a-labeled node, first print an a-labeled call, process all the children in order, and print an a-labeled return. 
Note that this is a combination of top-down and bottom-up traversals, and each node is processed twice.
* Ute coloured Petri nets, the numerical Petri nets (developed originally in: Symons F.J.W. 1978) and other similar models were 
considered as a good theoretical basis for the introduction of a new international standard: the high-level Petri nets, as a well-defined semi- 
graphical technique for the specification, design and analysis of systems. This technique is mathematically defined, and may thus be used to 
provide unambiguous specifications and descriptions of applications, ft is also an executable technique, allowing specification prototypes to 
be developed to test ideas at the earliest and cheapest opportunity. Specifications written in this technique may be subjected to analysis 
methods to prove properties about the specifications, before implementation commences, thus saving on testing and maintenance time (see: 
1SO/1EC 2000. 2005).
An alternative solution, can be based on the theory of nested words (Alur R. and Madhusudan P. 2009) . 
Using the results of this theory, a ^.-calculus formula can be translated into an equivalent formula in a fixpoint 
calculus for nested words, and then in turn be translated into an equivalent alternating parity nested tree 
automaton. The latter automaton has a structural content that, in principle, can be used as a representation of 
program structure. In contrast, the above presented solution (Gurov D. and Huisman M. 2013) is "direct", in the 
sense that the presented symbolic execution directly follows the operational semantics of the program model, 
which relates structure with behaviour. This makes the obtained construction easy to adapt for variations and 
extensions of this model, as was explored in (Huisman M., Aktug 1. and Gurov D. 2008).
Another interesting approach should be the use of high-level Petri nets. e.g. coloured Petri nets, introduced in 
(Jensen K. 1981), for software verification (a more formal treatment is omitted here) .
A brief survey of the background and history of modal and temporal logics was given by 
Bradfield J. and Stirling C., see: http://www.dis.Liniroiiial.it/~degiacom/didattica/seniingsoft/SlS05-06/niateriale/3- 
servizi/altro%20iiiateriale/bradfield-stirling-HPA-iiiu-intro.pdf. In particular, the modal p.-calculus was also discussed 
(a logic which subsumes most other commonly used logics: left to the reader).
2.4. Other non-classical systems
Below are briefly presented some other non-classical systems, such as: epistemic. game, intuitionistic and 
fuzzy intuitionistic. linear, (intuitionistic) computability, paraconsistent. relevant and non-monotonic logic 
systems. Some comments concerning fractal logic are also given.
Epistemic logic
The term 'episteme" . used in the Ancient Greece philosophy, is etymologically derived from the word 
"ETtiGrqpq" to denote knowledge or science (e.g. Platon's term for common belief or opinion or also some aspects 
of the logic of knowledge and belief mentioned by Aristoteles). Aristoteles' insights were extended in the middle 
ages (e.g. Jean Buridan. John Duns Scotus and William of Ockham).

181
The contemporary epistemic logic is the logic of knowledge and belief. It provides insight into the properties 
of individual knowers (called also agents), has provided a means to model complicated scenarios involving 
groups of knowers and has improved our understanding of the dynamics of inquiry. The work (Wright G.H.von. 
1951) was one of the most important initiation of the formal study of epistemic logic. This work were extended 
by Hintikka J. (1962), considered now as a classical ( The little encyclopaedia of logic 1988. Hendries V. and 
Symons J. 2006).
More formally, the following two unary functors were introduced (originally called "operators", as an 
syntactical augmentation of propositional logic): Kc and Bc, called epistemic and doxastic (from Ancient Greek
term"<5bÂ£a"), respectively. Here, A'.p denotes "Agent 
c knows p" and /Lp denotes "Agent c believes p" ,
for some proposition p. Moreover, the following semantic interpretation was introduced (Hintikka J. 1962).
A'.p: in all possible worlds compatible with what 
c knows, it is the case that p, and
/f p: in all possible worlds compatible with what 
c believes, it is the case that p.
The following axiomatic system was proposed (Lemmon E.J. and Scott D.S. 1977). next improved in (Bull R. 
and Segerberg K.. 1984). The axiom abbreviations are under the first of these two works.
K A'Xp =?> q) =?> (ATp =?> TLq)
D 
Kcp =?> ~A.;~p
T 
Kcp =p p
4 
A', p :â¢ K.K.p
5 
~Kcp => Kc~Kcp
.2 
~Kc~Kcp => Kc~Kc~p
.3 Kc(Kcp =?> ATq) v KAIfiq =?> Wcp)
.4 p Kc~ Kcp =?> ATp)
The above axioms are very similar to the corresponding ones or also to some properties satisfied in modal 
logic (see Subsection 2.3: modal logic), e.g. K corresponds to GodeTs axiom (G2), D to T.2.18 (o<p Â«df ~ ~ 
<p.SR), T to the rule 4 to GodeTs axiom (G3), etc. Provided there is no ambiguity and for simplicity, 
sometimes the subscript 'c' may be omitted (if c is known), e.g. that "the Agent knows that p" is written as A'p. 
that "She does not know that p and q" as ~ A'(p a q), that "She knows whether or not q" as Kq v K~ q, 
that "She knows that she does not know that if p, then cf as K ~ K(p =a q), etc. Similarly, that "the Agent c 
believes p" is written as Bp (Holiday W.H. 2016).
There exist various applications of epistemic logic. Some of them are cited below. As a natural way. 
applications to epistemology* are first cited.
' The Nyaya school of logic, based on Hindu philosophy, can be considered as a form of epistemology (i.e. theory of knowledge) in 
addition to logic (see: the introduction of Section 1).
In general, the contemporary epistemology is organized around two major goals: providing a definition of 
knowledge and modelling the dynamics of epistemic and doxastic states. The first of these goals, for the most 
part, concerns philosophers who rely on thought experiments, traditional conceptual analysis or intuitions-based 
methods of various kinds. By contrast, philosophers working with epistemic logic are pursued the second goal. 
However, the last two goals are related to a third, and possibly more general problem, namely the problem of 
understanding the rationality of inquiry (Hendries V. and Symons J. 2006). A brief introduction to propositional 
epistemic logic and its applications to epistemology is also given in (Holiday W.H. 2016). Epistemic-logical 
topics, presented here, include the language and semantics of basic epistemic logic, multi-agent epistemic logic, 
combined epistemic-doxastic logic, and a quick look of dynamic epistemic logic. Epistemological topics 

182
discussed include Moore-paradoxical phenomena
*,
 the surprise exam paradox, logical omniscience and epistemic 
closure, formalized theories of knowledge, debates about higher-order knowledge, and issues of knowability 
raised by Fitch'paradox . Obviously, some considered topics are similar as in the previous work (a more formal 
treatment is left to the reader).
' Sentences of the Moorean form p a -p cannot be known (1942: G.E. Moore 1873 - 1958), e.g. "It is raining, but I don't believe 
that it is raining" or "It is raining but I believe that it is not raining", referred by Philosophers nowadays as the emissive and commissive 
vertions of Moore's paradox, more formally: p a - ;<p or p a B ~ p, respectively. There doesn't seem to be any logical contradiction 
between "It is raining" and "I believe that it is not raining": the former is a statement about the weather and the latter is a statement about a 
person's belief about the weather (T/?e Free Encyclopaedia. The Wikimedia foundation. Inc, for a more formal treatment: Holiday W.H. 
2016).
I Bitch'sparadox of knowability (1963: F.B. Eitch 1908 - 1987) is another fundamental puzzle of epistemic logic. It provides a challenge 
to the knowability thesis, which states that every truth is, in principle, knowable (in correspondence with the omniscience principle ("having 
total knowledge", "knowing everything"), which asserts that every truth is known. Hence, Pitch's paradox asserts that the existence of an unknown 
truth is unknowable. And so, if all truths were knowable, it would follow that all truths are in fact known (T/;e Free Encyclopaedia. The 
Wikimedia Foundation. Inc). A more formal treatment is given in (Holiday W.H. 2016), where Pitch's thesis is represented as follows: 
V (p => OAp). Here, a question may be the interpretation of the last functor of possibility.
p
* David Lee Chaum (bom 1955) is the inventor of many cryptographic protocols , as well as such systems as: the electronic cash system 
(in short: ecash), digital cash, blind signatures and so on. His paper (Chaum D.L. 1981) laid the groundwork for the field of anonymous 
communications research (The Free Encyclopaedia. The Wikimedia Foundation. Inc).
Â§ Dana Stewart Scott, bom 1932; Richard Montague, bom 1930.
Epistemic logic has. in the past few decades, grown beyond its origins in philosophy, to be embraced in 
several other disciplines, including economics (e.g. game theory or also the study of various social and coalitional 
interactions), linguistics and computer science. Within computer science, its application can be found in several 
subdisciplines: artificial intelligence (e.g. applications in robotics, groups of knowers, i.e. multi-agent systems, for 
instance: grounding modal language in communications of artificial cognitive agent systems: Katarzyniak R.P. 2007), 
distributed computing and computer security, i.e. network security and cryptography (Meyden R. van der 2011).
The main purpose of the last work was identification of situations in which questions about the security of 
systems and communication protocol designs should be amenable to automated analysis. There were studied the 
decidability of logical problems into the following two distinct types: model checking and synthesis, where model 
checking involves the question of whether a given formula is satisfied in a given semantic structure and synthesis 
concerns the existence of strategies that lead to the satisfaction of a formula in a given context. The relevance of 
this in computer security is that an active adversary, who not only observes but also interferes with the system, 
can be viewed as seeking a strategy that satisfies certain conditions on the adversary's knowledge. Hence, the 
system is secure if no such strategy exists. Finally, there was presented a protocol designed to enable information 
to be transmitted anonymously: Chaum's Dining Cryptographers? protocol (Meyden R. van der 2011).
Game logic
Game logic is an interesting extension of propositional dynamic logic, it does not use Kripke semantics but 
neighbourhood semantics (known as Scott - Montague semantics*: instead of accessibility relation a neighbourhood 
function was introduced), a generalisation of the standard Kripke semantics, invented independently by (Scoot D. 
1970) and (Montague R. 1970). Game logic is a logic to reason about determined two-player games. It presents 
a good example of mathematical and practical application of propositional dynamic logic (Parikh R. and Pauly 
M. 2003). Dynamic logic can also express change in knowledge. And so. we can abstract variety of knowers and 
their respective knowledge, i.e. a multi-agent system (in terms of computer science and artificial intelligence) and 
formalise their interaction. The basic system of modal epistemic logic (Hintikka J. 1962) can be extended by 
incorporating a dynamic functor to express knowledge update (Plaza J.A. 1989).The corresponding epistemic 
states are updated as follows. It is assumed that knowers are exposed a truthful public announcement by an 
external agent. Then, they update their epistemic states in such a way that they get rid of the states and epistemic 
situations that do not agree with the announcement. Obviously, the syntax of this logic, known as public 
announcement logic, is an extension of the basic epistemic logic. The semantics is given under Kripke models, 
e.g. see (Baskent C. 2010).

183
Quantum dynamic-epistemic logic
Quantum theory (also known as quantum mechanics or quantum physics) gradually arose from Max Planck's 
solution in 1900 to the black-body radiation problem (Max Karl Ernst Ludwig Planck 1858 - 1947) and Albert 
Einstein's 1905 paper which offered a quantum-based theory to explain the photoelectric effect (Albert Einstein 
1879 - 1955)*. Some structural similarities of current research in the foundations of quantum theory and the 
foundations of computer science are given e.g. in (Coecke B: http://www.cs.ox.ac.Lik/people/bob.coecke/SLS.pdf, a 
quick draft version of a course), see also (Lindley D. 1998: a guide incl. Quantum Computers), (Svozil K. 1998) or the 
Handbook of quantum logic and quantum structures (2009).
* for a more information see: T/ie f ree Encyclopaedia. The Wikimedia Foundation. Inc.
t Quantum computing studies theoretical computation systems, called quantum computers, that make direct use of quantum-mechanical 
phenomena, such as superposition and entanglement, to perform operations on data.Diiioirâ¢? superposition states any two or more quantum 
states can be added together (i.e. "superposed") and the result will be another valid quantum state and vice versa, any quantum state can be 
represented as a sum of two or more other distinct states (similarly as a property of solutions of Schrodinger's partial differential equation, 
describes how the quantum state of a quantum system changes with time 1925 / 1926: Erwin Rudolf Josef Alexander Schrodinger 1887 - 
1961). Quantum entanglement is a physical phenomenon that occurs when pairs or groups of particles are generated or interact in ways such 
that the quantum state of each particle cannot be described independently - instead, a quantum state must be described for the system as a 
whole (The Free Encyclopaedia. The Wikimedia Foundation. Inc). In the case of quantum computational systems, the entanglement is a 
source of simulation complexity. When entanglement is detected in processed state, the circuit has to be described with a behavioural 
architecture and exponential resources must be used in this case (Udrescu-Milosav M. 2005). A very difficult problem seems to be quantum 
circuits testing (which is not possible directly). Some interesting results were given by Biamonte J. and Perkowski M. (2005): the "gate 
insertion / removal" model was used in place of the classical "stuck-at" model.
* Ute first universal quantum Turing machine was theoretically build by (Deutsch D. 1985) and the first quantum algorithms were given 
by (Shor P.W. 1994), able to solve polynomially: discrete logarithms and integer factoring.
Â§A formal definition of the notion of public announcement is given e.g. in (Pacuit E. 2013: Definition 2.1.p.4). Ute classical theory of 
belief revision (known also asAGAf theory) was introduced in (Alchourron C., Gardenfors P. and Makinson D. 1985). A more information 
concerning belief revision functors is given e.g. in (Gabbay D.M., Rodrigues O.T. and Russo A. 2010) or also in (Perrussel L., Marchi J. and 
Zhang D. 2010). Revision operators are often judged based on whether they satisfy the well-known AGMpostulates. These postulates are 
formulated for logically closed sets of formulae (belief sets), but they can be modified so as to apply to belief bases. The modified postulates 
(omitted for lack of space) are known as the KM postulates (Katsuno H. and Mendelzon A. 1991). The AGM/KM postulates have been
In the quantum computational framework, there are polynomial time solving algorithms for problems having 
exponential classical solutions. Obviously, the question is the existence of such algorithms for other similar 
problems. The most feasible implementation of quantum algorithms is based on the quantum circuit (gate 
network) model. Quantum computing1' itself emerged from the attempt to simulate quantum systems. The 
simulation is often considered as a tool used in theoretical approaches. However, it could also be employed for 
quantum hardware design. Simulation of quantum computational systems is usually exponential. The quantum 
circuits make no difference to this rule. In quantum computation the circuits are prone to fail, and safe recovery is 
difficult. Therefore, a straightforward classically-inspired solution is not feasible because the overall fail rate will 
be given by ancillary cpibits (i.e. quantum bits) preparation. The only conceivable solution to the safe recovery 
problem is to use structural redundancy (Udrescu-Milosav M. 2005)i.
Dynamic epistemic logic can be also used to model and interpret quantum behaviour (Baltag A. and Smets S. 
2005, 2006). Here, it was given a complete dynamic - logical characterisation of quantum systems The main 
thesis is that "all the non-classical properties of quantum systems are explainable in terms of the non-classical 
flow of quantum information". And hence, any real understanding of quantum behaviour should require non- 
classical logical dynamics of information, rather than having non-classical logical laws governing static 
information (such as in non-Boolean, non-distributive. partial or fuzzy logics etc.). As a fundamental action of 
this logical dynamics was considered the quantum test (corresponding to a successful yes-no measurement 
performed on a quantum system: a measurement of some yes-no property <p). Any such test can be considered as a 
form of information update and this form was compared with other dynamic informational functors (called also 
"operators") in logic, such as: the classical test functor 'T in dynamic logic, the (public) announcement functor 
in dynamic epistemic logic and the belief revision functor (Belief revision is an action of revising a previously held 
belief "theory" T about tire world after receiving some new information cp , that may contradict T. The belief revision action 
4=<p changes the state to a new information state, given by the revised theory T*<p. Hie classical AGM postulates express 
minimal rationality conditions that belief revision must satisfy: T*<p must incorporate the new fact cp. Hie theory is left the 
same if cp e T implies T*<p = T. Otherwise, the theory is "minimally revised" in order to accommodate the new 
fact)-. Quantum tests share some common features with all these operators, but there are also important 

184
differences, which make apparent the non-classical nature of quantum information flow (Baltag A. and Smets S. 
2006). In accordance with the last work, in contrast to classical informational actions, quests typically change the 
ontic state
*
 of the "observed" system. The considered here approach is logic-based and mainly concerned with 
qualitative (or semantic) information. And this is in contrast to the syntactic, i.e. quantitative approach (based on 
Shannon's theory of information: in quantum information, instead of the classical Shannon entropy, tire notion of von 
Neumann entropy is used). However, the proposed in (Baltag A. and Smets S. 2006) approach intersects with the 
similarly qualitative such one, known as '"quantum logic
*,
 in short: QL (Neumann J. von. 1932), (Birkhoff G. 
and Neumann J. von. 1936) . In particular, it was observed that any testable property of a quantum system 
corresponds to a closed linear subspace of a Hilbert space, denoted below by (David Hilbert, 1862 - 1943)i. 
Moreover, the actual ""state" of a system is given by an atomic such property, i.e. a one-dimensional subspace (a 
""ray"). And hence, states are represented by 'rays' in The lattice of such closed linear subspaces (with 
inclusion as an ordering relation) does not form a Boolean algebra (i.e. a distributive lattice with complements). The 
quantum disjunction (called also ""join"), defined as the closed subspace generated by the union, and the quantum 
negation (called bellow "'orthocomplemenf j* are here two non-classical operations. The syntax of OL, i.e. the 
language of this logic, is obtained recursively as follows (here any proposition p denotes some basic testable 
property): cp =df F / p / ~ <p / <p a \|/ / <p \|/ ('a' denotes the classical conjunction; note that the falsity of a proposition 
does not imply the truth of its orthocomplement and also the truth of ' cp u q/' does not imply that either ' cp' is true or ' q/ is 
true). In accordance with the last formula cp u q/, the current state of the system is defined as a superposition of 
states satisfying <p and states satisfying q/. Moreover, u' is not distributive over a' (i.e. p â¡ (q a r) and 
(p u q) a (p u r) are not equivalent: generalised for any cp, qt and %). The quantum implication ( known also as: ""Sasaki 
hook", as an orthocomplement of the Sasaki projection: Sasaki U. 1964) is defined as follows: cp =as qt 
=df ~ <p u (cp a q/), introduced by Finch P.D. (1970) and Mittelstaedt P. (1970). As a consequence of the 
above nondistributivity. the classical deduction theorem (see: Theorem 1.31 of Subsection 1.7) fails for the 
quantum implication (Baltag A. and Smets S. 2006).
criticized for admitting revision operators that discard beliefs that have no real connection with the incoming information (Bienvenu M.. 
Herzig A. and G. Qi 2006). An additional postulate for relevant revision was proposed in (Parikh R. 1999). Belief revision can be considered 
as a process of incorporating new pieces of information into a set of existing beliefs. It is usually assumed that the operation follows the 
following two principles: (i) the resulting belief set is consistent and (ii) the change on the original belief set is minimal (Perrussel L.. Marchi 
J. and Zhang D. 2010). hi the last work, agent's beliefs are represented in prime implicants and express agent's preference on beliefs as a preÂ­
order over terms. It is shown that the introduced here belief revision operator satisfies the KM postulates for belief revision as well as Parikh's 
postulate for relevant revision (a more formal treatment is omitted here: left to the reader).
* Ontic states describe all properties of a physical system exhaustively. Exhaustive in this context means that an ontic state is precisely 
the way it is, without any reference to epistemic knowledge or ignorance (Atmanspacher H. 2001).
T George David Birkhoff (1884 - 1944), John von Neumann (1903 - 1957), Claude Elwood Shannon (1916 - 2001)
* A complete unitary (or inner product) vector space (Bronstein I.N.. et al. 2001), a particular case of Banach space (Stefan Banach, 1892 
- 1945). Sometimes, inner product spaces over the field of complex numbers are referred to as unitary. Also, inner products are referred as 
"abstract scalar products" (corresponding to the usual notion of a scalar, called also "dot" product in the case of an Euclidean space). The 
term "inner space" itself may also denotes, e.g. "the environment beneath the surface of the sea": physical geography. The above notion of a 
complete space is defined as follows: a given metric space (X, p) is said to be complete (or Cauchy space: Augustin-Louis Cauchy, 1759 -
1857) iff every Cauchy sequence of points {x { j in X converges in X, i.e. iff V 3 V 
( p(xn. xm) < s ).
Sy 0 n0 n,m > n0
Â§ An orthocomplementation on a complemented lattice is an (order-reversing) involution which maps each element to a complement. An 
orthocomplemented lattice (in short: ortholattice) is a bounded lattice with orthocomplementation. The ortholattices are most often used in 
quantum logic, where the closed subspaces of a separable Hilbert space (i.e. admitting a countable orthonormal basis: all unit vectors are 
orthogonal) represent quantum propositions. Ortholattices satisfy De Morgan's laws, like Boolean ones (e.g. The Free Encyclopaedia. The 
Wikimedia Foundation. Inc or also: Barnum H. et al. 2014).
" Lattice is an algebraic system A' =df (L; u, n) having two binary (i.e. two-argument) operations which are at the same time 
commutative, associative and the following law of absorption is satisfied: x (x v) x x (x v). for any x, y e L. By this 
definition it follows that x w y = x <=> x n y = y (left to the reader). Consider the partial ordering relation: x Z y <=>ar x v xv x 
y y. for any x, y 6 L. The above two binary operations can be introduced as supremum and infimum and (L, >) is a lattice (and vice 
versa: the corresponding proofs will be given in Part 11 of this work). We shall say that A' is modular (or Dedekind) lattice (Julius 
Wilhelm Richard Dedekind 1831-1916) iff 
V ( x i z => x n (y w z) - (x n y) w z ). It can be shown that any
x,y,z â¬ L
distributive lattice is modular (but not vice versa). However, the orthocomplemented lattices used in quantum logic would require the
There are five different operations of implication in an orthomodular lattice" related to the classical 
implication in a distributive lattice (Kalmbach G. 1983). A comparative study of quantum implication algebras * * * * Â§ 

185
(such as: orthoimplication, orthomodular implication . and quasi-implication algebras) was given in (Megill 
N.D. and Pavicic M. 2003): a more formal treatment is omitted here.
Another very important problem is the quantum non-locality. i.e. the appearance of non-trivial correlations 
between the results of measurements performed simultaneously on systems that are spacially remote (Baltag A. 
and Smets S. 2006). The corresponding problem, known as "entanglement" is usually modelled by representing a 
"compound" system S. composed of two subsystems Si and S2 as a tensor product df \ 0 <7Q of the two 
Hilbert spaces. A global state s of S is. separated iff s =dt (si. S2) e dâ¬\ x dâ¬2 
dâ¬2. Hence, each of
the subsystems Si is in a well-defined ("pure") local state Si. Otherwise s is called entangled.
In general, the global state s of S cannot be exactly separated into two local states si and S2. Hence, the 
notion of a "mixed state" is used (a higher-order representation, to capture all the available information concerning the 
local state of an entangled subsystem). But finding, a correct generally-agreed interpretation of mixed states is still a 
very much debated open problem (Baltag A. and Smets S. 2006). Here it is proposed an interpretation in terms of 
"objectively imperfect information" (rather than subjective "ignorance interpretation": one of the most popular previous) 
that an entangled subsystem has about its environment. Moreover, in accordance with the above problem of 
entanglement, it seems to be impossible to construct a general lattice-theoretic analogue of tensor product (Aerts 
D. 1981: theorem 11 / p.395). A more formal, logical description of the above entanglement still remains an open 
problem.
It was shown that Hilbert spaces can be structured as non-classical relational models of propositional dynamic 
logic (Baltag A. and Smets S. 2005). Any such model, called quantum transition system consists of a set of states 
S (originally denoted by S and representing complete descriptions of possible states of a physical system) and a family 
of basic transition relations, which are binary relations between states in S (describing tire changes of state induced 
by possible actions that may be performed on the system: similarly as in Definition 2.10). The states correspond to rays, 
i.e. one-dimensional subspaces of dâ¬. The actions correspond to specific linear maps on <K'. For quantum 
information change the actions vary from unitary evolutions (corresponding to the so-called "quantum gates" in 
quantum computation) to various types of measurements (Baltag A. and Smets S. 2006). The following two main 
types of basic actions were presented: quantum tests ' ?<p ' and quantum gates ' U ' (in short below: qutests 
and qugates)* *. There were also introduced some spacial features related to the local properties of given 
subsystems of a quantum system. Hence, a given unitary action is associated with some type, depending on its 
location.
following special case: y =df T (the complement of z is defined as follows: z z V and z n 7 = A , where V and A are the 
corresponding maximal and minimal elements). Since xn(Zi.z) = XnV = x, the following implication should be satisfied: x <2 z 
=> /x 7) u Z â X. Hence (in accordance with this modification of the above modularity law) an orthomodular lattice is defined as an 
orthocomplemented one, for which the last implication holds (for any x, z e L).
* We shall denote qutests by ' ?<p ' instead of 'cp? (in accordance with the previous considerations). More formally, the event ' ?<p ' means 
"test cp and proceed only if true".
t A self-adjoint idempotent linear operator (e.g. see Coecke B: http://www.cs.ox.ac.uk/people/bob.coecke/SLS.pdf, a quick draft version 
of a course or Bronstein I.N. et al. 2001).
* Provided there is no ambiguity, since ' ~ ' denotes "orthocomplement", the classical symbol of negation is here denoted by ' 
'.
Let <p be tested and the obtained answer be "yes", then the state of the observed system collapses to a state 
satisfying this property cp: ' ?cp ' corresponds to a projector^ onto the subspace of generated by cp. Qugates 
U represent reversible evolutions of the observed system (corresponding to unitary transformations on //(' ). The 
program expressions it are interpreted as quantum programs. Hence, the language of the propositional dynamic 
logic is interpreted in a quantum transition system (keeping the classical interpretation of all other functors, in particular 
such as Boolean negation and conjunction, etc.). The resulting logic is called a logic of quantum actions, in short: 
LOA (Baltag A. and Smets S. 2006). Here, dynamic logic formulae denote possible properties of quantum states: 
any such property either holds at a given state or does not hold. And hence, this logic is bivalent satisfying all the 
classical laws of propositional logic (see Subsection 1.3). Since not all the expressible properties are "testable" 
(i.e. corresponding to an "experimental" property, e.g. the negation of a testable property might not be testable)!, Only 
negation-free formulae are assumed in this logic (Baltag A. and Smets S. 2006). Here, the following (dynamic) 
reinterpretation (of the non-classical connectives) of QL inside LQA was proposed. The orthocomplement ' ~ cp '

186
of a property cp is interpreted as the impossibility of a successful test and defined as: ~ cp =df [?<^]F. In 
accordance with De Morgan's laws, the quantum disjunction is next defined by: <p '|' =df ~ (~ <p a ~ qt). The 
quantum implication (Sasaki hook) is simply given by the weakest precondition of a qutest: cp =as q/ =df 
[?^>]\|/ (i.e. after performing qutest ' ?cp ' it is necessarily the case that cp holds: see the classical C') .Measurements 
are here expressed as complex LQA programs (i.e. nondeterministic sums of qutests of mutually orthogonal properties). 
In accordance with De Morgan's laws, the classical dual 
=df -i 
(expresses the possibility of
actualising a property cp by a successful qutest of cp ). In particular, O<p can be defined as the possibility of testing 
for cp and so: Ocp =df(?<p)T.
Consider the compound system S composed of two subsystems Si and S2. The above presented quantum 
transition system will now also include, besides the global actions U affecting S. i - local unitary actions U, 
only performed on Si (i = 1.2). Let also c =df (ci. C2) e .Wi/ 
be a (specially distinguished)
separated state, designed by a constant symbol c. The notion of '"local state of an entangled subsystem ST is 
internalised as follows (Baltag A. and Smets S. 2006).
Provided there is no ambiguity and for convenience, by GS we shall denote below the set of all global states 
associated with S. Let i e {1.2} - {i} and pi Â£ GS x GS be an equivalence
*
 defined as follows 
(i =1.2): V (spis' Odf 3 ( s'= Ur(s))). Hence, the local state s, of Si instate s e GS can be defined 
s,s eGS 
U- 
1
' For convenience, instead of the original symbol ' âithe equivalence relation is here denoted by 'pi '.
A,<p =df {s : t 6 cp for all t âi s ; j s : s, Â£= cp } (Baltag A. and Smets S. 2006).
as the equivalence class [s]p =df {s' / spis'} of s. i.e. st =df [s] GS (the subset of global states that 
are "'possible" according to Si, i.e. that are consistent with all the information available at location i: Baltag A. 
and Smets S. 2006). Hence, the local state st of (an entangled subsystem) St could be interpreted as an 
"epistemic" (or ""informational") state. In fact. Si encodes all the information that S, "has" about (the global 
system) S. The following '"epistemic" functor (originally called "operator", associated with the above indistinguishability 
relation pc) was introduced (by 1 t inv cp ' and ' Si ass cp ' are denoted below: "the quantum state t e GS is involved 
by (property) cp" and "the equivalence class si is associated with cp", respectively) :
A',cp =df {s e GS / 'V (tpiS => twrvcp)} = {s e GS / st ass cp }, for every testable
property cp of the quantum system S and every component i = 1.2.
In accordance with the above work, Kf has the formal properties of a "knowledge" functor , satisfying the 
axioms of the Lewis system S5 (see: Subsection 2.3: Modal logic). Hence. W,cp' could loosely be read as: 
"Subsystem Sf knows cp". The last text is only considered as potential local information (not as "subjective" 
knowledge by an actual "observer"). And so. the following better reading of 'A',<p' was also proposed: "The 
information that the global system S satisfies cp is potentially available at location i" (Baltag A. and Smets S. 
2006). In particular, assuming c = (ci. C2). the local state of Si . e.g. {s / s p; c } = {(ci.d) /de ^2J 
corresponds to a pure local state of Si .i.e. ci .Hence, a separated subsystem can be said to be in a well-defined 
ontic state.
Let cp be a testable property. We shall say that cp is i - local (denoted by cpi) iff it entails i - separation 
and it can only hold when it is known to subsystem Si. Hence: cpt o AT,cp. Any local measurement on Si is a 
qutest of the form ''/cp/. The local proposition variables (ranging over testable local properties) are denoted below by 
'pF. The proposed language of this quantum dynamic-epistemic logic is obtained recursively as follows 
(Baltag A. and Smets S. 2006): in accordance with the previous considerations, only negation-free formulae 
(more precisely, wrt the quantum negation) are assumed below.

187
Cp =df CT / CTf / -iCp / Cp A \|/ / \IVfP I KiCp
71 =df </. / </-i / 9<p / 7t U K / 7t K / 7t -
Here, ct is either a propositional variable p or the constant state c (a specially distinguished separated state) 
and a is either an action variable a or a constant action symbol (denoting some special qugate, from a given list of 
unitary evolutions). Similarly, cp and vp (it and k) denote some properties (some program expressions, 
interpreted as quantum programs), respectively.
Let s e GS be a separated state. It can be shown that S, is separated in s iff s,^s (sp^s'A s'piC). The 
following characterisation of entanglement can be also obtained: s is entangled iff it satisfies KjKi- c. In 
accordance with the last sentence two subsystems are entangled if they have some (specific and non-trivial) 
"knowledge" about each other, prior to any communication (Baltag A. and Smets S. 2006). Some more formal 
results related to this work are illustrated below.
Entanglement involve non-local ontic effects of local measurements and hence, two systems are entangled if 
every local measurement in the first system changes the other one. So s e GS is entangled iff s pt ?cpi (s).
A more stronger property of entanglement (assumed in quantum theory) requires a deterministic non-local ontic 
impact, i.e. the existence of a deterministic correlation between the results of a local measurement on Si and the 
subsequent ontic state of the environment S (i e {1,2}). Let 7ts be a deterministic program related to s. We 
have V 3 ( Vp^s) p 7ts(p1)). The following dual representation was also given (below to denotes a deterministic 
seGS xs 
1
program sending i - local states into i - local states): V 3 (7ts = rtf). Below, by 7T- it is denoted the state s e 
<i seGS 
1
GS entangled in accordance with ty. So we have: ?pi( vr ) p itfpi).
In the next considerations of the above cited work (more formally) are discussed such notions as: 
entanglement, non-locality. Bell's states* and various known quantum computing protocols (e.g. teleportation, 
super-dense coding, quantum secret sharing, etc.). It was also presented a comparison of qutests with other forms 
of information update.
' Bell's states (Bell J.S. 1964: John Stewart Bell: 1928 - 1990) are a concept in quantum information science and represent the most 
simple examples of entanglement (considered as four specific maximally entangled quantum states of two qubits)
t In fact, intuition is only necessary condition in any such construction.
The above introductory notions (related to quantum dynamic-epistemic logic) are only an illustration of this 
excellent work. A more formal treatment is omitted here (this is left to the reader).
Jntuitionistic and fuzzy intuitionistic logics
Intuitionistic logic encompasses the principles of logical reasoning used by Brouwer L.E.J. (Luitzen Egbertus 
Jan Brouwer: 1881 - 1966) in developing his intuitionistic mathematics (1907). An early basis of these principles 
was the Kant's philosophy of mathematics, in particular the laws of "intuitive cognition" and "intuitive 
judgments". So, the human intuition (a priori time and space) was considered as foundations of mathematics and 
hence the construction of any mathematical concept (Immanuel Kant: 1724 - 1804). \ similar point of view was 
given by: Leopold Kronecker (1823 - 1891), Henri Poincare (1854 - 1912), Felix Edouard Justin Emile Borel 
(1871 - 1956), Henri Lebesgue (1875 - 1941), Herman Klaus Hugo Weyl (1885 - 1955) and so ont Because the 
above principles also underlie Russian recursive analysis (known also as recursive constructive mathematics: Andrei 
Andreevich Markov, Junior: 1903 - 1979) and the constructive analysis (Bishop E. 1967: Errett Bishop 1928 - 
1983) and his followers, intuitionistic logic may be considered the logical basis of constructive mathematics 
(Formal logic. Encyclopedical outline with applications to informatics and linguistics 1987, Moschovakis J.R. 
1999).

188
An important stage in introduction of intuitionistic logic was the work given by Heyting A. (1930, Arend 
Heyting: 1898 - 1980, who was a student of Brouwer): an interpretation of propositional and (first-order) predicate 
formulae using proof terminology. Heyting's intuitionistic calculus 1NT is now considered as one of the best 
known constructive logics.
In fact, from the intuitionistic point of view, the ascertainment that cp is true requires the existence of a proof 
for cp. And so, we have:
(1) 
the proof it of 'cp a \p' is considered as an ordered p9air (711,712) such that: 
7ti is the proof of cp and 713 is the proof of \p;
(2) 
the proof of 'cp v \p' is a construction, which selects one of the formulae cp, cp 
and next gives the corresponding proof;
(3) 
the proof 7t of 'cp => \p' is a construction such that, for each proof k of cp, 
it is obtained a corresponding proof tt(k) of \p together with a further 
reference that this condition is in fact satisfied by 7t;
(4) 
since 1= ~ cp <=> cp =a F (is a thesis: the rule '-N' is not satisfied in this system), 
the proof of ~ cp corresponds to the assumption that the logical value 
'cp => F' = T. Butthen, we shall obtain a contradiction with any proof of cp 
(wrt: 'T => F' = F) ;
(5) 
the proof 7t of '3A(x)' is a construction which selects an object a e ?/ (the 
X
universe under consideration) and gives a proof 7t(a) of A(a) , where a is a name 
for a;
(6) 
the proof 7t of ' V A(x)' is a construction such that for each object a e // 
X
it is assigned a proof 7t(a) of A(a) together with the ascertainment that the 
above conditions are satisfied by 7t.
We observe a logical consistency between cases (5,6) and the corresponding primitive rules of joining the 
existential and universal quantifiers, i.e. '+: ' and '+ V ', respectively (See: Classical first-order and higher order 
predicate logics: Chapter 11, Subsection 3.3).
An approach, similar to the above presented, was proposed by Kolmogorov A.N. (1925, Andrej Nikolaevich 
Kolmogorov: 1903 - 1987): in accordance with Kolmogorov's known thesis ('1NT= logic of problems'), the above 
formulae are here interpreted as 'problems' (e.g. the solution of the problem 'cp a cp' is considered as an ordered pair 
of solutions corresponding to the problems associated with cp and cp, respectively).
The axiomatic system (of the intuitionistic propositional logic). introduced by Heyting A. (1930), is shown 
below*.
* Brouwer's ideas on the formalisation of intuitionistic logic were studied also by Kolmogorov A.N. (1925) and Glivenko V. (1929). 
Heyting's system was universally accepted.
(Al)
P A P/p
(A2)
p a q a q a p
(A3)
(P q) (P a r =a q a r)
(A4)
(p =a q) a (q =a r) =a (p =a r)
(A5)
q =a (p =a q)
(A6)
p A (p A q) A q
(A7)
P a p vq
(A8)
p /q a q vp
(A9)
(p =a r) a (q =a r) =a (p v q =a r)
(A10)
~p =A (p =A q)
(All)
(p =a q) a (p =a ~q) =a ~p

189
We observe that any of the above axioms is a thesis of the classical propositional calculus, but not vice versa. 
As an example, the following formulae are not satisfied in the above system: p v ~ p (the Aristotelian law of the 
excluded middle),---- p =a p, ~ (p a q) => ~ p v ~ q (are the if-implications of T 1.3 and T 1.8, respectively:
Subsection 1.3), (~ p => p) => p, ((p => q) => p) => p, etc. In particular, the following equivalence was 
shown (Glivenko V. 1929: Valery Ivanovich Glivenko 1897 - 1940, Gbdel K. 1930: Kurt Gbdel 1906 - 1978): 
1= cp (is a thesis in classical logic) iff 1= â cp (is a thesis in intuitionistic logic). An embedding of classical logic into 
intuitionistic one was also given (Gbdel K. 1930).
In general, the expressive power of intuitionistic logic involves various applications, in particular in the field 
of discrete mathematics and computer science. Some brief considerations on the fuzzy intuitionistic logic (known 
also as: intuitionistic fuzzy logic)
*
 are given below.
* the notions "fuzzy intuitionistic logic" and "intuitionistic fuzzy sets" are here used in their chronological order (wrt intuitionistic logic and 
fuzzy sets).
T An earlier was the work, given by Atanassov K.T. (bom 1954): Intuitionistic fuzzy sets, Vll ITKR's Session. Sofia. Deposed in Central 
Sci-Techn. Library of Bulg Acad ofSci. 1697/84 (1983), in Bulgarian, Zocyy sets are special cases of intuitionistic fuzzy sets and the last have 
better modeling power than the fuzzy sets.
I The starting point in fuzzy intuitionistic logic is to fuzzify truth. There are accepted formulae as have different truth values (instead of 
the classical true-false-dualism). In fuzzy intuitionistic logic a half true expression is not always half false. Since we are not interested in the 
false sentences of a theory we let the falsehood be crisp. There is only one falsehood in fuzzy intuitionistic logic. Here, similarly as in 
classical first-order predicate logic, it is introduced a set i' of well formed formulae, a partially ordered set L of truth values (assuming 
some binary operations defined in L, corresponding to the classical one) and an interpretation T , represented as the map T : j?" -> L 
(satisfying some required properties).
Â§ As in fuzzy logic, some formulae may be or not be satisfied, depending on the used t-nonn, e.g. L-BL, G-BL and ir-BL considered in 
Subsection 2.2.
" In particular, the generalised Lukasiewicz's fuzzy t-nonn, redefined as generalised Lukasiewicz's intuitionistic fuzzy t-norm, is t- 
representable and hence this t-nonn seems to be an interesting application in intuitionistic fuzzy rough sets (Tabakow LG. 2014).
Fuzzy intuitionistic logic was introduced by Takeuti G. and Titani S. (1984) as the logic corresponding to 
intuitionistic fuzzy set theory: as in classical propositional logic, this logic has its corresponding set theory (see 
also: Atanassov K.T. 1986, 1988 and Turunen E. 1989, 1991). Fuzzy intuitionistic logic also coincides with 
the first-order Gbdel's logic (Gbdel K. 1933) based on the truth-values set [0,1], Here, one of the basic t-nonn 
logics is used (Hajek P. 1998), see Subsection 2.2.
The validity of modus ponens (i.e. the rule of omitting an implication C': Heyting's axiom A6) is a critical 
aspect for any form of knowledge inference, as it guarantees the correctness of reasoning. In classical 
propositional logic this rule is indeed a valid one. However, fuzzy intuitionistic logic introduces more 
expressivity, in a gradual logic framework: it allows not only to define degrees of truth, but also to 
simultaneously observe degrees of falsehood (Atanassov K.T. 1986). As observed in some particular cases, the 
validity of the modus ponens is not guaranteed for most fuzzy intuitionistic implications, e.g. see (Detyniecki M. 
et al. 2014, Rushdi A.M. et al. 2015)* * * Â§. In particular, there was proposed in (Detyniecki M. et al. 2014) to 
interpret the last observation as due to the fact that the classical fuzzy intuitionistic tautology (Atanassov K.T. 
and Gargov G. 1998) is too optimistic. And so. as an alternative there were introduced several more strict 
definitions. It was also presented a more intuitive approach to tautology wrt ignorance processing (through the 
expressivity allowed by the 2 degrees, of truth and falsehood, intuitionistic fuzzy logic makes it possible to model distinct 
levels of knowledge and in particular ignorance', as neither positive, i.e. formula with degree of truth greater than degree of 
falsehood nor negative, i.e. formula with degree of truth lower than degree of falsehood). The considered tautology 
definitions make it possible to express the notion of being "certainly true", whereas the classical definition 
considers ignorance as a tautology. In this way we have a more intuitive approach wrt ignorance processing 
(Detyniecki M. et al. 2014). Some results, given in the last work, are presented below. In particular, it is also 
shown below that the generalised Lukasiewicz's fuzzy t-norm (Tabakow I.G. 2010, 2014), redefined as 
generalised Lukasiewicz's intuitionistic fuzzy t-norm is a t-representable intuitionistic fuzzy t-norm".
The notion of intuitionistic fuzzy set is introduced as follows (Atanassov K.T. 1986): here. yi\ and vA are 
two maps from X (the universe) to [0,1],

190
Definition 2.24 (intuitionistic fuzzy set)*
1 I he characterisation of fuzzy sets is that the range of truth value of the membership relation is the closed interval [0,1] of real numbers. 
And hence, a more general approach (by using L. S. Hay's extention of Lukasiewicz's logic) was presented in (Takeuti G. Titani S. 1984).
kzf is complete iff V 3! (a â sup(B), b â inf(B)): Definition 2.25 is a version of the original one, given in (Detyniecki M. et al. 
empty*BcL a.beL
2014). Moreover, lattice theory is omitted in this part of study: will be presented in Part II of this book.
1 Provided there is no ambiguity and for simplicity, it is assumed below that binds more strongly than the symbol of conjunction 
'a'. We observe that: x + y < 1 iff x Â£ 1 - y = y' (f&QLukasiewicz's fuzzy negation).
Let a set X be fixed. An intuitionistic fuzzy set A in X is defined as: A =df {(x, jj.a(x). va(x)) / x e X}, 
which assigns to each element x a membership degree pi,(x) and a non-membership degree va(x), where 
u-a(x). vA(x) 0, with the condition: V (uA(x) + vA(x) P 1).
xeX
This definition is an extension of the classical one (Zadeh L. A. 1965). Provided there is no ambiguity and 
for simplicity, let pa =df Pa(x) and va =df vA(x), x e X. By =n l - ll, - va it is denoted the hesitancy 
degree or an intuitionistic index of x to A, which represents the indeterminacy degree of x to A (Szmidt E. 
and Kacprzyk J. 2000). Each pair of (pa, va) in A is called an intuitionistic fuzzy number, in short: IFN. Here. 
(1.0) and (0,1) are the largest and smallest IFN's. respectively. Obviously, each IFN has a physical 
interpretation (e.g. (0.7,0.2): pa = 0.7, va = 0.2 and %a = 0.1, which can be interpreted as: 'the vote for resolution is 
seven in favour, two against, and one abstention'). For convenience. IFN is denoted by a =df (pa. va), where 
pa. va P 0, pa + va P 1. And also, by sa =df Pa - va and Ip =df Pa + va are denoted the score and the 
accuracy degree of the IFN a, respectively (Xu Z.S. and Yager R.R. 2006, 2011).
An intuitionistic fuzzy set can be represented algebraically on the complete lattice
*
 A' =<jf (L, PL) defined as 
follows (Detyniecki M. et al. 2014).
Definition 2.25
The intuitionistic fuzzy lattice S' =df (L. Pi ), where L =df {(x.y) e [0,l]2/x + y < 1} Â£ [O.l]2 is the 
set of elements of A' and P.A L / Lis a binary relation (originally called: "comparison operator") defined as:
tytyWy) -* L (Z'l) Â°df (x z) A (y Â£ t)). 
xy,z,te[0Jl
We observe that L corresponds to the set of points of the rectangular equilateral triangle defined by the 
inequalities: x P O. y P 0 and x + y P 1. Moreover, it can be observed that the above relation'PL'is a 
partial order, i.e. a reflexive, weak antisymmetric and transitive. In fact, for any x, y, z, t. u. v e [0,1] we have 
(the proof is left to the reader)1:
(x.y) PL (x.y).
(x.y) PL (z.t) a (z.t) PL (x.y) (x = z) a (y = t) and
(x.y) Pl (z.t) a (z.t) PL (u.v) =P> (x.y) Pl (u.v). â¡ {Df.2.25}
Corollary 2.8
The above two ordered pairs (0,1) and (1.0) correspond to the minimal and maximal elements of this lattice. 
The last two pairs are denoted below by 0L and 11. respectively. Another extreme point of special interest is the 
pair (0,0) denoted below by UL (by definition, (1,1) Â£ L).
The notions of intuitionistic fuzzy t-norm and t-repre sen table intuitionistic fuzzy t-norm are given in the next 
two definitions.

191
Definition 2.26
Let 0|r be a binary operation defined in L with the following properties (for any (x.y), (z.t), (u.v). (p.q) 
e L Â£ [0.1]2):
* Equivalently, the algebraic system (L ; 1L ; Â©,[' ) is Abelian monoid with the monotonicity property for 0,p . Similarly, for Â®,p 
wrt 0L.
t Any algebraic system sv" =df (A ; o) is said to be groupoid. where 'o' is a binary operation, i.e. o : A2â> A. The system sv" is 
Abelian if 'o' is commutative (Niels Henrik Abel: 1802- 1829).
* A more formal treatment concerning the notion of direct product of two algebraic systems will be given in the second part of this book, 
hi particular, x'and S' are similar, i.e. are of the same type'. (0.2).
Â§ Any algebraic system sv" =df (A ; o) is said to be groupoid. where 'o' is a binary operation, i.e. o : A2â> A. Hie system sv" is 
Abelian if 'o' is commutative (Niels Henrik Abel: 1802- 1829).
(x.y) Â®lf (z.t) = (z.t) Â®lf (x.y) 
commutative
(x.y) Â®lf (u.v) a (z.t) 
(p.q) for (x.y) 
(z.t) and (u.v) 
(p.q) 
monotonic
(x.y) Â®lf ((z.t) Â®tf (u.v)) = ((x.y) 0g. (z.t)) Â®lt (u.v) 
associative
(x.y) Â®lf 11 = (x.y) 
has 11 as unit element
We shall say that Â®lf is an intuitionisticfuzzy t-norm* *.
The notion of an intuitionistic fuzzy t-conorm, denoted here by Â©tf . can be introduced in a similar way 
(having 0L as unit element: left to the reader). Among the intuitionistic fuzzy t-nonns. the category of t- 
representable t-nonns is of special interest.
Definition 2.27
For any (x.y). (z.t) e L Â£ [0.1]2 :
is t-representable wrt Â® and Â© iff (x.y) Â®lf (z.t) = (xÂ®z,yÂ®t) and
Â©lf is t-representable wrt Â© and Â® iff (x.y) Â©,r (z.t) = (x Â© z , y Â® t).
Obviously, the last definition assumes the existence of such fuzzy nonns Â® and Â©. It can be observed that 
any such t-representable intuitionistic fuzzy t-nonn (e.g. Â®rf ) is considered as a binary operation related to the 
direct product of the two Abelian? monoids jv=df ([0.1]; 1 ; Â®) and AS =df ([0,1]; 0 ; Â©), i.e. xx x 23. where 
Â®tf is the obtained binary operation restricted to L and defined in the conesponding algebraic subsystem of this 
direct product (preserving the monotonicity property)?.
In applications the often used as a t-nonn is the classical Lukasiewicz's such one because the notion of fuzzy 
t-equivalence relation is dual to that of a pseudo-metric. The generalised Lukasiewicz's fuzzy t-nonn was used to 
represent and improve fuzzy rough approximations (Tabakow LG. 2014). It is shown below that the generalised 
Lukasiewicz^ intuitionistic fuzzy t-norm (denoted as: Â®ff ) satisfies the last two definitions. Moreover, 0,r is 
well-defined, i.e. closed inL.
Consider the direct product sr x 23 of the following two similar Abelian? monoids jÂ»'=df ([0.1]; 1:0) 
and 23 =df ([0,1]; 0 ; Â©), where ' Â® ' and ' Â© 'denote the generalised Lukasiewicz's fuzzy t-nonn and t-cononn.

192
respectively
*.
 By definition, jZ x =df ([0,1] x [0,1]; (1,0) ; Â®), where Â® is the new obtained binary 
operation, defined in [0,1]2 and Â® ((xi,yi),(x2,y2)) =df (Â® (xi,x2), Â© (yi,y2)), for any xi, x2, yi, y2 e [0,1], 
Provided there is no ambiguity and for simplicity, below instead of xi, x2, yi, y2, etc. we shall denote variables
* See: Subsection 2.2: A generalisation of the Lukasiewicz's BL system.
by x, y, z, t, etc. And also, instead of Â® (xi,x2) and Â® (yi,y2), we shall use e.g. xÂ®y and t.
Let now 
=df (L ; (1,0) ; 0,r ) c sd x . a be the corresponding algebraic subsystem defined for L Â£
[0,l]2 , where 
Â®;f is the binary operation Â® restricted to L, i.e. <7ow(Â®ff ) =df domf^) n L. Now it is
necessary to show that Â®if is t-representable wrt Â® and Â® . Hence, in accordance with Definition 2.27, it is 
necessary to show that (x Â® z,y Â® t) e L, for any (x,y), (z,t) e L, i.e. that 0,r is closed in L.
~ 
1/a 
~ 
1/a
Let xÂ®z =df max{0, x" + z" - 1} and yÂ®t =df min{l,y" + t"} . The following proposition is 
satisfied.
Proposition 2.18 (0^ is t-representable)
V ((\ + z < I) a (y + t < I) max{0, x" + z" - l}ia+ min{l,y" + t"}ia^ 1), for any a
xyz,te[0.1J
1.
Proof:
Let x + z < 1 and y + t S 1 (x, y, z, t e [0,1]). Assume that a > 1. Since x + z < 1, x > x" and 
z y z" then 1 > x + z > x" + z". Hence: x" + z" - 1 S 0. In a similar way we can obtain: y" + t" S 1. 
, 
â 
1/a 
. 
1/a 
1/a
Therefore, max{0, x" + z" - 1} + min{l,y" + t"} 
= ( y" + t") Si.Â®
Proposition 2.19 (the in tuitioniStic fuzzy t-norm 
)
Let Â® be the generalised Lukasiewicz's fuzzy t-nonn. Then 0,r defined in L is an intuitionistic fuzzy t- 
nonn.
Proof:
Let (x,y), (z,t), (u,v), (p,q) e L Â£ [0,l]2. We have:
1. 
Ojf is commutative.
(x,y) 
(z,t) -df
(x Â® z, y Â® t)
(z Â® x, t & y) 
(z,t) <ilf (x,y).
2. 0tf is monotonic, i.e. (x,y) 
(u,v) Si. (z,t) 0,r (p,q) for (x,y) Li. (z,t) and (u,v) SL (p,q).
Let (z,t) Sl (x,y) and (p,q) Sl (u,v). So, we have: z<x, tLy, p<u and q > v. Since 
(z,t) Â®5f (p,q) =df (z<g>p, tÂ®q) and (x,y) Â®tf (u,v) =df (xÂ®u, yÂ®v) we can obtain: z&p < x<Â§u and 
tÂ®q y yÂ®v. Hence: (zÂ®p, tÂ®q) SL (x<Â§> u, y Â©v). Then (z,t) <Â§ff (p,q) Sl (x,y) 
(u,v).
3. 
Ojj- is associative.

193
(x.y) 
((z.t) Â®lf (u.v)) =df (x.y) (z<S u. tÂ® v)
= (x Â® (z Â® u). y Â® (t Â® v)) 
= 
((x<Â§> z) Â® u, (y Â® t) Â® v)
= 
(x<Â§> z, y Â® t)Â®tf (u.v)
=df ((x.y) 
(z.t)) 
(u.v).
4. Â®lf has 11 as unit element.
(x,y) 0^ 1L =df (x,y) 
(1,0)
= 
(xÂ® LyÂ®0)
â 
(x.y). â¡ [Df.2.25, Df.2.26,Df.2.27,Prop.2.18}
Let now ol : L x L -> L be a map such that:
1. 
ctl satisfies the following four boundary conditions'. CTfi(0L.0L) = 11. ct^Ol.Il) = 11. ct^Il.Ol) 
= 0L and MIl.Il) = 11 .*
2. 
CTfl is decreasing in its first component: b i> a =x> Ofi(b.c) <L Ofi(a.c) and
3. 
ctl is increasing in its second component: d c => Ofi(a.d) CTfi(a.c),
* According to Corollary 2.8: Cf/a.b) = 1L iff a b (a, b 6 {0L, 11}), similarly as in classical logic, where p = q 1 ill p S q. 
{p.q e {0.1}): see Subsection 1.4.
t See (Detyniecki M. et al. 2014) and also Subsection 2.2 of this book.
where a =dt (x.y). b =df (z.t). c =df (u.v) and d =dt (p.q). for any a. b. c. d e L.
Definition 2.28 (the fuzzy intuitionistic R-implication
Let ctl be as above and a =>g b =dt CTfi(a.b). The fuzzy intuitionistic R-implication is introduced as follows 
(for any a, b, c 6 L): a =>g b =dt sup{c 6 L / a c <l b}.
In accordance with the last definition, there exists a possibility of obtaining some different fuzzy intuitionistic 
R-implications depending on the required intuitionistic fuzzy t-nonns (Comelis. C. and Deschrijver G. 2001). 
An illustration of the above considerations are the next two examples. Here, the intuitionistic fuzzy t-nonn is 
used.
Example 2.20 (Ofi(lL,0i) = 0l)
MIl.Ol) =df sup{c 6 L/(l,0) % c A,. (0.1)}
sup{c 6 L/(l,0) 
(u.v) 
(0,1)}
sup{c 6 L/(l<ftu. 0Â®v) Al (0.1)} 
1 /ft 
1 /ft
sup{c e L/(max{0, 1" + u" - 1} . min{L0" + v"} ) Al (0.1)}
sup{c e L/(u.v) Al (0.1)}
sup{c 6 L / c Al 0L}
0l. â¡ {Coroll. 2.8}
Example 2.21 (ofi is decreasing in its first component)

194
Let K =df {0, 1/4, 1/2, 3/4, 1}. Consider the set Q =dt {(x,y) e K2/x + y < 1} c L, |Q|= 15. Suppose 
that a =df (0,1/2), b =df (t/2,1/4) and c =df (l/4,3/4). We have: a = (0,1/2) 
(1/2,1/4) = b, i.e. b U a.
Assume the intuitionistic fuzzy t-nonn 0,r , e.g. for a =dt 2. We have:
CTfi(b,c) sup{d 6 Q/b die}
= sup{(p,q) 6 Q/(l/2,l/4) 0,. (p,q) 
(t/4,3/4)}
= sup{(p,q) e Q/(l/2Â® p, 1/4 Â®q) <L (1/4.3/4)}
= 
sup{(p,q) e Q / (max{0, (1/2)2 + p2 - 1}1/2, min{l, (1/4)2 + q2}1/2) A. (1/4.3/4)}.
= 
sup{(p,q) e Q / (max{0, 1/4 + p2 - 1} < 1/16 and min{l, 1/16 + q2} L 9/16}
= 
sup{(0,l), (0,3/4)}
= 
(0,3/4).
In a similar way, we can obtain (left to the reader):
CTfl(a,c) = 
sup{(0,l), (0,3/4), (1/4.3/4)}
= 
(1/4,3/4).
And hence: CTfl(b,c) = (0,3/4) <Sl (1/4.3/4) = afl(a,c)
*.
 â¡ {Df.2.25,Prop.2.18,Df.2.28}
' As in the case of real numbers'. X Â£ Y => sup X < sup Y (X,Y Â£ R).
t Called also, equivalently: thesis, satisfied formula, true formula or valid formula.
* In accordance with Definition 2.28, the 'logical value' of a =>r, b corresponds to some ordered pair, e.g. c and hence the consequent 
b is tautology if a and c are also tautologies (a. b. c e L).
In formal logic, the term 'tautology^ translates the idea of universal truth, i.e. a formula that is true in every 
possible interpretation (see: Definition 1.5 of Subsection 1.4). However, in accordance with Definition 2.28, any 
'logical value' of the fuzzy intuitionistic R-implication is represented by ordered pair in L. And hence, it is 
necessary to know how such pair is related to the above notion of tautology.
In the case of fuzzy intuitionistic logic, the following definition was proposed: confusing a formula with its 
truth value (Atanassov K.T. and Gargov G. 1998).
Definition 2.29 (fuzzy intuitionistic tautology)
An ordered pair a =dt (x,y) e L is a fuzzy intuitionistic tautology iff x > y.
According to the last definition, it is assumed that the degree of truth should be greater than the degree of 
falsehood for an intuitionistic pair to be considered as tautology. And hence, the validity of modus ponens (i.e. the 
rule C, in terms of truth values) was characterised as follows (Come lis, C. and Deschrijver G. 2001).
Definition 2.30 (the validity of modus ponens)
Let a =>fi b be a fuzzy intuitionistic R-implication (a, b e L ). Assume that this implication is tautology 
and the antecedent a is tautology. Then the consequent b is tautology.
By the last definition it follows that the validity of the above fuzzy intuitionistic implication directly depends 
upon the definition of the tautology-.
In accordance with Definition 2.29, fuzzy intuitionistic tautology can be any pair (x,y) e L such that 
x > y. This way UL = (0,0) becomes a tautology, which is counterintuitive. In fact, the both troth and 
falsehood degrees equal 0, is closer to the notion 'unknown', modelling total ignorance, rather than to the one of 

195
'true' (Detyniecki M. et al. 2014). Some remarks were also given by (Comelis. C. and Deschrijver G. 2001. El- 
Hakeim K. and Zeyada F. 2000, etc.).
As an improvement of the above Definition 2.29 (i.e. to exclude some cases from being considered as true), the 
following two definitions were introduced (Detyniecki M. et al. 2014).
Definition 2.31 (certain fuzzy intuitionistic tautology)
An ordered pair a =dt (x,y) e L is a certain fuzzy intuitionistic tautology iff x Â£ y and 1 - x - y Â£ 
0.5*.
T See also Subsection 9.1.
* Uris logic is based on the non-standard analysis, originated in the early 1960s by Abraham Robinson (1918 - 1974): a formalization of 
analysis and a branch of mathematical logic, that in particular rigorously defines the infinitesimals (i.e. the infinitely small numbers: x is 
infinitesimal iff Ixl < 1/n, for any n 6 I I). Here, the notions of'non-standard real subsets'and'non-standard unit interval'are used 
(Smarandache F. 2002).
Â§ A mean-type aggregation operator called the Bonferroni mean (Bonferroni C. 1950: Carlo Emilio Bonferroni 1892 - 1960).
* Corresponds to the notion of crisp set A* associated with a ficzy set A (using a threshold value 0.5): ii A-(x) =df if lla(x) i 0.5 then 
1 else 0 (for any x 6 X - the domain: see Chapter III, Section 7 of this book).
Definition 2.32 (truth fuzzy intuitionistic tautology)
An ordered pair a=df (x,y) e L is a truth fuzzy intuitionistic tautology iff x > 0.5.
By Definition 2.31 it follows that x is y and 0.5ix + yil.
Corollary 2.9
Let (x,y) e L. If x i 0.5 then x i y.
Proof:
Let (x,y) e L. Assume that x i. 0.5. Then x + y i 0.5 + y. Since 1 i x + y then 1 i 0.5 + y and 
so y i 0.5. Hence x i y. e
And so, in accordance with the above considerations, it follows that Definition 2.29 gives a necessary but not 
sufficient condition for tautology.
The validity experimental study was also presented (Detyniecki M. et al. 2014), i.e. a study concerning the 
validity of modus ponens wrt the considered 18 fuzzy intuitionistic implications for 10 000 pairs a, b e L (a 
random generation, using the uniform distribution).
In general, the contemporary investigations in fuzzy intuitionistic logic and intuitionistic fuzzy sets have both 
theoretical and practical aspects, (i.e. involving some research and development). There were studied, e.g. fuzzy 
intuitionistic lattices and fuzzy intuitionistic Boolean algebras (Tripathy B.K. et al. 2013) or also an algebraic 
structure for fuzzy intuitionistic logic (Eslami E. 2012), new modal predicate logics: global intuitionistic and 
global fuzzy intuitionistic logics (Ciabattoni A. 2004), complex intuitionistic fuzzy classes (Ramot D. et al. 2002, 
Ali M. et al. 2016)1, quantum logic and (different forms of) nonclassical logics (Cattaneo G. et al., see: 
https://pdfs.senianticscholar.org/9e4a/2d6900cec7671dd68adc5de6c44aa33858a9.pdf, neutrosophic logic?'. considered as 
a generalisation of the fuzzy intuitionistic logic (Smarandache F. 2002), intuitionistic fuzzy Bonferroni means5 
(Xu Z.S. and Yager R.R. 2006, 2011) and so on. An implementation-oriented research was also presented, e.g. 
concerning the use of fuzzy intuitionistic logic techniques in image processing (Rajarajeswari P. and Uma N. 
2013), the use of intuitionistic fuzzy classifiers in intrusion detection systems (Kavitha B. et al. 2011), noise 
removal from images using fuzzy intuitionistic logic controllers (Radhika C. et al. 2016), techniques for 
developing large scale fuzzy logic systems (Ervin J.C. and Altekin S.E. 2008), fuzzy intuitionistic logic applied 
to real-time traffic (Alodat M. 2015), etc.
Linear logic

196
Linear logic, introduced by J.- Y. Girard
*
 in 1987, is considered as a refinement of classical and intuitionistic 
logics. Instead of emphasizing truth, as in classical logic, or proof, as in intuitionistic logic, linear logic 
emphasizes the role of formulae as resources. This logic does not allow the usual structural rules of contraction 
an weakening to apply to all formulae but only those formulae marked with certain modalities. Linear logic 
contains a fully involutive negation while maintaining a strong constructive interpretation. Linear logic can be 
considered as a bold attempt to reconcile the beauty and symmetry of the systems for classical logic with the 
quest for constructive proofs that had led to intuitionistic logic (Di Cosmo R. and Miller D. 2016). It was shown 
how linear intuitionistic logic can be explained as a logic of resources (Lafont Y. 1993). And hence, this logic 
becomes an attractive in computer science, because of its logical way of coping with resources and resource 
control (BraunerT. 1996).
J In fact, the above Gentzen's formulae (related to the antecedents of the main sequent connectives) can be also represented as follows: 
A.A.B.F|â Â© r.A.A.A iâ & 
. r.A |â Â© 
.. 
, 
. 
. 
, . 
. .
ââ-â ---------. âââ â ----------- and â -------------. corresponding to exchange, contraction and weakening, respectively.
A,B,A,ri-Â® r,A.A|-Â® 
r,A,A|_Â®
The linear logic is weaker than the classical one. i.e. some formulae provable in classical logic may not be 
provable in linear logic..On the other hand, the linear logic is useful precisely. The classical logic is "logic about 
truth" (if some formula is true, then it is always true). The linear logic is a "logic about resources" (resources are finite 
and consumable: if we use a resource, then we cannot use it again). In linear logic assumptions (a.k.a. hypotheses) 
correspond to consumable resources. Assumptions cannot be arbitrarily duplicated, nor can they be discarded 
without being used, see: https://www.cs.Licsb.edLi/~benh/162_S16/handoLits/haiidoLit8-LEOL.pdf.
The following Gentzen's style structural rules are mainly used for obtaining substructure! logics (e g. such as: 
affine, linear, ordered, relevance and other ones:).
r.A i-A 
r,A,A b 
r i- b
â ?âj=ât- (exchange), r .------(contraction) and tt-t------------77 (weakening)
The first two rules follow directly from the commutative and idempotent axioms for conjunction and SR. The last 
rule follows directly from T 1.12 (exportation of implication: Subsection 1.3). The corresponding formal proofs are 
left to the reader (see Subsection 1.8 and also Relevance logic, considered in this Subsection 2.4)t
The language of linear classical logic can be defined recursively as follows: <p =,ii p / ~ <p/ <p 0 \p / <p Â® \p / 
cp & vp/ / cp vp/ /1 / 0 / T /1 / ! cp / ? cp. The logical connectives Â® . 3? . 1 and 1 are said to be multiplicatives, 
similarly & , Â© , T and 0 are called additives. The last two connectives: ! and ? are called modals or 
exponentials (used to give controlled access to weakening and contraction), T and 1 are pronounced as: "top" and 
"bottom", respectively. The following terminology is used here (T/?c Free Encyclopaedia, The Wikimedia 
Foundation, Inc.).
' Jean-Yves Girard . bom 1947.
Logical connective
Name / Is pronounced
multiplicative conjunction 
(times , tensor), <p 0 \p: 'both 
cp and i//' or ' cp tensor i//'
Â©
additive disjunction (plus), 
cp Â© vp: '(at least one of cp 
or fr
&
additive conjunction (with), 
cp & vp: 'choose from cp and
<//' or ' <p with fr
3?
multiplicative 
disjunction
(par)
I
escape (of course, bang), !<p: 
'of course cp or 'bang cp

197
why not
The following 'polarity' classification is also used: Â®, Â®, 1, 0,! are called positive and their duals 5 
, 1
, T , ? are called negative.
The linear implication is denoted by , where 'cp \|/'is pronounced as: 'consuming <p yields y/ or 
'rp lollipop \p. We have: <p q/ =,ir ~ <p q/. The intuitionistic implication <p => q/ can be defined 
as: !cp q/. In particular, the following equivalences are also satisfied: !(cp & q/) . !cp Â® !q/ (known as: 
'exponential isomorphism') and ?(cp Â® q/) . ?cp 5 ?q/. Moreover, IT . 1 and ?0 . 1. The linear logic 
equivalence cp . q/ means that the formula (cp q/) & (q/ cp) is derivable in this logic. It can be 
observed that any formula cp has a dual ~ cp, e.g. ~ (q> Â® q/) _ ~cp^?~q/ and ~ (cp 5 q/) _ ~ cp Â® ~ q/ or 
~ (q> Â© q/) _ ~ q> & ~ q/ and ~ (cp & q/) _ ~ q> Â© ~ q/, etc. In particular, T 1.3 of Subsection 1.3: â cp _ cp 
is also satisfied, i.e. ' ~ ' is involutive (Di Cosmo R. and Miller D. 2016)*.
' We shall assume that Â® and T bind more strongly than the symbol of equivalence. See also: T/ie Free Encyclopaedia. The Wikimedia 
Foundation. Inc. Obviously, cp' is understood as an abbreviation for 'cp -Â« 1'. Sometimes, the O-ary ' 1' is denoted by and known as 
"intuitionistic absurd'.
T Hie original Curry-Howard isomorphism relates the natural deduction formulation of intuitionistic logic to the X-calculus: formulae 
correspond to types, proofs to terms, and reduction of proofs to reduction of terms: Haskell Brooks Curry (1900 - 1982) and William Alvin 
Howard (bom 1926).
1 The corresponding introduction and reduction (called also elimination) rules are here denoted by '+' and respectively. Moreover, 
the above presentation is characterized by the presence of two different forms of rules for some connectives. Then, the used indexes 'L' 
and 'R' are related to the left hand side and to the right hand side of the considered connective. A more complete systems of introduction 
rules related to the linear classical, linear intuitionistic logics and the linear X-calculus are given in (Brauner T. 1996). Another interesting 
case seems to be the linear p-calculus, e.g. (Bradfield J.C. and Stirling C. 2001).
In addition to the above De Morgan's dualities, the following formulae are also satisfied (Cockett J.R.B. and 
Seely R.A.G. 1997: see also the above exponential isomorphism): <p 0 ( q/ Â© /) _ (<p 0 q/) Â© (<p 0 /): '0 'is 
distributive wrt ' Â© ', (cp Â® ( q/ H %)) ((cp Â® q/) H %): H e { Â® , Â© , & 3? }. The last linear implications, 
called linear distributions, are fundamental in the proof theory of linear logic. In particular, we have: if q> q/, 
cp % then cp,cp -o cp Â® %.
A good introduction to linear classical and linear intuitionistic logics is given in (Brauner T. 1996). An 
illustration of the difference between intuitionistic logic and linear intuitionistic logic is also presented. The 
correspondence between the linear intuitionistic logic and the linear /.-calculus is also considered (by using the 
original Curry-Howard isomorphism^, see: Howard W.A. 1980) as well the Girard translation (which embeds 
intuitionistic logic into linear intuitionistic one). And finally, a brief introduction to some example models of 
linear intuitionistic logic are given. This technical report is a fundamental study on proof-theory and 
computational interpretation of proofs, in particular: the interpretation of proofs as programs and reduction (cutÂ­
elimination) as evaluation (corresponds to the fundamental idea of the proofs-as-programs paradigm). A more formal 
treatment is omitted here, see also: (Lafont Y. 1999/2017).
Traditionally, the linear logic proof techniques are related to the classical sequent calculus (see Subsection 
1.8) in which uses of the structural rules contraction and weakening are carefully controlled. Example inference 
rules used in this logic are given below: see: https://www.cs.ucsb.edu/~benli/162_S16/liandouts/liandout8-LFOL.pdfi.
T |- A A |- B
+ Â® : ------------------------------
T, A |- A Â® B
T iâ A Â® B A, A, B |- C
r,A c

198
rH a
r |â a Â® b
r b
___________i
r iâ a Â® b
r iâ AÂ®B A. A I- C A.B I- C
-Â®: -----------------------------------
r. a c
ra & b
r i- a r i- b
+ &:
r iâ a & b
rH a
r â¢_ a & b
ra it
+ !: ____________
r!A
r.A b
+ ------------------
r i- a -o b
r b
r I- !A r.A. A H B
- I: ______________
r. A 
B
r I- A -o B 
A I- A
r. A |â b
In particular, a special case seems to be the rule '-3' .if the predicate A is more than one argument. Then, 
some Skolemian functions should be introduced
*.
 A more formal treatment is omitted here (see: Classical first-order 
and higher order predicate logics: Chapter II, Subsection 3.3). A modified version of ' and corresponding proof are 
given below.
Thoralf Albert Skolem (1887 - 1963).
r i- a 
r _ va
+ V: 
--------------- _ v. 
----------------------------------
r I- VA 
r H A(x/^) / T i- A(x)
r I- A(x/Â£) 
r - EA A. EA - B
+ E: 
"â-ia 
~3:
r I- f a 
r. A - B
For example, in accordance with '-3the following formula should be proved (see Subsection 1.8).
(p =?> E A (x)) a (q a E A (x) =?> r) =a (p a q =a r)
Proof:
(1) 
p =?> EA(x)
(2) 
qA EA(x) =a r
(3) 
P
(4) 
q
(5) 
EA (x)
(6) 
qAEA(x)
r. â¡
{-C: 1.3} 
{+K:4.5} 
{-C: 2.6}
Intuitionistic computability logic

199
Computability logic introduced by Japaridze G*.  (2003) is a formal theory of computability in the sense as 
classical logic is a formal theory of truth. It understands formulae as interactive computational problems (defined 
as games played by a machine against tire environment.), and their 'truth' as algorithmic solvability (meaning existence 
of a machine that always wins the game)..This logic is a systematic formal theory of computational tasks and 
resources, which, in a sense, can be seen as a semantics-based alternative to (the syntactically introduced) linear 
logic.
* Giorgi Japaridze, bom 1961.
Charles Sanders Peirce (1839 - 1914).
* Provided there is no ambiguity, instead of A;, formulae are here denoted by (ft. i 6 {1,2, ... ,n).
5 Nikolai Alexandrovich Vasiliev (1880 â 1940): with "imaginary non-Aristotelian logics", also reckoned as one of the forerunners of 
multi-valued logics.
" In accordance with T 1.22 (the rule DS: see Subsection 1.3), using the law of importation, i.e. T 1.12b, we can obtain: p a ~ p => q, or 
in general: <p a ~ <p => i|/ (latin: ex false quodlibet). And hence, in accordance with Subsection 1.5 we have: i|/ 6 Cn({<p,~ <p}) or 
equivalently <p,~ <p 1= i|/. So, a contradictory proposition has any proposition as its consequence (i.e. everything follows from a 
contradiction: involving "twofold standards" and hence any formula becomes a thesis).
n Ivan Efimovich Orlov (1886 1936).
In accordance with the above work, a relatively modest fragment of computability logic, called intuitionistic 
computability logic, was considered and it was conjectured that the (set of all valid formulae of the) resulting 
fragment is described by Heyting's intuitionistic calculus INT. A verification of the soundness part of that 
conjecture was given in (Japaridze G. 2007). A fragment of this work is presented bellow.
The above two players, i.e. machine and environment, are denoted below by t and Â±. respectively. Here, t 
is a mechanical device with a a fully determined algorithmic behaviour, but there are no restrictions on the 
behaviour of Â±. A problem / game is considered (algorithmically) solvable / winnable iff there is a machine that 
wins the game no matter how the environment acts.
Logical operators (i.e. functors) are understood as operations on games / problems. An important group of such 
operations, called choice operations, includes: n, u, IT and H corresponding to the intuitionistic operators of 
conjunction and disjunction, and the universal and existential quantifiers, respectively (it is used Peirce's! 
interpretation of tire last two quantifiers: n and LJ are associative and hence can be generalised as finite argument, see 
Chapter 11).
As an example, consider the following formula/problem (Japaridze G. 2007): <pi n <p2 n ... n q>âL This 
formula is interpreted as a game, where the first legal move (i.e. "choice"), which should be one of the elements 
of [1, 2, .... n}, is by the environment. After such a move / choice i' is made, the play continues and the 
winner is determined according to the rules of cpp Â± loses if a choice is never made.
Another basic operations having no official intuitionistic counterparts were also proposed (Japaridze G. 
2007): comprises negation '-'and the so called parallel operations', 'a. v, =>', e.g. applying '-' to a formula/ 
game cp interchanges the rules of the two players: t's moves and wins become Â±'s moves and wins, and vice 
versa, etc. A more formal treatment is omitted here.
Paraconsistent logic
The paracon si stent logic is a logical system that attempts to deal with contradictions in a discriminating way. 
As the forerunner of this logic is reckoned N.A. VasilicG about 1910 (there was proposed a modified Aristotelian 
syllogistic including statements of the form: ip is both cp and ~ (p)
**,
 see: (Arruda A.I. 1984, Bazhanov V.A. 1994). 
The first axiomatisation of a paraconsistent logic (concerning the relevant logic) was given by I.E. Orlov'1'1'. A more 
formal approach was given by S. Jaskowski (1948: Stanislaw Jaskowski 1906 - 1965, who was a student of 
Lukasiewicz), There was introduced a system, originally called discussive logic (known also as: discursive one), 
where the law of Duns Scotus (see T 1.22 of Subsection 1.3) was not satisfied. There was presented a 

200
formalisation of discussive logic by means of modelling a discourse in modal logic using S5 (see Subsection 2.3). 
A brief history concerning systems of paraconsistent logic is given in (Priest G. et al. 2013)*: left to the reader.
' 'In the metaphysics, Aristotle called it pepaiotiSari rtaaamapxy, "The firmest of all principles" -firmissimum omnium principiorum, the 
medieval theologians said. They referred to the principle that was to be known as the law of non-contradiction (LNC). they called it 
firmissimum, for in the western philosophical tradition the LNC was regarded as the most fundamental principle of knowledge and science. 
According to Thomas Reid (1710 - 1796) the law, in the form: "No proposition is both true and false", was also a cornerstone of common 
sense, together with other basic truths that shape our experience ("Every complete sentence must have a verb", for instance, or "Those things 
really happened which 1 distinctly remember"). Nevertheless, today the LNC has found itself under logical attack by so-called strong 
paraconsistency, also called dialetlieism. Paraconsistency is the doctrine according to which there are theories, that is, sets of sentences closed 
under logical consequence, that are inconsistent but non-trivial. The logical consequence at issue, then, must be such that {<p, ~ cp) I# cp - the 
inference from inconsistent premises to an arbitrary conclusion (often called ex fal so quodlibet) is invalid. A logic invalidating ex false is 
called paraconsistent in its turn" (Berio F. 2012).
t Francisco Miro Quesada Cantuarias, bom 1918.
* Georg Wilhelm Friedrich Hegel (1770- 1831). Karl Marx (1818- 1883)
Alternatively paraconsistent logic can be considered as a subfield of logic concerned with studying and 
developing paraconsistent (or "inconsistency-tolerant") systems of logic. Inconsistency-tolerant logics have been 
discussed since at least 1910 (and arguably much earlier, e.g. in the writings of Aristoteles), however the term 
paraconsistent ("beside the consistent") was not coined until 1976, by F.M. Quesada^ (Priest G. et al. 2013). 
Dialectical logic is the system of laws of thought, developed within the Hegelian and Marxist traditions , which 
seeks to supplement or replace the laws of formal logic. The main consensus among dialecticians is that dialectics 
do not violate the law of contradiction of formal logic, although attempts have been made to create 
a paraconsistent logic (The Free Encyclopaedia, The Wikimedia Foundation, Inc.). An integrated discussion of 
all major topics in the area of paraconsistent logic (philosophical and historical aspects, major developments and real- 
world applications) was also presented at the second world congress on paraconsistency (Paraconsistency: the 
logical way to the inconsistent. 2002).
It was observed classical logic, and most standard non-classical logics, e.g. such as intuitionistic logic, are 
explosive. Inconsistency, according to received wisdom, cannot be coherently reasoned about. Paraconsistent 
logic challenges this orthodoxy. And hence, the above (logical consequence) relation '1=' is said to be 
paraconsistent if it is not explosive. Paraconsistent logic accommodates inconsistency in a sensible manner that 
treats inconsistent information as informative. Sometimes paraconsistent logic is erroneously interpreted as 
dialetheism (the view that there are true contradictions).The view that a (logical) consequence relation should be 
paraconsistent does not entail the view that there are true contradictions. Paraconsistency is a property of an 
inference relation whereas dialetheism is a view about truth (Priest G. et al. 2013).
Let '1=' be a relation of logical consecpience. We shall say 1= is explosive if it validates cp,~ <p 1= tp, for any 
cp and tp, i.e. from contradiction follows anything (latin: ex contradictione sequitur quodlibet, abbreviated below 
as: Ecsq): known as the principle of explosion. It is easily to describe this principle as direct proof from 
assumptions. This is shown below (see: Subsection 1.3).
cp a ~cp {a}
(2)
(3)
(4)
cp v q/ {+ A : 2]
{-A: 3,4]
And hence, an abandoning of the principle of explosion should require the rejection at least one of the above 
two rules: '+ A' or A'.
By rejecting '+ A' .assuming A' and transitivity, the most of the natural deduction rules hold, e.g. such 
as: double negation and also associativity, commutativity, distributivity. De Morgan's laws, idempotence (for 
conjunction and disjunction), etc. But, e.g. the Aristotelian law of the excluded middle, i.e. cp v ~ cp, does not 
hold.
Let now A' be rejected. Hence, having ~ cp, there will not be possible to infer cp from cp v cp (this case 
may be interesting from tire perspective of dialetlieism).

201
The last case, rejecting both: '+ A' and A', will involve use of two separate disjunctive connectives 
(corresponding to '+ A' and A'), e.g. as in linear logic as well as in relevant logic.
In general, there were proposed many paraconsistent logics. A natural way of generating a paraconsistent 
logic (perhaps the simplest one) is the use of many-valued logic. Such a system was first proposed in 1954 by 
Asenjo F.G. in his PhD dissertation, see also LP: logic of paradox (Asenjo F.G. 1966, 1999). Here, the set of the 
following logical constants was considered: [F. B, T}, where 'B' denotes 'both' (i.e. false and true). In 
accordance with the requirements of this logic, there was used Kleene's temaiy logic system (it was used B' , 
instead of the original Kleene's symbol 'U': unknown)
*
. e.g. the logical value of ~ B =df B, in a similar way ~ F =<jf 
T. F v B =df max{F.B} =df B. F a B =df min{F.B} = F. B a T =df min{B.T} = B. B v T =df 
max{B,T} = T, T => B =df B, B => F =df B, F => B =df T, B => B =df B, etc.
* Kleene's ternary logic (1952: Stephen Cole Kleene 1904 - 1994): Kleene's ternary implication differs in its definition in that 'U 
implies U' is 'U' (instead of 'T', as in the case of Lukasiewicz's one). The corresponding definitions for negation, conjunction and 
disjunction connectives are the same as in Lukasiewicz's system (1918: Jan Lukasiewicz 1878 - 1956), concerning the weak conjunction and 
disjunction connectives, see Subsection 2.1 (instead of W3 =df {0. 1/2. 1). there was used the set {F. U. T). where 0. 1/2 and 1 correspond 
to F, U and T, respectively).
T/ie Free Encyclopaedia. The Wikimedia Foundation. Inc.
! Called "relevance logics" in North America and "relevant logics" in Britain and Australasia.
! Wilhelm Friedrich Ackermann (1896 - 1962).
" George fidward Moore (1873 - 1958).
Paraconsistent logic has a significant part in common with many-valued logic, however not all paraconsistent 
logics are many-valued (and vice versa). On the other hand, intuitionistic logic allows (the Aristotelian law of the 
excluded middle) cp v ~ cp not to be satisfied, i.e. not to be equivalent to true, while paraconsistent logic allows 
cp a ~ <p not be equivalent to false. And hence, it seems natural to regard paraconsistent logic as the "dual" of 
the intuitionistic one .
Paraconsistent logic becomes an important part in applications concerning such areas as: computer science 
and engineering, quantum theory, in particular the problem of entanglement (see Subsection 2.4: quantum 
dynamic-epistemic logic), etc. On the other hand, to invalidate ECSQ, there were introduced various systems of 
paraconsistent logic (accepting the validity of classical inferences in consistent contexts). As an example such 
system, the relevance logic is briefly presented below.
Relevance logic
Relevance (or equivalently: relevant) logic! systems were developed as attempts to avoid some paradoxes 
related to material and strict implications. Such logic systems were first initiated in (Anderson A.R. and Belnap 
N.D. 1975 ) as a study of relevance of the conclusion wrt the premises: see also (Anderson A.R. et al. 1992) as 
well as (Dunn J.M. and Restall G.. Relevance logic, http://consequently.org/papers/rle.pdt) and (Mirek R. 2011). The 
considered here conception of logical implication (or more general: inference) was of fundamental importance. A 
similar suggestion was early given by Ackermann W.F?\ (1956).
Assume now that l= cp => \p. Consider the implicative proposition 'cp =a q/, where q/ follows from (is a 
logical consequence of / is deducible by) cp. Such term as ' follows from' can be interpreted as a binary relation 
between q/ and cp. The opposite relation associated with this one is denoted by 'entail'. And hence, we shall say 
that cp entail q/ odf q/ follows from cp (Moore G.E. 1920)
**
.
 In general, with this conception of implication 
are associated the following two approaches.
The first one. was based on Diodorus Cronus' ideas of "strict" or "strong" implication (died c.284 b.c.) and 
continued by Lewis (Clarence Irving Lewis 1883 - 1964): modal notions and strict implication systems (see 
Subsection 2.3). This way. there were eliminated some paradoxes only concerning the material implication. And 
hence, it was observed a necessity of considering the term 'implication as a primary one (instead of using Lewis' 
modal logics).
The second approach was based on Kant's observations concerning the notion of "analyticity'-, some 
implicative proposition is said to be an analytical proposition if the significance (the meaning or sense) of the 

202
consequent is included in the significance of the antecedent of this proposition (Iimnanuel Kant 1724 - 1804). In 
accordance with the above observations, there was proposed an analytical implication system (Parry W.T. 1932, 
1933)
*,
 where the set of propositional variables of the consequent (let be here denoted by: C ) is a subset of the set 
of the propositional variables associated with the antecedent (say: A): i.e. C c A (for each implicative thesis cp 
=> q/ of this system). Here, the minimal condition of existence a semantical consistency between cp and was 
interpreted as impossibility of realisation the so called "error of inconsistency''. related to the case C n A = 0 
(for any thesis cp =a \p). So, this minimal (relevance) condition was used in systems known as 'entailment'^. In 
accordance with the last condition, the obtained logics of the systems of type entailment can be considered as 
subsystems of the basic systems of strict implication S3, S4 and S5 (obviously considering only the implicative 
fragments of such systems).
* Formal logic. Encyclopedical outline with applications to informatics and linguistics (1987): 338 - 359.
â¢ William Tuthill Parry (1908 1988).
t In general, '=>' corresponds to the main implication of the generalised form of an expression, hi fact, this generalised form can be 
transformed in a form similar to the right side of theorem 1.23: using (n~ 2) times T 1.12 (since logical equivalence is transitive).
Let now {<p) be the set of propositional variables associated with <p. Assume that ip is a logical consequence wrt <pi,<p2, â â â , <Pn- then: 
1= cpi a <p2 a ... a <pn => ip (see Theorem 1.23 of Subsection 1.5). And hence, the following condition should be satisfied: {q/J Â£
JiA e.g. =ip a qi a (p/r a q/r; and {q.r} Â£ {p.q.r}.
It can be observed that the above notion of entailment is usable in (at least) three meanings: implication 
connective (having some properties), the name of the logical system characterising this connective as well as the 
area in which this system is defined.
Among the most important systems of type entailment are the following: E (the basic system entailment), T 
(ticket entailment), EM (entailment-miiigle), R (relevance), in particular R , (pure implicative fragment), etc. The last 
implicative fragment is considered by the relevance logicians as the most important. As an example, in the 
implicative system E (pure calculus of entailment), in its natural deduction version, are used the following rules.
(1) 
Hyp The antecedents of the main implication, i.e. the primary assumptions (see Subsection 1.2: direct 
proof from assumptions) are introduced successively, in the next proof steps, in such a way that 
to each assumption is assigned one element set [kJ, where the natural number 'k', called 
index, denotes the actual proof s step.
(2) 
Rep Any formula can be repeated in a corresponding proofs step without changing its index.
(3) 
Reit Any implicative formula can be relocated to a next proofs step without changing its index.
(4) 
-> E By <p(l and (cp =a q/)b we can obtain '|/(l i, (a, b denote index sets).
(5) 
-> I 
From the proof s step q/a and the assumption cp<kj we can obtain (cp =a q/)a - <k), if k e a.
The system T can be obtained from E by using the following restriction for the above rule (4):
(4)t -> E By cpa and (cp =a q/)b we can obtain q/a u b, if max(b) max(a).
The implicative system EM is an extension of E wrt the following additional rule.
(6) 
Mgl By (cp =a q/)a and (cp =a q/)b we can obtain (cp =a q/)a u b.
Example 2.23
Consider the following rule of reduction', (p => (p => q)) => (p => q). As an illustration, there are shown 
below two kinds of proofs: the classical one (a direct proof from assumptions) and the proof using the basic system 
E.
Proof (classical version):

203
(1)
(2)
(3)
p 
(p 
q)
p
p 
q
P Â®
{1.2 /a}
{-C: 1,2}
{-C: 3,2}
Proof (E version) *:
(1)
(2)
p (p q)m
P{2)
Hyp:
(3)
p (p q)m
EReit;
(4)
P qn,2]
2,3, a E:
(5)
qti,2]
2,4, aE:
(6)
p qm
2,5,-> I;
(7)
(p (p q)) a (p a q)
1,6, -y I. â¡
* According to the used below designations: 'Hyp' corresponds to '{a}', '2,3, E' may be denoted as: I a> E : 2,3), etc.
t Moh Shaw-Kwei (1917 - 2011). Alonzo Church (1903 - 1995).
Formal logic. Encyclopedical outline with applications to informatics and linguistics (1987): 338 - 359. In accordance with the used 
priorities for logical connectives some parentheses may be omitted, e.g. p a q => p instead of: (p a q) => p, etc., see Subsection 1.1.
Consider now the relevance logic system R. A formalisation of R can be realised (as in classical logic systems) 
into two versions: axiomatic and assumptional (natural deduction methods).
The axiomatic system of R can be obtained by completion the axioms of the Moh Shaw-Kwei and Church's 
implicative system (Moh Shaw-Kwei 1950, Church A. 1951):
(Al)
P P
(A2)
(P q) ((q r) =A (p =A r))
(A3)
(p (p q)) (p q)
(A4)
(P (q r)) =A (q (p r))
with the following formulae characterising conjunction, disjunction and negation :
(A5) p a q p
(A6) p a q =a q
(A7) (p a q) a (p -â  r) a (p a q a r)
(A8) p a p v q
(A9) q =a p v q
(A10) (p =a r) a (q =a r) =a (p v q =a r)
(All) p a (q v r) =a p a q v r
(A12) (p =a ~q) =a (q =a ~p)
(A13) ~~p =a p
The assumptional version of R is an extension of the basic system E , i.e. rules (1) - (5), by adding the 
following rules.
(6) 
â E 
From â qy, we can obtain q>a.
(7) 
â I 
From qy, we can obtain â q>a.
(8) 
a E 
From (<p a q/)a we can obtain q>a.
(9) 
From 
(<p a q/)a we can obtain q/a.

204
(10)
Al
From Ta and Ta we can obtain (t a tX-
(11)
vl
From Ta we can obtain (t v tX-
From Ta we can obtain (t v tX-
(12)
A V
From (q> A (t V x))a we can obtain ((cp a t) v %)a.
(13)
~E
From ~ q/a and (t => T)t we can obtain ~ <p1;.
(14)
~I
From (T
=a ~ q>)a we can obtain ~ Ta.
(15)
vE
From (T v T)a- (q> => X)b and (t => %)b we can obtain %a b.
Example 2.24
Since conjunction and disjunction are mutually distributive*, in particular the following implication is 
satisfied: p v q a r => (p v q) a (p v r). There are shown below two kinds of proofs: the classical one (a 
ramified direct proof from assumptions) and the corresponding proof using the assumptional version of R.
* In fact, conjunction and disjunction satisfy the commutative, associative, absorptive, idempotent, and distributive axioms (see 
Subsection 1.3).
Proof (classical version):
(1)
P
q a r
{a}
(1.1)
P
(ada}
(1.2)
(1.3)
P
P
q 
r
[+A
1.1}
(1.4)
(P
k/ q) A (p \/ r)
!+l<
1.2.1.3}
(2.1)
q z' r
{ada}
(2.2)
(2.3)
q 
r
[-K: 2.1}
(2.4)
P
q
[+A
2.2}
(2.5)
P
r
[+A
2.3}
(2.6)
(P
k/ q) A (P \/ r)
!+l<
2.4,2.5}
(P
k/ q) A (P \/ r). â¡
[1.4.2 â¢6}
Proof (R version):
(1)
P v q a Ti!
Hyp;
(2)
PA
Hyp;
(3)
P v T;
2. vl;
(4)
P V r<2)
2. vl;
(5)
(P V' q) 'x (p v r);2j
3.4. aI;
(6)
p -â  (p 'z q) a (p v r)
2.5,-> I;
(7)
q a r{3)
Hyp;
(8)
q{3j
7. aE;
(9)
r{3)
7. aE;
(10)
P V q;3!
8. vl;
(ID
P V r:3!
9. vl;
(12)
(P V' q) '' (P v r)<3>
10.11. aI;
(13)
q a r =a (p v q) a (p v r)
7.12. â> I;
(14)
(P V' q) >' (P v r)<i>
1.6.13. vE:
(15)
P V q a r => (p v q) a (p v r)
1.14.-> I. c
The reader is invited to give an assumptional R-version proof of the following formula: (p a q) v (p a r) 
=A p A (q v r).

205
The extended system RM, in natural deduction version, uses the following additional rule.
(16) Mgl From <pâ and cpn we can obtain <pâ ub.
The above briefly considered relevance logic systems have also representation by using the Gentzen's* 
sequent calculus. Here, the only usable is the following axiom (known as identity)'. A iâA. In particular, starting 
with this axiom, the following four rules are sufficient in proof representation related to T ,, E ,, R ,, the modal 
logic system S4 , and Heyting's intuitionistic system H ,. The proof of the introduction rule '+ Ca' was 
presented in Subsection 1.8 (Example 1.14). The proof of '+ Cc' is left to the reader. The last two introduction 
rules are also known as: "arrow on the leff and "arrow on the righf, respectively. The proofs of the rest two 
rules (contraction and weakening) are also left to the reader.
'Gerhard Karl Erich Gentzen (1909 - 1945).
A. more simplified version of this rule is the following one: 
r . where 0 is interpreted as an empty formula (or sequence of
r iâ a => b
formulae), i.e. /.. the proof ofthe last sequent follows directly from thesis 1.12 (exportation of implication: see Subsection 1.3).
* For example, this line is obtained from lines 1,2 by assuming in + Ca: A = A = q, B = 0 = r and Al/..
r iâ0,A=>B
Id
A -A
identity
Cont,i
T,A,A,A |â 0 
t,a,a iâ Â©
contraction
Weaka
T,A 1- 0
T,A,A 1- 0
weakening
+ Ca
A iâ A,A B,F iâ 0
A^B.A.I' A,0
arrow on the left
+ Cc
A,r i- o,B
arrow on the righf
Example 2.2 5 (the logic system Rd)
Consider the following thesis: p => (q => r) o q => (p => r), known as "commutation rule' (Slupecki J. 
and Borkowski L. 1967). The proof of the if-implication is given below. The proof of the only-if-implication is 
similar: left to the reader.
Proof (R > version):
(1)
q H q
{Id}
(2)
r 1- r
(3)
p H p
{Id}
(4)
q, q => r 1- r
{+Ca: l,2}t
(5)
p =a> (q =y r),q,p H r
{+Ca: 3,4}
(6)
p =a> (q =y r), q 1- p =a r
{+Cc: 5}
(7)
p =a> (q =y r) 1- q =a (p =a r)
{+Cc: 6}
(8)
H (p =a> (q =y r)) =s> (q =a (p =a r)). â¡
{+Cc: 7}
It can be observed that systems such as T > . E-> and S4 > should be require (in using) some additional 
conditions, e.g. either A * /. or in sequence Â© should be an implicative formula (fFe^: related to S4 ,). etc. A 
more formal treatment is omitted here.
Example 2.2 6

206
Consider the following modified version of '+ Ca': 
. In accordance with Subsection
6 
7 
A.T.A^B.A.O n
1.8, the following formula can be obtained.
(pAq=>r)A(SAtAU=>W)=>(pASA(r=>t)AqAU=>W)
Proof:
(1)
p a q => r
(2)
S A t A U => W
(3)
P
(4)
S
{1-7/a}
(5)
r =a t
(6)
q
(7)
u
(8)
~ w
{aip}
(9)
p A q
[+K:3,6]
(10)
r
{-C: 1.9}
(ID
t
{â C : 5,10}
(12)
S A t A U
[+K: 4,7,11}
(13)
W
{â C : 2,12}
contr. â¡
{8,13}
Let now '+Cam' be the condition: 'either A ? /. or A is implicative' and '+Ca4' be the condition: 'A A 
/.'. So, '+ Cam' is an additional condition for S4 >. In a similar way, '+ Cam' and '+ Ca4' are requirements for E. > 
and T >, respectively
*.
 â¡
'Pormal logic. Encyclopedical outline with applications to informatics and linguistics (1987).
And finally, to complete the above considerations, there are given below the remaining Gentzen's 
introduction rules'. + Na, + Nc. + K.a. + Kc, + Aa. +AC as well as some structural rules (Glushkov V.M. 1964). 
The corresponding proofs are left to the reader (the proof of the last rule is given below).
A,F iâ 0 B,F iâ 0 
AaB,F i- 0
A,r Â© B,r Â©
AvBT i- Â©
r Â©,a r Â©,b
r i- Â©,aab
r Â©,a r Â©,b
r i- 0,AvB
Coni,. (as above)
Contc:
F i- Â©,A,A,A 
F i- Â©,A,A
Weaka (as above)
Weakc:
r,A i- Â© 
r,A I- 0,A
Perma :
A,A,B,A |- F 
A,B,A,A i- F
Permc :
F i- A,A,B,A
F i- A,B,A,A
Cut rule:
A iâ A,A A,T iâ 0
A,F iâ A,0

207
In accordance with the last rule, any formula A appearing at the same time in the consequent of the first 
sequent and also in the antecedent of the second can be omitted. It was shown (Gentzen G.K.E. 1934, 1935) that 
any proof making use of this rule can be transformed to a normal form proof i.e. without using this rule (tire "cutÂ­
elimination theorem known as one of the most important results in proof theory). The proof of this rule is related to the 
proof of the following formula.
(p => q v r) a (r a s => t) => (p a s => q v t)
Proof (Cut rule):
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)
(H)
P q V r 
r a s =a t
P 
s 
~ (q v t) 
~q 
~ t 
q v r 
r
TAS 
t 
contr. o
{aip}
{6.7/NA : 5}
{-C: 1.3} 
{-A: 6.8} 
{+K:4.9} 
{-C:2.10} 
{7.11}
Provided there is no ambiguity and for convenience, it is used the same interpretation of commas (in the 
antecedent or the consequent of a given sequent) as in Subsection 1.8 (for a more formal treatment see: Dunn 
J.M. and Restall G.. Relevance logic. http://conseqLiently.org/papers/rle.pdt). And hence, e.g. the following additional 
rules may be introduced.
Commaa :
F,A,B i- A,A 
r,A a B I- A, A
Comma? :
T,A i- A,B,A 
T,A i- AvB.A
Example 2.2 7
The proof of the if-implication of De Morgan's law of negating a disjunction is given below (see: Thesis 1.7 
of Subsection 1.3). The proof of the only-if-implication is similar: left to the reader.
Non-monotonic logic
(1)
(2)
P 
q
- 
-
p 
q
{Id}
(3)
p - p. q
[Weak?: 1}
(4)
q - p. q
[Weak?, Perm?: 2}
(5)
p - P v q
{Comma?: 3}
(6)
q - P v q
{Comma?: 4}
(7)
(p v q) H ~p
{+Na, +NC: 5}
(8)
(p v q) H ~ q
{+ Na. +NC: 6}
(9)
(p vq) 1------p a ~ q
{+KC:7.8}
(10)
-
(P v q) =a ~ p a ~ q. â¡
{+ Cc: 9}
The classical logic is a monotonic system, i.e. the following implication is satisfied.

208
y e Cn({cpi.cp2...., 
=> 'I' e Cn({cpi.cp2...., <pn,%)} (for any cpi. cp2,... ,<pn, 
% and n e N)
The non-monotonic reasoning deals with the problem of deriving plausible conclusions, but not infallible, 
from a knowledge base (denoted below by KB: a set of formulae). Since the conclusions are not certain, it must be 
possible to retract some of them if new information shows that they are wrong (Olivetti N. 2010 / 11). 
Historically, the first more important research concerning non-monotonic logics was given in (McCarthy J. 
1980)* *,  (McDermott D.i and Doyle J. 1980), (Reiter R. 1980)i and (Moore R.C. 1984). Some notions given in 
(Olivetti N. 2010 /11) are briefly presented below: see also the proof-theoretic reconstruction (known as: 'analytic 
sequent calculi) given in (Bonatti P.A. and Olivetti N. 2002) as well as (Horty J.F. 2001).
' John McCarthy (1927 - 2011).
T Drew McDermod, bom 1949.
* Raymond Reiter (1939 - 2002).
5 In general, the following problems are associated with classical logic (Ginis A. 2008): the size of theory necessary to describe real 
situations is overwhelmingly large, this logic is very weak in the face of incomplete knowledge and also this logic is too rigid to deal with 
new (conflicting) knowledge.
" Conjunction and disjunction are two finite argument logical operations.
Consider the statement "typically A'. This statement can be interpreted as follows: "in the absence of 
information to the contrary, assume A'. A more precise meaning of the last text could be the following one: 
"there is nothing in KB that is inconsistent with assumption A'. Obviously, other interpretations are also 
possible: they will give rise to different non-monotonic logics. The inadequacy of classical logic for description 
of such cases is illustrated in the next example given in (Olivetti N. 2010 /11)Â§.
Example 2.2 8
Consider the following rule "typically birds fly . More formally, this rule can be represented as follows.
V ( bird(x) a ~ exception}?,) =>/7v(x)), where ?/ is the universe of birds.
The one argument predicate ' exception}?) ' is defined as:
V ( exception}?) <=>df penguin}?) v ostrich}?) v ... )**
.
Unfortunately, all exceptions are not known in advance and cannot be pre-approved. In accordance with the 
laws CE (transposition or contraposition of equivalence), NA and SR. given in Subsection 1.3, we can obtain:
V ( ~ exception}?) Odf ~penguin}?) a ~ ostrich}?) a ...).
Assume that "Tweety is a bird' belongs to KB =df {Typically birds fly. Penguins do not fly, Tweety is a 
bird}. To conclude that "Tweety' fly, we should prove that "Tweety' is not an exception, i.e. ~penguin(tweety), 
~ ostrich(tweety), etc.
On the contrary, we would like to prove that "Tweety' flies because we cannot conclude that it is an exception, 
not because can prove that it is not an exception. â¡
A basic understanding of database
*
 logic is that only positive information is represented explicitly. If a 
positive fact is not presented in this database (in short: DB) then it is assumed that its negation holds (this is the 
so called "closed word assumption ', in short: CWA). Formally (Olivetti N. 2010 /11):

209
DB I# <p => I=cwa ~ <p.
Obviously, the last inference is not valid in classical logic. In accordance with the above work, it was next 
discussed the problem of dynamical world representation', in particular, representation of objects that are not 
affected by state change (using frame axioms1'). Below is considered only the fragment related to default 
reasoning (first introduced by Reiter R. 1980).
Default logic is an extension of classical logic by non-standard inference rules (these rules allows one to express 
default properties).
Example 2.2 9 (default rules)
Consider the following inference rule: birc1^ â  fly(y) This ru|e js interpreted as follows: df x is a bird 
fly(D
and we can consistently assume that x flies then we can infer that x flies'. A generalised form of the last rule 
can be represented as follows: A(x),- B(x) and this rule can be interpreted as: 'if A(x) holds and B(x) can be 
consistently assumed then we can conclude C(x)'. Here: A(x) is said to be the prerequisite, B(x) - the 
justification and C(x) - the consequent1. $ (Olivetti N. 2010 / 11).
A default theory (or more exactly: theory of default reasoning, considered as a deductively closed set of logical 
formulae)* ** is a pair (D.W), where D is a (non-empty) set of default rules11 and W is a (non-empty) set of first- 
order predicate logic formulae. The set W represents the stable (but incomplete) knowledge of the world and D 
represents rules for extending the knowledge W by plausible (but defeasible) conclusions. The theory obtained 
by extending W wrt rules in D is said to be an extension of (D.W). It was shown that this theory may have 
zero, one or many extensions (Olivetti N. 2010 /11). In particular, the following definitions were given.
* An important difference between knowledge bases and databases is that the former require a semantic theory for the interpretation of 
their contents, while the latter require a computational theory for their efficient implementation on physical machines (Brodie M.L. and 
Mylopoulos J. eds. 1986).
t hr general: the frame problem', using first-order predicate logic for expressing facts about (behaviour of) a robot in the world and hence 
the problem of finding adequate frame axioms.
Default logic can express facts like "by default, something is true"; by contrast, standard (i.e. classical) logic can only express that 
something is true or that something is false. This is a problem because reasoning often involves facts that are true in the majority of cases but 
not always. A classical example is: "birds typically fly". This rule can be expressed in standard logic either by "all birds fly", which is 
inconsistent with the fact that penguins do not fly, or by "all birds that are not penguins and not ostriches and ... fly", which requires all 
exceptions to the rule to be specified. Default logic aims at formalizing inference rules like this one without explicitly mentioning all their 
exceptions (T/ie Free Encyclopaedia. The Wikimedia Foundation. Inc).
Â§ Provided there is no ambiguity and for convenience, instead of the originally used cc(x), P(x) and y(x), these one argument predicates 
are here denoted by A(x), B(x) and C(x), respectively: as in (Slupecki J. and Borkowski L. 1967).
" hr general, any (formal) theory is a set of sentences (i.e. formulae <p) in a formal language L. Let A =df (D,W). Then A can be 
considered as a deductively closed set of logical formulae, more formally: A = Th(A), where Th(A) =df {<p e L/A 1= <p;. This notion is 
very similar to Tarski's third axiom: Cn(Cn(A)) = Cn(A), introduced in classical logic systems (see: Subsection 1.5).
T In short: defaults.
** There exists a reference to the whole E in step(2).
Definition 2.33 (default theory extension: propositional case)
A set of formulae E is an extension of A =df (D.W) if E is deductively closed, i.e. E = Th(E) and all
applicable default rules wrt E have been applied, i.e. for each
A(x): B(x) e D : A(x) e E a ~ B(x) Â£ E
C(x)
=A C(x) 6 E.
Definition 2.34 (default theory extension: semi-inductive definilioim)

210
A set of formulae E is an extension of A =df (D,W) if it can be obtained as below.
(1) 
So =df W,
(2) 
Sr+i =df Th(Si) u {C(x)/ A(x) â  li(x) 6 D, A(x) e Sf, ~ B(x) Â£ E} and 
C(x)
(3) 
E =df u S, .
In particular, the following example was given in (Olivetti N. 2010 /ll): provided there is no ambiguity, instead 
of b, p and f below are used the propositional variables p, q and r, respectively..
Example 2.30 (semi-inductive extension)
p r
Let A =df ({p, q ~ r}, {}). There exists an unique extension E = Th({p, q =o> ~r, r}) such that: So
=df {p, q => ~ r} and Si = So u {r}, since So 1= p and ~ r Â£ E. â¡
Let d be a default rule. We shall say that d e D is normal if has the form: A(x^ â  li(xi and that A is a 
' 
B(x)
normal default theory if all d e D are normal. The following property is satisfied (Olivetti N. 2010 /11).
Theorem 2.1
Let A be a normal default theory. Then A has always an extension. â¡
At the conclusion of the above considerations,, it can be observed that the Achilles' heel of any such logic 
seems to be the notion of justification (B(x): can be consistently assumed)', the process of justification and hence the 
obtained sufficiency of this justification may be subjective or not sufficient.
In particular, some moral aspects are related to deontic logic (Horty J.F. 1994)*. In general, the importance of 
this logic depends on the area of application and the boundary conditions in each particular case. A more formal 
treatment and/or study is omitted here: left to the reader.
' This paper is to establish some formal connections between deontic and nonmonotonic logics, and to suggest some ways in which the 
techniques developed in the study of nonmonotonic reasoning and the issues confronted there might help to illuminate deontic ideas, these 
two subjects have evolved within different disciplines. The field of deontic logic was developed by philosophers and legal theorists as a high 
level framework for describing valid patterns of normative reasoning, 'the study of nonmonotonic logic was initiated, much more recently, by 
researchers in artificial intelligence who felt that ordinary logical techniques could not be applied properly to a number of practical problems 
arising within that areaâmost notably , problems involving planning and action, such as the frame problem. By linking the subject of deontic 
logic to this research, it may be possible also to relate the idealized study of moral reasoning typical of the field to a more robust treatment 
of practical deliberation.
Objects, in nowadays called "fractals" were known as far back as 1872: the Weier strass function (Karl Theodor Wilhelm Weierstrass: 
1815 â 1897). Like fractals, this function exhibits self-similarity and has the property of being continuous every where but differentiable 
nowhere.
Fractal logic
Nature observations and inferences are basically changing, turning to multimode, temporality and complexity. 
Fractals (lat: "fractus", meaning "broken" or "fractured"), first introduced by Mandelbrot in 1975+ (Benoit B. 
Mandelbrot: 1924 - 2010), are abstract objects used to describe and simulate naturally occurring objects. In 
general, fractals can be grouped in the following three categories (depending on how they are defined and generated): 
iterative, recursive and random ones. Moreover, in accordance with their self-similarity property, fractals can be 
classified as having: exact, quasi and stochastic self-similarity. It can be observed that there does not exist an 
object of type 'exact fractal' in nature. On the other hand, many such objects have properties very similar to these 
concerning fractals (however, in a bounded version). Artificially created fractals commonly exhibit similar 
patterns at increasingly small scales. Fractals are not readily definable. But the following definition (related to 
general measure theory) covers many classes of fractals (Bjorvand A.T. 1995).

211
Definition 2.35 (Mandelbrot B.B. 1983)
A fractal is a set for which the Hausdorff - Besicovith dimension* strictly exceeds the topological dimension1'.
* Felix Hausdorff (1868 1942), Abram Samoilovitch Besicovith (1891 
1970): for a more information see: The Free Encyclopaedia,
The Wikimedia Foundation, inc.
Known also as: Lebesgue covering dimension (Henri Lebesgue: 1875 - 1941).
The Free Encyclopaedia, The Wikimedia Foundation, Inc.
Besides the fractal computer graphics, e.g. (Pickover C.A. ed. 1998). fractal modelling is suggested e.g. in 
quantum physics and cosmology (El-Naschie M.S. 2016). in classical parallel computing (Craus M. et al. 2016), 
in intelligent systems theory (Bjorvand A.T. 1995). nonlinear dynamics, chaos theory and complex systems 
modelling, data compression and modelling, use of recursion to determine logical operations and circuits 
(http://www.iiiatlipages.coin/lioiiie/kiiiathl40/kiiiatlil40.htni), and so on. In particular, the following main areas of 
investigation were considered in (Bjorvand A.T. 1995): the modelling of the processes of the human brain, using 
rough set theory for decision support based on fractal models and also using the genetic algorithms for the 
evolution or learning within these models (left to the reader).
Universal logic is the field of logic that studies the coimnon features of all logical systems, aiming to be to 
logic what universal algebra is to algebra. A number of approaches to universal logic have been proposed since 
the twentieth century, using model theoretic, and categorical approaches. As a precursor of this logic it is 
reckoned Alfred Tarski (1901 - 1983). A more formal approach was given in the 1990s by Jean-Yves Beziau. 
e.g. see: (Beziau J-Y. 2007). The term 'universal logic' was also separately used by Richard Sylvan (1935 - 
1996) and Ross Brady, see (Brady R.T. 2006: to refer a new type of weak relevance logicf.
In accordance with the contemporary requirements in computer science, information technology and artificial 
intelligence, universal logic was bom which stress on the relational flexibility of different objects (tasks, 
propositions, connectives). This logic is considered as a common architecture of logical theory system, which is 
self-contained (puts up the common characteristics of all kinds of logic and also gives an application oriented logic builder) 
and exoteric (the possibility of joining a new logical system into its frame). And this logic puts forward the following 
essential features of all kinds of logics: propositional connectives, relational quantifier, set of coimnon roles and 
appropriate inferential model. An exploration of fractal and chaos logics based on universal logic is briefly 
presented below (Chen Z-H. et al. 2010). In this paper there are considered the basic characteristics of fractal 
phenomenon and the correlation of fractal, chaos and universal logic. Next, there are fully discussed the 
necessary and probability of setting up fractal logic and chaos logic. And finally, there is given a compendium of 
fractal logic and the way of the implementing of chaos logic.
In accordance with the last work, the characteristics of classical logic systems, some non-standard logics, e.g. 
many-valued logic or any other 'rigid'' application of formal logic in mathematics can be summarised as follows: 
an integer truth-value of any proposition, correlation-independent propositions (i.e. every proposition is independent 
from others: otherwise, the inferential march becomes difficult) and the uniqueness of the operating model of logical 
connectives (the operating rules of connectives are strictly defined and cannot be changed in the process of reasoning).
The basic features and relationship of chaos and fractal can be summarised as follows (Chen Z-H. et al. 
2010):
Chaos: 
internal randomicity, fractional dimension, orderliness in disorder,
Fractal: 
self-similar, infinite complex and subtle, fractional dimension and
Relationship: from chaos to order, from order to similitude, from similitude to fractal.
According to the last work, the following four factors of the fractal logic can be considered as important:
Research field: 
all things that have fractal features, logical inferential system based on
fractal mathematics,
Proposition 
introduction of basic proposition connectives and their operation
connectives: 
models,

212
Relational quantifier: * the generalised quantifiers are useful in fractal logic and
- 
bi;VÂ£(J) .. . biA'Â£(,4) 
-
</c(,4) = lim sup--------â anc] d_c(A) - lim inf------- :---- . If dc(A) = d (.4) = dc(A) then d (4) is said to be capacitive
'^Â° In â 
InÂ­
s 
e
dimensions of A (Bronstein LN., et al. 2001). A similar result was obtained by Georges Louis Bouligand (1889 - 1979).
Â§ Hausdorff dimension is based on measure theory and defined on the ground of Lebesgue measure (Henri Lebesgue: 1875 - 1941). Let 
A Â£ |R3. It is required a cover of A by a finite number of spheres Br with radius ri < :: such that U-B,. 3 A. So, roughly, the volume of
A is defined as: â 
. Let now 
< s } be the set of all such finite covers of A and rp(A) =df inf{X-Â®',3 /n e }.
The external Lebesgue measure 2(A) =df lim t|e(A). If A is measurable then 2(A) = vol(A). Let now M be R" or in general: a
separable metric space (contains a countable and dense subset, e.g. the set of rational numbers Q is both countable and dense in BL in general, in a metric 
space (X, p), Y c X is a dense set if v V 3 ( p(x,y) < s)). Assume that A <= M. For any parameter d > 0 and 8 > 0, we can define 
xeX 5 â  0 yeY
tld.e(A) âelf inf{ f'Tiani Bp IA <z , diam If < s), where B, Â£ M are arbitrary having diam Bi =df sup p(x, y). The external 
i 
i 
xyeBj
* Known also as polyadic quantifiers: having several argument-places. As a precursor of generalised quantifiers it is reckoned Andrzej S. 
Mostowski (1957: 1913 - 1975): it was suggested that we might generalise the standard (predicative) notion of logical quantifier along two 
dimensions, syntactic and semantic (Sher G. 2015). A more formal treatment is given in the next chapter of this work: see Subsection 3.8.
t For convenience, instead of the original N, e and D, there are used n, s and d, respectively
* Let A be a compact set in the metric space (M, p) and NS(A) be the minimal number of sets having diameter i s, required for 
covering A. the upper and the lower capacitive dimensions of A are defined as follows:
Rules and inference to construct a set of common rules and appropriate reasoning model. 
model:
The notion of fractal dimension is of fundamental sense. This notion is used in definitions of the propositional 
connectives of fractal logic. The concept of fractal dimension involves unconventional views of scaling and 
dimension. Usually, these two terms are illustrated by using traditional notions of geometry. This is briefly 
presented below.
Let n, s and d be the number of sticks, the scaling factor and the dimension of a fractal, respectively. It can 
be observed that assuming d = 1, 2, 3 (a geometric line, quadrate and cube) and e.g. s = 1/3 = const, the number 
of sticks n increases along with increasing the number d: n = 3,9,27. In fact: n oc s'1 (' oc denotes: 'is 
proportional to')t And hence, the value of d can be found by rearranging this proportionality as follows: lgs(n) = 
- d. So. d = - 
. e.g. for n = 4 and s = 1/3 we can obtain:
lg(s)
_ lg(4) 
lg(l/3)
1.386294
" 1.098612
Â« 1.26186. â¡
In general, the concept of fractal dimension is more complicated, based on such notions as e.g. 
approximation, estimation, regression, etc. A more formal treatment is omitted here. Different types of fractal 
dimension are the following (The Free Encyclopaedia, The Wikimedia Foundation, Inc.)', box counting (or 
capacitive) dimension? (Hermann Minkowski: 1864 - 1909), information dimension (Alfred Renyi: 1921 - 
1970), correlation dimension, generalised or Renyi dimensions. Higuchi dimension, multifractal dimensions, 
uncertainty exponent. Hausdorff dimension? (Felix Hausdorff: 1868 - 1942), packing dimension (in some sense 
dual to Hausdorff), kssouad dimension, local connected dimension, etc.: left to the reader.

213
The true-value field of proposition is considered as a multi-dimension and super order space, based on [0,r]d 
(the radix or base space, re K. d - fractal dimension). Moreover, it is also used some (proposition or predication) 
accessorial characteristics '< a >'. Some operation models of the proposition connectives were also presented, 
such as: negation, conjunction, disjunction, implication, equivalence and also three new connectives, i.e. the 
average, combinatorial and series ones: see below (Chen Z-H. et al. 2010).
Connective
Denotation
Operation model
negation: Not
~k
N(x,k) =df D(r - D"1 (x))
conjunction: And
Ah
A(x,y,h) =df P(D((D~ '(\)nl + D^ty)"1- r)I/m))
disjunction: Or
Vh
O(x,y,h) =df P(D(r - ((r - D-'tx))111 + (r - D~ '(y))111 - r)I/m))
implication: I
=>h
I(x,y,h) =df P(D((r - D^x)1" + D~ 1(y)m)1/m))
equivalence: E
â ti-b
E(x,y,h) =df zte{D((r + ^"'(x)"1 - I) '(y)"' I)l/m) / m <, 0 ; 
D((r - iD-kx)"1 - D~ '(yT11 l)1/m)}
average: V
Â®h
V(x,y,h) =df D(r - (((r - D^x))1" + (r - D" '(y))m) /2 )' '")
combinatorial: C
Ce(x,y,h) =df zfe{P(D((D- '(x)"1 + D-'ty)"1 - em)1/m)) / D-'lx) + D" >(y) 
Â£ 2e ; D(r - (P~e((r - D-'tx))111 + (r - D-1(y))m - (r - e)m)1/m)) / 
D-'(x) + D-'(y) > 2eJ
series: R
Â®h
R(x,y,h) =df D(r - (((r - D" '(x))â¢ + (r - D" >(y)D) 1/mn )
Hausdorjf dimension wrt A and (the dimension) d is defined as: r|d(A) âdf lim 
â sup Tld.s(A) . And hence, Hausdorjf dimension
s->0 
ff>o
dH(A) is an univocal critical value of Hausdorff measure defined as follows: dH(A) -df if 
( r)d( A) * 0 ) then '+ oo ' else inf{d 0
d>0
/ r|d(A) = 0} (Bronstein I.N.. et al. 2001).
For convenience, proposition letters are here denoted by x, y, ..., as in other logic systems, e.g. modalp-calculus.
According to the above table: D(x) calculates the dimension of fractal object 'x', D '(x) constructs the 
fractal object with dimension x' (D(x) and I ) *(x)  denote two reverse operating processes, but not the converse 
mathematical operators). By h and k are denoted the general correlative and self-correlative coefficients (Huacan 
H. 2001), m =df ^'4^ and n denotes the dispersion of series. It is assumed that any argument x of Tr(x) is 
restricted in [0,r] (i.e. if x > r then x =df r / if x < 0 then x =df 0). The used abbreviation "zte" denotes: if... then 
...else.e.g. s = zte[b/a;c} denotes: 'if a is true, then s = b, else s = c*.
The above introductory notions are only an illustration of this excellent work. However, in general, the 
introduction of inference rules and proof methods (axiomatic system proof I assumptional system style) seems to be 
more difficult and at the same time the most important task in this logic (e g. if De Morgan's law ~k(x ah y) <=>b 
~kx vh ~ky ' is satisfied: left to the reader). And so, much remains to be done.
In this chapter were considered classical and also various non-standard logic systems. However, all these 
systems are not sufficient for describing all theoretical as well as practical computer science oriented research. In 
particular, it is required a 'knowledge base' concerning also such notions as: predicates, sets, algebraic systems, 
morphisms, graphs, and so on. Predicates are presented in the next chapter.

214
II. Predicates
Use of predicates in mathematics (mathematical analysis or discrete mathematics) and theoretical computer 
science is of fundamental sense. In particular, we have a possibility of an exact / strict description as well as study 
of various definitions, processes, models, etc. Example notions involving predicates may be the following: limit 
of a sequence (Cauchy's e-definition), continuous function (Weierstrass' definition), continuous t-norm, metrical 
spaces, magic graphs, bounded, live and reversible Petri nets, Petri net k-distinguishability and D-partition, 
algebraic systems and direct products of such systems, test generation for logic circuits, D-algebra and so on.
The first-order predicate calculus is initially presented below (Slupecki J. and Borkowski L. 1967). Some 
well-known basic notions related to the classical predicate logic are first introduced. As an illustration, by using 
such formulae, some example mathematical and/or computer science definitions are also described and a set of 
primitive mles is then presented. Next, a carefully selected subset of theses is proved. The corresponding formal 
proofs are based on assumptions. The notion of the existential uniqueness quantifier is next presented and some 
properties are also given. The Gentzen's sequent calculus is also illustrated. As in the previous chapter, the 
corresponding mles are proved. Some new proofs and/or theses, mainly concerning bounded (or equivalently: 
restricted) quantifiers, are also given. In the next considerations the skolemisation, resolution and interpretation 
techniques are discussed (Chang C.-L. and Lee R.C.-T. 1973). The resolution technique is considered as a 
construction of ramified indirect proofs with joined additional assumptions and natural numbers are used in the 
formula interpretation rules. Next, the higher order predicate logic is briefly considered. Basic notions related to 
the genralised quantifier theory are also presented, mainly under (Pogonowski J. and Smigerska J. 2008). Some 
non-classical systems, such as fuzzy, modal and temporal predicate calculus are considered in the second section 
of this chapter.
3. Classical first-order and higher order predicate logics
Predicate calculus known also as predicate logic, quantifier calculus or quantifier logic is an extension of 
propositional calculus. Expressions of predicate calculus may include additional symbols as well as additional 
primitive rales, theses and derived rales.
Modem quantifiers were first introduced by Frege G. (1879)
*.
 The quantifiers 'AH' and 'Some' were already 
recognised as logical operators by Frege's predecessors, going all the way back to Aristoteles (384 b.c. - 322 
b.c.). e.g. Aristoteles' syllogisms, operators like 'and' and 'or': the ancient Stoic philosophers, in the middle 
ages (much effort to the semantics statements, essentially restricted to syllogistic form): William of Ocham (1285 - 1349: 
Summa Logicae 1320), Albert of Saxony (1320 - 1390: Perutilis Logica Magistri Alberti de Saxonia Logic, 
Venice 1522 and Hildesheim 1974, reproduction). Quantifiers in beginning predicate logic were studied mainly 
by Peirce. Peano and Russell/, see: (Sher G. 2015, Peters S. and Westerstahl D. 2002).
' Friedrich Ludwig Gottlob Frege (1848 - 1925).
t Charles Sanders Peirce (1839 - 1914), Giuseppe Peano (1858 - 1932), Bertrand Arthur William Russell (1872 - 1970).
Ki'-F(x)
VF(x)
WrrF(x) 3F(x)
X
<=>df ~ V ~ F(x)
Figure 3.1 Frege's designations

215
A more simplified form of the above Frege's designations, used for quantifiers (universal and existential), was 
first given by Peirce (about 1885): nF<x) ailc^ vf(x) - respectively. Some other designations were also proposed.
X 
X
The most usable are these ones, given by Hilbert and also by Kuratowski*. The quantifier symbols, given by 
Hilbert, are shown in Figure 2.6 (on the right hands of the corresponding pictures: related to German words 'Ales' 
and 'Eine'. respectively). The following designations were proposed by Kuratowski: A F(x) and V F(x): are
' David Hilbert (1862 1943), Kazimierz Kuratowski (1896 - 1943).
iRudolf Carnap (1891 - 1970).
Provided there is no ambiguity, instead of'classical first-order predicate logic', for simplicity, there is used phrase 'predicate logic'.
based on Peirce interpretation / analogy concerning quantifiers, i.e. VF(x) ' F(xi> a F(x2) a ... and 3F(x) ' 
X 
X
F(xi) v F(X2) v ... ; in fact, the universe can be finite or not. but 'a' and 'v' are finite argument logical 
connectives (equivalence is obtained only if universe is finite). There was also proposed the use of 'All' and 'Exist', 
and so on (see p.9: Hie used designations). However, the most commonly-used seems to be Hilbert's designations. 
And so. these designations are used in this book.
3.1. Symbols and formulae
Any expression of predicate logic, in addition to propositional logic symbols, may also include:
(1) 
individual (known also: quantified) variables', x, y, z, xi, yi, zi, .... replaceable by names of 
individuals.
(2) 
variables representing (proposition generating) functors and having names as arguments, i.e. 
expressions generating propositions wrt some names. Any such functor is said to be (one- 
or-more, but finite argument) predicate. By A, B, C. Ai, Bi, Ci. ... we shall denote variables 
representing one argument predicates. The letters P. Q. R. S. Pi. Qi. Ri. Si. ... are 
reserved for more than one argument predicates and
(3) 
two constants: V.3, i.e. the universal and existential cpiantifiers. These two most 
common quantifiers mean: "for all" and "there exists", respectively.
As an example, a one argument predicate is the phrase "is even number' in the following proposition: "6 is 
even number". Similarly, a two argument predicate is the phrase "is greater than' in: " 6 is greater than 5" (i.e. 6 
> 5). In general, any one argument predicate express a property. A more than one argument predicate express 
some relation (Carnap R. 1954) .
The above presented symbols (1-3) together with the symbols of the propositional calculus exhaust all 
symbols considered in classical first-order predicate logic. The following inductive definition is generalisation of 
Definition 1.1, given in Subsection 1.1 (Slupecki J. and Borkowski L. 1967).
Definition 2.36 (expression of predicate logic)
(la) propositional variables are propositional expressions of predicate logic .
(lb) expressions obtained by variable representing n argument predicates and the successive 
sequence of n individual variables (n c 1), included in parentheses .
(2a) If q> and q/ are some expressions of predicate logic, then such expressions are also: 
~ (cp). (cp) a (q/). (cp) v (q/). (cp) =c (q/), and (cp) o (q/).

216
(2b) If cp is an expression of predicate logic, while a is an individual variable, then V(^) 
a
and 3(?>) are also such expressions and
(3) 
Every expression of predicate logic either is a propositional variable or molecular 
expression, i.e. an expression formed from rule (lb), or also formed from these basic 
expressions by a single or multiple application of rules (2a) and (2b).
Exa mple 2.31 (molecular expression)
Some example molecular (called also atomic) expressions are the following: A(x), B(y), C(xi), Q(xi, X2. ... . 
xn). R(x,y), etc. In the last case. R(x,y) is sometimes written as: xRy. In accordance with Carnap's 
interpretation, e.g. the molecular expression A(x) denotes that: A is a property of x. Similarly xRy denotes 
that: R is a binary relation between x and y. For convenience, instead xRy, it is also used the notion: xpy (x 
and y are in p). â¡
According to Definition 2.36(2b). if cp is a molecular expression the parentheses are omitted, e.g. instead of 
V(H(.v)). we have: V.4(x) .Similarly, we have: V3xRy , instead of: V(3xRy), etc. However, in a more 
X 
X 
X y 
X y
complicated expressions some additional parentheses may be useful.
The scope of a quantifier is the portion of the formula that is controlled or governed by the quantifier. As an 
example, the scope of ' E' in VV(xRy =y 3(xRz azRy)) is expression ' xRz a zRy'. the scope of ' V 'wrt y is 
X y 
z
' xRy => 3(xRz AzRy)' and the scope of' V 'wrt x is ' V(xRy =$ B(xRz a zRy))'. 
i. 
y 
z
A variable occurring in a quantifier and in a propositional function within the scope of the quantifier is said to 
be a bound variable. Some variable of cp not occurring under the quantifier is a free variable iff it is not bound. 
Here, a propositional (or sentential) function is an expression including free variables and from which we can 
obtain propositions after substituting all variables by constants. The notion of propositional function was 
introduced by Russell B. (in 1903, see: Russell B. 1938).
Exa mple 2.32 (bound and free variables, propositional function)
(1) 
The variable x is free in the expression: 3xRy . Consider the following expression:
VA(x) =>.4(x). Now. the variable x occurring on the left side of implication is bound, 
but x on the right side of this implication is free.
(2) 
Some example propositional functions having one. two or three free variables may be 
the following: "x is even number", "x is greater than y" and "x is the greatest 
common divisor of two integers y and z", e.g. ''6 is even number" (the proposition's 
logical value is true). "5 is even number" (the proposition's logical value is false), etc. 
The mathematical equations are well-known examples of propositional functions. The 
term "condition" is often used as a such function.
(3) 
Consider the following expression: V3xRy . By substituting "xRy" for the propositional 
function 'x = y + 1" we can obtain the proposition: V3(x = y + 1). â¡
It can be observed that propositional functions correspond to some expressions, but mathematical functions 
correspond to some relations.
In addition to the above presented two kinds of quantifiers, there exist also bounded quantifiers. These 
quantifiers are often used as an abbreviated description of various definitions and mathematical theorems. As an 
example. V I x I = x and 3 a â¢ x = a are abbreviations of the following two expressions: V ( x > 0 => 

217
I x I = x ) and 3 ( x 0 a a â¢ x = a ). In general, the following two bounded quantifiers can be 
introduced (Slupecki J. and Borkowski L. 1967): V q/(x) Odf V (cp(x) =a q/(x)) and 3 'p(x) <=>df 
3 (cp(x) a \|/(x)). The use of these two quantifiers is illustrated in the next example.
Example 2.33 (some mathematical / computer science definitions)
limit of a 
sequence
lim an = g Odf V 3 V 1 an - gl < s
nâ>OO 
s > 0 III n ) m
continuous
Junction
f(x) is continuous Odf V V V 3 (| x â y I < 8 => I f(x) - f(y) I < e )
Â£ > 0 X y A > 0
fault 
detecting test
V V ( x detects a 
3 ( fj(x) P f*  (x)))
xeUaeF 
j e K 
J
bounded, live 
and 
reversible 
PPI'net
The Petri net N is bounded iff 3 V V ( M(p) 3 n) 
Il p eP M 5 IM, )
The Petri net N is live iff V V 3 (t e T(M')) 
t eT Me [M,> M'tÂ£[M>
The Petri net N is reversible iff V ( Mo e [M))
Afâ¬ |Mâ)
In particular, boundedness, liveness and reversibility are the three most important and required properties in 
modelling of discrete event systems. These properties are independent of each other and generalised also for 
High-level Petri
*
 nets (see: High-level Petri Nets 2000, 2005). â¡
3.2. Primitive rules
The set of primitive rules in predicate logic consists of:
(1) 
All primitive rules, i.e. - C. Â± K, Â± A, and Â± E, of the classical propositional calculus, 
generalised for use in predicate logic. Now the symbols cp and ip. engaged in the 
above rule schemes, represent expressions of predicate logic. Similarly are interpreted 
<|>i. <|>2. .... <|>n occurring in the generalised form of an expression (given in Subsection 1.2). 
The process of joining new lines (by using some primitive or derived rules and/or other theses 
in accordance with the used assumptions) is extended to predicate logic.
(2) 
Rules of joining and omitting the universal and existential quantifiers: Â±V, Â±3.
In accordance with Â±V, Â±3. it is used a special symbol <p(x/^) denoting an expression formed from cp by 
substituting the individual variable x for the expression in all places where x is free. Moreover, if x is in 
the scope of a quantifier Q e {V,3} and y is a variable occurring in Q then Â£ should not depend on y. 
The quantifier rules are given below: we shall require in (2) that x is not free in the corresponding proof 
assumptions^.
(1) 
Rule of omitting an universal quantifier
(denoted below by '-V'):
' Carl Adam Petri (1926 - 2010).
1 Consider the following thesis: x>0=>x + y>y (x,y 6 R). Assume that: x > 0 . By using '+ A' we can obtain: ' x > 0 v x 
= O'. However, this is a contradiction with our assumption about x. And hence, the obtained expression: V (x > 0 v x = 0) should be
not correct (Slupecki J. and Borkowski L. 1967).

218
V^(x)
-V: -V7K
<P(xAO
(2) 
Rule of joining an universal quantifier 
(denoted below by '+V')
:*
* Known also as rule of generalisation', x should not be free in the corresponding proof assumptions, 
t Thoralf Skolem (1887 - 1963).
+V:
y^(x)
(3) 
Rule of joining an existential quantifier 
(denoted below by '+3'):
' 
3^(x)
X
(4) 
Rule of omitting an existential quantifier 
(denoted below by '-3'):
3(/>i.v)
-3 : 
v ' ----
Example 2.34 (the rule '-3')
Consider the expression 3P(x,y,z): "for any two different points x and z, there exists a point y that lies 
on the line defined by x and z\ By omitting this quantifier, we can obtain the expression: P(x,ax.z.z). And 
hence, the point ax,z is associated with x and z (Slupecki J. and Borkowski L. 1967). In fact, the use of 
Skolemian type functions"' is also possible (see Subsection 3.5).
Let now x, y and z be three points that are not collinear (i.e. they do not all lie on a single line). Give an 
example use of the rule '-3left to the reader. P
The bounded quantifier rules are presented below.
(5) 
Rule of omitting a bounded universal 
quantifier (denoted below by '-V '):
*
Vy(x) 
. 
____ 00________
(6) 
Rule of joining a bounded universal 
quantifier (denoted below by '+V '):
*
v.. ^(x) =t> y/(x)
V v(x)
(P(x)
(7) 
Rule of joining a bounded existential 
quantifier (denoted below by '+3 '):
*
+3*. 
y/(x/g)
3 v(x)
<P(X)

219
(8) 
Rule of omitting a bounded existential 
quantifier (denoted below by
3 (//(x)
â3 ; 
+1________
(fix/fi 
)
-/+P^.-.P ' 
1 2 n
^xl\pr...,p)
3.3. Theses and derived rules
Thesis 2.132
VA(x) =+ A(y)
Proof:
(1) VA(x) {a} 
X
A(y). â¡ 
{-V : 1}
Thesis 2.133
A(y) =?> 3A(x)
Proof:
(1) 
A(y) {a}
3A(x). â¡ 
{+3:1}
Corollary 2.10
(a) 
A(x) =+ 3A(x)
(b) 
~A(x) =+ 3~A(x).n {T2.133}
Thesis 2.134
VA(x) =+ 3A(x) . â¡ {+K, TC, - C: T 2.132, T 2.133}
An illustration of De Morgan's laws are the next two theses.
Thesis 2.135
~ VA(x) o 3 ~ A(x) 
X 
a
ProofT2.135a:
(1) 
~ VA(x) 
{a}
X
(2) 
~ 3 ~ A(x) 
{aip}
(3) 
A(x)
{Toll: Coroll. 2.10b, 2}

220
(4)
VA(x) 
{+V:3}
X
contr. .3 
{1.4}
Proofl2.135b:
(1)
3 ~ A(x) {a}
X
(2)
VA(x) 
{aip}
X
(3)
~A(a) 
{-3: 1}
(4)
A(a) 
{-V : 2}
contr. â¡ 
{3.4}
Thesis 2.136
~ 3A(x) o V ~ A(x)
X 
X
ProofT2.136a:
(1)
~ 3A(x) 
{a}
(2)
A(x) => 3A(x) {Coroll. 2.10a}
(3)
~A(x) 
{Toll: 2,1}
V~A(x). â¡ 
{+V : 3}
X
Another possible (but indirect) proof of the last if-implication may be the following.
(1)
~ 3A(x) 
{a}
(2)
~ V ~ A(x) 
{aip}
(3)
3A(x) 
{T 2.135. SR-N}
X
contr. â¡ 
{1-3}
ProofT2.136b:
(1)
V ~ A(x) 
{a}
X
(2)
3A(x) 
{aip}
(3)
A(a) 
{-3 : 2}
(4)
~A(x) 
{-V : 1}
contr. â¡ 
{3,4}
According to T 2.135 and T 2.136, the following rules of negating an universal quantifier (NV) and 
negating an existential quantifier (N3) are obtained:

221
~V^(x) 
~3^(x)
NV; â- and N3; w 1 r A.
3 ~ <p(x) 
V ~ qfx)
De Morgan's laws for bounded quantifiers are introduced as follows.
~ V y(x) 
p(x)
~ V (cp(x) =a \|/(x))
X
3 (cp(x) A ~ \|/(x))
3 ~\|/(x)
[df. V*}
[NV. NC. SR}
[df. 3*}
In a similar way we can obtain.
~ 3v(x)
~3 (cp(x) A \|/(x))
V (~ cp(x) V ~ \|/(x)) 
X
V (cp(x) =A ~ \|/(x))
X
V ~ M/(x) . â¡
?>(A
[df. 3*}
[N3. NK. SR}
[CR. SR}
[df. V*}
The following rules of negating a bounded universal quantifier (NV
*)
 and negating a bounded existential 
quantifier (N3
*)
 are obtained:
~ V y/(x) 
~ a ^(x)
NV
*:
 
------- and N3
*:
 
.
3 ~y/(x) 
X/ ~'P(x)
<p(x) 
<p(x)
An illustration of the last two rules is the proof of the next thesis. We shall first present the direct version of 
this proof, given in (Slupecki J. and Borkowski L. 1967).
Thesis 2.137
3 V RCx^y) =a V 3 R(x.y)
Al Ai-I 
S(.>>M(xl
Proof
(1)
3 V R(x.y)
Al Bt 11
{a}
(2)
A(a)
(3)
V R(a.y)
B(r)
[-3
*:
 1}
(4)
B(y) =a R(a.y)
[-V
*:
 3}
(1.1)
B(y)
{ada}
(1.2)
R(a.y)
[-C : 4. 1.1}
(1.3)
3 R(x.y) 
d(z)
[+3
*:
 2.1.2}
(5)
B(y) =} 3 R(x.y) 
d(z)
[+C : 1.1 =a 1.3}

222
V 3 R(x,y). â¡
S( r I .4(s>
{+V
*:
 5}
Proofl '2.137(indirect version):
(1)
3 V R(x.y)
{a}
(2)
~ v 3 R(x.y)
S( 1 > 4(X|
{aip}
(3)
3 V ~ R(x,y)
S(yl AIM
{NV
*,
 N3
*:
 2}
(4)
A(a)
(5)
V R(a.y)
S(r)
{-3
*:
 1}
(6)
B(b)
(7)
V ~ R(x,b)
{-3
*:
 3}
(8)
B(b) =a R(a.b)
{-V
*:
 5}
(9)
A(a) =a ~R(a.b)
{-V
*:
 7}
(10)
R(a,b)
{- C : 6.8}
(H)
~R(a.b)
{- C : 4.9}
contr. â¡
[10.11}
A particular case of the last T 2.137 is the following thesis (the proof is left to the reader).
3 V R(x,y) =a V 3 R(x.y).
Several theses (mainly for unbounded quantifiers) are cited below (Slupecki J. and Borkowski L. 1967). The 
corresponding proofs are left to the reader (here: Q e {V, 3}, Q' is a "complement' of Q, e.g. if Q =df V then 
Q' =df 3, and â¢ e {a,v}: Q and â¢ are interpreted in the same manner in a given predicate formula) .
' In particular, the following formulae: 
V (A(x) a B(x)) <=> V A(x) a V B(x), 
V A(x) v 
V B(x) => V (A(x) v B(x)) ,
X 
X 
X 
X 
X X
3 ( A(x) v B(x)) <=> 3 A(x) v 3 B(x) 
and 3 (A(x) a B(x)) => 3 A(x) a 3 B(x) are satisfied using bounded quantifiers, e.g. the
proof of the following thesis: V B(x) v , C(x) => 
(B(x) v C(x)), is given below.
(1)
v B(X) v
A(x) V 7
V C(x)
AM V 7
{a>
(2)
~ 
, (B(x) >/ C(x))
{aip)
(3)
3 B(x) ,x ~C(x))
{NV
*,
 NA, SR: 2}
A(x)
(4)
A(a)
(5)
~B(a)
{-3
*.-K:3)
(6)
~ C(a)
(1.1)
V B(x)
{ada)
(1.2)
A(a) =$ B(a)
{-V
*
 : 1.1)
(1.3)
B(a)
{-C: 4. 1.2)
contr.
{5.1.3)

223
V (A(x) a B(x)) o V A(x) a V B(x) 
3(A(x) v B(x)) o 3A(x) v 3B(x)
V A(x) v V B(x) =a V (A(x) v B(x)) 
X 
X 
X
3(A(x) a B(x)) =a 3A(x) a 3B(x)
V(A(x) B(x)) (QA(x) QB(x))
Q (P => A(x)) o p =a Q A(x)
Q (A(x) =s> p) o Q ' A(x) =a p
Q A(x) . Q B(x) O Q Q (A(x) . B(y)) 
3 A(x) a V B(x) =a 3 (A(x) a B(x))
Q (p . A(x)) o p . Q A(x)
V (A(x) => p) o 3 A(x) =a p
B(a) 
SEI
3 (p a A(x)) Â« p a 3 A(x)
The following theses are also satisfied. The proof of the first one is given below (the rest proofs are left to the 
reader).
3A(x) a V B(x) o 3 V (A(x) a B(y))
V B(x) a 3A(x) o V a (B(x) a A(y)) 
x 
x. 
x y
V A(x) V 3B(x) o V a (A(x) v B(y)) 
x 
x. 
x y
3B(x) v V A(x) o 3 V (B(x) v A(y))
The proof of the first thesis (if-implication)'.
3A(x)
VB(x)
~3 V (A(x) a B(y))
{aip}
(2.2)
(2.3)
A(a) C(a)
C(a)
contr. â¡
{-V : 2.1} 
{- C : 4. 2.2) 
{6.2.3}

224
(4)
V 3 (~A(x) v ~ B(y))
x y
[Nd. NV. NK. SR: 3}
(5)
A(a)
{-3 : 1}
(6)
3 (~A(a) v ~ B(y))
[-V : 4}
(7)
~ A(a) v ~ B(b)
{-3 : 6}
(8)
~ B(b)
{-A: 5,7}
(9)
B(b)
[-V : 2}
contr. 9
{8.9}
The proof of the first thesis (pnly-if-implicatiori):
(1)
3 y (A(x) a B(y))
{a}
(2)
~(3A(x) a V B(x))
X 
X
{aip}
(3)
V ~ A(x) v 3 ~ B(x)
[N3.NK, NV. SR : 2}
(4)
V (A(a) a B(y))
[-3 : 1}
(1.1)
V ~ A(x)
{ada}
(1.2)
A(a)
{ Q (p â¢ A(xÂ» = p â¢ c A(x). - K : 4}
(1.3)
~A(a)
{-V: 1.1}
contr.
(2.1)
3~B(x)
{ada}
(2.2)
~B(b)
{-3 :2.1}
(2.3)
B(b)
{-V,-K:4}
contr. e
[2.2,2.3}
3.4. 
The existential uniqueness quantifier
In addition to the propositional logic constants and quantifiers, it can be also introduced the symbol '=' 
known as identity or equality (used in most mathematical expressions). Moreover, only there is added the following 
axiom.
Al: x = x
It is also used the primitive rule El (extensionality for identity), given as follows
*.
' El is very similar to the derived rule of extensionality ER , given in Subsection 1.3.

225
x = y
<p(y //x)
According to Al, (interpreted as a binary relation) identity is reflexive. It can be shown that identity is also 
symmetric and transitive (Slupecki J. and Borkowski L. 1967). The addition of Al and El to predicate logic as 
well as the generalization of the corresponding rules wrt propositional expressions including identity is an 
extension of predicate logic called (classical first-order) predicate logic with identity. This logic allows to 
introduce the following definition (here '3 !<p(x)' denotes: "there exists exactly one x such that <p(xf).
Definition 2.37 (existential uniqueness quantifier)
3! cp(x) Odf 3 cp(x) a V V ( x = y ). 
I 
I 
cpM
Thesis 2.138
V V R(x.y) o V (cp(x) =a V (cp(y) =a R(x.y))). â¡ 
?(Â«) ?>(r) 
X 
y
Thesis 2.139
V (cp(x) -> y (cp(y) =?> R(x,y))) o V y (<p(x) a cp(y) =?> R(x.y)). â¡
Thesis 2.140
V V (cp(x) a cp(y) =a R(x.y)) o V V R(x.y). â¡ 
.1- y 
?>(.>')
In accordance with the above three theses, the corresponding three formulae are logically equivalent: the 
proofs are left to the reader (it is sufficient to prove cyclic only 3 of the whole 6 implications). Obviously, the 
considered properties can be generalised for any two or more (but finite argument) predicate. It can be observed 
that T 2.139 is very similar to the laws of exportation and importation (see: T 1.12, Subsection 1.3). And so. the 
above Definition 2.37 can be presented as follows.
Definition 2.38 (existential uniqueness quantifier)
3! <p(x) Odf 3 cp(x) a V V (cp(x) a cp(y) =a x = y). 
X 
X 
x y
Predicate logic with identity allows use of descriptors
*.
 Any such descriptor can be considered as an 
individual expression of the form: t<p(x), where ' t' is descriptor's operator, x is a free individual variable and
* Similar notion is used in computer data processing', use of descriptors from thesaurus.
<p(.\) - a propositional function, i.e. the scope of ' t' in this expression. For example. ' iA(x)' denotes: "one and 
only one x such that A(xj".
The following rule of joining a descriptor's operator (or omitting an existential uniqueness quantifier, denoted by: 
3!') can be introduced.
3!^(x)
-3! : 
âx----------
<p(x/i<p(x))
We shall use Definition 2.38, the above presented descriptor and rule 3!' in the proof of the next thesis.

226
Thesis 2.140 (Slupecki J. and Borkowski L. 1967).
3 ! <p(x) o 3 V ( x = y) 
I 
<p(a) <p(r)
ProofT2.140a:
(1)
3! cp(x) 
X
{a}
(2)
~ 3 V ( x = y) 
?><Â» ?>(r)
{aip}
(3)
V 3 ( x * y)
â A A <A(v)
{NT. NV
*.
 SR : 2}
*
(4)
^(x/z^(x))
{-3! : 1}
(5)
<p(x/t<p(x)) =?> 3 (i<p(x) * y)
X 
X
{-V
*
: 3}
(6)
3 (zp(x) y )
?>(>') -I
{-C : 4,5}
(7)
cp(a)
(8)
i<p(x) a
{-3
*:
6}
contr. â¡
{7.8}
â  X * y Â«df ~ (X = y).
ProofT2.140b:
(1)
3 V ( x = y)
â A A ?>(r)
{a}
(2)
~ 3! q>(x) 
X
{aip}
(3)
~ (3 cp(x) a V V (cp(x) a <p(y) =?> x = y)) 
x 
X y
{Df.2.38, SR: 2}
(4)
cp(a)
(5)
V ( a = y)
{-3
*:
1}
?>(>')
(6)
V ~ cp(x) v 3 3 (cp(x) a cp(y) a x y) 
X 
'I: y
{N3.NK.NV. NC. SR: 3}
(1.1)
V ~ cp(x)
{ada}
(1.2)
~cp(a)
{-V: 1.1}
contr.
{4.1.2}
(2.1)
3 3 (cp(x) a cp(y) a x y) 
x y
{ada}
(2.2)
cp(b)
(2.3)
cp(c)
{-3:2.1}
(2.4)
b c

227
(2.5)
<p(b) => a = b
{-V
*
: 5}
(2.6)
<p(c) => a = c
{-V
*
: 5}
(2.7)
a = b
{-C : 2.2, 2.5}
(2.8)
a = c
{-C: 2.3, 2.6}
(2.9)
b = c
{prop, of 2.7, 2.8}
contr. â¡
{2.4, 2.9}
In general, there exist three kinds of existential quantifiers: 3 ("there exists at least one", corresponding to: 
3>i ), 3! ("there exists exactly one", corresponding to: 3=i ) and 3<i ("there exists at most one"). The last 
quantifier is denoted below by: ' aand defined as follows (Megill N.D. 2005).
Definition 2.39 (existential uniqueness quantifier)
3.<p(x) Odf 3 cp(x) =a 3! cp(x) 
X 
XX
In particular, several other definitions were also presented (Megill N.D. 2005)., e.g. 3.q>(x) Odf 3 V (cp(x) 
X 
y X
=> x = y). It is shown below that these two definitions are logically equivalent.
Thesis 2.141
3 <p(x) =a 3! <p(x) o 3 V (cp(x) => x = y) 
x 
x 
y x
ProofT2.141a:
(1)
3 <p(x) =a 3 ! <p(x) 
X 
X
{a}
(2)
~ 3 V (cp(x) =?> x = y)
{aip}
(3)
V 3(cp(x) a x y) 
y x
{N3, NV, NC, SR : 2}
(4)
~ 3 cp(x) v 3! cp(x) 
X 
X
{CR: 1}
(1.1)
~ 3 cp(x) 
X
{ada}
(1.2)
3(cp(x) a x * a)
X
{-V : 3}
(1.3)
cp(b)
{-3,-K: 1.2}
(1.4)
V ~ cp(x)
{N3 : 1.1}
(1.5)
~cp(b)
{-V : 1.4}
contr.
{1.3,1.5}
(2.1)
3! cp(x) 
X
{ada}
(2.2)
3 cp(x) a V V (<p(x) a cp(y) =A X = y) 
X 
x y
{Df.2.38 : 2.1}
(2.3)
3 cp(x)
(2.4)
X
V V (cp(x) a cp(y) =A X = y)
{-K : 2.2}
(2.5)
cp(c)
{-3:2.3}
(2.6)
cp(d)
{-V, -3,-K: 3}
(2.7)
d c

228
(2.8)
<p(c) a cp(d)
[+K:2.5.2.6}
(2.9)
<p(c) A cp(d) =A c = d 
{-V : 2.4}
(2.10)
c = d
{-C : 2.8.2.9}
(2.11) d = c 
contr. i
ProofT2.141b:
(1) 
3 V (cp(x) => x = y)
{prop, of 2.10} 
[2.7.2.11]
(2)
3 cp(x)
{a}
(3)
~ 3! cp(x)
{aip}
(4)
~ (3 cp(x) a V V (cp(x) 
x 
X y
a cp(y) =a x = y)) 
[Df.2.38, SR : 3}
(5)
V ~ cp(x) v 3 3 (cp(x) 
x 
x y
a cp(y) a x y) 
{NE. NK. NV. NC. SR : 4}
(1.1)
V ~ cp(x)
X
{ada}
(1.2)
cp(a)
{-3 : 2}
(1.3)
~cp(a) 
contr.
{-V: 1.1} 
[12.1.3}
(2.1)
(2.2)
3 3 (cp(x) a cp(y) a x
cp(b)
* y) 
{ada}
(2.3)
(2.4)
cp(c) 
b * c
{-3:2.1}
(2.5)
V (cp(x) => x = d)
X
{-3 : 1}
(2.6)
cp(b) => b = d
{-V : 2.5}
(2.7)
cp(c) => c = d
{-V : 2.5}
(2.8)
b = d
{-C : 2.2,2.6}
(2.9)
c = d
{-C : 2.3,2.7}
(2.10)
b = c
contr. â¡
{prop. of '=': 2.8,2.9}
[2.4.2.10}
3.5. 
Sequent calculus
The sequent calculus and (first order) predicate logic can be considered as two equivalent approaches in proof 
theory. In fact, any formula cp is deducible in the predicate logic iff Iâ cp is deducible in the sequent calculus. 
The fundamental theorem of Gentzen (or the normalisation theorem) is fundamental in the proof of this assertion.

229
The following theorem was given: If T Iâ A,Â© and Â©,T I- A are deducible in the sequent calculus, then so is 
T I- A. The obtained derivation rule, called cut rule (or cut-elimination rule, in short: 'CER') is presented as 
follows:
CER.. IA-(7 lâA 
' E|-A '
The proof of this rule is given below.
Proof:
(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
T =a A v Â© 
Â© a T =a A
T
~ A
~ Â© v ~ T
~Â©
A v Â©
Â©
contr. â¡
{a}
{aip}
{Toll: 2.4}
{-A: 3.5}
{-C: 1.3}
{-A: 4.7} 
{6.8}
The normalisation theorem asserts that the cut rule is admissible in the sequent calculus, i.e. does not change 
the collection of deducible sequents. In view of this. Gentzen's theorem is also called the cut-elimination 
theorem (Encyclopedia of Mathematics 2002).
The following four derivation rules (concerning quantifiers) are used: here, the variable 'b' occurring in '+VC' 
and '+3.,' rules is called the eigenvariable*. This variable should not occur as free in the lower sequents of the 
respective rules. In fact.'b' may be arbitrary, if A(x) do not contain x. And then, A(b) is equivalent to A(x) 
(Glushkov V.M. 1964).
A (t). T I- Â©
+ Va:
V A(x), THÂ©
A (b). T I- Â©
+ 3a:
3 A(x). THÂ© 
X
THÂ©, A(b)
+ Vc: -------------------------
T H Â©, V A(x)
THÂ©, A(t)
+ 3C: 
--------------------------
T H Â©, 3 A(x) 
X
As an example, the proof of '+3a' rule is given below. The remaining proofs are left to the reader.
Proof' +3a':
I he usual formalisation of first-order logic needs to distinguish between letters that stand for things that can be substituted by any term 
and letters that are taken to be particular terms.

230
contr. â¡
(1)
A(b) a T =a Â©
(2)
3 A(x)
{a}
(3)
r
(4)
~Â©
{aip}
(5)
~ A(b) v ~ r
{Toll, NK, SR : 1,4}
(6)
~A(b)
{-A: 3,5}
(7)
A(a)
{-3 : 2}
(8)
V ~ A(x)
X
{+V : 6 / A(b) =df A(x) }
(9)
~A(a)
{-V : 8}
{7.9}
The use of the above four derivation rules is shown in the next two examples.
Example 2.35^ A(x) =>
(1)
A(x) 1- A(x)
{Id}
(2)
A(x) H 3 A(x) 
X
{+3C:1}
(3)
V A(x) I- 3 A(x). â¡ 
X 
X
{+Va: 2}
Example 2.36(3 V R(x,y) => V 3 Rfxv))
*
 
x y 
y x
(1)
R(x,y) H R(x,y)
{Id}
(2)
VR(x,y) FR(x,y)
{+Va: 1}
(3)
V R(x,y) H3R(x,y) 
y 
x
{+3C: 2}
(4)
3V R(x.y) 1-3 R(x,y) 
x y 
x
{+3a:3}
(5)
3 V R(x,y) 1- V 3 R(x,y). â <?
{+VC: 4}
* T7;e Free Encyclopaedia. The Wikimedia Foundation. Inc. 3 V R(x,y) =â  V 3 R(x,y) coincides with this one, considered in this 
Encyclopaedia, if we assume that: p(x,y) <=>df ~ R(x,y), after using rule 'CC': left to the reader.
In particular, according to the last example, it can be observed that any transition between two adjacent lines 
is a thesis, e.g. 1= (3) =a (4): the proof is given below.
(1)
V R(x,y) â>3 R(x,y)
{a}
(2)
3 V R(x,y)
(3)
~ 3 R(x,y)
{aip}
(4)
~ V R(x,y) 
y
{Toll: 1,3}

231
(10) R(b.a) 
{-V: 8}
(5)
3 ~ R(x.y)
{NV :4}
(6)
~ R(x.a)
{-3 : 5}
(7)
V ~ R(x,a)
{+V :6}
(8)
V R(b.y)
{-3 : 2}
(9)
~ R(b.a)
{-V : 7}
contr. â¡
{9.10}
Gentzen's system was used by Hao Wang (1921 - 1995) in automated theorem proving. Using generalised 
procedures, there were proved (on an IBM-704) 350 theorems, within 8.5 minutes, concerning the first nine 
chapters of Principia mathematica (Whitehead A. N.* and Russell B. 1913). Since predicate logic is undecidable 
in general (Kurt Gbdel 1906 - 1978) , it is clear that a procedure for decidability for an arbitrary (well-defined) 
predicate logic formula does not exist.
Alfred North Whitehead (1861 - 1947): Russell was a former student of Whitehead.
t Tire term "prenexF comes from the Latin "praenexus" (tied or bound up in front). Tire quantifier rank of a formula is the depth of 
nesting of its quantifiers. This rank, denoted by qr(cp), is defined as follows: (1) qr(cp) = 0, if cp is atomic, (2) qr(cpiA cp2l) = qr(cp2 v cp2) 
= max{qr(cpi). qr(cp2)J. (3) qr(~cp) = qr(cp) and (4) qr(3 cp) = qr(cp) + 1. For example: qr(A(x) v R(x,y)) = 0. qr(A(x) aV R(x,u))
- 1, qr(cp) for the initial form of cp of Example 2.37 equals to 2, but in the obtained prenex form this rank is 4, etc., see: T/ie Free 
encyclopaedia. The Wikimedia Foundation. Inc.
3.6. Skolemisation, resolution and interpretation
Let cp be a formula of (first-order) predicate logic. We shall say that cp is represented in a prenex normal 
form if it is written as a string of quantifiers and bound variables, called prefix, followed by a quantifier-free part, 
called the matrix. Assume that the matrix of cp is represented by 'p. More formally, the following prenex normal 
form can be obtained: cp <=>df Q1Q2 â¢â¢â¢Qn q/(xi. x2. ... . xn). where Qi e {V, 3} (for I = 1. 2, ... ,n). The 
Xj x, xn
quantifier rank of this form cp, denoted by qr(cp) = nt
The next two examples are an illustration of this form.
Example 2.37(3 V R(x,y) V 3 R(x,y): prenex normal form) 
x y 
y x
3 V R(x.y) =7> V 3 R(x.y) ~ 3 V R(x.y) v V 3 R(x.y)
o 
V 3 ~ R(x,y) v V 3 R(x,y)
o 
V 3 ~R(x.y) v V 3 R(t.z)
x y 
Z 'â 
Â« 
V V 3 3 (~R(x,y) 
v R(t.z))
X 
Z y t
o 
V V 3 3 
(R(x.y) =7> R(t.z)). â¡
X 
Z y t
{CR}
{N3. NV, SR}
{the right side of disjunction: y "U /. x =df t}
{quantifier theses: Subsection 3.3}
{CR}
The considered formula is a thesis. And hence, the obtained prenex normal form is also a thesis. The proof of 
this form is given as follows.

232
(5) 
~ R(a.b)
(1)
~ V V 3 3 (R(x.y) 
x z y t
R(t.z))
(2)
3 3 V V (R(x.y) a 
x z y t
~ R(t.z))
(3)
V V (R(a,y) a â R(t.b))
(4)
R(a.b)
contr. â¡
{aip}
{NV. NS.NC. SR: 1}
{-3 : 2}
(-V, -K:3}
{4.5}
Example 2.38 (\f (A(x) v B(x)) A(x) v V B(x): prenex normal form)
V (A(x) v B(x)) =i> V A(x) v V B(x)
o ~ V (A(x) v B(x)) v V A(x) v V B(x)
Â» 3 (~ A(x) a ~B(x)) vV V (A(x) v B(y))'
{CR}
3 V V ( ~ A(x) a ~ B(x) v A(y) v B(z)). 
X y z
In accordance with the last example, the considered formula and also the obtained prenex form are not 
theses. However, a thesis is the following logical equivalence. The corresponding proofs of if- and only-if- 
implications are illustrated below.
V (A(x) v B(x)) =a V A(x) v V B(x) o 3 V V ( ~ A(x) a ~ B(x) v A(y) v B(z))
X 
XX 
X y Z
Proof (if-implication):
* quantifier theses: Subsection 3.3
(1)
V (A(x) v B(x)) =a V A(x) v V B(x) 
{a}
(2)
~3V V ( ~ A(x) a ~B(x) v A(y) v B(z)) 
{aip}
X y z
(3)
\f 3 3 ((A(x) v B(x)) a ~ A(y) a ~ B(z)) 
[N3. NV. NA. - N. SR : 2}
x y z
(4)
V ((A(x) v B(x)) a ~ A(f(x)) a ~ B(g(x))) 
{-3. SR : 3}t
(5)
V ((A(x) v B(x)) a V~A(f(x)) a V~B(g(x)) {V-thesis: 4}
(6)
V ((A(x) v B(x))
(7)
V~A(f(x)) 
{-K:5}
(8)
V~B(g(x))
(9)
V A(x) v V B(x) 
{- C : 1.6}
(1.1)
V A(x) 
{ada}
(1.2)
~ A(f(a)) 
{-V : 7}
t The rule of omitting an existential quantifier, given (Slupecki J. and Borkowski L. 1967) can be represented in a more convenient way 
by using Skolem functions (Albert Thoralf Skolem 1887 - 1963). As an example, consider a line L defined by two different points x and y. 
for any such x and y, there exists a point z in L such that z is between x and y, in short: L(x,y,z). So, by omitting the existential 
quantifier in the expression zl.(x.v.z) we can obtain: [.(x.v.a,,). where a,, is determined by x and y (Slupecki J. and Borkowski L. 1967). 
z
Here, the indexes x and y in a, correspond to Pi and p2. Since x and y may be arbitrary, then a = a(x,y) or more formally a = f(x,y), 
i.e. a,, can be interpreted as some Skolem function f(x,y). Hence, by omitting this quantifier we can obtain: L(x,y,f(x,y)).

233
Proof (only-if-implication):
(1.3)
A(f(a))
{-V: 1.1}
contr.
{1.2.1.3}
(2.1)
VB(x)
{ada}
(2.2)
~B(g(b))
{-V : 8}
(2.3)
B(g(b))
{-V:2.1}
contr. 6
[2.2,2.3}
{12.14}
(1)
3 V V ( ~ A(x) a ~ B(x) 
x y z
v A(y) v B(z))
{a}
(2)
~ (V (A(x) v B(x)) =?> V A(x) v V B(x))
{aip}
(3)
V (A(x) v B(x))
(4)
3 ~A(x)
I
{NC. NV. NA. - K. SR : 2}
(5)
3 ~B(x)
I
(6)
V V (~ A(a) A ~ B(a) v
y z
' A(y) \/ B(z))
{-3 : 1}
(7)
~ A(a) a ~ B(a) v V V
y z
(A(y) \/ B(z))
{V-thesis: 6}
(8)
~ (A(a) v B(a)) v V V
y z
(A(y) 'y B(z))
{NA. SR: 7}
(9)
A(a) v B(a)
{-V : 3}
(10)
V V (A(y) v B(z)) 
y z
{-A: 8.9}
(ID
~A(b)
(12)
~ Bf"
{-3 : 4,5}
(13)
A(b) v B(c)
{-V: 10}
(14)
Bl
{-A: 11.13}
contr. d
Let consider the following formula: V A(x) v 3 B(x). The obtained prenex normal form is as follows:
V 3 (A(x) v B(y)). Since disjunction is commutative, we have: V A(x) v 3 B(x) o 3 B(x) v V A(x). The
following prenex form of the right side of this equivalence can be obtained: 3 V (B(x) v A(y)). And so. the 
last two prenex normal forms are also logically equivalent, i.e: 1= V 3 (A(x) v B(y)) o 3 V (B(x) v A(y)).
The proof is given below.
Proof (if-implication):
(1) V 3 (A(x) v B(y))
{a}

234
In a similar way. we have:
(2)
~ 3 V (B(x) v A(y))
{aip}
(3)
V 3 (~B(x) a ~A(y))
{N3. NV. NA. SR : 2}
(4)
V (A(x) v B(f(x)))
[-3 : 1}
(5)
V (~B(x) a ~A(g(x)))
[-3 : 3}
(6)
V ~B(x)
{V-thesis, â K. : 5}
(7)
V ~A(g(x))
(8)
A(g(a)) v B(f(g(a)))
[-V. x-dfg(a): 4}
(9)
~ A(g(a))
[-V : 7}
(10)
B(f(g(a)))
{-A: 8,9}
(ID
~B(f(g(a)))
[-V. x=dl f(g(a)): 6}
contr.
{10.11}
Proof (only-if-implication):
(1)
3 V (B(x) v A(y)).
{a}
(2)
~ V 3 (A(x) v B(y))
{aip}
(3)
3 V(~A(x) a ~B(y))
{NV. N3. NA. SR : 2}
(4)
V (B(a) v A(y))
{-3 : 1}
(5)
B(a) v V A(y)
{V-thesis: 4}
(6)
y(~A(b) a ~B(y))
{-3 : 3}
(7)
~A(b) a V~B(y)
{V-thesis: 6}
(8)
~A(b)
(9)
y~B(y)
{-K:7}
(10)
~B(a)
{-V : 9}
(ID
V A(y)
{-A: 5.10}
(12)
A(b)
{-V: 11}
contr. â¡
{8.12}
V A(x) a 3 B(x) o V 3 (A(x) a B(y))
and 3 B(x) a V A(x) o
3 V (B(x) a A(y)). Since conjunction is commutative, we can obtain: 1= V 3 (A(x) a B(y)) o 3 V (B(x) a 
A(y)). The proof is left to the reader.
In general, every formula of classical logic is logically equivalent to some formula represented in prenex 
normal form. Any formula <p of (first-order) predicate logic represented in prenex normal form having only 
universal quantifiers is said to be a Skolem normal form', not changing the satisfiability of cp. Any such process is 
called 232ulfilment232232n
*
. The last process (of removing existential quantifiers, often performed as a first step) plays
Albert Thoralf Skolem (1887 - 1963). 

235
a fundamental role in automated deduction methods. As an example, a brief presentation of the Robinson's 
resolution method is given below (Robinson J.A. 1963. 1965)* *.
* John Alan Robinson (1930 - 2016).
T Hilary Whitehall Putnam (1926 - 2016).
* Jacques Herbrand (1908 - 1931).
Â§ Alonzo Church (1903 - 1995), Alan Mathison luring (1912 - 1954).
Example 2.39(Robinson's resolution method)
Consider the following prenex normal form: cp Odf V 3 V V 3 (R(v.w) v R(v.x) =a R(u.y)). Hence, in 
u v w x y
accordance with general concept of the ramified indirect proof from assumptions (see Subsection 1.3) , as input 
data to this method is used ~ cp. i.e: 3 V 3 3 V ((R(v.w) v R(v.x)) a ~R(u.y)).
11 v W X y
The followimg Skolem normal form (known also as a standard fam) is obtained: V V ((R(v.f(v)) v
R(v.g(v))) a ~ R(a.y)). And hence, for any v and y. we have: (R(v.f(v)) v R(v.g(v))) a ~ R(a.y). Since 
conjunction and disjunction are mutually distributive, in particular we can obtain: R(v.f(v)) a ~ R(a.y) v 
R(v.g(v)) a ~ R(a.y). Now. we have two additional assumptions.
By assuming R(v.f(v)) and ~ R(a.y) we can obtain a contradiction for v =df a and y =df f(a). In a 
similar way. assuming R(v.g(v)) and ~R(a.y) we have a contradiction for v =df a and y =df g(a). â¡
Consider the expression: (R(v.f(v)) v R(v.g(v))) a ~ R(a.y). obtained in the last example. The notion of a 
disjunct is introduced as a disjunction of literals. So. in accordance with this conjnctive normal form, we have 
two disjucts: 2-literal and 1 -literal ones. The obtained set of all disjuncts S =df {(R(v.f(v)) v R(v.g(v))). ~ 
R(a.y)}. In this earlier work, given by Davis M. and Putnam Ht (1960), the study of unsatisfiability was based 
on a special domain H, known as Herbrand's universumf a sufficient condition of any such study (Chang C.-L. 
and Lee R.C.-T. 1973). In this example we have: Ho = {a}. Hi = [a. f(a). g(a)}. H2 = [a. f(a). g(a). f(f(a)). 
f(g(a)). g(f(a)). g(g(a))}. ... . H =df Hoo = {a. f(a). g(a). f(f(a)). f(g(a)). g(f(a)). g(g(a)). ...}.
Some attempts of search for general proof procedures were first given by Leibniz (Gottfried Wilhelm 
Leibniz: 1646 - 1716). Similar attempts are some works given by Peano (Giuseppe Peano: 1858 - 1932) and also 
in Hilbert's School (David Hilbert: 1862 - 1943). But finally, it was shown independently by Church A. (1936) 
and Turing A.M. (1936 )? the lack of any such procedures or algorithms for this logic.
The work given by Herbrand J. (1930) was a very important approach in proof theory and automated 
deduction methods. Let cp be a first-order predicate logic formula such that cp is not a thesis (see: Definition 
1.5, Subsection 1.4). It was proposed an algorithm that selects such an interpretation for which cp is not satisfied. 
However, the main problem here was the obtained computational complexity of this algorithm. And hence, the 
Robinson's resolution method can be considered as an improving of the last approach, by omitting some basic 
disjuncts (Chang C.-L. and Lee R.C.-T. 1973). In accordance with the used standard (conjnctive normal) form, one 
of the basic rules used in this method is the following one. called resolvent rule (denoted here by 'RES'). This 
rule can be considered as a generalisation of the rule '- A' (for % =df X: empty formula).
<p v
RES: ~^VZ
The proof of 'RES'corresponds to the proof of the following law: 1= (p v q) a (~p v r) => q v r : left 
to the reader. The use of thi rule is illustrated in Example 2.40, shown below (the construction of the used prenex 
normal form is first presented).

236
Consider the formula: V (A(x) =a B(x)) a 3 (A(x) a C(x)) =a 3 (B(x) a C(x)). This formula is a thesis 
(the proof is left to the reader) and it is logically equivalent to the following one (by using CR): ~ (V(A(x) 
B(x)) a 3 (A(x) a C(x))) v 3 (B(x) a C(x)). In a similar way . next we have: 3 (A(x) a ~ B(x)) v 
V (~ A(x) v ~ C(x)) v 3 (B(x) a C(x)). In accordance with quantifier theses we can obtain: 3 (A(x) a 
~ B(x) v B(x) a C(x)) v V (~ A(x) v ~ C(x)). The last formula is logically equivalent to the following one 
(the prenex normal form)'. 3 V ( A(x) a~B(x) v B(x) a C(x) v~A(y) v ~ C(y)).
The original formula V (A(x) =a B(x)) a 3 (A(x) a C(x)) =a 3 (B(x) a C(x)) and the obtained prenex 
form are logically equivalent.
Proof (if-impli cation):
(1)
V (A(x) 
B(x)) a
3 (A(x) a C(x)) 
3 (B(x) a C(x))
{a}
(2)
~ 3 V (A(x) a ~ B(x) v B(x) a C(x) v~A(y) v ~ C(y))
{aip}
(3)
V 3 ((~A(x) v B(x)) A (~B(x) V ~C(x)) A A(y)
a C(y))
{N3. NV. NR. NA. - N. SR : 2}
(4)
V((~A(x) v B(x)) .a (~B(x) v ~C(x)) a A(f(x)) A C(f(x)))
[-3 : 3}
(5)
V(~A(x) v B(x))
(6)
(7)
V (~ B(x) v ~C(x))
V A(f(x))
{V-thesis,â K. : 4}
(8)
V C(f(x))
(9)
(10)
A(f(a))
C(f(a))
[-V : 7.8}
(ID
A(f(a)) a C(f(a))
{+K: 9.10}
(12)
3 (A(x) a C(x))
[+3. x=dlf(a) : 11}
(13)
V (A(x) 
B(x))
[CR: 5}
(14)
V (A(x) 
B(x)) a
3 (A(x) a C(x))
{+K: 12.13}
(15)
3 (B(x) a C(x))
{-C: 1.14}
(16)
(17)
B(b)
C(b)
HE: 15}
(18)
~B(b) v ~C(b)
(-V : 6}
(19)
~C(b)
{-A: 16.18}
contr. â¡
{17.19}
Proof (only-if-impli cation):
(1)
3 V (A(x) a ~ B(x) v' B(x) a C(x) v~A(y) v ~ C(y))
{a}
(2)
~(V(A(x) 
B(x))
.V
A . (A(X) A C(x)) i(B(x) 
I 
I
A C(X)))
{aip}

237
Example 2.40(Robinson's resolution method: use of'RES')
(3)
V (A(x) 
B(x))
(4)
3 (A(x) a C(x)) 
{NC, - K : 2}
(5)
~ 3 (B(x) a C(x))
(6)
V(A(a) a ~ B(a) v B(a) a C(a) v~A(y) v ~ C(y)) 
[-3 : 1}
(7)
V (~ B(x) v ~ C(x)) 
{N3, NK., SR : 5}
(8)
A(b)
{-3,-K:4}
(9)
C(b)
(10)
A(b) =a B(b) 
{-V : 3}
(H)
B(b) 
{-C:8,10}
(12)
~B(b)v~C(b) 
{-V : 7}
(13)
~C(b) 
{-A: 11,12}
contr. c 
{9,13}
Let cp Odf 3 V (A(x) a ~ B(x) v B(x) a C(x) v ~ A(y) v ~ C(y)). Then: ~ cp Odf V 3 ((- A(x) v 
B(x)) a (~ B(x) v ~ C(x)) a A(y) a C(y)). By omitting the existential quantifier, the following standard form 
is obtained: V (( ~ A(x) v B(x)) a (~ B(x) v ~ C(x)) a A(f(x)) a C(f(x))). Here, we have two 2-literal 
disjuncts and two 1 -literal ones, associated in a conjunctive normal form. In accordance with the corresponding 
quantifier thesis and K', the above standard form can be decomposed as follows.
V ( ~ A(x) v B(x)),
V(~B(x) v ~ C(x)),
V A(f(x)) and
V C(f(x)).
According to the last decomposition, it can be observed that all literals of the above standard form can be 
treted independently wrt the selected values for x. And so, by assuming x =<jf a for 1-literal disjuncts and x =df 
f(a) for 2-literal disjuncts we can obtain.
(1)
~ A(f(a)) \/ B(f(a))
(2)
~B(f(a)) \/ ~ C(f(a))
(3)
A(f(a))
(4)
C(f(a))
(5)
~ A(f(a)) \/ ~ C(f(a)) 
{RES, v' is commutative'. 1,2}
(6)
~ C(f(a))
{-A: 3,5}
contr. â¡
{4.6}
As distinct from propositional logic (see Subsection 1.4), an interpretation of a given formula cp in first- 
order predicate logic should require: a finite domain of interpretation and also corresponding value definition 
related to all constants, functional and predicate symbols involved in cp. The following interpretation is used 
below (Chang C.-L. and Lee R.C.-T. 1973).

238
The next two examples are an illustration of this method.
Domain
D =df {1,2}*
interpretationt
universal quantifier
V cp(x)
V cp (x) Ci-df cp(l) a cp(2) 
x-D
existential quantifier
3 q>(x)
X
3 cp (x) ci-df cp(l) v cp(2) 
xcD
predicate
P(X1,X2, ... ,Xn)
P : Dn -> {T,Fj
Skolem function
f(Xl, X2, ... , Xm)
f: Dm -> D
constants
a, b, ...
a, b, ... e D
* In general, the set D s N (the set of natural numbers). Usually it is used the subset {1,2}.
Based on Peirce interpretation for quantifiers (Charles Sanders Peirce 1839 - 1914).
Example 2.41(formula interpretation)
Let <p Odf V (A(x) v B(x)) =a V A(x) v V B(x). We have the following prenex normal form for <p:
3 V V (~ A(x) a ~ B(x) v A(y) v B(z)). And hence, by omitting the existential quantifier we ca obtain: 
x y z
V V (~ A(a) a ~ B(a) v A(y) v B(z)). Provided there is no ambiguity and for simplicity, assume that 
>â¢6(1.21 ze(1.2)
q/(y.z) Odf ~ A(a) a ~ B(a) v A(y) v B(z). Then, the last restricted standard form will be logically equivalent 
to the following conjunction: q/(l,l) a q/(l,2) a q/(2,l) a q/(2,2).
Let now the constant a =df 1 e D. The one argument predicates A(y), B(z) and q/(y.z) are interpreted as 
follows:
A(l)
A(2)
B(l)
B(2)
v(y,z)
1
2
T
F
F
T
1
T
T
2
F
T
Since q/(2,l) = 'F', the original formula cp is not a tesis. â¡
Example 2.42(formula interpretation)
Consider the following prenex normal form: 3 V 3 (A(x) =a (R(x,y) =a S(y,z))). By omitting the first 
existential quantifier we can obtain: V 3 (A(a) =a (R(a,y) =a S(y.z))). And hence, we have the following 
restricted standard form: V (A(a) =a (R(a.y) =a S(y. f(y)))). For convenience, let cp(y) <4>df A( 1) =a 
>â¦â 2} 
... 
.
(R(l.y) =a S(y.f(y))). Then, this form is logically equivalent to the conjunction: cp( 1) a cp(2).
Asume that a =df 1 e D. The following interpretation is used.
Since <p(2) = 'F', the original formula is not a tesis. â¡
A(l)
A(2)
f(l)
f(2)
R
1
2
S
1
2
T
F
2
1
1
F
T
1
T
F
2
T
F
2
F
T

239
3.7. The higher order predicate logic
In addition to propositional variables (p. q. ...). in first-order predicate logic we have also only individual 
variables (x. y. ...) and variables representing predicates (A, B, ... . P. Q, ...). In fact, it is possible to introduce a 
more general form of the notion of a molecular expression (see: Example 2.31).
For convenience, consider the following example definitions given in (Slupecki J. and Borkowski L. 1967).
Example 2.43(cc, Q. a: symbol definition)
(Df.l) a(A) odf 3! A(x).
(Df.2) AgB ~ 3 (A(x) o B(x)) and
(Df.3) xctA <=>df A(x) a oc(A).
In accordance with Carnap's interpretation, by Df.l it follows that A is a property associated with exactly 
one individual variable (i.e. object). From Df.2 it follows that these two properties A and B are not associated 
simultaneously with any one object. According to Df.3, it follows that x is the only one such object having A. â¡
The above predicate variables are also known as first-order functors. And hence, the corresponding 
molecular expressions are said to be first-order molecular expressions.
The second-order functors are defined in a similar way. They have as arguments individual variables or first- 
order functors (at least one such functor). The obtained molecular expressions are said to be second-order 
molecular expressions. As an example, such expressions are: oc(A), AgB and xctA, introduced in the last 
example. The second-order functors are denoted below by bold letters, e.g. A, B, C. . . are one argument 
functors and P. Q. R. ... denote more than one (but finite argument) functors. And so. another srcond-order 
molecular expressions are. e.g. B(A), R(x,A) or equivalently: xRA, P(A.x.y), etc.
In accordance with this calculus, the quantifiers bound only first-order entities, i.e. individual variables or 
first-order functors. As an illustration, some example theses are given below (Slupecki J. and Borkowski L. 
1967). The corresponding rules related to quantifiers are quite similar to these ones used in first-order predicate 
logic. And so. the proofs of the next theses are omitted. T 2.147 is a modified version of the original one: by 
using rules'MC' and 'SR' (see T 1.5 of Subsection 1.3: left to the reader).
Thesis 2.142
V A(A) =a 3 A(A). â¡
A 
A
Thesis 2.143
*
The if-implication of the corresponding thesis given in Subsection 3.3.
V (A(A) a B(A)) =a V A(A) a V B(A) . â¡ 
A 
A 
A
Thesis 2.144
3 V R(A.B) =a V 3 R(A.B). â¡
AB 
BA
Thesis 2.145
V 3 A(x). â¡
.r A
Thesis 2.146
3 (R(x,y) o R(y,x)). â¡

240
Thesis 2.147
3 V V (A(x) =a B(x) a ~ B(x)). â¡
A B .1-
Frequently, in the proofs of this calculus, some definitions may be introduced. As an example, the proof of 
T 2.145 is based on the following definition.
Definition 2.40 (property definition)
Let *<x>' be one argument predicate depending on x. Then: *<x>(y) o.f x = y.
* See: Subsection 3.4.
t See: T 1.16 of Subsection 1.3.
According to the last definition, it is assumed that the above expression indicate a property associated with y 
iff y = x (i.e. a property distinctive for x).
By Definition 2.40 and the axiom Al of Subsection 3.4 it follows that: *<x>(x). This property is used, 
e.g. in the proof of T 2.145 as follows.
(1) 
*<x>(x) 
{a}
(2) 
3 A(x) 
{+3:1}
A
V 3 A(x). â¡ 
{+V : 2}
.1- A
The proof of T 2.146 is based on the following property: x = y o y = x (left to the reader). The 
following important thesis is satisfied (Slupecki J. and Borkowski L. 1967).
Thesis 2.148
x = y
V (A(x) Â« A(y))
A
Proof( if-implication):
(1) 
x = y
(2) 
A(x) o A(x)
(3) 
A(x) Â« A(y)
V (A(x) Â« A(y)). â¡
A
{a}
{i= P Â« P} 
[El: 1,2}* 
{+V : 3}
Pro of(only-if-impli ca tion):
(1)
V (A(x) a
A
> A(y))
(2)
*<x>(x) <Â» *<x>(y)
(3)
*<x>(y)
x = y. â¡
{a}
{-V : 1}
[DE : 2, *<x>(x)f
{DE : Df. 2.40,3}
According to T 2.148, identical objects have the same properties. And hence, this thesis can be considered as 
a definition of the notion of identity. Similar considerations, from intuitive point of view, were first presented by 
Aristoteles (384 b.c. - 322 b.c.) and next by: Tommaso d'Aquino (1225 - 1274) and Gottfried Wilhelm Leibniz 
(1646 - 1716). A more formal definition was given by Peirce in 1885 (Charles Sanders Peirce: 1839 - 1914) and 
published by Whitehead A.N. and Russell B (1913).
The third-order predicate logic can be introduced in a similar way, where the third-order functors have as 
arguments individual variables and first- and second-order functors (at least one such functor). The corresponding 

241
third-order molecular expressions are introduced in a similar way (left to the reader). In this logic we have a 
possibility of an extension of the above identity relation to some properties, e.g. A = B. by using the axiom 
Al': A = A.
3.8. Generalised quantifiers
The ordinary quantifiers "for same" and "for all" are not sufficient for expressing some basic mathematical 
concepts. Generalised quantifiers, such as: "for infinitely many" and "for uncountably many" (as a part of 
mathematical logic) were first introduced by Mostowski A.S. (1957)
*.
 Such and other similar quantifiers were 
intensively studied by logicians^ Researches in descriptive complexity theory
*
 (a branch of computational 
complexity and finite model theories') and natural language semantics were looking at ways of formalise 
expressions such as: "for at least half" or "for an even number" (Vaananen J. 1997).
' Andrzej S. Mostowski (1913 - 1975).
T Quantifiers are words which show how many things or how much of something we are talking about, e.g. much. many, (a) little, (a) few, 
a lot (of), some. any. no. none. both. all. either, neither, each, every, (the) other(s), another, etc. 
(file:///C:/Users/user/Documents/QUANTIFIERSÂ° o20JEZYKOWO.pdf) '
* The goal of descriptive complexity theory is to classify problems, not according to how much resources they need when solved by a 
luring machine, but according to how powerfill logical languages are necessary for describing the problems (Vaananen J. 1997).
Â§ Per Lindstrom (1936 - 2009: see Lindstrom P. 1966).
" Any noncontradictory theory in a countable language (i.e. a language with a countable number of formulae) has a finite or countable 
model (Leopold Lowenheim: 1878 - 1957, Thoralf Skolem: 1887 - 1963). See: Formal logic. Encyclopedical outline with applications to 
informatics and linguistics (1987).
hr fact, a lot of important research was done. eg. see: (Plenkin L. 1961, Benthem J. van 1986, Vaananen J. 1997, Vollmer H. 1999, 
D'Alfonso D. 2011, Westerstahl D. 2001, 2011), etc.: left to the reader.
The above introduced quantifiers were used implicit in Montague Grammar (Montague R. 1974) and also 
used in its force in (Barwise K. J. and Cooper R. 1981) and (Keenan E.L. and Stavi J. 1986). Generalised 
quantifier theory can be considered as a logical semantic theory which studies the interpretation of noun phrases 
and determiners, i.e. terms for any kind at (mostly) non-lexical element preceding a noun in a noun phrase (see: 
Glottopedia, the free encyclopedia of linguistics).
It was suggested a generalisation of this notion in two dimensions: syntactic and semantic. Syntactically, a 
logical quantifier is a variable binding operator that generates new formulae from old formulae. Semantically, a 
logical quantifier over a universe ?/ is a cardinality function from subsets of ?/ to a truth value, satisfying a 
certain invariance condition. Let 3 s and Vs be the quantifiers 3 and V over ?/. Assume that 7' Â£ â¢?/. Then 
3 s if f = T iff the cardinality I f 'I > 0 and Vs d>") = T iff I | = 0, where the complement T"' =dt 
?/ - - . In general, a quantifier Q on -/ is invariant under all permutations of ?/. The following criterion for 
logical quantifiers was given by Mostowski: Q is logical iff for any * 0 , Q s is invariant under all 
permutations of ?/. In particular, a generalisation of the last criterion to first-order predicates and quantifiers of 
all types, proposed by Lindstrom5, was also presented (Sher G. 2015).
The following characterisation of standard first order logic was given (Lindstrom's theorem)', standard first- 
order logic is the strongest logic that has both completeness (see Subsection 1.6) and the Lowenheim-Skolem 
properties
**
. Next, it was shown that completeness is not limited only to this logic (Keisler H. J. 1970).
Generalised quantifiers can be introduced by using such notions as: signature (denoted by ct : a finite 
sequence of relation symbols and constant symbols) and a finite ordered structure over ct. It is assumed (without 
loss of generality) that the universe of every structure is always an initial set of natural numbers. Let Struct(o) be 
the set of all finite ordered structures over ct. It can be shown that every class of structures Â£ Struct(o) over a 
signature ct defines the first-order Lindstrom quantifier (Vollmer H. 1999).
Some introductory notions concerning the notion of a generalised quantifier are briefly presented below 
(Pogonowski J. and Smigerska J. 2008)L

242
The quantifiers introduced by Mostowski are quantitative. The local quantifier defined on 2/ is considered 
as a set of subsets of 2/ The global quantifier is considered as a functor Q assigning to each non-empty 2/ the 
quantifier Q s defined on ?/*. Some examples of such quantifiers are given below (indexsed, the first letter of 
hebranian alphabet denotes aleph-a. for arbitrary ordinal number a). The last two quantifiers are known as 
Reseller's and Chang's quantifiers, respectively^.
Provided there is no ambiguity and for convenience, instead of the originally used ' M '. the space is here denoted by '
t Nicholas Reseller, bom 1928 and Chen Chung Chang, bom 1927.
* A quantifier Q of type (iii,n2, ... .lit) can be considered as a function associating with each S'a quantifier Q. on S'of that type, i.e. a 
k-ary relation between relations over S'. For (any relation ) Xi <= S'1" Q. Xi, ... ,Xk means that relation Q. holds for the arguments Xi,
... , Xt (Westerstahl D. 2001). Provided there is no ambiguity and for convenience, instead of Rj, here the symbols Xi are used (without
parentheses).
Â§ Type theory is a branch of computational logic that studies types (informally object attributes). See: The Free Encyclopaedia. The 
Wikimedia FdUndation. Inc. The above used notions are set-theoretic.Linguists often prefer lambda notation, from the simply typed lambda 
calculus (i.e. Alonzo Church's typed % - calculus: Alonzo Church: 1903 - 1995). This is a functional framework, where everything except 
primitive objects like individuals (type e) and truth values (type t) is a function. Binary relations are of type (e, (e,t)), type (1) quantifiers 
now get the type ((e,t), t), type (1,1) quantifiers are of type ((e,t), ((e,t),t)), etc. (Westerstahl D. 2001).
Vs =df {?/}, 
3S =df {X C ?// x 0}.
(3>n)^ 
=df {X c r/ Ixl > n }.
(QÂ«)s 
=df {X C ?// Ixl > nJ,
(Qr)^ =df {X c r/ Ixl > I r - x I}, 
(Qc)s 
=df {X c ?// |x| = I ?/|}, etc.
Let f : 2/ 
2/ ' be a bijection. Since the
elements of 2/ are not distinguished, the following 
condition is satisfied (assumed in the next works 
concerning generalised quantifiers).
ISOM X e Qs o f(X) e Q
The introduced by Mostowski quantifiers do not involved such quantifiers, e.g. as the binary quantifier 
"mosf in propositions of the form: "Most cp are q/", corresponding to a binary relation between subsets of ?/. 
And so. we have:
(Qmost)S =df { (X.Y) 6 
/ X p Y}.
where: X p Y odf I X n Y| > I X - Y| (forany X.Y c ?/).
Lindstrom's quantifiers are classified according to the number structure of their parameters. So. with any 
such quantifier a corresponding natural number sequence, said to be a type, is associated: (ni,n2, ... ,nk).
In accordance with the last considered examples, the first six quantifiers are of type (1) and (Qmost)s -of 
type (1,1). The Lindstrom's notions of a local and global quantifiers are presented as follows (Pogonowski J. and 
Smigerska J. 2008).
Definition 2.41 (generalised local and global quantifiers)
The generalised local quantifier defined on 2/ of type {ni,n2, ... ,nk) is introduced as an arbitrary k-ary 
relation between the subsets ... , g'11". The generalised global quantifier defined on 2/ of type (ni,n2, ... 
,nk) is considered as a functor Q assigning to each non-empty 2/ a local quantifier Qs of type (ni,n2, ... 
,tik)i.
Generalised quantifiers, in accordance with their type. can be either monadic (if any such quantifier is of type 
(1,1.... .1)) or polyadic. For convenience, the monadic quantifiers of type (1). (1,1). (1,1,1), etc. are also known 
as unary, binary, ternary, etc. quantifiers. In general, the following lexicographic (quantifier type) order was 
presented(HellaL. 1989): (1) < (1,1) < ... < (2) < (2.1) < (2.1.1) < ... < (2.2) < ... < (3) < ... * * * * Â§

243
Let f: ?/ 
?/' be a bijection. In the case of Lindstrom's quantifiers, the ISOM condition is presented as
follows*.
ISOM (pi,p2, ... ,pk) e Qs Â« (f(pi).f(p2). ... ,f(pk)) e Q
Some example Lindstrom's quantifiers are given below (Pogonowski J. and Smigerska J. 2008), see also 
(Westerstahl D. 2001). In accordance with the last work, e.g. (Qaii) s is equivalently defined in the following 
simplified form (for all ?/ and all X.Y Â£ ): alls (X.Y) Odf X Â£ Y (another examples are also 
considered: left to the reader).
(Qall)S =df { (X.Y) 6 ?/2 / X Â£ Y}.
(Qsome)S =df { (X.Y) 6 ?/2 / X n Y 0}.
(Qmorek =df { (X.Y) 6 
/ I X I > I Y I },
(Qi)s =df { (X.Y) 6 ->z'2 / / I X I = | Y| }. (Hartig^ quantifier)
A generalisation of Reseller's. Chang's and Hartig's quantifiers is Henkin's quantifier (Henkin Li. 1961). 
The last quantifier, denoted be Qh . can be considered as a special case of a generalised quantifier (Badia A. 
2009). A simplest form of this quantifier is given below.
((Qh)s x.y.z.t) cp(x.y.z.t)
V 3 
Â»df ( 
' !
V 7
) cp(x.y.z.t).
Let f and g be two functions defined on ?/. The above Henkin's quantifier, of type (4), can be also 
equivalently represented as follows.
Qh =dt { p c ?/4 / 3 3 V V (x. f(x). y. g(y)) e p }. 
f g x y
Several properties of generalised quantifiers are given below (Pogonowski J. and Smigerska J. 2008, 
Westerstahl D. 2011).
CONSERV
EYT
UNIV
QUANT
Conservativity (preference for the first argument): for all ?/ and all 
..X .Y Â£ ?/: Q X . ... ..X .Y Â« Q Xi. ... .X .(X 
... ...\ I nY.
Xi. .
Extension (universum independence): Xi, ... ,Xk Â£ ?/ Â£ ?/ ' =5 (Q;Xi, ... 
,Xk Â« Q X. ... ,Xk).
(CONSERV EYT): Q X . ... .X .Y Â« Q-, uXk X . ... .X .(X 
...
uXk) nY.
(Quantifier independence wrt object features): for all ?/, 1/ all bijections f: 
> 0 and all X . ... ..X. Â£ ?/: Q X . ... ..X. Â« Q f(.X ). ... ,f(X).
The above conditions CONSERV, EXT and QUANT of the most simple quantifiers, of type (1.1).. i.e. 
binary quantifiers - considered as relations, are presented as follows.
CONSERV
For all O andY: Q;X.Y o Q;X.X nY.
* Instead of R. the letter p is used here to denote a relation.
T Klaus Hartig, bom 1941.
1 Leon Albert Henkin (1921 -.2006).

244
EXT 
X.Y Â£ 
?/' > Qa. X.Y o Q X.Y.
QUANT 
For all//. //'. all bijections f: 
//'and all X.Y: Q;X,Y o Q; f(X),
f(Y).
A quantifier satisfying, at the same time, the CONSERV. EXT and QUANT conditions is said to be a 
logical one. The following property is satisfied.
Theorem 2.2
A binary quantifier is logical iff for all 2/ and 2/X.Y c /andX'.Y'/ 2/'-. |X-Y|= I X'- Y'l 
and IX n Y| = IX'n Y'l =?> (Q; X.Y o Q; X'.Y').
Proofiif-implication):
By using QUANT we can obtain: Q;X,X n Y = Q;=X',X'n Y'. And next, by UNIV we have: 
Q X.Y Q X .Y .
Proof (only-if-impli cation):
In accordance with this implication, the above condition QUANT is satisfied. Consider 2/. Let X.Y c â¢?/. 
Assume that ?/'= X' = X. Then Q; X.Y o QxX,X n Y. And hence. UNIV is satisfied. â¡
It was shown that the class of logical quantifiers is closed under the operations conjunction, disjunction and 
negation, i.e. if Qi and Q2 are logical quantifiers, such ones are also: Qi a Q2, Qi v Q2 and ~ Qi. With any 
binary (k + 1) argument quantifier Q, the following operations are also associated (Pogonowski J. and 
Smigerska J. 2008).
Internal conjunction (two kinds)
*:
 (Q ) X . ... ,Xk.Y Odf Q;Xi n ... nXk.Y and (Q ) X . ... ,Xk.Y
* The two kinds of an internal disjunction can be introduced in a similar way: left to the reader.
t The internal and external negations are also known as: inner negation (or post-complement) and outer negation (or pre-complement), 
respectively. Moreover, these two negations and dual are idempotent, i.e. Q = âQ = Qâ = Qdd (see: Westerstahl D. 2001).
Odf Q xi.Y a ... a Q X .Y.
Internal negation'. 
(Q~);Xi. ... ,Xk.Y odf Q; Xi. ... ,Xk. 2/ -Y.
The dual quantifier Qd of Q is defined as follows: ~ (Q ~ ) = (~ Q) ~ . The external negation (the set of 
sets that are not in Q) and the internal negation (the set of complements of the sets in Q) correspond to the notions of 
a proposition negation and a predicative phrase negation, respectively^ De Morgan's laws are associated only 
with the external negation, e.g. ~ (Q a Q') o ~ Q v ~ Q' (in a similar way for disjunction,i.e. the rule NA). As 
an example, by using the internal negation we can obtain: (Q a Q') ~ o Q ~ a Q' ~ . In the case of dual 
quantifiers we have: (Q a Q')d o Qd v Q'd (similarly for disjunction), see: (WesterstahlD. 2001).
The class of logical quantifiers is closed under (the two kinds of) internal conjunction and internal disjunction, 
internal negation, and quantifier 242ulfilment242.
An n-argument quantifier Q. is said to be trivial if it is either an empty or a complete relation on P(22). 
The following condition is introduced.
NONTRIl'
There exist universums 2/ in which Q. is nontrivial.

245
The class of nontrivial quantifiers is not closed under Boolean operations. A more hard version of 
N0NTR1V is ACT'. Q. is nontrivial (for any ?/ ). However, a harder than the previous one is the following 
version (Benthem J.van*. 1986: generalised for (k + 1 (-argument quantifiers by Westerstahl Dt 2001, 2011).
Â§ The difference between the terms 'contradiction and 'contrariety' (or 'opposition ) was first studied by Aristoteles (384 - 322 b.c.). 
But, as a diagram, the first logical square was done after the works of Apuleius L.M. (c.e.124 - 170) and Boethius A.M.S. (c.e. 477/80 - 524): 
see: The Free Encyclopaedia. The Wikimedia Foundation. Inc.
' Johan van Benthem, bom 1949.
T Dag Westerstahl. bom 1946.
* Or: VARIETY.
I AR? 
For any "?/ and all Xi, ... ,Xk c 2/ with Xi n ... n Xk 0, there
exist Y1.Y2 such that: Q;Xi, ... .Xk.Yi and ~Q;Xi, ... ,Xk,Y2.
In fact, VAR implicates ACT, which implicates NONTRIV. The opposite implications are not satisfied 
(Pogonowski J. and Smigerska J. 2008). In the case of binary quantifiers, the last condition is presented as 
follows.
CAR 
Forany 2/ and 0 X c //. there exist Y1.Y2 such that: Q; X,Yi and
~q;x,y2.
The most important type in natural language contexts is (1,1), i.e. binary quantifiers (Westerstahl D. 2011). 
Some monotonicity properties related to these quantifiers are given below (Pogonowski J. and Smigerska J. 
2008).
Definition 2.42 (monotonicity properties)
Let Q be a binary quantifier. Then Q is:
MON T Odf Q;X,Y a Y g 
Y' => Q;X,Y',
MON 4- Odf Q;X,Y a Y' c 
Y =a Q;X,Y',
TMON Odf Q;X,Y A X C 
X' =A O X Y.
MON Odf Q;X,Y a X' c 
X =a Q.X'.Y.
We shall say that Q is right monotone (RATON) iff it is either MON T or MON . Similarly, Q is left 
monotone (LATON) iff it is either T MON or MON. Q is T MON T iff it is T MON and MON T. In a 
similar way are introduced: MON , T MON and MON T .
According to the last definition, the above four double monotonicities correspond to the four vertices (i.e. 
some, no, not all and all, respectively) of a logical square (known also as: square of opposition or logical 
quadrat)
*,
 see Figure 3.2 below.
All (SaP)
no (SeP)
not all (SiP)
some (SoP)

246
More formally: SaP <=>df V (S is P). SeP <=>d ~3 (S is P). SiP <=>d 3 (S is 
s' 
s 
' 
s
+P). and SoP <=>d 3 (S is not P). In accordance with De Morgan's laws (see: 
s 
"
Subsection 3.3. Uresis 2.135): ~ V (S is P) <=>d 3 (S is not P). And hence we 
s 
s
have the following two contradictions: SaP - SoP and also SeP - SiP. Also, the 
following two implications are satisfied: SaP => SiP and SeP => SoP. 
Moreover, the last two implications are equivalent (according to rules CC. SR and 
NV).
Figure 3.2 Logical ssquare*
* A similar (set-theoretic} interpretation of this square can be obtained if we consider S and P as two sets. Then SaP. SeP. SiP and SoP 
(i.e. all 8 are P, no 8 is P.some 8 are A. and some 8 are not A respectively) should correspond to: S Â£ P. S n P = 0. S n P
* 0. and S I', respectively (in accordance with the Venn diagrams'. John Venn 1834 - 1923): see: The Free Encyclopaedia. The 
Wikimedia Foundation. Inc.
I It is convenient to show first the only-if-implication.
The following property is satisfied (Pogonowski J. and Smigerska J. 2008).
Theorem 2.3
Let CONSERV and VAR be satisfied. Then the above four quantifiers, related to the logical square, are 
the unique ones of double monotonicities.
Proof:
Assume that Q is MON % is an universum and X, Y c //. We should show that Q is 'no', i.e. 
Q.X.Y o X n Y = 0.
Proof(only-if-implicationf:
Assume that X n Y = 0. Let X' 0 0 and X c X'. According to VAR, there exists a set Z c â¢?/ 
such that Q; X',Z. Since Q is MON then Q; X,Z. Next, by using MON , we can obtain: Q; X,0 (in 
accordance witli Definition 2.42: Q,X,Z a 0 c z => Q,X,0). Since X n Y = 0, then we have: Q;X,0 
o Q,X. X n Y. And hence, by CONSERV we can obtain: Q;X,Y. â¡
Proof if-impl ication):
Assume that the relation Q; X,Y is satisfied. Hence, by MON we can obtain: Q. X n Y, X n Y 
(since X n Y c X, Y). According to MON A for any Z 0 // we have: Q;X n Y,X n Yn Z (since X n
Y n Z c X n Y). Then, by using CONSERV we have: Q;X n Y, Z (let A =dt X n Y, then: Q, A, A n Z 
<=> Q;A.Z). Using VAR we have: X n Y = 0 (more formally, the proof of implication: Q,X n Y, Z => X n 
Y - 0 is given below, the proofs of the rest three cases are similar: left to the reader). â¡
It is used in the next proof a more formal definition of the condition VAR related to binary quantifiers, presented in the 
original work (Benthem J. van. 1986): V (A 0 =a 3 Q A, B a 3 ~ Q A. C ). for any ?/ and A, B, C c v/.
a 
j 
c
Q, X n Y, Z X n Y = 0
Proof:
(1)
(2)
V (A 0 =e> 3 Qâ A, B a 3 ~ Q;A. C )
A 
B 
C
A 0 => 3 Q^A, B a 3 ~ Q^A, C 
B C
(3)
V ~ Q A, B
B
v V QA, C =^> A = 0 
c
{VAR}
{ - V :1} 
A
[CC, NK. N3, - N, SR : 2}

247
(4) 
V ~ Qs-X r, Y. B v V Q,X n Y.Z =e> X n Y = 0 . 
B 
Z
(5) 
VQ.XnY.Z
z
(6) 
V~Q.;X n Y,B v VQ.X n Y.Z
B 
Z
X n Y = 0.o
[A =df X n Y, C =df Z : 3}
{+V : Theorem 2.3: if-implication} 
z
{+A:5}
{-C : 4,6}
In the next considerations it is assumed that all quantifiers are logical (i.e. they satisfy the conditions 
CON SER V, EXT and QUANT) and satisfy N0NTR1V. In the case of natural languages, it is convenient to be 
assumed the following additional condition (Pogonowski J. and Smigerska J. 2008).
FIN Only finite universums are considered, i.e. I e N , for any ?/.
However, some determiners, e.g. such as 'infinitely many' or the dual: 'all but finitely many', etc. should 
require the use of non-finite models. According to the last work, with any binary quantifier Q (which is logical) 
are associated some properties. In particular, Q; may be: symmetric, antisymmetric, asymmetric, reflexive, 
quasi-reflexive, weak-reflexive, antireflexive, linear, transitive, cyclic. Euclidean or non-Euclidean, e.g. Q is 
symmetric iff Q; X,Y =b Q; Y,X, antisymmetric iff Q; X,Y a Q; Y,X => X = Y (e.g. some and all, 
respectively, etc.: left to the reader). In particular, there was shown lack (in natural languages) of quantifiers which are 
asymmetric, cyclic or Euclidean.
Any binary logical quantifier Q. can be identified by a binary relation pQs defined over a set of cardinal 
numbers as follows: xpQsy <=>df 3 3 ((| X - Y| = x) a (I X n Y I = y) a Q; X,Y). On the other hand, 
for any a priori given binary relation pQs over a set of cardinal numbers, we can obtain (corresponding to po ) a 
binary logical quantifier Q. defined as: Q;X,Y) Â«df lx - Y| pq,I Xn Y|.
The above correspondence help us to consider quantifiers as some ordered pairs associated with the vertices 
of a binary tree having as a root (0,0) and the set of out-incident vertices* {(x + 1, y), (x, y + 1)}, associated 
with any vertex (x,y). And hence, there exists a possibility of studying various properties related to these 
quantifiers (Pogonowski J. and Smigerska J. 2008).
' See (Berge C. 1973). Claude Jacques Berge (1926 - 2002).
t Naum Yakovlevich Vilenkin (1920 - 1991), Yulii Anatol'evich Shreider (1927 - 1998).
In the next parts of the last work are briefly considered: some methodological aspects, there are presented 
such quantifiers as:
Qox A(x) ' there exist infinitely many x such that A(x)',
Qi x A(x) 'there exist uncountably many x such that A(x)',
Qcx A(x) 
'there exist as much objects x as in the whole ?/' (Chang's quantifier),
Isnore X than Y, 
Henkin s quantifier and
T'ilenkin - Shreider quantifier /
The last quantifier (originally denoted by Qm x A(.\)) is presented as follows (Vilenkin N. Ya. and Shreider 
Yu. A. 1977).
Qv sX A(x) 'such objects x that A(x) form majority in ?/',
Let X y 0 be a set and b (X) be a Boolean algebra (involving not necessary all subsets) such that 
X e Ed(X). The family M(X) of elements in is said to be a majority system in X if the following three 
conditions are satisfied (it is assumed below that e, s and f. bind more strongly than the symbol of conjunction).
(1) 
M(X)
0.
 
(2) 
A e M(X) a A c B B e M(X) and

248
(3) 
A 6 M(X) =w (the set complement) A" Â£ M(X).
The majority space is defined as follows: (X, M(X)). If A e M(X) then A is said to be a majority in X. 
Obviously 0 Â£ X, X e M(X). Moreover, if A e M(X) and B e M(X) then A n B Â£ 0.
The following semantics of Qv.s is presented (Pogonowski J. and Smigerska J. 2008): ?/ 1= Qv.s x A(x) 
Odf {a e dom(//) I ?/ l= A(a)} is a majority in dom(//), for some (majority) system M(dom(//)).
In accordance with the last work, the following two topics are also considered: expressive power of logic 
frameworks and infinitary logics. Important results concerning this expressive power are related to Lindstrom's 
limitation theorems.
Infinitary logics are logics in which: the considered language allows formulae with non-finite length and/or 
infinitely long proofs or non-finitary (proof) rules. It was shown (Barwise* K.J. 1975) that the existence of some 
countable sets (a generalisation of heritable finite sets), known as admissible sets, on whom (interpreted as sets of 
formulae codes) becomes the possibility of studying recursion theory and proof theory. There are very many 
applications of Barwise's theorem, e.g. there exists a possibility to show that any countable transitive model for 
ZFC has a proper finite extension. Barwise's work can be considered as an unification in the studies of model 
theory, recursion theory and set theory. Especially useful in this work was the axiomatic approach given by 
(Kripke S. 1964) and (Platek R.A. 1966), known as: Kripke - Platek set theory (see the next Chapter, 
Subsection 5.6). A more formal treatment is omitted here.
* Kenneth Jon Barwise (1942 - 2000).
t Zermelo-Fraenkel axiomatics (ZF or ZFC: 'C' stands for 'Choice' (the axiom cf Choice): Ernst Friedrich Ferdinand Zennelo (1871 - 
1953), Adolf Abraham Halevi Fraenkel (1891 - 1965). According to this system, the letters of the sets may appear on both sides of' 6', but 
those for elements may only appear on the left side (as in KPU axiomatic system: see Subsection 5.6). The following axioms were used in ZF: 
axiom of extensionality, axiom of regularity (or foundation), axiom schema of specification (or separation or of restricted comprehension), 
axiom of pairing, axiom of union, axiom schema of replacement, axiom of infinity and axiom of power set. Here, the used two axiom 
schemes can be considered as a standard way of introducing axioms having the same syntactic structure, e.g. the axiom Al (the first law of the 
hypothetical syllogism: law of Dims Scotus, see Subsection 1.7) , of Lukasiewicz's implication-negation axiomatic system', p => (~p => q) can be 
generalised for any two formulae <p and >p. as follows: <p => ( ~ <p => i|t). A more formal treatment is left to the reader.
4. Non-classical calculus
There are briefly considered some other non-classical systems such as: fuzzy predicate calculus, modal and 
temporal predicate calculi and also the intuitionistic and paraconsistent predicate logic systems.
4.1. Fuzzy predicate calculus
The main results considered below are under (Cintula P., Fennuller C.G., and Noguera C. 2017), see also 
(Hajek P. 2005) and (Metcalfe G. et al. 2009). And so, consider a fuzzy propositional logic L. There exists an 
uniform way of introducing its first-order predicate logic (denoted here by) LV in a predicate language .xKK 
(defined in a similar way as in the classical case, see Subsection 3.1). Here, there are assumed only t-nonn based such 
logics. The considered semantics is presented by structures and predicate symbols are interpreted as functions 
(similarly as in the classical case, see Subsection 3.6). More formally, a structure M =df (M, fw. Pm) consist of a 
domain M Â£ 0, a function fM : Mn M and a function Pm: Mn [0,1] (n e NMm.Pm e KSfr

249
Any evaluation v of object variables in M defines values of terms and truth values of atomic formulae (for 
fw and Pm . respectively)
*.
 The quantifier terms are defined as follows.
* 11 fm (ti, ... ,tn) 11 v =df fM (I I tj I v , ... , 11 tnl I v), similarly for PM.
t Tire axioms of the following three basic fttzzy propositional logics: Lukasiewicz's BL, Cf&iel's BL, and product (logic) BL (Hdjek P. 
2002, 2005). As an illustration, Lukasiewicz's BL axiomatic system is given in Subsection 2.2 (the main problem here is the computational 
effectiveness: using only '-C' and 'RR').
1 See Subsection 1.8.
5 Provided there is no ambiguity and for convenience, instead of 'multiset'. the term 'sequence' is used here.
" The standard interpretation of the pipe operator is usually disjunction. Intuitively, a hypersequent is true in a certain state iff one of its 
components is true in that (relative to some semantics which makes the last statement meaningful), see: (Avron A. 1996).
11 (V ) cp 11 v =df inf { II cp II v[x: a] / a 6 M } and II (3 ) cp|| v =df sup { 11 cp 11 v[x: a] / a e M }, 
X 
x
where v[x : a] is the evaluation sending x to a (keeping the values of other variables unchanged). Any other 
formula is computed in accordance with the truth values of the corresponding propositional connectives in L.
The following axioms are accepted for LV (Cintula P., Fennuller C.G., and Noguera C. 2017).
(P) The (first-order) instances of the axioms of L e
(VI) 
V cp(x) => cp(y)
(31) 
cp(y) =$ 3 cp(x)
X
(V2) 
v (x cp) 
(% 
v cp)
(32) 
y (cp =5 x) 
(3 cp =5 x}
(V3) 
y (x v cp) =$ y xv cp
The deduction rules of LV are the same as in L plus the rule of generalisation, i.e. '+V' (see Subsection 
3.2).
The sequent calculus becomes elusive for some non-classical logics. A significant challenge was the 
introduction of analytic proof systems, i.e. a natural generalisation of Gentzen - style sequent systems suitable for 
such logics. Hypersequent systems, first presented in (Pottinger G. 1983) and (Avron A. 1987), and surveyed in 
(Avron A. 1996) and (Baaz M. et al. 2003) are one such generalisation. 'Hypersequent calculus do not alter the 
definition of a sequent at all. but just add an additional level of context of ordinary sequents. Just as in classical 
sequent calculus, hypersequent calculus consist in initial hypersequents (i.e., axioms) as well as logical and 
structural rules. The axioms and logical rules are essentially the same as in sequent calculus. The only difference 
is the presence of side hypersequents, denoted by H and H', representing (possibly empty) hypersequents' 
(Baaz M. et al. 2003).
Hypersequents are sequences* 5 of ordinary sequents (called components), e.g. Ti I- Ai 
| IT H A 2I ... | rn I- An , where the hypersequent bar ' | ' (known also as pipe operator) is a meta - level 
disjunction
**
. It is here assumed that the consequent A1 consists at most one formula (I = 1, ... ,n). If for all I, 
A1 consists of a single formula, the hypersequent is called single - conclusioned (Avron A. 1996).
The generic interpretation of a sequent F I- B , denoted by Int (T F B), is defined by (A !=> B*i
 
where 'A T ' stands for the conjunction of the formulae in T or ' T ' if T is empty and 'B
*
 'is B or ' 1 ' 
if B is empty. The generic interpretation of a hypersequent Int ( Ti I- A 1 | IT V A g| ... | Tn Iâ A n ) =df 

250
v Int ( fj Iâ Ai ) . where ' v ' is a meta - level disjunction and 'T' and 'Â±' correspond to the logical 
1 = 1
constants 'true' and 'false', respectively. The structural rules are here divided into internal and external ones. 
The internal rules deal with formulae witliim components and are the same as in ordinary sequent calculus 
(e.g. see Subsection 2.4, linear logic: contraction and weakening). The external structural rules, i.e. the external 
contraction and external weakening, manipulate whole components of a hypersequent (Baaz M. et al. 2003).
A rule such as external contraction can be used to eliminate duplicate components, for instance. Shuffling 
rules are a class of external structural mles which combine or exchange information from multiple components, 
such as the following crucial communication rulel given in Avron's calculus' HG for Godel-Dummei't logic 
(Avron A. 1996), where ' ?i' are finite sequences of formulae, ' Gi ' and ' H ' are variables for (possible empty) 
hypersequents, I =1,2.
Gi | ?i I- Ai | Hi G2 | ?2 H A21 H2
Com : ----------------------------------------------------------
Gi I G2 | ?1 H A21 ?2 H Al I Hl I H2
In most hypersequent calculi, the only axioms are of the form A I- A (or even p I- p , p is atomic), 
exactly as in the standard sequent calculus (Avron A. 1996).
In particular, the following simplified version of this rule was presented by Rothenberg R.i
Gi | fi, r/ I- Ai G2 | fT, fy H A2
Com :
Gi | G2 | fi, ry 1- A21 ry tv iâ Ai
Let Gi , Ti , IT, Ai , G2 , r2 , fy and A2 correspond to p, q, r, s, t, u, v and w, respectively. The 
proof of the last rule is then reduced to the proof of the following formula.
(p v (q a r => s)) a (t v (u a v => w)) =z> pvtv(qAV =a w)v (u a r =0 s)
' See: (Avron A. 1991).
Proof:
(1)
(2)
p v (q a r => s)
t V (u A V =A w)
[1.2 /a}
(3)
~p
(4)
~ t
(5)
q
(6)
V
[aip / NA. NC.-K}
(7)
~ w
(8)
u
(9)
r
(10)
~ s
(ID
q a r => s
{-A: 1,3}
(12)
U A V =A W
{ - A : 2,4}
(13)
~q v ~r
[Toll, NK: 10,11}
(14)
~ r
[ â A : 5.13}
contr. >
{9,14}* *
t Kurt Godel (1906 - 1978), Michael Anthony Eardley Dummet (1925 - 2011).
* Rothenberg R., An hypersequent calculus for Lukasiewicz logic without the merge rule. Scotland's University of St. Andrews 2pp: 
file:///C:/Users/user/Documents/HYPERSEQUfiNr%20CALCULUS%20%202.pdf.

251
In general, hypersequents were used in some systems e.g. such as: HG (in Gentzen's sequential calculus), H1L 
(in intuitionistic logic), HIF (in intuitionistic fuzzy logic), HLC (HIL + Com), GL (in infinite-valued Lukasiewicz's 
logic), etc.
'I proof search with shuffling rules must deal with an exponential number of cases, which is impractical for 
hypersequents with many components or large components. The complexity of implementing root-first proof 
search on these rules for hypersequent calculi can outweigh advantages these calculi may provide over their 
sequent counterparts' Rothenberg R. In particular, in the last work was presented a new simplified version of 
the hypersequent system GL, introduced in (Ciabattoni A. and Metcalfe G. 2003), called GL2. The two 
weakening rules given in GL are absorbed into the axioms of GL2. Moreover, the merge rule (a simplified 
shuffling rule, making proof search expensive) is omitted. The obtained system GL2' is shown below.
(Axiom) G | T ', L........ L, A' I- Ai, .... An, A' (n > 0)
n
G I r,B k- A, A I r I- A 
+ Ca :
G | T, A => B HA
G I r, A I- B, A G I r I- A
+ Cc :
G I I ' - A =â¢ 11 A
g | r !- a | r !â a
EC :
g | r i- a
G| rbr2 i- Ai, a2
S :
G | Ti I- Ai | r2 I- A2
And so, in accordance with this work, it was shown that GL2' is sound and complete
*
 for infinite - valued 
Lukasiewicz's logic. Moreover all rules in this system, except 'S', are invertible.
* Another contradiction can be obtained starting with lines (2) and (4): left to the reader.
t Rothenberg R., An hypersequent calculus for Lukasiewicz logic without the merge rule. Scotland's University of St. Andrews 2pp: 
file: C: Users user llociuiieiits IIYl'f.I'tSIIQUEU l'UAOCAI.CUI.US".UO'CAOA.pdf
A logical system is sound (i.e. has the soundness property) iff every formula that can be proved in this system is logically valid wrt the 
semantics of this system. More formally: Ai, ... , An I- B => Ai, ... , An 1= B (i.e. if B is derived by Ai, ...,An then B is a 
tautological entailment wrt Ai, ... . An). A logical system is complete wrt some property iff every formula having this property can be derived 
by this system (for a more information see: T/;e Free Encyclopaedia. The Wikimedia Foundation. Inc).
The quantifier rules of hypersequent calculus for first-order logic are similar to these ones used in the 
classical sequent calculus (see Subsection 3.5). As an example, the rule '+ Va ' of the classical calculus is now 
presented as follows (the rest three rules can be represented in a similar way: left to the reader).
G | A (t), T I- B
+ Va
*
 : 
-----------------------------
G I V A(x), r I- B

252
Let G. T and B correspond to p. q and r, respectively. The proof of the last rule is then reduced to the 
proof of the following formula.
P V (A(t) a q => r) p V ((V A(x)) a q =e> r)
Proof(+ VM):
(1)
p v (A(t) a q => r)
{ a}
(2)
~p
(3)
~ ((V A(x)) a q => r)
[aip/NA. -K)
(4)
V A(x)
(5)
q
[NC. -K: 3}
(6)
~ r
(7)
A(t) a q => r
{-A: 1,2}
(8)
A(t)
[-V : 4}
(9)
A(t) a q
[+K:8.5]
(10)
r
[â C : 7,9}
contr. â¡
{6.10}
The proofs of the rest formulae, i.e. '+ EU/. '+ Vc/h' and '+ 3c/h'. are left to the reader. The considered here 
rules are a part of the hypersequent calculus HIF for first-order Gbdel's logic given in (Baaz M. and Zach R. 
2000). A more formal treatment is omitted here.
Fuzzy quantifiers and generalised fuzzy quantifiers
In classical predicate logic, the universal and existential quantifiers are introduced as two constants (see 
Subsections 3.1 and 4.1). Below is briefly presented the notion of a fuzzy quantifier, mainly under (Losada D.E. 
et al. 2006). Some information concerning the notion of a generalised fuzzy quantifier is also given.
Fuzzy quantifiers are very useful and important in areas such as: information retrieval, fuzzy queries, fuzzy 
constraints, fuzzy data mining applications, fuzzy dependencies, fuzzy intelligence systems, etc. More generally, 
fuzzy quantification is an important topic in fuzzy theoiy and its applications. 'Fuzzy or linguistic quantifiers 
allow us to express fuzzy quantities or proportions in order to provide an approximate idea of the number of 
elements of a subset fulfilling a certain condition or the proportion of this number in relation to the total number 
of possible elements' (Galindo J. et al. 2008). The considered in this work (two kinds of) fuzzy quantifiers may be 
useful in any fuzzy database. The following definition was given.
Definition 2.43 (absolute and relative quantifiers)
A fuzzy quantifier named Q is is represented as a function Q whose domain depends on whether it is 
absolute or relative:
Qabs: K [0.1] and
Qrel : [0.1] 
[0.1],
In fact, in comparison with the original Zadeh's fuzzy quantifiers (Zadeh L.A. 1983)*, the set of all 
nonnegative real numbers R is now extended to K. According to this definition, dom(Qrei) =dt [0,1] because 
the division e [0,1] , where a' is the number of elements fulfilling some condition and 'b' is the total 
number of elements. Let 'yT be the value of quantification defined as follows: if Q =df Qabs then y =df a else
' Lotfi Aliasker Zadeh (1921 - 2017).
t Provided there is noambiguity, this symbol is used instead the original one: '<p'.

253
y =,lr | â¢ And so. the 251ulfilment degree is defined as Q(y). If the function of the quantifier (absolute or 
relative) Q(y) = 1 the Q is completely satisfied. The value '0' indicates that Q is not fulfilled at all. Any 
intermediate value indicates an intermediate 251ulfilment degree for Q,
However, 'given a certain linguistic expression, it is often difficult to achieve consensus on a) the most 
appropriate mathematical definition for a given quantifier and b) the adequacy of a particular numerical value as 
the evaluation result for a fuzzy quantified sentence. This is especially problematic when linguistic expressions 
involve several fuzzy properties. To overcome this problem, some authors have proposed indirect definitions of 
fuzzy quantifiers through semi-fuzzy quantifiers (Glockner I. 1999), (Glockner I. and Knoll A. 2001), (Glockner 
I. 2004). A fuzzy quantifier can be defined from a semi-fuzzy quantifier through a so-called quantifier 
fuzzification mechanism (QFM). The motivation of this class of indirect definitions is that sentf-fuzzy quantifiers 
(SFQ) are closer to the well-known crisp quantifiers and can be defined in a more natural and intuitive way ' 
(Losada D.E. et al. 2006).
Fuzzy set theory allows definition of sets having not well defined boundaries. Initially, in accordance with 
the last work, some basic concepts of fuzzy set theory are briefly presented below.*
* See also: Section 7 of Chapter 111 of this book. Provided there is no ambiguity and for convenience, instead of X and in accordance 
with Subsection 3.8, the universum is here denoted by
Or equivalently: monadic fuzzy and monadic semi-fuzzy quantifiers of type (1), see Subsection 3.8.
Let 2/ be a universe and A be a fuzzy set. This set can be characterised by a membership function with the 
form: pA : Z' -> [0,1], where |_i\(u) represents its grade (or degree) of membership to the fuzzy set A with 0 
(1) corresponding to no (to full) membership in A. The fuzzy set operations can be introduced in several ways, 
e.g. the complement of a fuzzy set A and the intersection and the union of the fuzzy sets A and B are 
typically defined as follows: p-a (u) 
=df 1 - Pa(u). m Un) =df min{p.A(u). pB(u)} 
and liaub(u) =df
max[p.A(u). Pb(u)}. where 'min' and 'max' are the well-known Zadeh's t-norm and t-conorm, respectively (see
Subsection 2.2). Next, by P(22) and P(22) we shall denote the crisp and the fuzzy power sets of 2/ (P(?z) is the
set of all fuzzy sets that can be defined on Zz). In particular, if 2/ is finite, e.g. 2/ =df {ui. ... . un}. a discrete fuzzy
set A on 2/ is usually denoted as: A =df {jia(ui) /ui. .... p.A(un) /un}. The notions of unary fuzzy and unary 
semi-fuzzy quantifiers^ are given in the next two definitions (Losada D.E. et al. 2006).
Definition 2.44 (unary fuzzy quantifier)
A unary fuzzy quantifier Q on abase set 2/ * 0 is a mapping Q : P(2Z) -> [0,1],
Definition 2.45 (unary semi-fuzzy quantifier)
A unary semi-fuzzy quantifier Q on a base set 2/ * 0 is a mapping Q : P>(^') -> [0,1],
The following example was given in (Losada D.E. et al. 2006).
Example 2.44(relative semi-fuzzy quantifier)
Let (Qabout haif)s : P(2/) 
[0,1] be defined as follows. It is assumed that 2/ is finite and d =df I A|/|?/|.
where A c â¢?/.
(Qabout half) Â£ (A) 
df
0 
,d < 0.3
2(^)2 
,0.3 i d < 0.4
l-2(^)2 
,0.4 <d <0.6
2(^-): 
o.6 <d <0.7
0 
, otherwise.

254
Let ?/ =df {ui. ... , mo} be a set of individuals. Assume that A = {m. m, us, uio} is a subset containing 
these individuals which are taller than 1.70 m. Hence, the evaluation of the expression "about half ofpeople are 
taller th an 1.70mL, (Qabout taif);( A) = 1 - 2(Â°'4o Â°5 )2 = 0.5. â¡
The (general concept of tire) quantifier fuzzification mechanism is introduced in the next definition (here it is 
used the unary version of this mechanism).
Definition 2.46 (quantifier fuzzification mechanism)
*
A QFM can be considered as a mapping, say %QFM . with domain in the universe of semi-fuzzy quantifier and 
codomain (or equivalently: range) in the universe of fuzzy quantifier, where <7o/w('/?jn.i) P(Zf) and co<7(%QFM) c 
IP^). If <7oot(%qfm) = P(?6) then : IP(^) -> IPl^).
There exist different vertions for QFM (Glockner I. 1999, 2004). As an example, the notion of oc-cut was 
used in (Losada D.E. et al. 2006)t Here, e.g. the following QFM was used for (a unary semi-fuzzy quantifier) Q:
j'4 Q(A> a) da or (if ?/ is finite) as a corresponding finite sum, equivalent to this one given by the OIE4 
method^ (Delgado M. et al. 2000).
The introduction of QFM's to generalised quantifier theory can be considered as an important step in the 
development of the linguistics and computer science. A more formal treatment is here omitted, see also (Glockner 
I. 2006, 2009). A survey in this area is given in (Dvorak A. and Holcapek M. 2018): left to the reader.
4.2. Modal, deontic and temporal calculus
The logical rules used in modal, deontic and temporal predicate logics are an extension of these ones applied 
in propositional logic with corresponding rules concerning quantifiers, see Subsection 2.3. Unfortunately, the 
corresponding deontic version of Godel's axiom Gl, i.e. Q => q/ is not satisfied.5 Without loss of generality 
and for simplicity, the considerations in this subsection are restricted only to the two basic types of quantifiers 
used in the classical first-order predicate calculus.
Modal predicate calculus
With each of the two basic (universal and existential) quantifiers can be associated a modal functor of 
necessity or also a modal functor of possibility. Moreover, any of the last two basic quantifiers may be bounded 
or not. And so, we can obtain a total of eight rules of omitting an universal and an existential quantifiers.
* Provided there is no ambiguity. Definition 2.46 is a modification of this one given in (Losada D.E. et al. 2006) wrt to the following 
expression: 'F : (Q : P>(g) - [0.1]) - (Q : jP(S) - [0.1])'.
Given a ftizzv set A 6 IP(S ) and a 6 [0,1], the cut of level a of A , in short: a-cut of A, is the crisp set A,â =df {u 6 2Z / 
j.Ia(u) a), see Section 7 of this book.
* The Ordered Weighted Averaging method (Yager R.R. 1991, 1992).
Â§ Consider the following formula: !p => p. We have:
(1)
â P
{a}
(2)
~ P
{aip)
(3)
â¡ (~p => *)
{df'!':l}
(4)
~ p => *
{Gl)
(5)
*
{- C : 2.4} ?

255
Let first consider the following formula: 'â¡ 3 A(x) Assume that this formula is satisfied. So. there exists 
X
some 'a' such that 'â¡ A(a) ' (i.e. some 'a' having necessarily this property 'A'). And hence, the following 
implication is satisfied: â¡ 3 A(x) => â¡ A(a)
*
 (in a similar way, considering the universal quantifier or the modal 
X
functor of possibility). As an example, the rule of omitting a bounded existential quantifier, given in Subsection 
3.2 and denoted below by â¡ 3*'), is now represented as follows.
â¡ 
3 u/(x)
- â¡ 3' :
â¡ 
cp(x / S,pi,p2, ..., pÂ«)
â¡ 
q/(x / S,pi,p2, ..., p,)
Proof(- â¡ 3*):
â¡ 3 \|/(x) odf â¡ 3 (cp(x) a q/(x)) 
Â¥>(â ') 
X
â¡ (cp(x / 5,pi,P2, ..., Pr.) a q/(x / 5,pi,P2, ..., p,))
=> 
â¡ cp(x / Â£,pi,p2, ... , pâ) A â¡ \|/(x / Â£,pi,p2, ... , p,). â¡ {T 2.23 of Subsection 2.3, SR, - K}
Some example theses are given below.
Thesis 2.149
â¡ 3 V R(x.y) = O V 3 R(x.y)
Proof
(1)
â¡ 3 V R(x.y)
{a}
(2)
~ O V 3 R(x.y)
{aip}
(3)
â¡ 3 V ~ R(x,y)
{No.NV.N3.SR: 2}
(4)
3 V R(x,y)
{ - â¡:If
(5)
3 V~R(x,y)
{- n:3}
(6)
V R(a,y)
{-3:4}
(7)
V ~ R(x,b)
{-3:5}
(8)
R(a,b)
{-V:6}
(9)
~R(a,b)
{-V:7}
contr. â¡
{8.9}
Thesis 2.150
O V A(x) v O V B(x) =â¢ O V (A(x) v B(x))
Proof
(1) O V A(x) v O V B(x) 
{a}
' Concerns a set of 'individuals' that all belong to the same universum. 
t Corresponds to G1.

256
(2)
~ O V (A(x)
X
v B(x))
{aip}
(3)
â¡ 3 (~A(x) / 
X
x ~B(x))
{NO.NV.NA.SR: 2}
(4)
â¡ (~ A(a) a ~B(a))
{- D3 : 3}
(5)
â¡ ~ A(a)
{ T 2.23 of Subsection 2.3, SR. â K}
(6)
â¡ ~ B(a)
(7)
~ O A(a)
{NO : 5.6}
(8)
~ O B(a)
(1.1)
O \/ A(x)
X
{ada}
(1.2)
o A(a)
{- OV : 1.1}
contr.
{7.1-2}
(2.1)
O V B(x)
X
{ada}
(2.2)
O B(a)
{- OV : 2.1}
contr. â¡
{8.2.2}
Thesis 2.151 (prenex form)
O V A(x) v O V B(x) <=> O V O V 
x 
x 
x y
Proof(if-impl ication):
(1) 
O V A(x) v O V B(x)
(2) 
d3 0 3 (~A(x) A ~B(y)) 
x y
(3) 
â¡ ~ A(a)
(4) 
â¡ ~ B(b)
(5) 
~ O A(a)
(6) 
~ O B(b)
(1.1) 
OVA(x) 
X
(1.2) 
O A(a)
contr.
(2.1) oVB(x) 
X
(2.2} O B(b)
contr. â¡
Proof!only-if-impl ication):
(1) O V O V (A(x) v B(y))
(2) 
~ O V A(x)
(A(x) v B(y))
{a}
{aip/No.NV.NA.SR}
{- d3, T 2.23 of Subsection 2.3, SR. â K : 2}
{3.4}
{ada}
{- OV :1.1}
{5.1.2}
{ada}
{-OV:2.1}
{6.2.2}
{a}

257
(3)
~ O V B(x)
(4)
â¡ 3 ~ A(x)
X
{No,NV,SR: 2}
(5)
â¡ 3 ~ B(x)
X
{No,NV,SR: 3}
(6)
â¡ ~ A(a)
{-â¡3:4}
(7)
â¡ ~ B(b)
{-â¡3:5}
(8)
â¡ ~ A(a) a, n~B(b)
{+K:6,7}
(9)
â¡ (~ A(a) ,x ~B(b))
{T 2.23 of Subsection 2.3 : 8}
(10)
â¡ ~ (A(a) 'y B(b))
{NA,SR: 9}
(H)
~ o(A(a) x' B(b))
{No : 10}
(12)
o(A(a) v B(b))
{-OV: 1}
contr. â¡
{11.12}
The following thesis is a modal version of T 2.137, given in Subsection 3.3.
Thesis 2.152
â¡ 3 V 
Axl
R(x,y) =?> O V 3 R(x,y)
Sl.Hxllx,
Proof:
(1)
â¡ 3 V R(x,y)
{a}
(2)
~ o V 3 R(x,y)
S(7) ^(x)
{aip}
(3)
â¡ 3 V ~ R(x,y)
Bty) -4(x)
{No,NV
*,N3
*,SR
: 2}
(4)
â¡ A(a)
(5)
â¡ V R(a,y) 
B(y)
{-â¡3
*:1}
(6)
â¡ B(b)
(7)
â¡ V ~R(x,b)
.4(.x)
{- â¡ 3*  : 3}
(8)
â¡ V (B(y) =e> R(a,y))
{SR: 5}
(9)
â¡ (B(b) 
R(a,b))
{- â¡ V : 8}
(10)
â¡ V(A(x) => ~R(x,b))
{SR: 7}
(H)
â¡ (A(a) 
~R(a,b))
{- â¡ V : 10}
(12)
â¡ B(b) => nR(a,b)
{G2,-C : 9}
*
(13)
â¡ A(a) 
~ R(a,b)
{G2,-C : 11}
(14)
â¡ R(a,b)
{-C:6,12}
' It is used Godel's axiom G2: see Subsection 2.3.

258
Deontic predicate calculus
(15)
â¡ ~R(a,b)
{- C : 4.13}
(16)
R(a,b)
{- â¡: 14}
(17)
~R(a,b)
{- â¡: 15}
contr. e>
{16,17}
Some example theses related to deontic predicate logic are given below. Traditionally, as in the previous 
considerations, it is used assumptional proof style. In accordance with the correspondence between modal an 
deontic functors (i.e. o' and '!, 8' , respectively), e.g. the following rule, related to â¡ 3" ', can be 
introduced (here, instead of tire modal T 2.23, it is used the deontic thesis T 2.50).
! 3 V(x)
?>(â Â»)
-! 3
! cp(x/ ^pi,p2,..., pâ)
! \|/(x / Â£,p,,p2, ..., p,)
Thesis 2.153
! V A(x) => ! 3 A(x)
Proof:
Proof:
(1)
! V A(x)
{a}
(2)
~! 3 A(x)
{aip}
(3)
8 ~ 3 A(x)
[N! , see 12.48 : 2}
(4)
8 V ~ A(x)
[N3,SR : 3}
(5)
8 ~ A(a)
[-8 V : 4}
(6)
~! A(a)
[N! : 5}
(7)
! A(a)
{- ! V : 1}
contr. t
{6.7}
Thesis 2.154
8 V A(:x) => 6 3 A(x)
Thesis 2.155
(1)
8 V A(x)
{a}
(2)
~8 3 A(x)
{aip}
(3)
! V ~ A(x)
{NS.see 1 2.49,N3,SR : 2}
(4)
8 A(a)
{-SV: 1}
(5)
!~A(a)
{-! V : 3}
(6)
~ 8 A(a)
{NS : 5}
contr. â¡
{5.6}

259
The following formula is a deontic version of T 2.152.
! V A(x) => 8 3 A(x)
Proof:
(1)
! V A(x)
{a}
(2)
~ 8 3 A(x)
{aip}
(3)
! V ~ A(x)
[NS.see T 2.49.N3.SR : 2}
(4)
! A(a)
{- ! V : 1}
(5)
! ~A(a)
(- ! V : 3}
(6)
8 A(a)
[T 2.54 of Subsection 2.3 : 4}
(7)
~ 8 A(a)
{ NS : 5}
contr. â¡
{6.7}
Thesis 2.156
! 3 V R(x,y) => 8 V 3 R(x,y)
AU
S(.o xl(x|
Proof:
(1)
! 3 V R(x.y)
/<1>I BW
{a}
(2)
~ 8 V 3 R(x,y)
S(7) Alx)
{aip}
(3)
! 3 V ~R(x,y)
S(yl .4(.x >
[N8,NV
*,N3
*,SR
 : 2}
(4)
! A(a)
{-! 3*:
 1}
(5)
! V R(a,y) 
B(>)
(6)
!B(b)
{-! 3*:
 3}
(7)
! V ~R(x,b)
(8)
! (B(b) 
R(a.b))
{-! V : 5}
(9)
! (A(a) 
~ R(a.b))
{-! V : 7}
(10)
!B(b) => !R(a,b)
[T 2.55 of Subsection 2.3, â C : 8}
(ID
! A(a) => ! ~ R(a,b)
[T 2.55 of Subsection 2.3, â C : 9}
(12)
! R(a,b)
(-C : 6,10}
(13)
! ~ R(a.b)
{- C : 4,11}
(14)
8 R(a,b)
[T 2.54 of Subsection 2.3, â C : 12}
(15)
~ 8 R(a,b)
{T 2,49 of Subsection 2.3 : 13}
contr. i
}14,15}

260
Temporal predicate calculus
The axioms and rules presented in Subsection 2.3 (see Manna and Pnueli's temporal logic) deal only with the 
propositional fragment of this logic. The considered deductive system based on these axioms and rules is 
complete for proving the validity of any propositional temporal formula (Manna Z. and Pnueli A. 1992)*. In 
accordance with the last work, there was also presented an extension of this system by additional axioms and 
rules, to deal with the first-order elements such as: variables, equality and quantification (and hence, handling a 
large number of cases). Unfortunately, this extension do not lead to a complete system.
The notion of state x-variant is generalised at the level of a model. Assume that ct: so, si, S2, ... and o': so'. 
Si', S2', ... are two models over V c cr (the vocabulary). We shall say that o' is ax-variant of ct if sf is a x- 
variant of Sj (i.e. differs from Sj by at most the interpretation given to x: see Subsection 2.3). The following two 
definitions were used for an existentially and a universally quantified formulae, respectively (Manna Z. and 
Pnueli A. 1992).
(a.j) 1= 3 cp Odf (o'.j) 1= cp for some o', a x-variant of ct
(a.j) 1= V cp Odf (o'.j) 1= cp for every o', a x-variant of ct
According to the last work, the introduction of variables into formulae should require the consideration of 
schemes containing sentence symbols with parameters. In the case that the considered formula cp contains 
quantifications, it is required that the process of any such instantiation does not capture the occurrences of 
variables that are free in the replacing formula. In general, any such replacement a : p(xi, ... . xn) <- %(xi, ... , 
xn) should be amissible for ;p (n 2 0). If a is a replacement admissible for cp then cp[a| is referred as an 
admissible instantiation of cp.
Below it is assumed that V is partitioned into two subsets of variables: rigid and flexible ones. A rigid 
variable must have the same value in all states of a computation, while a flexible variable may assume different 
values in different states of computation. And hence, it is assumed that all occurrences of parametrised sentence 
symbols in >p must be rigid (Manna Z. and Pnueli A. 1992). In particular, the following example was given in 
this work.
Example 2.45(admissible instantiation)
Let v e V be rigid. Consider the following state-valid scheme.
cp : V ((x L v) =e> p(v)) =s> y ((x > v + I) => p(v + 1))
Applying rule GEN followed by the instantiation: a : p(u) <- O(\ = u), we can obtain the following valid 
entailment â¡ cp[oc|.
V ((x > v) =$ O(x = v)) =^>> V ((x > v + 1) =$ O(x = v + l))t
In accordance with the above considerations, for instantiations of schemes that may contain quantifiers, the 
applied replacements must be admissible. And hence, the following stipulation to rule INST is introduced 
(Manna Z. and Pnueli A. 1992): in the use of INST for deriving cp[oc| from cp , the replacement a must be
Provided there is no ambiguity and for convenience, in the next considerations, we shall use basic notions related to this subsection.
t Since '=>' and '<=>' denote the logical connectives of implication and equivalence, it is used here the same form of the corresponding 
abbreviations (Manna Z. and Pnueli A. 1992), as these used in Subsection 2.3: <p =â > ip <=>df n(<p => >|Â») and <p Â«=Â» ip <=>df n(<p <=> >p)- 
respectively.

261
admissible for cp. Some additional notions and/or axioms concerning variables, equality and quantifiers, related 
to this work, are also illustrated below.
The introduction of variables should require replacements of the form: x <- e . which replace a variable x 
with an expression e. Any such expression e is said to be rigid if it does not refer to any flexible variable. This 
replacement is called compatible if either both x and e are rigid or x is flexible. Assume that p(x) has one or 
more occurrences of x and that there is no quantification over x. We shall say that x <- e is admissible forp(x) 
if it is compatible and none of the variables appearing in e is quantified in p(x). According to the last 
considerations, we shall also say that e is admissible for p(x) and we shall write p(e) for the instantiated 
formula p(x)[x <- e]. The following axioms concerning equality were introduced.
(reFl-1) 
(REPL-E) 
(SUBS-E) 
(FRAME)
â¡(e = e)
(ei = e2) -Â» (p(ei) o p(e2))
â¡(ei = e2) =$ (p(ei) <o> p(e2))
p - > op
[the axiom of reflexivity for equality}
{the axiom of replacement of equals by equals}
{the axiom of substitutivity of equality}
{the FRAME axiom}
It is assumed in the last axiom that the state formula p is rigid. In particular, in accordance with this axiom, 
there were derived some theses (Manna Z. and Pnueli A. 1992). As an example, the proof of the opposite 
implication (wrt FRAME), i.e. 'op =a> p' is illustrated below. We shall first present the proof of the following 
rule (Rl, described as a sequent): p <o> q I- p =a> q.
Proof(Rl):
(1)
p <o> q
{a}
(2)
â¡ (p o q)
{df '<Â«> ': 1}
(3)
â¡ ((p => q) a (q => p))
{ df 'Â« '. SR : 2}
(4) n(p =f q)
p =-> q- â¡
Proof Op =Â» p):
{T 2.94, -K:3}
{df '=Â»'â . 4}
(1)
~P =^> o ~p
{FRAME}
(2)
â¡(~P o ~p)
{df '=Â»'â . 1}
(3)
â¡(~o ~P P)
{CC. SR: 2}
(4)
~o ~p =>> p
{ df '=>>': 3}
(5)
O ~P =A> ~ op
{FA2, Rl}
(6)
â¡(o -P =i> ~ Op)
{df '=>>': 5}
(7)
â¡(op ~o ~p)
{CC. SR: 6}
(8)
op =>> ~ o ~p
op =>> p. â¡
{df 
7}
{E-TRANS : 8.4}
In the next considerations, there are first presented two axioms characterising properties of the next and 
previous values of variables, denoted below by x+ and x . respectively. Then there are also given several 
axioms and rules concerning quantifiers (Manna Z. and Pnueli A. 1992).

262
Let u be a rigid variable and x be either rigid or flexible one. By cp(u,x) it is denoted a state formula in 
which the only free variables are u or x or both. The following two axioms are introduced.
cp(u.X+) Â«-:â > Ocp(n.x)
(NXTV)
(PRVV)
cp(u,x ) <o> (first
*
 a cp(u.x)) v 0cp(u,x)
The above two axioms can be generalised for state formulae of the form cp(m, ... ,um, xi. ... ,xn), where m. 
.... Um are rigid. Moreover, in accordance with these two axioms, the following two properties can be shown: 
â¡ (u = u+) and n(u = u"). By Thesis 2.94 and FA1 it follows that: u = u+ = m.
The following axioms for quantifiers were introduced. The two formulae, presented in Q-Uual (quantifier 
duality) are similar to theses T 2.135 and T 2.136 (see Subsection 3.3).
(Q-DUAL)
~ 3 p(x) <o> V ~ p(x) 
X 
X
~ V p(x) <o> 3 ~ p(x) 
X 
X
The next two axioms (quantifier instantiation and universal commutation^) are given as follows (u, x denote 
variables and p(u), p(.x) are formulae, e is an admissible expression forp(u)).
(V-INS)
(VO-COM)
V p(u) =A> p(e) 
u
V op(x) <<=â > o V p(x) 
X 
X
According to the last axiom, similar formulae related to V0-COM. 3o-com and 30-com are also derived. 
Moreover, similar properties are satisfied for the weak version '0 ' (left to the reader).
There is only one basic inference rule concerning quantifiers. Let u be a variable, p and q(u) - two 
formulae. Assume that u has no free occurrences in p. This rule, called universal generalisation and denoted by 
'V-gÂ£n', is represented as follows (Manna Z. and Pnueli A. 1992).
(V-GEN)
p -Â» q(u)
P -â¢>> V q(u)
Proof V-GÂ®J):
Let 'p =a> q(u) ' be valid and ct be an arbitrary model. Assume that p holds at position j of ct. We 
should show that 'V q(u) ' also holds at that position. Consider any ct', an u-variant of ct. Since p does not 
u
depend on u, p holds at (ct'j). Then 'q(u) ' also holds at (ct'j)Thus, 'q(u) ' holds at j of all u-variants of 
ct. And hence, ' V q(u) ' holds at (ct,j). â¡
* ST (or equivalently: e F )': 'This formula states that there is no previous position that satisfies ' T '. Since all positions that are in the 
model satisfy ' T '. this is equivalent to the following: 'there is no previous position'. Note that this formula always holds at the initial 
position of every model, and nowhere else" (Manna Z. and Pnueli A. 1992).
t Known as one of Barcam's axioms (Ruth Barcan Marcus: 1921 - 2012).
* In short: ~p holds at (cr.j)'
!
1 The proof is given below.
(1)
P =Â» q(u)
{ a)
(2)
â¡(p =^> q(u))
{ df 
1}
(3)
P
{p does not depend on u)
(4)
P q(u)
{PAI)

263
In accordance with the above axioms and the last rule, many derived rules can be obtained, e.g. E-1NST 
(expression instantiation), 3-INTR (3-introduction), QQ-INTR, where 'Q' is either universal or existential quantifier, 
defined as 'VV-INTR' and '33-INTR', ( four rules) respectively, etc. (Manna Z. and Pnueli A. 1992):
(E-INST) 
p(u) H p(e) (if 'e' is admissible for p(u))
(3-INTR) p(u) =^>> q I- 3 (p(u) =>> q) (if 'u' has no free occurrences in 'q') 
ll
(QQ-INTR)
p(x) =Â» q(x) V Q p(x) =Â» Q q(x)
p(x) Â«-Â» q(x) V q p(x) <o> q q(x)
Here, as an illustration, is the proof of one of the rules 'VV-INTR', presented in this work.
Proof(p(x)
q(x) /- V p(x) =.Â» V q(x))
(1)
p(x) -> > q(x)
{a}
(2)
V p(x) "â > P(x)
[V-INS, e-dtx}
(3)
V p(x) -:â > q(x)
[E-TRANS: 2.1}
V p(x) =ra> V q(x). â¡
{V-GEN : 3}
The above introductory notions are only an illustration of this excellent work. Manna and Pnueli's temporal 
logic was interpreted over general models. On the other hand, the considered system was also used for such 
specific models, corresponding to computations and program validity (left to the reader).
As stated earlier, the temporal predicate calculus cannot be axiomatised completely, but this system is 
sufficient to deduce a lot of useful theorems* *. The presented here first-order linear temporal predicate logic 
includes four future functors, i.e. 'o, â¡, O. U' and five axioms: modus ponens, necessitarian (similarly to GR in 
modal logic: 1= cp =e> 1= â¡ cp ). generalisation (see: 'V-GEN'), reflexivity (axiom for equality) and substitutivity 
(corresponds to 'E-INST'). In the next considerations, there are presented concepts needed for specification and 
verification of concurrent systems, in particular related to the mutual exclusion problem', as an example. 
Peterson's algorithm is considered (Peterson G.L. 1981). Some other works are cited below.
(-C : 4.3}
* Yakar R., Temporal logic. Theory and Applications. Tel - Aviv University 58pp: 
file: 1^ Temporal"il20piedicate"n20calciiliis paper"o202.pdf
t See: Subsection 2.1.
A temporal predicate calculus based on Lukasiewicz's ternary logic system L3 with W3 =df {0. 1/2. l}t 
was presented in (Chirita C. 2008). The proposed system alphabet consists of the following primitive symbols: a 
countable set V of variables (x, y, ...), an arbitrary set of constant symbols, an arbitrary set of predicate symbols: 
with each such symbol is associated a natural number n ( > 0, the arity of P). the propositional connectives 
'- 'and '=>'. Prior's tense logic functors 'G' and 'H' (see Subsection 2.3), the universal quantifier 'V' , 
parentheses '( . ) ' and square brackets '[.]'. In addition to the axioms of three-valued Lukasiewicz's logic, 
there are used five axioms concerning 'G'.'H" and P'. Here, by F(cp) it is denoted 'the set of free variables of cp. 
Next, there are given four axioms concerning the universal quantifier. The proposed system uses the following 
four inference rules: modusponens, generalisation and two kinds temporal generalisation (wrt 'G' and 'H'). It 
is shown that this system is complete. From a formal point of wiev. this system should be defined as a tense 
predicate calculus.
q(u). â¡

264
In the next work (Venkata S.R.P. 2015). there are studied some (dynamic) problems in artificial intelligence 
involving time constraints (e.g. such as: 'before time', 'after time', 'in time', etc.). And hence, the considered 
problems may contain an incomplete information, i.e. knowledge representation. Any proposition containing an 
incomplete information can be considered as a fuzzy one. Moreover, any such proposition may contain some time 
constrains. So. it is proposed a fuzzy temporal logic system dealing with an incomplete information.
'Temporal specifications are often used when phenomena are modelled and dynamics play a main role. If 
simulation is one of the aims of modelling, usually a restricted, executable modelling language format is used, 
based on some form of past to future implications. In this paper a detailed transformation procedure is described 
that takes any temporal predicate logic specification and generates a specification in a past implies future normal 
format. The procedure works for temporal specifications in which the atoms either express time ordering relation 
or are state-related, i.e. include only one time variable'Treur J.*  The considered approach applies to more than 
one specific logic. In particular, it is introduced the notion of state - time partitioned formula and it is assumed 
that any formula is state - time partitioned^.
* Treur J.. Past-fiiture separation and normal jorms in temporal predicate logic specifications. Vrije Universiteit Amsterdam: 27pp: 
file://^/Temporal1! o20predicate"o20caleulus/paper"o205 .pdf.
t An atom that involves only one time variable or constant is called state - related atom. A formula is called state - time partitioned if 
every atom that occurs in it either is a state - related atom or time - ordering atom (e.g. 'ti < t2').
* Erwig M. and Schneider M., Spatio-temporal predicates. FemUniversitat Hagen. 38pp: 
file:///F:/Temporall!o20predicatel!o20calculus/paperl! o2O4.pdf.
Â§ 'Abstract data types whose values can be interpreted as complex entities into databases and whose definition and integration into 
databases is independent of a particular DBMS model', i.e. a particular data base model and structure.
" The used the lambda notation, in general: 'A(xi........ xâ).e' denotes a function that takes arguments Xi.......... xâ and returns a value
determined by the expression e.
'The affinity of special and temporal phenomena has been recognised for a long time in the literature. This 
paper investigates temporal changes of topological relationships and thereby integrates two important research 
areas: first, two-dimensional topological relationships that have been investigated quite intensively, and second, 
the change of special information over time that lias recently been identified as an important research topic' . In 
this work, there are investigated spatio - temporal predicates for describing developments of special topological 
relationships. In accordance with this work, the last predicates can be obtained by temporal aggregation of 
elementary spatial predicates and sequential composition. For this purpose, it is presented a new spatio - temporal 
data model (an extension of spatial data model to temporal concepts: a more integrated view of space and time, allowing the 
treatment of continuous special changes). The concept of spatio - temporal data types* is next introduced. A temporal 
version of an object of type a is then given by a function from time to a (motivated by the observation that 
anything that changes over time can be expressed as a function over time), see: (Erwig M. et al. 1998). And hence. 
spatio-temporal objects are considered as special instances of temporal objects where a is a spatial data type 
(like point or region). The universal and existential quantifiers are overloaded considering these two quantifiers 
as (temporal) universal and existential aggregations, respectively. Let p be a spatial predicate and Si and S2 be 
two spatio - temporal objects. The semantics of existential quantification is presented as follows: 3 p (Si. S2) is 
true iff p is true for the values of Si and S2 at some time, where 3p =df X (Si. S2). 3 t: p (Si(t). 82(1))
**
 and 
'f ranges over time. Let now ti and tz be the respective domains of Si and S2. As it was shown in this work, 
the semantics of universal quantification Vp (Si. S2) should depend in general, on whether quantification ranges 
overtime, ti u t2. ti. t2. ti n t2. The most restrictive is the first case. i.e. 'time'. Let y e {u , n , 7ti , 712). 
where 7ti(xi, ... ,x;. ... ,xn) =df xb The obtained quantifiers are defined as follows: VYp =df /. (Si. S2). Vt 
e y(dom(Si). dom(S2): p (Si(t). S2(t)). In the next considerations are introduced basic spatio-temporal predicates, 
defined by temporal lifting and aggregation (left to the reader).
'Computer systems continue to grow in complexity and the distinctions between hardware and software keep 
on blurring. Out of this has come an increasing awareness of the need for behavioral models suited for specifying 
and reasoning about both digital devices and programs. Contemporary hardware description languages are not 

265
sufficient because of various conceptual limitations' (Moszkowski B. 1982). This report describes 'a logical 
notation for reasoning about digital circuits. The formalism provides a rigorous and natural basis for device 
specification as well as for proving properties such as correctness of implementation. Conceptual levels of circuit 
operation ranging from detailed quantitative timing and signal propagation up to functional behavior are 
integrated in a unified way. A temporal predicate calculus serves as the forward core of the notation, resulting in 
a versatile tool that has more descriptive power than any conventional hardware specification language'. This 
notation is based on discrete time intervals and combines aspects of standard temporal logics with features of 
dynamic logic (Moszkowski B. 1982).
4.3. Other systems
Some considerations concerning the intuitionistic and paraconsistent predicate logic systems are briefly 
presented below.
Intuitionisticpredicate logic
Intuitionistic predicate logic can be introduced as an extension of the classical intuitionistic propositional 
calculus by adding some axioms and rules related to the classical predicate logic. The used below notations are in 
accordance with (Hilbert D. and Bernays P. 1934, 1939)
*,
 where syntactic variables are used not only to denote 
rules, but also to denote theses related to the subject language {The little encyclopaedia of logic 1988).
David Hilbert (1862 - 1943). Paul Bernays (1888 - 1977)
Let cp be a thesis in intuitionistic propositional logic. Then cp is accepted as an axiom in intuitionistic 
predicate logic. As axioms, are also accepted formulae related to the following two schemes (denoted in the 
metalanguage).
V B(x) => B(a)
B(a) => 3 B(x) 
X
The following two deduction rules are introduced: rules of joining an universal and an existential quantifiers 
(denoted in the same way, i.e. by '+V' and '+3', respectively).
If B => A(x) then B =$ V A(x)
If A(x) =$ B then 3 A(x) =$ B
X
In accordance with the last two rules, it is assumed that A(x) is an arbitrary formula having x as a free 
variable, whereas B is a formula in which x is not free {The little encyclopaedia of logic 1988). Here, the 
following example was given.
Example 2.46{a requirement for B)
Let B =$ A(x) be the following formula: (x < 2) => (x < 3). Assume that x is free. According to +V', 
by assuming in the antecedent of the above implication that x =df 1, we can obtain: (1 < 2) => V (x < 3). Let 
now A(x) => B be the above formula. By assuming in the consequent of the last implication that x =df 4, we 
can obtain: 3 (x < 2) => (4 < 3). â¡
The above two rules '+V' and '+3' can be accepted as primitive ones (since they were accepted without 
using any proofs at all). In accordance with these rules there exists, inter alia, a possibility for obtaining some 
derived rules. As an example, consider the following rule of generalisation (denoted below by 'RGEN').

266
RGEN :
A(x)
V A(x)
The proof of this rule is given below (The little encyclopaedia of logic 1988).
Proof(RGEN):
(1) 
A(x)
(2) 
A(x) =$ ((p v ~ p) A(x))
(3) 
(p v ~p) => A(x)
(4) 
(p v ~ p) => 
V A(x)
V A(x). â¡
{a}
{law of simplification}
{-C:2,l}
{'+V': 3}
{â C : 4, law of excluded middle}
The obtained in this way a set of theses should be de facto a proper subset of the classical predicate calculus. 
As an example, there are no intuitionistic theses the following ones of the classical predicate logic (e g. wrt the use 
of the law: âp =^> p):
~ V A(x) => 3 ~ A(x)
~ 3 ~A(x) =$ V A(x)
~ ~ 3 A(x) => 3 ~ ~ A(x)
V(A(x) v ~A(x))
V (p v A(x)) ==> (p v V A(x))
The proof of the last thesis is given below (the rest proofs are omitted: left to the reader).
Proof(the last formula):
(1)
V (p v A(x))
{a}
(2)
~ (P v V A(x))
{aip}
(3)
~p
{NA, - K : 2}
(4)
~ V A(x)
(5)
3 ~ A(x)
I
[NV : 4}
(6)
~A(a)
{-3 : 5}
(7)
p v A(a)
[-V : 1}
(8)
P
{-A: 6,7}
contr. â¡
{3.8}
It was shown that the intuitionistic propositional calculus is decidable (as in the classical case (see Theorem 
1.30 of Subsection 1.6). However, the intuitionistic predicate calculus is not decidable, even assuming that this 
calculus is one-argument: which is decidable in the classical case (Kripke S. 1965)
*.
 On the other hand, the 
formulae of intuitionistic predicate calculus can be interpreted as open sets of a topological space. The validation 
V(-) of the calculus formulae into the open sets of a topological space is realised as follows: (<|>i,... , <|>n -1 1= <|>n) 
Semantical analysis of intuitionistic logic. Saul Aaron Kripke, bom 1940.

267
=w V(<|>i) n ... n V(<|>â - i) c V(<|>n). This way. it was presented a completeness theorem of this calculus, see: 
Valentini S.*  Here, in particular, it was used Rasiowa - Sikorski1' - like theorem for the countable Heyting 
algebras, see: (Rasiowa H. and Sikorski R. 1963).
* Valentini S., A simple proof of the completeness theorem of the intuitionistic predicate calculus with respect to the topo logical 
semantics. Italy's University of Padova lOpp: file:///C:/Users/user/Documents/INT%20PRElJl!o20Clc" o20italia.pdf.
t Helena Rasiowa (1917 - 1994), Roman Sikorski (1920 - 1983)
Rule of definitional replacement of one formula by another, see Subsection 1.7.
Â§ See: (Formal logic. Encyclopedical outline with applications to informatics and linguistics 1987).
" Georg Kreisel (1923 - 2015)
It Vadim Anatol'evich Jankov. bom 1935.
hr general, the dialectical principle of the unity of opposites (related to the system-constructivist theory) contributes to the understanding 
of the relationship between some external (e.g. social, ...) and internal (e.g. individual, ...) perspectives (Surikova S. 2007).
Vivian Jerauld McGill (1897 - 1977), William Tuthil Parry (1908 - 1988)
There were given various approaches concerning the (first-order) intuitionistic predicate logic, e.g. (Schutte 
K. 1977), where the intuitionistic predicate calculus is introduced 'syntactically by means of axioms and basic 
inferences which are motivated in a natural way by logical inferences'.
Let cp be derivable in the intuitionistic predicate calculus, in short: i-ipc cp. Assume that cp is valid, i.e. 
thesis, in short: l= cp. We can interpreted logical implications as oriented edges of a digraph, e.g. the implication 
'cp =$ can be represented represented by the oriented edge: (cp.q/). Next, by 'cp - it' we shall denote the fact 
that 'cp is intuitively true'.And hence, in accordance with the last considerations, the following "oriented cycle' 
can be obtained (Swart H.C.M. de. 1977): (i-ipc cp, cp - IT), (cp - IT. i= cp). (i= cp, i-ipc cp). There were proposed 
various interpretations and/or suggestions related to this digraph. The models validity in the last work is defined 
by 'validity in the nodes of some partially ordered set'.
It is sometimes convenient to consider some (proper) superset of theses of Heyting's system of intuitionistic 
logic (see Subsection 2.4). Any such superset, closed wrt the primitive rules RR1 and - C. is said to be an 
intermediate logic. The last term was first introduced in (Umezawa T. 1959, 1960) and hence, there was initiated 
a systematic research in this area. In fact, such logic systems were introduced in an early time. i.e. during the 
search for semantics of intuitionistic logic (Heyting A. 1930). However, the considered here matrix model was 
not an adequate such semantical model. But. in fact, this model can be considered as the first intermediate logic 
(i.e. superintuitionistic logic). The axiomatics of the last system was presented in (Lukasiewicz J. 1938). Here, to 
Heyting's axiomatic system (of the intuitionisticpropositional logic, see Subsection 2.4) there was added the following 
formula: (~ p => q) => (((q => p) => q) => q). And hence, the last logic is also known as Heyting's - 
Lukasiewicz's one? In a similar way (adding new formulae to the axioms of intuitionistic logic) there were introduced 
such logics as: weak excluded middle logic (Ghilardi S. 1999), Dummett's logic. Kreisel
**
 - Putnam's logic. 
Scott's logic. Jankov11 's logic (Jankov V.A. 1973): see "Jankovformulas and intermediate logics ' (Bezhanishvili 
N. and JonghD. de. 2006), see also (Rybakov V.V. 1992), and so on.
Paraconsistent predicate logic
A formal system (deductive system, deductive theory,. . .) is said to be inconsistent if there is a formula cp of 
the system such that cp and its negation, ~ cp, are both theorems of this system. In the opposite case, the system is 
called consistent (Da Costa N.C.A. 1974). The propositional logics introduced in (Da Costa N.C.A. and Wolf 
R.G. 1980) were extended to first-order predicate calculi (Da Costa N.C.A. and Wolf R.G. 1985). The aim of the 
last work was a formalisation of certain aspects of dialectics# in accordance wich the interpretation given in 
(McGill V.J. and Parry W.T. 1948)* * * Â§ * * * Â§Â§. Some results concerning the above introduced first-order predicate calculi 
are given below.
Let DL (i.e. dialectical logic) be the propositional logic system given in (Da Costa N.C.A. and Wolf R.G. 
1980). The obtained new predicate logic system, denoted by DLQ, has the following primitive symbols (Da Costa 
N.C.A. and Wolf R.G. 1985):

268
(1) 
The connectives', a , v , => and Â°. where the last symbol (known as "stability operator') is defined as 
follows: cpÂ° Odf ~ (cp a ~ cp),
(2) 
The universal and existential quantifiers, i.e. V and 3 (respectively),
(3) 
Individual variables (an infinitely denumerable set).
(4) 
Three disjoint sets of individual constants'. A, B and C such that A u B u C 0,
(5) 
Three disjoint non-empty sets A', B' and C', containing constant predicate symbols of any rank n
6 N ,
(6) 
For any n e N . containing an infinite denumerable set of predicate variables of rank n, and
(7) 
Parentheses (left: '(' and right ')' ).
The following syntactical notions are used below (Da Costa N.C.A. and Wolf R.G. 1985). The letters A, B 
and C , with or without subscripts, are employed as metalinguistic variables for formulae.* By x, y and z, with 
or without subscripts, there are denoted individual variables. The letters a, b and c are used as syntactical 
variables for individual constants and t - denotes arbitrary term. The above extension of DL to DLQ was 
realised by using the following additional axioms.
1 In accordance with (Hilbert D. and Bemays P. 1934, 1939), as in the previous considerations concerning intuitionistic predicate logic.
T Two formulae are said to be congruent (Kleene S.C. 1952) in the case that one can be transformed into the other only in accordance with 
the commutative axiom. And hence, congruent formulae may differ only in the order of enumeration of their terms and in the order of the 
literals associated with any term.
1 A formula (p is a well-formed positive predicate formula iff it is formed in accordance with the usual rules of formation and neither 
nor the existensial quantifier ' 3 ' occur in (p (Asenjo F.G. 1996).
(Al) C A(x) / C V A(x)
(A2) V A(x) A(t)
(A3) 
A(t) 
3 A(x)
(A4) 
A(x) 
C / 3 A(x) 
C
(A5) 
V (A(x)) Â° => (V A(x)) Â°
(A6) 
V(A(x))Â° =?â  
(3 A(x))Â°
(OA7) 
If A and B 
are congruent formulae, i.e. A L B or one is obtained from
the other by suppression of vacuous quantifiers, then ' A o B' is an axiom.
In accordance with the last work, some properties concerning DLQ were also shown, e.g. it was shown that 
all schemata and rules of classical positive predicate logic are valid in DLQ. Moreover DLQ is undecidable, also 
it is a conservative extension of DL (i.e. schemata not valid in DL are not valid in DLQ either). The presented system 
DLQ is consistent and nontrivial, etc. In addition to some formulae in DL (e.g. A a ~A => B, (A => B) => (~B => 
~ A), â A <=> A, etc.). In particular, the following two formulae are not satisfied in DLQ (Theorem 8 of the above 
work). A more formal treatment is left to the reader.
3A(x) o ~ V ~ A(x)
VA(x) q ~ 3 ~ A(x)
X 
It
"Paraconsistency is, roughly speaking, a property of negations (a negation-like operators, and is known to be 
useful for representing inconsistency-tolerant reasoning more appropriately. Examples of paraconsistent 
negations are De Morgan's type negations such as strong negation (Nelson D. 1949), negations based on fourÂ­
valued logic (Belnap N.D. 1977) and negations based on bilattice logics (Arieli O. and Avron A. 1996)', see: 
(Kamide N. and Wansing H. 2010). Hie notion of a co-implication (first introduced in intuitionistic logic) 

269
combined with paraconsistent negations was first presented in (Wansing H. 2008). And hence, two new 'first- 
order paraconsistent logics with De Morgan type negations and co-implication*. called symmetric paraconsistent 
logic (SPL) and dual paraconsistent logic (DPL)' were introduced by Kamide N. and Wansing H. (2010). Here, a 
Gentzen's type sequent calculi was used. 'The logic SPL is symmetric in the sense that the rule of contraposition 
is admissible in cut-free SPL. By using this symmetry property, a simpler cut-free sequent calculus for SPL is 
obtained. The logic DPL is not symmetric, but it has the duality principle. Simple semantics for SPL and DPL are 
introduced, and the completeness theorems with respect to these semantics are proved. The cut-elimination 
theorems for SPL and DPL are proved in two ways: One is a syntactical way which is based on the embedding 
theorems of SPL and DPL into Gentzen's LK (Gentzen G.K.E. 1934, 1935), and the other is a semantical way 
which is based on the completeness theorems'. The main difference between the above two logics is related to the 
use of the corresponding four inference rules of adding a paraconsistent negation of an implication / coÂ­
implication to the antecedent / consequent of a sequent. The presented inference rules for quantifiers, related to 
SPL and DPL are the same. They are illustrated below. Here, the paraconsistent negation is denoted by '.
* De Morgan 's type negations have the common characteristic axioms of De Morgan's laws, there are used in the last work two types of 
negation connective: classical (here denoted by ') and paraconsistent one, i.e. De Morgan's type negation, denoted by ' ~ '). Provided 
there is no ambiguity and for convenience, we shall use here the reverse version of these designations. Moreover, instead of a, P,.... we 
shall denote formulae by cp. ip, ... , etc. The co-implication connective ' , known also as subtraction (or difference) operator, is defined as 
follows: p <= q czjt p a ~q (Kamide N. and Wansing H. 2010). Obviously, in classical logic: p <= q Â«=> ~ (p q).
It is used Gentzen's type sequent calculi by extending LK. 
- 
i cp[z/x], THÂ©
+-iVd:
- i V q). T I- Â©
- 
i cp[t/x], THÂ©
â 13 cp. T Iâ Â©
I
r i- Â©, âi cp[t/x]
+ â Vc:
T I- Â©, â> V cp
T I- Â©, -i cp[z/x] 
+ â3c:
I Iâ 0, âà¥¤ z <p
X
In accordance with the last formulae, 'f and 'z' are used as a term and an eigenvariable, i.e. an individual 
variable with the eigenvariable condition, respectively. Moreover, cp[t/x] denotes a formula obtained from 
cp by replacing all free occurrences of the individual variable x in cp by the term t. but avoiding a clash of 
variables (Kamide N. and Wansing H. 2010). Let ' and ' be the paraconsistent and the classical 
negations, respectively. As an example, some properties given in the last work are illustrated below.
o cp
{SPL}
cp o cp
-, (cp =z> q/) o (-, q/ e= -, cp)
-, (cp e= cp) O (-, cp =z> -, cp)
{SPL} 
{SPL} 
{SPL}
(cp =d cp) Â» (cp e= cp) 
{DPL}
(cp e= cp) Â» (cp =d cp) 
{DPL}

270
De Morgan's laws wrt the paraconsistent negation are satisfied in the same manner as in the classical 
predicate logic, e.g. -.3cpoV-.cp.In particular, it was shown that the propositional fragment of SPL is
decidable, DPL is paraconsistent wrtetc.
In general, the notion of a paraconsistent negation involves some fundamental questions, mainly from 
philosophical point of view.in particular 'the question of the existence of paraconsistent logic is still an open 
problem', see: Beziau J -Y
*
 (left to the reader).
' 'To know if paraconsistent negations are negations is a fundamental issue: if they are not, paraconsistent logic does not properly exist. In a 
first part we present a philosophical discussion about the existence of paracon si stent logic and the surrounding confusion about the emergence 
of possible paraconsistent negations. In a second part we have a critical look at the main paraconsistent negations as they appear in the 
literature.' Beziau J -Y., Are paraconsistent negations negations'! (Dedicated to Prof. Newton C.A. da Costa for his 70th birthday), Stanford 
University, Centre for the Study of Language and Information, SNSF, 22pp: 
file:///L:/lntuitionistic0/o20and0/o20paraco0/o20predic0/o201ogics%200/o20and%20paracons0/o20set0/o20theory/PAlLACONSlSTEN'r%20NEGA 
T10N%20ARTYKULY/paraconsistent%20negations%20is%20negation.pdf.
In this chapter were considered classical and also various non-standard predicate logic systems. In particular, 
first-order predicate logic is a commonly accepted standard for the formalisation of mny important notions used 
in mathematics, in particular in discrete mathematical structures (e.g. sets, relations, algebraic systems, etc). Sets 
are presented in the next chapter.

271
III. Sets
Set theory is a basic tool in discrete mathematics and also in mathematical analysis (concerning infinite sets). 
Initially, there is given a historical outline related to the development of this theory (The little encyclopaedia of 
logic 1988). And next, starting with the axiomatic foundations, some well-known (set-algebraic) classical basic 
notions and definitions are introduced (Slupecki J. and Borkowski L. 1967). The most of considered proofs are 
from assumptions. Several applications are also given. In the next considerations Kripke- Platek set theory is 
briefly presented. Some comments concerning commonsense sets are also given. Next some elements of non- 
classical set theories are given, such as: multisets (or bags) and multirelations, fuzzy sets and fuzzy relations, 
rough sets or also non-standard approaches: fuzzy rough sets, interval type-2 fuzzy sets, near sets, forcing and 
non-wellfounded sets, and paraconsistent sets. Bunch theory is also briefly presented. It is shown that the 
generalised Lukasiewicz's fuzzy t-nonn (introduced in Chapter I) may be considered as an adequate t-nonn in the 
case of obtaining a distance function of the Minkowski class. Some other properties and examples are also given. 
In particular, a possibility of a generalisation and improving of the notions of lower and upper approximations 
used in fuzzy rough sets is also presented.
5. Classical set theory
Set theory was originated by G. Cantor, in accordance with his works for the time period 1871 - 1883: e.g. 
(Cantor G. 1878)
*.
 And hence, were given basic properties concerning sets, other related notions and numerous 
theorems (being of fundamental importance until now). However, some parts of this theory, in particular set algebra, 
were formed in earlier time periods: as a beginning, in Leibniz's works and next developed by J. H. Lambert and 
L. Euler (Euler's geometrical relationships between sets). A first attempt of formal introduction of the notion of 
relation was also given: W.S. Hamilton and A. De Morgan. There was also presented a formalised calculus of 
sets, now known as Boolean algebra'. G. Boole. Relation calculus in combination with set algebra were 
developed in works given by Ch.S. Peirce and E. Schroder. Advanced studies of non-finite sets were presented 
in some works concerning mathematical analysis, e.g. R. Dedekind or P. du Bois-Rcymond? However, all 
these earlier developments were rather fragmentary than general, in comparison with the precision of Cantor's 
work. On the other hand, the notion of set. used in the last work, was considered rather intuitive. In consequence, 
on ground of Cantor's theory of sets there were upraised several antinomies, e.g. to the most known belong the 
following two ones: Russel's and Burali - Forti's antinomies." Preventing antinomies to appear becomes 
possible by restricting the scope of the notion 'sef. The first axiomatic system, satisfying this restriction, was 
introduced by E. Zennelo in 1904, see: (Zennelo E. 1908). Another such prevention (by distinguishing logical types) 
was proposed by B. Russell (Whitehead A.N. and Russell B. 1913). Zennelo's system was extended in 
succession by A. Fraenkl and T. Skolem. An axiomatic system was also proposed by J. von. Neumann, * * * Â§ 
* Georg Ferdinand Ludwig Philipp Cantor (1845 - 1918)
t Gottfried Wilhelm Leibniz (1646 1716), Johann Heinrich Lambert (1728 1777), Leonhard Paul Euler (1707 1783)
1 William Stirling Hamilton (1788 1856), Augustus De Morgan (1806 1871), George Boole (1815 1864)
Â§ Charles Sanders Peirce (1839 - 1914), Friedrich Wilhelm Karl Ernst Schroder (1841 - 1902), Julius Wilhelm Richard Dedekind (1831 - 
1916), Paul David Gustav du Bois-Reymond (1831 1889)
" Bertrand Russell (1872 - 1970), Cesare Burali-Forti (1861 - 1931)
'1 Adolf Abraham Halevi Fraenkel (1891 - 1965)

272
extended by K. Godel and P. Bemays, Quine's set theory (a version on the basis of Zennelo's axiomatic system and 
Russell's type theory)
*
 **
, etc.
*Emst Friedrich Ferdinand Zennelo (1871 - 1953), Adolf Abraham Halevi Fraenkel (1891 - 1965), Thoralf Skolem (1887 - 1963), John 
von Neumann (1903 - 1957). Kurt Godel (1906 - 1978). Paul Bemays (1888 - 1977). Willard Van Orman Quine (1908 - 2000)
t Andrzej Grzegorczyk (1922 - 2014)
t x Â£ X <=>df V (z 6 x => z 6 X) 
z
' <I>(x) ' denotes a mathematical expression, describing some property associated with x. Sometimes A5 is also known as an axiom of 
separation or also restricted comprehension, hr accordance with A5, any definable subclass of a set is a set.
**
5.1. The axiomatic approach
The human intuition is not sufficient for deciding about various general notions used in set theory. The main 
idea presented in Zennelo's system is a precise characterisation of the following two fundamental notions: 'e' 
(e.g. x e X', similarly: x e y', if y' is a set) and the notion of a set (e.g. ' X in a symbolic way denoted 
below as Z(X), or Z(y), if y' is a set (Grzegorczyk A. 1969). In accordance with the last work, the axiomatic 
system given by E. Zennelo (1908) is presented as follows.
Al (axiom of extensionality)
Z(X) a Z(Y) AV(xeXoxeY)^. X = Y
A2 (existence of a two- 
element set)
V v 3 (Z(W) a V (z e W o (z = x) v (z =y))) 
X y W 
z
A3 (existence of union of 
sets belonging to a family)
Z(X) a V Z(x) 
3 (Z(Y) a V (x e Y o 3 (z e X a x e z)))
xeX 
Y 
x 
z
A4 (power set of a set)
Z(X) =o 3 (Z(Y) a V (x e Y O Z(x) a x c XQ)
A5 (specification axiom)
Z(X) =o 3 (Z(Y) a V (x e Y O x e X a <I>(x)?))
A6 (infi ni ty oxi om )
3 (Z(X) a 3 (x e X) a V Z(x) a V 3 (x Â£ y)")
The above system is usually extended by the following axiom (first introduced by E. Zennelo in 1904 and known 
as axiom of choice: AC): for any disjoint union (i.e. union of pairwise disjoint, non-empty sets) there exists a subset of 
this union containing exactly one member from each of the above sets. Next, the above presented axiomatics was 
extended by A. A. H. Fraenkel, introducing the following two additional axioms: axiom of regularity (or 
foundation) and axiom of replacement (left to the reader: see also Subsection 9.6: non-well-founded set theories). And 
hence, the obtained in this way system of axioms (known as ZFC, C' from 'choice') was accepted as the most 
widely used one.
5.2. Basic notions and definitions
Some well-known (set-algebraic) classical basic notions and definitions are first introduced (Slupecki J. 
and Borkowski L. 1967). The most of considered proofs are from assumptions. Several applications are also 
given. The following designations are used below.
x, y, z, ..., a, b, C, ... set's elements (individuals).
X C y Odf X Â£ y A x Â± y

273
X, Y. Z, .... A. B. C. ... 
sets of individuals, and
X, Y, Z, ..., A, B, C. ... 
families of sets (i.e. sets which elements are also sets).
Let & be the universum. There are considered below only individuals belonging to ?/. 
axiom is accepted.
The following
(A5.1) x e
Definition 5.1 (range equality)
X = Y odf V (x e X o x e Y)
Definition 5.2 (subset)
X t Y Odf V (x e X x e Y)
In accordance with the last definition, we shall say that X is a subset of Y (or equivalently that Y is a 
superset of X. Some set-algebraic properties are illustrated below.
Thesis 5.1
Proof:
(1) 
x e => (x e X =$ x e )
(2) 
x e X => x e
(3) 
V(x e X =t> x e %)
X <= ^.
{ 1= (p => (q =$ p))} 
{-C : LA 5.1} 
{+V : 2}
{Df. 5.2 : 3}
The following designation is also used: 
we can obtain.
X J Y ~ (X c Y). In accordance with Definition 5.2,
~ (X c Y)
O ~V(xeX=>xeY)
JC
O 3 (x e X a x Â£ Y). â¡
{Df. 5.2}
{ NV, NC, SR}
An indirect version of the proof of T 5.1 is given below.
(1) 
X Â£?/
(2) 
3 (x e X a x Â£ 2/).
(3) 
a <Â£ r
(4) 
a e r
contr. â¡
{aip}
{df. 'S' : 1} 
{-3,-K:2} 
{-V: A 5.1} 
{3.4}
The range equality is reflexive, symmetric and transitive, i.e. the following thesis is satisfied (Slupecki J. and 
Borkowski L. 1967)
Thesis 5.2
(a) 
X Â± Y,
(b) 
X = Y Y Â± X and
(c) 
X=YaY=Z^>X = Z.

274
As an example, the following proof of T 5.2(c) was presented.
(1)
X = Y
(2)
Y = Z
{a}
(3)
V (x e X o x e Y)
{Df. 5.1 : 1
(4)
V (x e Y o x e Z)
{Df. 5.1 : 2
(5)
x e X
x e Y
{-V : 3}
(6)
x e Y
x e Z
{-V : 4}
(7)
x e X
x e Z
[TE : 5.6]
(8)
V (x e X O x e Z)
{+V : 7}
X = Z . â¡
{Df: 5.1 : 8
In accordance with the last work, the following theses and lemmas were also presented (the corresponding 
proofs are left to the reader).
Thesis 5.3
(a) 
X Â± Y X c Y and
(b) 
X e Y a Y e X X = Y.
Thesis 5.4 (reflexivity and transitivity of set inclusion)
(a) 
X <= x and
(b) 
X <_ Y a Y <_ Z X Â£ Z.
Lemma 5.1
x = y => V ( x e X o y e X). â¡
Definition 5.3
(a) 
x e {y} o x = y
(b) 
x e {yi,y2. ... ,yn} x = yi v x = y2 v ... v x = yn
Lemma 5.2
V ( x e X o yeX) =a.\ = y.
In accordance with the last two lermnas, we have:
Thesis 5.5
x = y => V ( x e X o y e X). â¡
Let X = Y. According to T 5.2(a) and El (the rule of extensionalityfor identity), the next thesis is obtained.
Thesis 5.6
X = Y X Â± Y.

275
The following axiom (extensionality for sets) was introduced.
(A5.2) X = Y X = Y
Thesis 5.7
X = Y o X = Y.n {A 5.2. T 5.6}
In accordance with the above considerations, the set equality is introduced as follows. Some other definitions 
are also given below.
Definition 5.4 (set equality)
X = Y odf V (x e X o x e Y) {Df. 5.1. T 5.7}
Corollary 5.1
The set equality is reflexive, symmetric and transitive. â¡ {T 5.2, T 5.7}
Let x g X Odf ~ (x e X). The following definitions are also introduced.
Definition 5.5 (set union)
x e X u Y Odf x e X v x e Y
Definition 5.6 (set intersection)
x e X n Y Odf x e X a x e Y
Definition 5.7 (set difference)
x e X - Y Odf x e X a x g Y
Definition 5.8 (set complement)
x e X' Odf x <Â£. X
In accordance with the last two definitions and A 5.1: X' =df 7T - X.
Definition 5.9 (emptyset)
x e 0 Odf x e
Definition 5.10 (proper subset)
XcYOdf X c Y a X a Y
As an example, in accordance with the last definition, we have: 
(the sets of
natural numbers, integer numbers, rational numbers, real numbers and complex numbers, respectively)
*.
Definition 5.11 (symmetric set difference)
X a Y odf (X - Y) u (Y - X)
Next we shall say that two sets X and Y are disjoint iff X n Y = 0 . And for simplicity, e.g. instead 
of x e X a y e X' we shall use: 'x.y e X'.
' More formally: (N Â£ Z) a (L Â£ Q) a (Q Â£ IK) a (IK c Q.

276
There exists a graphical method of representing relationships between (a finite number of) sets. This method, 
introduced in 1880 by John Venn
*,
 is known as I erm diagrams and any such diagram shows all possible relations 
between a finite collection of different setst Some generalisation of the last diagrams was proposed in 
(Luszczewska - Rohmanowa Si. 1953). Here, instead of circles, ellipses were used.
Figure 5.1 An example Venn diagram for An (B 4- C)
Set intersection is left distributive over symmetric set difference, i.e. the following equality is satisfied:
A n (B 4- C) = (A n B) 4- (A n C). And hence, the left and the right side of this equality correspond to 
the same Venn diagram (see the above Figure 5.1: left to the reader). A more formal proof of the last set equality 
is given below (the left side is first considered).
x e A n (B 4- C)
x e (A n B) 4- (A n C)
x e A a x e (B 4- C) 
{Df. 5.6}
x e A a x e (B - C) u (C - B) 
{Df. 5.11. SR}
xeAA(xeBAXgCvxeCAXgB) {Df. 5.5.Df. 5.7.SR} 
xeAAXeBAXgCvxeAAXeC A x g B (a is distributive 
over v )s\
o 
x e (A n B) a x g (A n C) v x e (A n C) a x g (A n B)
o 
x e (A n B) a ~ (x e A n C) v xe(AnC) a ~ (x e A
n B)
o x e (A n B) a ~ (x e A a x e C) v xe(AnC) a~(x 
e A a x e B)
o x e (A n B) a (xgAvxgC) v xe(AnC) a (x g A 
V x t B)
o x e A a xeBAXgAvxeAA xgBax^Cvx 
e A AxeCAXgAvxeA axgCax^B
o xeAAxeBAXgCvxeAAxeCAXgB. â¡
Right distributivity is also satisfied (since n ' is commutative: left to the reader). Moreover, it can be shown that 
set union and intersection are two associative and mutually distributive set operations. De Morgan's laws are 
also satisfied (left to the reader), etc. In general, there exists some correspondence between the propositional 
calculus and set algebra (Slupecki J. and Borkowski L. 1967). And hence, the following properties hold (the 
corresponding proofs are left to the reader).
A u (B u C) - (A u B) u C
'JohnVenn (1834- 1923)
Unlike Venn diagrams, Euler diagrams (introduced in 1768: Leonhard Paul Euler 1707 - 1783) show only relevant relationships.
1 Seweryna Luszczewska - Rohmanowa (1904 -
Â§ In fact, conjunction and disjunction are commutative and mutually distributive logical operations.
" hr accordance with NK (see T 1.8 of Subsection 1.3) and SR.

277
A n (B n C) = (A n B) n C
A n (B u C) = (A n B) u (A n C)
A u (B n C) = (A u B) n (A u C)
(A u B)' = A'n B'
(A n B)' = A'u B'
5.3. Generalised unions and intersections
Let Xi. X2. ... be a set sequence. The notions of a generalised union and intersection are defined as 
follows
*.
Definition 5.12 (generalised union) 
x e UT,- Â°df 3 (x e X;)
Definition 5.13 (generalised intersection)
x e 
Odf V (x e XJ
As an illustration, some properties are presented below.
Thesis 5.8
V (X c X1) X C nX/
â¢ 
i
Proof:
(1)
V (X c Xi)
{a}
(2)
x Â£ nx,
{aip}
(3)
3 (x e X a x i nX()
[df. 'S': 2}
(4)
a e X
[-3 : 3}
(5)
a nx,
(6)
~(a e nx,)
[df. 'g': 5}
(7)
~ V (a e Xi)
[Df.5.13, SR: 6}
(8)
3 (a t X )
[NV : 7}
(9)
a Xio
{-3 : 8}
(10)
a g X a a Â£ Xio
[+K:4,9]
' A more general approach was presented in (Shipecki J. and Borkowski L. 1967). It was considered a function cp(X), defined for any set 
X of this sequence and having as values sets.

278
(11)
3 (x e X /\ x ? X,)
{+3 : 10}
(12)
X s
{df.'S ' : 11}
(13)
X <= Xlo
{-V: 1}
contr. â¡
{12.13}
The following theses are also satisfied (some proofs are left to the reader).
Thesis 5.9
V (X1 c X) o jX, X. â¡ 
f 
I
Thesis 5.10
V (Xi Â£ Yi) =s> ux. Â£ |jy. . â¡ 
i 
i
Thesis 5.11
V (Xi C Yi) =5 rix. S Uy. . â¡ 
/ 
i
Thesis 5.12
X n X; = UCY X,) â¢ Â° 
j i
Thesis 5.13
X u IX- = ncv X,) â n
i 
I
The corresponding proofs of T 5.12 and T 5.13 should require the use of the following thesis (see
Subsection 3.3) : 1= Q (p â¢ A(x)) op
*
 Q A(x), where Q e {V, 3}, â¢ e {a . v} (Q and â¢ are interpreted 
in tire same manner in a given predicate formula).
De Morgan's laws are illustrated by the next two theses.
Thesis 5.14
(ix)' = Ax; 
/ 
i
Proof:
x e ( X, )' Â«
~(x e x, )
~ 3 (x e X;)
V (x g Xi)
V (x e X/ )
1
x e Ax; â¢ Â°
{Df. 5.8}
[Df. 5.12. SR}
{N3}
[Df. 5.8. SR}
[Df. 5.13}
Thesis 5.15

279
(rx,y = UZ.D 
/ 
I
Thesis 5.16
UX,- - UK,- 
U(A7 - Y()
i 
i 
i
Proof:
x e Ux,- - Ur,- Â« x e Ux, A x e Ur,- 
i 
i 
ii
O 
3 (x e Xj) a ~ 3 (x e Yj)
O 
3 (x e X,) a V (x t Yi)
=i> 
3 (x e Xj a 
x g Yj)
O 
3 (x e Xi - Y0
Â« x e U(-V, - Yt) . â¡
{Df. 5.7}
{Df. 5.12. df.'g' . SR}
{ N3. SR}
{- C wrt 1= 3 A(x) a V B(x) =$ 3 (A(x) a B(x))}
{Df. 5.7. SR}
{Df. 5.12}
5.4. Cartesian products and relations
Let (x.y) be an ordered pair
*
 having as a first element x and as a second element y. Any such ordered 
pair is presented with a family of two sets: (x.y) =at {{x}, {x.y}} (Kuratowski K.. 1921). It is used the following 
axiom.
* Ordered pairs were introduced independently in 1914 by Norbert Wiener (1894 - 1964) and Felix Hausdorff (1868 - 1942). But the 
most simple and usenil definition was this one given in 1921 by Kazimierz Kuratowski (1896 - 1980).
T Provided there is no ambiguity, the proof of A5.3b is first presented.
(A5.3) (x.y) = (z.t) o x = z a y = t
Definition 5.14
1. x e {y} odf x = y
2. x e {yi.yi. ... . yn} Â«df x = yi v x = y2 v ... v x = y,
The proof of A5.3 is given below (Slupecki J. and Borkowski L. 1967) .
ProofA5.3b:
(1) 
x = z
(2) 
y = t
(3) 
{x} = {z}
(4) 
{x.y} = {z.t}
(5) 
(x.y) = {{x}.{x.y}} = {{z}.{z.t}} = (z.t). â¡
Proof.15.3a:
(1) 
(x.y) = (z.t)
(11) 
x y
(1.2) 
;x} = {z}
(1.3) 
Kyi = {z.t}
(1.4) 
x = z a y = t
{a}
{Df.5.14(l)}
{df. ' (x.y) '. ' (z.t) '}
{a}
{ada}
;df. (x.y) '. ' (z.t) }
{1.2. 1.3}

280
Definition 5.15 (Cartesian product)*
(2.1)
x = y
{ada}
(2.2)
(x.y) = [[x}}
{df. ' (x.y)
(2.3)
(z,t) = [ [x}}
{1}
(2.4)
x = y = z = t
[2.2, 2.3}
(2.5)
x = z a y = t
{2.4}
x = z a y = t. â¡
[1.4, 2.5}
For X. Y Â£ ?/â . X x Y =df { (x.y) / x e X a y e Y}
Example 5.1 (right distributivityfi
(a) 
(X n Y) x Z = (X x Z) n (Y x Z)
(b) 
(X -Y) x Z = (X x Z) - (Y x Z)
Proof(a):
(x.y) e (X n Y) x Z
x e X n Y a y e Z
[Df.5.15}
X G
X A X e Y a y e Z
{df. n ', SR}
(x e
X A y e Z) a (x e Y a y e Z)
{ P A p 
p. p A q
q A p. SR}t
(x,y) e X X Z A
(x,y) e Y x Z
[Df.5.15, SR}
(x,y) e (X X Z) rt (Y x Z). â¡
{df. n '}
Proof(b):
(x.y) e (X x Z) - (Y x Z)
(x,y) e X X Z A (x,y) i Y x z
{df. '-'}
(x,y) e X X Z A ~((x,y) e Y
X Z)
{df. 'g', SR}
(x.y) e X X Z A ~ (x e Y a y e Z)
[Df.5.15, SR}
x e X a y e Z /k (x i Y v
y i Z)
[Df.5.15, NK, SR}
x e X
a y e Z
A x t Y â 
x e X /\ {distributivity of 'a'
y e Z .a y t Z
wrt 'v'}
x e X a y e Z /y x i Y
{yeZAyeZ}
(x e X A x i Y) a y e Z
{associativity wrt 'a'}
x e X - Y a y e Z
{df. '-'}
(x,y) e (X -Y) x Z . 0
[Df.5.15}
It can be observed that, e.g. (A u B) x (C u D) = (A x C) u (A x D) u (B x C) u (B x D). In
general, the following property is satisfied.
Thesis 5.17
(Ux,) x (Ur,) = U(X,
*lj)
 
f 
t 
i,J
* Derived from Descartes' analytic geometry (Rene Descartes 1596 - 1650, also known by his Latin name Renatus Cartesius). Provided there is 
no ambiguity and for simplicity, the parentheses related to the used here conjunction will be omitted.
Given in (Slupecki J. and Borkowski L. 1967)
* Idempotence, commutativity and associativity of conjunction (i.e. (pxq)Ar <=> pA(qA r)).
Proof:

281
(x.y) e (Ux,) x (UK,)
x e UX,- Aye Ur_.
| (x e Xi) a 3 (y e Y, )
j 3 (x e X, a y e Yj ) 
â  i
3 ((x.y) e X; x Yj )*
ill
(x.y) e UCY,
*
 }{,).â¡
{Df. 5.15}
{Df. 5.12,SR}
{1= 3 A(x) a 3 B(x) Â« 3 3 (A(x) a B(y))}
{Df. 5.15, SR}
{Df. 5.12}
Sometimes it is useful to consider sets satisfying some conditions. And so, let <b(x) be an arbitrary 
condition associated with the free variable x. By <b(a) it is denoted an expression obtained from <b(x) 
substituting x by a. The following definition is introduced.
Definition 5.16 (sets with conditions)!
x e { a / <b(a) } Odf <b(x)
Some properties are illustrated below (Slupecki J. and Borkowski L. 1967). The proofs of T 5.19 and 
T 5.21 are left to the reader.
Thesis 5.18
{ a / Â®(a) v T(a) } = { a / Â®(a) } u { a / T(a) }
Proof:
x e { a / Â®(a) v T(a) } o
Â®(x) v T(x)
o x e { a / <b(a) } v x e { a / T(a) }
{Df. 5.16, SR}
Thesis 5.19
o x e { a / <b(a) } u { a / T(a) }.
{df. u'}
{ a / Â®(a) a T(a) } = { a / Â®(a) } n { a / T(a) }.
Thesis 5.20
\/ (<p(x) o T(x)) o { a / Â®(a) } = { a / T(a) }
Proof(a):
(1) 
V (<D(x) o T(x)) 
X
(2) 
~ ({ a / Â®(a) } = { a / T(a) })
(3) 
~ V (x e { a / <b(a) } o x e { a / T(a) })
(4) 
3 ~ ((x e { a / Â®(a) } x e { a / T(a) }) a (x e { a / T(a) }
=$ x e { a / d> (a) }))
{a}
{aip}
{df. SR}
{NV,-E, SR}
* 3 =df 3 3 is an abbreviation.
The set of all a satisfying condition O(a), another designation: EC>(Â«) ('E' from French word 'ensemble1). E <&{a,b) can be introduced 
a 
a,b
in a similar way.

282
A simplified proof can be obtained by using the notion of an exclusive disjunction. This is illustrated below.
(5)
3 (x e { a / <b(a) } a 
x g { a / Â® (a) })
x t { a / 'l'(a) }vx e { a / T (a) } a
{NK. NC. SR}
(6)
xo e { a / <b(a) } a x0 
Â®(a)}
<t { a / T(a) } v x0 e { a / T (a) } a ao Â£ { a /
{-3 }
(1.1)
x0 e { a / <b(a) }
{ada}
(1.2)
xo e { a / T(a) }
(1.3)
~ (xo e { a / T(a)}
{df. 'Â£ '}
(1.4)
~ T(x0)
[Df. 5.16}
(1.5)
Â®(Xo)
[Df 5.16 : 1.1}
(1.6)
Â®(xo) =*  T(xo)
{-V,-E: 1}
(1.7)
'P(xo)
{-C : 1.5. 1.6}
contr.
[1.4, 1.7}
(2.1)
xi e { a / 'l'(a) }
{ada}
(2.2)
xi i { a / <b(a)}
(2.3)
T(xi)
[Df 5.16: 2.1}
(2.4)
~ <b(xi)
{df. 'Â£ .Df.5.16}
(2.5)
T(xi) <D(xi)
{-V,-E: 1}
(2.6)
<b(xi)
{-C: 2.3. 2.5}
contr. m
[2.4. 2.6}
Proof(b):
(1)
{ a / Â®(a) } = { a / T(a) }
{a}
(2)
~ V (<D(x) o T(x))
{aip}
(3)
3 (Â®(x) <Â£â  T(x))
{NV : 2}
(4)
Â®(xo) & T(xo)
{-3 : 3}
(5)
Â®(xo) A ~ T(xo) V ~ Â®(xo) /. T(x0)
{df.'W: 4}
(1.1)
Â®(xo)
(1.2)
~ T(xo)
{ada}
(1.3)
Xo e { a / <1>(a) }
[Df 5.16}
(1.4)
~ (xo e { a / T(a) })
[Df.5.16. SR}
(1.5)
xo Â£ { a / T(a) })
{df. 'Â£ 1.4}
(1.6)
xo e{ a / T(a) })
{1}

283
contr.
(2.1) 
~Â®(xo)
(2.2) 
T(x0)
(2.3) 
xo Â£ { a / <I>(a) })
(2.4) 
xo e { a /'P(a) })
(2.5) 
xo e{ a / <I>(a) }) 
contr. â¡
{1.5. 1.6}
{ada}
{df. '<Â£ 2.1} 
{Df. 5.16 : 2.2} 
{1}
{2.3. 2.5}
Thesis 5.21 
\/ (<5(x) T(x)) o { a / Â®(a) } <= { a / T(a) }.
Relations are one of the most important topics in mathematical logic. Below are only considered relations 
which are binary (commonly used e.g. in abstract algebraic systems).
Definition 5.17 (binary relation)
An arbitrary subset p c X x Y of Cartesian product of two sets X and Y.
According to the last definition, p is a set of ordered pairs (x.y) such that x e X and y e Y. For 
simplicity, instead of (x.y) e p we shall use: x p y (elements x and y are in p). Similarly, x p'y iff 
(x.y) Â£ p (elements x and y are not in p). We shall say that p = X x Y is complete. Similarly, p = 0 
is said to be empty.
Definition 5.18 (p is function)*
* Definition 5.18, given in (Slupecki J. and Borkowski L. 1967), seems to be the most simple one. In general, it is required the use of the 
quantifier 3<i ("there exists at most one"), see Subsection 3.4. And hence, a particular case is the following expression: V 31 (xpy).
We shall say that p Â£ X x Y is a mapping on X into Y iff V 3 (xpy) A V (xp y A xpy' => y = y'). Any such 
a-S-V 
A-e.V
mapping is function if X, Y Â£ R, or transformation', in the case of sets of points (KemtopfP. 1967). It can be observed that the last
expression is logically equivalent to the following more simpler form (left to the reader): V (( 3 x p y) A(xpyAxpy'=> 
A-e-V v<
y - y')). A more information concerning mappings will be presented in Part II.
A binary relation p is function iff V v V (x p y a x p z =x>y = z) 
.V v Z 
'
Let p Â£ X x Y. The domain and codomain (called also: range or image) of p are defined as follows:
dom(p) =df {x e X / 3 ( x p y)} and cod(p) =df {y e Y / 3 ( x p y)} = dom(p!). where by 'p ' ' it is 
vtiJ' 
' 
' 
a-AV
denoted the opposite (or inverse) relation to p. i.e. p 1 c Y x X such that: ypx Odf xpy.
Definition 5.19 (composition of two binary relations)
Let p c X x Y and ct c y x Z be two binary relations. The composition (called also superposition or 
relative product) p Â° a =df {(x.z) e X x ZI 3 (xpy a yaz)} c X x Z.
,VÂ«
Example 5. 2 (composition)

284
Figure 5.2 An example composition of two binary relations
Consider the following two binary relations: p =dt {(xi.yi). (x2.y2). (x3.yi). (x4.y2)} and ct =dt {(yi.zi). 
(yi.z2). (y2.z3)}. Hence, p Â° ct = {(xi.zi). (xi.z2). (x2.z3). (x3.zi).(x3.Z2). (x4.z3)}. It can be observed that puct = 
{(xi.yi). (X2.y2). (x3.yi). (x4.y2). (yi.zi). (yi.z2). (y3.z3)} g {(xi.yi). (xi.y2). (xi.zi). (xi.z2). (xi.z3). (x2.yi). (x2.y2). 
(x2.zi). (x2.z2). (x2.z3). (x3.yi). (x3.y2). (x3.zi). (x3.z2). (x3.z3). (x4.yi). (x4.y2). (x4.zi). (x4.z2). (x4.z3). (yi.yi). (_Vi.y2). 
(yi.zi). (yi.z2). (yi.z3). (y2.yi). (y2.y3). (y2.zi). (y2.z2). (y3.z3)} = (X u Y) x (Y u Z). â¡
Some properties, concerning the notions of domain and codomain are illustrated below.
Thesis 5.22 
dom(p u ct) = dom(p) domfs)
Proof:
For any x e X :
x e donfp ct)
3 x(pu ct) y
a (xpy v XCTy)
3 (y e Y a ( x P y v x CT y))
3 ((y e Y a xpy) v Cy e Y a xny))
3 (y 6 Y Axpy) v 3 (y 6 Y a x ct y)
3 (xpy) v 3 (XCTy) 
.m 
*
* Ulis logical equivalence is similar as in the case of classical one. i.e. 3 (A(x) v B(x)) <=> 3 A(x) v 3 B(x). However, the use of the 
above two variables should require more complicated proof, hi fact, the corresponding proofs (a and b) are ramified indirect ones. They are 
left to the reader: see Subsection 3.3.
x 6 dom(p) v x 6 dom(<3)
x 6 donfp) domfs). â¡
{df. ' dom '}
{df. u '. SR}
{df. ' 3 V(x)'}
{distributivity of a'}
{logical equivalency of the last 
two lines)*
{df. ' 3 \|/(x) '. SR}
{df. ' dom '}
{df. u '}
Some other properties are presented below (the corresponding proofs of T 5.23 - T 5.26 are left to the
reader).
Thesis 5.23

285
cod(p u ct) = cod(p) u cod(n). â¡
Thesis 5.24
dom(p n ct) c doin(p) domin'). â¡
Thesis 5.25
cod(p n ct) c cod(p) cod(<~,y â¡
Thesis 5.26
dom(p - ct) c dom(p) - domff. â¡
Thesis 5.27
cod(p - ct) c co<7(p) - co<7(ct)
Proof:
For any y e Y :
y g cod(p - a) 
o
3^ X(p - a)y
{df. ' cod '}
3^ (xpy >a xa'y)
{df. ' - '}
3^ (xpy)
a 3 (xa'y) 
xe.V
{this implication is satisfied}'
y e co<7(p) Aye C0<7(ct')
{df. ' cod'}
y e co<7(p) A y g Cod(<3)
{Df. 5.8, SR}
y e co<7(p) - Cod(<3). â¡
{Df. 5.7, SR, Df. 5.2}
Thesis 5.28 
donup)' g dom(p')
Proof:
For any x 6 X :
(1)
x e dom(p)'
{a}
(2)
x Â£ dom(p')
{aip}
(3)
x g dom(p)
{Df. 5.8 : 1}
(4)
~ (x 6 dom(p))
{df. 'g': 3}
(5)
~ 3 (xpy) 
yeY
{df. ' dom SR : 4}
(6)
v (x p' y)
{N3*: 5}
(7)
~ (x 6 dom(p'))
{df. 'g':2}
Hie last implication is satisfied, as in the classical case: 3 (A(x) a B(x)) => 3 A(x) a 3 B(x). Hie corresponding ramified indirect
proof of implication 3 (x p y a xa'y) => 
3 (xpy) A 3 (xa'y) is left to the reader: see Subsection 3.3 .

286
(8) 
~ a (xp'y)
yeY
{df. ' dom ', SR : 7}
(9) 
v (xpy)
{NT: 8}
(10) 
y (xp'y) a v (xpy)
(H) 
v (xp'y a xpy)
{+K:6,9}
{logical equivalency of the last 
two lines)
contr. â¡
{H}
The proof of the next thesis is very similar to the proof of the previous one (left to the reader).
Thesis 5.29
cod(p)' c cod(p'). â¡
Definition 5.20 (p defined in A")
Let p Â£ X x X. Then we shall say that p is a binary relation defined in A' (or equivalently: a binary 
relation on A}.
A particular case are the following two binary relations: 0x =df {(x,x) / x e X} and lx =df X x X 
(KemtopfP. 1967).
Let p be a binary relation on X. We shall say that:
p is reflexive 
Odf
V (x p x)
p is antireflexive* 
Odf
V (x p' x)
p is symmetric 
Odf
V (x p y o y p x) 
x,y e A"
p is antisymmetric1' 
Odf
V (xpy=>yp'x)
x,y e X
p is weak antisymmetric Odf
V ((x py) A (y p X) = (x = y)) 
x,y â¢= v
p is transitive 
Odf
v ((x py) A (y P z I => (x P z)| 
x, y,: e X
p is connected 
Odf
V ((x^y) =a> ((xpy) v (y p x))) 
x,y â = v
* Called also: irreflexive.
Known also as: strong antisymmetric or asymmetric. The above notions are here considered as central. In general, some other notions 
were also introduced, e.g. binary relations which are: quasi-reflexive, or Euclidean {right or left ones), or wheely, or serial, or trichotomous 
(for any x,y G X: exactly one of xpy, ypx or x=y holds'. The Free Encyclopaedia, The Wikimedia Foundation, Inc), etc.: left to the reader.
It can be observed that a relation p which is not reflexive, not necessarily should be antireflexive (and vice 
versa). The following implication is also satisfied: p is antisymmetric =x> p is weak antisymmetric (the proof 
of tliis implication is given below). The only one symmetric and weak antisymmetric relation is 0x (Kemtopf P. 
1967).
Thesis 5.30
V (x p y =â¢ y p' x) =$ v ( (x p y ) a (y p x) =â¢ (x = y |) 
x,yeX 
x,yeX

287
Proof:
(1) v (xpy = yp' x) 
{a}
(2) 
~ v ((x py) a (y p x) = (x = y)) 
{aip}
x,y e X
(3) 
3 ((xpy) a (ypx) a (x^y)) 
{ NV
*.
 NC. SR
x,y e X
(4) a. b e X
(5) apb
u 
[-3
*.
-K:3}
(6) b p a 
'
(1) a^b
(8) a. b e X => (apb => bp'a) 
{-V
*
: 1}
(9) apb ==> bp' a 
{- C : 4.8}
(10) bp'a 
{âC : 5.9}
contr. â¡ 
{6,10}
" Known also as: division with remainder (Euclides 430 - c.360 b.c.).
Example 5. 3 (binary relation)
Figure 5.3(a.b) below is an example of binary relation p represented by (directed) graph or also as a Boolean 
(vertex - vertex incidence) matrix, respectively. Provided there is no ambiguity and for convenience, graph vertices 
are denoted by the (first four even) natural numbers, i.e. X = {2, 4, 6, 8}. For any x.y e X: xpy Odf the 
remainder of the Euclidean division
*
 of x by y is equal to 0, i.e. x mod y = 0. It can be observed that p is 
reflexive and weak antisymmetric. The corresponding analysis related to p' and p-1 is left to the reader.
(a) The graph GP of p
10 0 0
110 0
10 10
110 1
(b) The matrix MP of p
Figure 5.3 An example binary relation p
Let y . p . ct c X x X. We have: y Â° (p u ct) = (y Â° p) u (y Â° ct), i.e. composition is is left 
distributive over set union. And so. the following thesis is satisfied.
Thesis 5.31
V (X ( Y o (p u CT) ) y o X ((y o p) u (y o CT))y)
x,y e X
Proof(a):

288
(1) 
~ V (x(y o (p u ct) )y =a x((y o p) u (y
xj e X
(2) 
3 (x(y o (p u ct) ) y a x((y Â° p) u (y <
xj e X
(3) 
a, b e X
(4) 
a ( y Â° (p u ct) ) b
(5) 
a((y o p) u (y o n))'b
(6) 
3 (ayzAz(pu n)b)
z e X
(7) 
a(y o p)'b
(8) 
a (y o ct)' b
(9) 
~ 3 (ayuAupb)
u e X
(10) 
~ 3 (a y w a w ct b)
w e X
(11) 
v (ay'u V up'b)
u t X
(12) 
y (ay'w v wci'b)
w e X
(13) 
C 6 X
(14) 
aye
(15) 
c (p u ct) b
(16) 
u =df c
(17) 
c e X =$ ay'cvcp'b
(18) 
w =df c
(19) 
c e X =$ ay'cvcCT'b
(20) 
c p b v c ct b
(21) 
a y' c v c p' b
(22) 
a y' c v c ct' b
(23) 
c p'b
(24) 
c ct' b
(25) 
cob
contr. â¡
' CT))y) 
{a}
CT))'y) 
{NV
*,
 NC, SR : 1}
{-3
*,-K:2}
{df. 'o': 4}
{df. " df. 'u', NA.
SR,-K: 5}
{df. 
Â° 7}
{df. 
Â° 8}
{N3
*,
 NK, SR : 9}
{N3
*,
 NK, SR : 10}
{-3
*,-K:6}
{-V
*:
 11}
{- V
*
: 12}
{df. ' u ' : 15}
{-C : 13, 17}
{-C : 13, 19}
{-A : 14,21}
{-A : 14, 22}
{-A : 20, 23}
Prooffb):
(1) 
~ V (x((y Â° p) u (y o CT))y x(y Â° (p u cy))y)
x,y e X
{a}

289
(2)
3 (x ((y Â° p) U (y Â° CT))y A x (Y Â° (p U CT))' y) 
x y e X
{NV*. NC. SR: 1}
(3)
a.b e X
(4)
a ((y Â° p) u (y Â° ct)) b
{-3*,-K:2}
(5)
a ( y Â° (p ct) )' b
(6)
a (y Â° p) b v a (y Â° ct) b
{ df. ' u ' : 4}
(7)
~ 3 (a y z a z (p u ct) b) 
z e X
{ df. ", Â° 5}
(8)
v (a Y' Z V z (P u CT)' b) 
ze.X
{N3*. NK. SR : 7}
(9)
3 (ayuAupb) v 3 (ayw a w ct b)
{ df. ' 0 '.SR : 6}
U â¬ X 
V E -V
(1.1)
3 (a y u a u p b) 
ue.V
{ada}
(1.2)
C 6 X
(1.3)
aye
{-3',-K: 1.1}
(1.4)
c p b
(1.5)
c e X =z> a y' c v c (p u ct)' b
{- V*: 8}
(1.6)
a y' c v c (p u ct)' b
{-C : 1.2. 1.5}
(1.7)
c (p u ct)' b
{-A : 1.3. 1.6}
(1.8)
c p' b
{-K : 1.7}
*
contr.
{1.4. 1.8}
(2.1)
3 (a yw a w ct b) 
w e X
{ada}
(2.2)
d e X
(2.3)
a y d
{-3*,-K:2.1}
(2.4)
d CTb
(2.5)
d e X => a y' d v d (p u ct)' b
{- V*: 8}
(2.6)
a y" d v dip u ct)' b
{-C : 2.2, 2.5}
(2.7)
d (p u ct)' b
{-A: 2.3, 2.6}
(2.8)
dCT'b
{-K : 2.7}
contr. â¡
{2.4. 2.8}
Right distributivity or use of set intersection in T 5.31 (instead of set union) are left to the reader. The notions 
of power set and partition of a set are presented below.
Definition 5.21 (power set)
The power set (or the powerset) of a set X, IP(X) =df{Y/Y Â£ X}
*.
â¢c (p u a)' b Â« ~ ((c.b) e (p u a))
Â« ~ (((c.b) e p) v ((c.b) 6 a))
O ((c,b) Â£ p) A ((C,b) Â£ (l) (see Subsection 1.2: Rule of omitting a conjunction).

290
Let X be a finite n - element set. The number of all different non-empty subsets of X containing i
elementsfrom n(i=l,2....... n) is Zl7). Since 0 e IP(X). we have: z(;') + 1 = sf) + (o') =
/=L * 4 * 
/=r > 
/=[\ > 
\ 
>
* Obviously, the sets o, X 6 IP(X). We observe that the number of elements of X do not depend on their ordering and also subsets of X 
are not multisets (see Subsection 6.1). The powerset IP(X) is also equivalently denoted by 2X.
4 Hie combination of i elements from n: fn>) =# âââ
4i4 /!(Â»-/)!
= 2nt
Example 5.4 (power set)
Consider the set X =<jf {xi. x2. x3, x4}, n = 4. According to Definition 5.21, the obtained power set IP(X) 
will contain the following 24 = 16 subsets. As an illustration, we observe that non-empty subsets are related 
to the vertices, undirected (i.e. non-oriented) edges or graph cycles, as it is shown below (see Figure 5.4).
X3 o------------------o X4
Figure 5.4 A nonoriented graph
Q)"4: 
{Xi}, {x2}, {x3}, {x4}
(2) 
=  : {xi,x2}, {xi,x3}, {xi,x4}, {x2,x3}, {x2,x4}, {x3,x4}
6
(3) 
" 4: {xi,x2,x3}, {xi,x2,x4}, {X1,X3,X4}, {x2,x3,x4}
Q)=l: 
{xi,x2,x3,x4} 
(=X)
1 + 4 + 6 + 4 + 1 = 16 = 24. â¡
Definition 5.22 (partition)
Partition of a set X is a family (or equivalently: collection) n(X) =<jf { Xi / Xi Â£ X, i 6 1} satisfying the 
following three conditions.
(1)
V ( 
0).
n(n â I)...(n â i + 1)
It is assumed that:

291
(2) 
UA', = X and
(3) 
V (i 
j X n Xj = 0 ).
* 
* t he n-th Bell's number, i.e. the number of non-empty disjoint subsets a set of size n. e.g. the first ones are 1. 1. 2. 5. 15, 52, 203, 877, 
4140, etc. (Eric Temple Bell 1883 - 1960). An expression for dn may be given also in terms of Stirling's numbers (James Stirling 1692 - 
1770): S{n,k) / k! is the number of partitions of air n-element set into k non-empty disjoint subsets, where Sn.k) is the number of surjective 
(or onto} functions from an n - element set onto a k - element set (see the above cited work).
Norman Macleod Ferrers (1829 - 1903), Alfred Young (1873 - 1940): some function is said to be symmetric iff the function value is 
independent of the argument ordering, e.g. f(x,y) is symmetric iff f(x,y) - f(y,x) for all pairs (x.y) e dom(f), see: T/ie Free Encyclopaedia. 
The Wikimedia Foundation. Inc.
<,j*i
Let X be a finite n - element set. Hence, the number of all possible partitions is solely determined by n. We 
shall denote this number by dn* . The following proposition was shown (Grinshpan A., The number of partitions 
of a set. Drexel University. Philadelphia. 1pp.. http://www.matli.dre.xel.edLi/~tolya/partitions.pdf).
Proposition 5.1
For any integer n Â£ 0. dn+i =
Xdj\ . .where do =df 1. â¡
i = 0
Example 5.5 (partition)
3 'W
Let X be the set from the previous example. We have: di = l J = l + 3 + 6 + 5 = 15. The 
r=o
obtained values for di (i = 0,1,2,3) correspond to the first four Bell's numbers 1,1.2 and 5, respectively, e.g.
d3 =df do (q) + d1 (2) + d2 (2) = 1 x 1 + 1 x 2 + 2 x 1 = 5. And hence. d3 (^) = 5.
The following partitions are obtained.
{Xi}. {x2}, {x3}. {x4}
{Xi. x2}. {x3}. {x4}
{Xi. x3}. {x2}. {x4}
{xi. x4}. {x2}. {x3}
{Xi. x2. x3}. {x4}
{xi. x2. x4}. {x3}
{Xi. x3. x4}. {x2}
{xi. x2. x3. X4}. â¡
[x2, x3}. [xi}. {x4}
[x2. x4}. {xi}. {x3}
[x3. x4}. {xi}. {x2}
[x2, x3}. [xi. x4}
[x2. x4}. [xi. x3}
[xi. x2}. [x3, x4}
[xi. x3}. [x2. x4}
A given partition IT(X) can be represented by dots in Ferrers diagrams or also by boxes (or squares) in 
Young diagrams. The last diagram (often also called Ferrers diagram) is useful in the study of symmetric functions 
and group representation theoryt
Example 5.6 (Ferrers diagram)
According to the previous example, the number d4=l+3 + 6 + 5 = 15 ( - 6 + 5 + 3+1) is 
represented as follows.
O 
O 
O 
O 
O 
O
O 
O 
O 
O 
O

292
O O O
O
By turning this diagram (around the main diagonal: circles in blue color) we can obtain another partition of 15, 
i.e. 4 + 3+ 3+ 2 + 2 + 1, said to be conjugate*. â¡
* A partition having itself as conjugate is said to be self-conjugate, e.g. the partition of 9: 3 + 3 + 3 
t Not be confused with the corresponding music term.
The next considerations (in particular: Definitions 5.23 - 5.28 and Theorem 5.1) are under (KerntopfP. 1967).
Definition 5.23 (equivalence relation)
A binary relation p on X is equivalence iff it is at the same time reflexive, symmetric and transitive on X.
Example 5.7 (equivalence relation)
Let p be a binary relation on 2 (the set of integer numbers) defined as follows: xpy iff x-y is even. For 
any x, y, z e 7L we have:
(1) 
x p x, since: x - x = 0
(2) 
xpy aypx. since: x-y is even iff y-x=df-(x-y) is even and
(3) 
(xpy) a (y pz) => xpz. since: x-z = (x-y) + (y-z). â¡
As an example, according to Definition 5.23, the following binary relation is also an equivalence.
V (Ni bÂ« N- Odf SM(Ni) ~ SM(N->)) 
NâN, eBIPN
Here, B1PN denotes the class of Boolean interpreted Petri nets, SM(Ni) is the finite-state sequential machine 
corresponding to Ni (i = 1,2). The above behavioral equivalence and state machine equivalence relations are 
denoted by 1 bÂ«' and ~ , respectively (TabakowI.G. 1989).
Definition 5.24 (equivalence class1'and quotient set)
Let p be an equvalence on X. The equivalence class for x e X, denoted by [x]P =df {y e X/ypx] 
c X. The quotient set for p. denoted by X/p =df {[x]P/x e X}.
In particular, according to Example 5.5 we can obtain: X/0x = {{X1.X2.X3.X4}} and X/lx = {{xi}. 
{x2}. {x3}. {x4}}. We observe that the number of subsets in X / 0x is minimal (equal to 1) and this number is 
maximal in X/lx (equal to the number of elements in X). The last property is always satisfied if X is finite.
The following properties hold (the corresponding proofs are left to the reader)
Corollary 5.2
For any x, y, z e X:
(1) 
x e [x]P
(2) 
(y e [x]P) a (z e [x]P) =â  vpz
(3) 
y p x [y]P = [x]P
(4) 
xpy [x]P n [y]P = 0. â¡
Theorem 5.1

293
Any equivalence p on X generates some partition nP(X) and vice versa, i.e. any partition EI(X) 
generates an equivalence relation pn on X.
Proof (a):
Consider the family X / p. In accordance with Coroll. 5.2 (1), any x e X belongs to some subset of X, 
more exactly to [x]P. Assume the existence of an element u e X such that u e [y]P and u e [z]P . We 
can obtain: (u p y) a (up z). Since p is symmetric: u p y o y p u. By using SR we can obtain: 
(y p u) a (up z). From transitivity of p it follows that y p z. According to Coroll. 5.2 (3) and C' we 
have: [y]P = [z]P.Andso. nP(X) =dt X/p.
Propfib):
Let fl(X) be given. The following relation pn on X is defined: V (x pny <=>df 3 ((x e Xi) a (y e 
xÂ»y e X 
i â¬ /
X,))). This relation is reflexive, symmetric and transitive and hence an equivalence on X (left to the reader). â¡
Example 5.8 (generatedpartition)
In accordance with the previous example, the following partition is generated: flP(X) = X/p = [E, 0} . 
where 'E'and 'O' denote the subsets of event and odd integer numbers. â¡
Definition 5.25 (partial order)
A binary relation p on X is partial order iff it is at the same time reflexive, weak antisymmetric and 
transitive on X. If p is a partial order on X then X is said to be a partially ordered set (or: poset).
Any finite partially ordered set can be graphically represented by using Hasse's diagrams*.
' Helmut Hasse (1898 - 1979)
T A natural number having as divisors only 1 and pi, itself: e.g. 2, 3, 5, 7, etc. Nonprime natural numbers (* 1) are said to be composite.
Example 5.9 (Hasse's diagram)
Any natural number n e N can be represented as follows: n = 
. where any p, is a prime
' 
/-I 
'
number^ and the number of divisors of n, denoted by r(n) =df 0 Ga+C) (Euclides 430 - c.360 b.c.). e.g. for n 
' 
ril
= 12, we can obtain: 12 = 22 x 31. Ina similar way. e.g. 28 = 22 x 71 and 45 = 32 x 5!. In this particular 
case we have: r(12) = r(28) = r(45) = 6. We have the following set of divisors for n = 12: {1,2, 3, 4, 6, 
12}. The remaining two sets are presented as follows: {1. 2, 4, 7, 14, 28} and {1. 3, 5, 9, 15, 45}. Since the 
obtained diagrams (considered as nonoriented graphs) are of the same structure. Hasse's diagram associated with n 
= 12 is only presented (see Figure 5.5 given below: the remaining two diagrams are left to the reader). â¡

294
Figure 5.5 An example Hasse's diagram*
It can be observed that the opposite of a partial order relation, i.e. p 1 is also a partial order (left to the 
reader). The partial order relation, the opposite partial order relation and their strong versions are denoted 
below as follows: 
, and '< ' , respectively. For example: (x > y) <4>df (x > y) a
(x y).
Definition 5.26 (linear order)
Let p be a partial order on X. If p is also connected then X is said to be an ordered set (or linearly 
ordered set).
As an example, any subset of R is a linearly ordered set wrt The following two definitions are also 
introduced (KemtopfP. 1967).
Definition 5.27 (minimal and maximal elements)
Let X be a partially ordered set. Assume that there exists an element A e X such that: V ( A < x ).
We shall say that 
'A' is the minimal element in X. Similarly, assume now that there exists an element
V e X such that: V ( V > x). We shall say that ' V ' is the maximal element in X.
Definition 5.28 (infimum and supremund)
Let X be a partially ordered set. We shall say that x e X is a lower bound for Y c X if V (x < y ). 
w
The lower bound x is said to be greatest lower bound for Y (i.e. infimum for Y) if for any other lower bound 
x'for Y we have: x' < x. In a similar way, x e X is an upper bound for Y c X if V (x > y ). The
upper bound x is said to be least upper bound for Y (i.e. supremum for Y) if for any other upper bound x'for 
Y we have: x' > x.
It can be observed that infimum and supremum (if they exist) are the only one for any partially ordered set 
(some other considerations are omitted below) .
According to Definition 5.23, any binary relation p on X is equivalence iff it is reflexive, symmetric and 
transitive. Assume now that p is reflexive and symmetric but not transitive. In classical set theory any such 
relation can be made transitive, and hence equivalence. The corresponding process is known as transitive closure 
of p. In nonclassical set theory (e g. fuzzy set theory) a similar process becomes more complex.
Let p be a binary relation on X, p: =<jf p Â° p Â° Â° p (i times, i e I) and p+ =dt Up' â  Provided there is 
/
no ambiguity and for convenience, pIJ =dt {(x,x) / x e XJ. The following two theses are satisfied5
Thesis 5.32
A binary relation p on X is transitive iff p2 c p.
' In particular, such diagrams are used in lattice theory (will be presented in Part II of this book).
t from the Latin 'infinites' and 'supremus'lowest and greatest. Tire last two notions are related to any partially ordered set, but mainly 
used in the case of numerical sets.
As an example, any lattice is associated with some partial order relation, and vice versa. Lattice theory will be presented in Part II of this 
work.
Â§ Friedrich Wilhelm Karl Ernst Schroder (1841 - 1902)

295
Thesis 5.33
A binary relation p on X is transitive iff p+ = p.
More formally. T 5.32 corresponds to the following expression.
VvVfxpyAypz =$ xpz) O V V ( 3 ((xpzA zpy) =$ xpy)
Proof(T 5.32a):
(1)
V V V (x p y Aypz =$ xpz)
X y z
{a}
(2)
~ V V ( 3 ((xpz A zpy) =$ xpy)
X y 
1
{aip}
(3)
3 3 (3 (x p z A zpy) Axp'y) 
x y 
I
[NV. NC. SR: 2}
(4)
3 (a p z A z p b)
(5)
a p'b
{-3,-K:3}
(6)
ape A c p b
{-3:4}
(7)
ape A cpb => apb
[-V: 1}
(8)
a p b
{- C : 6.7}
contr.
{5.8}
Proof(T 5.32b):
(1)
V V ( 3 (xpz A zpy) =$ xpy)
X y 
z
{a}
(2)
~ V V V (x p y Aypz =$ xpz) 
.V v A 
'
{aip}
(3)
333 (xpyAypzAx p'z)
X y i
{ NV, NC. SR : 2}
(4)
apb
(5)
b p c
{-3.-K:3}
(6)
a p'c
(7)
3 (apzA zpc) => ape
{-V: 1}
(8)
~ 3 (a p z A zpc)
{Toll: 6.7}
(9)
V (a p'z v z p'c) 
z
{NE. NK. SR : 8}
(10)
a p'b v b p'c
{-V:9}
(1.1)
a p'b
{ada}
contr.
{4.1.1}
(2.1)
b p'c
{ada}
contr. m
{5.2.1}
Assume now that p+ = p. Then p2 c p. in accordance with T 5.32 p is transitive (using rule TC). And 
hence, the opposite implication, i.e. T 5.33b is satisfied.

296
Pr oof(T 5.33a):
(1)
p is transitive
{a}
(2)
P*  P
{aip}
(3)
~(p+c p A
P Â£ P+)
{df. V' : 2}
(4)
p+ Â£ p v p $= P+
{NK. SR: 3}
(5)
P c p+
{df. p+'}
(6)
pÂ£ P
{-A: 4.5}
(7)
~ V V (x p+y
xpy)
{df. ' Â£ ' : 6}
(8)
3 3 (x p+y A xpy)
{NV. NC, SR : 7}
(9)
a p+b
(10)
a p'b
{-3,-K:8}
(H)
(a.b) e Up 
!
{df. p+'}
(12)
3 (a p'b)
{df. ' up' '}
(13)
a p 10 b
{-3 : 12}
(14)
a (p 1 0 p) b
{df. 'pK' : 13}
(15)
3 (a plo x A
x pb)
{Df. 5.19 : 14}
(16)
a p T 1 ci
(17)
ci pb
{-3,-K: 15}
(18)
a (p 2 0 p) Ci
{df. 'p10-1': 16}
(19)
3 (a p10 2 x A
X P Cl)
{Df. 5.19 : 18}
(20)
a (*'  2 C2
(21)
C2 p Cl
{-3,-K: 19}
Finally, the following two lines can be obtained (after 4(io - 1) additional steps):
a pio - Â«o -1 > Cio _ 2 ( = a p Ci. -1 ) and câ -1 p câ - 2.
And hence, using '+ K', we can obtain: a p 4 -1 A a -1 p cj - 2 A ... A C3 p C2 A C2 p Ci A ci p b*.
 
By Definition 5.19 and the associativity property of conjunction, finally we ca obtain: a p b. But this is a 
contradiction wrt line (10) of the above proof. â¡
It is assumed in the last thesis that the composition operation is an associative one. The proof of this property 
is given below.
Thesis 5.34 (associativity of composition)
'The i0 leaves of the corresponding binary tree with a root node: ap'Â°b.

297
Let p. y and ct be defined on X. The following property is satisfied (for any x.y e X): (x,y) e 
p o (y o ct) o (x.y) e (p Â° y) Â° ct. And hence, the following formula is satisfied.
3 (x p z A 3 (z y u A u ct y)) o 3 (3 (x p u A u y z) A z ct y) 
Z 
U 
ZU
Pr oof(T 5.34a):
(1)
3 (xpz A 3 (zyu A UCTy)) 
z 
u
{a}
(2)
~3 (3 (xpu Auyz) A ZCTy) 
z u
{aip}
(3)
V(V(xp'u V uy'z) V zcry)
2 
U
{N3. NK. SR : 2}
(4)
x p a
(5)
3 (ayu A uCTy) 
u
{-3,-K: 1}
(6)
a y b
(7)
b CTy
{-3:5}
(8)
V(xp'u V uy'b) V boy 
u
{-V:3}
(1.1)
V ( x p'u V uy'b) 
u
{ada}
(1.2)
xp'a V ay'b
{-V: 1.1}
(1.3)
a y'b
{-A: 1.2.4}
contr.
{6. 1.3}
(2.1)
b cry
{7.2.1}
contr. â¡
Proof(T 5.34b):
(1)
3 (3 (xpu Auyz) A ZCTy) 
z u
{a}
(2)
~ 3 (x p z A 3 (z y u A u ct y)) 
z 
u
{aip}
(3)
V ( x p'z V V ( z y'u V u CTy)) 
z 
u
{N3. NK. SR : 2}
(4)
3 (xpu Auyc) A c ct y 
u
{-3 : 1}
(5)
3 (xpu Auyc) 
u
{-K:4}
(6)
c ct y
(7)
x p d
{-3:5}
(8)
dye
(9)
x p'd V V ( d y'u V u cry) 
u
{-V:3}
(1.1)
V ( dy'u V UCT'y) 
u
{ada}
(1.2)
dy'c V c cr y
{-V: 1.1}

298
(1.3)
(2.1)
c cry 
contr.
x p'd
contr. â¡
{-A: 8, 1.2}
{6. 1.3}
{ada}
{7.2.1}
The notion of reflexive and transitive closure p*  =<jf p+ u p". Since X is finite, we have: (p
*)*
 = p*.
Thesis 5.35
* * ,
p U CT C (p U CT)
The following proposition is used in the proof of T 5.35.
Proposition 5.2
Let p and ct be defined on X and n e N: (x.y) e pn =$ (x.y) e (p u ct)11 (for any (x,y) e X)
*.
Assume that the last implication is satisfied for n =dt k. The proof for n =df k + 1 is given below.
' This proof is inductive wrt k, e.g. for k = 2 is left to the reader. The proof of implication: (x,y) 6 a" => (x,y) e ip u a)11 (for any 
(x,y) e X) is similar as the case of the antecedent: (x,y) e pn (see Proposition 5.2: left to the reader).
Proof:
(1)
(x,y) 6 pk + 1
{a}
(2)
(x.y) Â£ (p u CT)k + 1
{aip}
(3)
(x.y) 6 pk o p
{SR: 1}
(4)
3 (x pkz A z p y)
{df. 'o' : 3}
(5)
xpkb
(6)
b py
{-3.-K:4}
(7)
(x.y) Â£ (p u CT)k o (p c> ct)
{df. 'o'. SR : 2}
(8)
~ 3 (x (p U CT)kZ A z(p u CT)y)
{df. 'Â°'. SR : 7}
(9)
V (x((p U CT)k)'z V z(p 
z
u CT)'y)
{NE. NK. SR : 8}
(10)
x((p u CT)k)'b v b(p u CT)'y
{-V:9}
(1.1)
X((p U CT)k)'b
{ada}
(1.2)
X((p U CT)k)b
{â C : 5, ind. assup: 
xpkb =^> x(p u ct^b}
contr.
{1.1. 1.2}
(2.1)
b(p u CT)'y
{ada}
(2.2)
~ (b p y v b ct y)
{df. u':2.1}

299
(2.3) b p'y
contr. â¡
{NA.-K: 2.2}
{6.2.3}
According to T 5.35, the following implication should be satisfied.
(x.y) 6 p*  ct*  =$ (x.y) 6 (p ct)
*  (foranyx,y e X)
Pr oof(T 5.35):
(1)
(x.y) e
* 
p
* 
a
{a}
(2)
~ ((x,y) 6 (P u ct)
*)
{aip}
(3)
~ ((x,y) 6 (P
ct)+ (p ct)" )
{df. ' (p u ct)* SR : 2}
(4)
~ ((x,y) 6 (P u CT)+ V (x.y) e (P u ct)Â°)
{df. 'u'. SR: 3}
(5)
(x.y) Â£ (P
ct)+
{NA,-K:4}
(6)
(x.y) Â£ (P
CT)Â°
(7)
~ ((x,y) 6 (P U CT)+)
{df. 'Â£' : 5.6}
(8)
~ ((x,y) 6 (P U CT)Â° )
(9)
~ ((x,y) 6 U(P U O')' ) 
/
{df. '(p cr)+ SR : 7}
(10)
~ ((x,y) 6 {(X,X)/(X,X) 6 X X X}
{df. ' (p u ci)0 ' : 8}
(H)
(x.y) Â£ PÂ°
(12)
(x.y) Â£ CTÂ°
{10}
(13)
~ 3 ((x.y) 6 (p u ct)1 )
{df.'U(puCTy':9}
(14)
V ((x,y)I Â£ (P U CT)1)
{N3. SR: 13}
(15)
(x.y) e
p*  V
(x.y) 6 CT
*
{df. u ' : 1}
(1.1)
(x.y) e
p*
{ada}
(1.2)
(x.y) e
p+ o
pÂ°
{df. 'p
*
' : 1.1}
(1.3)
(x.y) e
p+ V
(x,y) 6 pÂ°
{df. u ' : 1.2}
(1.4)
(x.y) e p+
{-A : 11. 1.3}
(1.5)
(x.y) e Up
l
{df. 'p+ ' : 1.4}
(1.6)
3 ((x,y) 6 p1)
{df. 'up1': 1.5} 
i
(1.7)
(x.y) e p10
{-3 : 1.6}
(1.8)
(x.y) Â£ (P
ct)10
{-V: 14}
(1.9)
(x.y) e (P
ct)10
{- C : Prop. 5.2,1.7. n^i0}

300
In accordance with T 5.32, the following transitive closure algorithm (in short: TC algorithm) is used.
contr.
{1.8, 1.9}
(2.1) (x,y) e ct*
{ada}
(2.2) 
(x,y) e ct ej ct"
[df 'ct
*  ' : 2.1}
(2.3) 
(x,y) 6 ct+ V (x,y) 6 ct"
[df. 'u ' : 2.2}
(2.4) (x,y) e ct+
{-A: 12,2.3}
(2.5) 
(x,y) e Ucr'
[df. 'ct+ ' : 2.4}
(2.6) 
3 ((x,y) 6 ct1)
{df. 'Ut/' : 2.5} 
i
(2.7) (x,y) 6 c-fo
{-3 : 2.6}
(2.8) (x,y) (2 (p u ct)10
{-V: 14}
(2.9) 
(x,y) e (p u ct)1'
{- C : Prop. 5.2
*,
 2.7, n -dt iÂ»}
contr. â¡
{2.8, 2.9}
TC algorithm
(1) 
p =df p u p2;
(2) 
if p = p then p is transitive : end ;
(3) 
p =df p : goto (1). â¡
Example 5.10 (TC algorithm)
Figure 5.6 Two binary relations on X =df (xi, x3. x3}
Consider p and ct of Figure 5.6. We have: p = {(xi,x2), (x2,x3). (xi.x3)} and p2 = {(xi,x3)}. And 
hence, p is transitive {TC algorithm, step (2)}. Let now consider ct. We have: ct = {(xi,x2). (x2.x3), (x3,xi)}. ct2 
= {(xi,x3), (x2,xi), (x3,x2)}, CT3 = {(.X1,X1). (X2.X2), (x3,x3)}. ct4 = ct, ct5 = Ct2, ct6 = Ct3, etc. And finally, ct+ = 
CT U CT2 U CT3 U ... = CT U CT2 U CT3 = {(X1,X2), (X2,X3), (X3,X1), (X1,X3), (X2,X1), (X3,X2), (X1,X1), (X2,X2), (X3,X3)} 
(see Figure 5.7 given below). Here, any ct1 is related to some directed path of length i (i = 1.2, ... ). We observe 
that the obtained closure is also reflexive, i.e. ct+ = ct*.
 â¡
Assuming the antecedent' (x,y) e a"', i.e. (x,y) 6 a" => (x,y) e ip 2 a)11 / n =# io.

301
Figure 5.7 The transitive closure for ct
The above method becomes inefficient for a large graph size. Some simplification can be obtained by using 
multiplication over graph incidence matrices. This is illustrated in the next example.
Example 5.11 (TC algorithm)
Let ct be the binary relation of the previous example. The graph incidence matrix is represented by the
following square matrix of order 3:
Ma =
â fl
0
1
1 o'
0 1
0 0
And hence. Ma2 = Ma x Ma =
'() 0 1'
1 
0 0
0 
1 0
'. The
following steps are realised.
"0 1 f
(1) Ma = Mc u NL = 10
1
[TC algorithm: Step (1)}
1 1
0
(2)
M<7 7^ M(j
{TC algorithm: Step (2)}
(3)
Ma df Ma
'0 1 1"
'0 1 1'
{TC algorithm: Step (3)}
'0 1 1'
(4)
Ma = Ma U Ma2 =10 1
1 1 0
0(101
1 1 0
x 10 1) 
{TC algorithm: Step (1)}
1 1 0
1 1 1
1 1 1
1 1 1
n
* The matrix multiplication operation is similar to the classical one. i.e. Cjj = Yan-bkj (i.j = 1.2........n). for any A.B.C (square matrices
k=l '
of order n, where C = A x B ). But now. instead of sum and multiplication, the operations maximum and minimum are used, respectively.
(5) Ma Ma
{TC algorithm: Step (2)}
(6) Mq df Mfe
{TC algorithm: Step (3)}
t i r
(7) Ma = Ma u Ma2 =
i i i
{TC algorithm: Step (1)}
i i i
(8) Ma = Ma : ct is transitive : end. â¡ 
{TC algorithm: Step (2)}
The concept of an occurrence (Petri) net. i.e. a directed acyclic graph that represents causality^ and
concurrency information about a single execution of a system, was introduced in (Best. E. and Devillers R. 1987).
T And hence, occurrence nets are known also as causal ones. e.g. (Kummer O. and Stehr M - O. 1997).

302
Some research concerning: structural properties, e.g. (Haar S. 1999). orthomodular lattices related to these nets 
(Bemardinello L. et al. 2009) or timed structured occurrence nets (Bhattacharyya A. et al. 2016), was also 
presented. In accordance with the last works, some information, concerning the two fundamental binary relations 
//jind co is given below. The following definition is firs presented (P and T denote the sets of places and transitions, 
F is said to be a flow relation).
Definition 5.29 (finite net)*
R finite net is a triple N =df (P. T, F) where:
(i) 
P 
n T = 0 ,
(ii) 
P 
u T * 0 .
(iii) 
F 
c (P x T) u (T x P) and
(iv) 
dom(F) u cod(F) - 
P u T.
Let x e P u T. The pre-set and post-set associated with x are defined as follows: *x =df {y e P u 
T / (y.x) e F} and x* =,ir [y e P u T / (x.y) e F}, respectively. Obviously: y e *x o x e y*.
Let P and T be countable. The following definition was used in (Bemardinello L. et al. 2009).
Definition 5.30 (occurrence net)
A net N = (P, T, F) is an occurrence net iff
(i)
v ((I *p I 1) a (I p* I < 1))+ and
p eP
(ii)
v ((x.y) e F ^> (y.x) Â£ F+).
According to the last definition, any occurrence net N is conflict-free (i) and acyclic (ii). The obtained 
structure (X, c) derived from N as follows: X =df P u T and c =df F* is a partially ordered set.
Let '<2 be a partial order relation on a set A. The following two relations can be derived (for any a.b e A): 
a If b Odf (a < b) v (b < a) v (a = b) and a co b <=>df a If' b. The last two relations are symmetric and not 
transitive. Moreover, If is reflexive, while co is antireflexive. Let now p be defined on A and p/b be p 
restricted to B c A. The notion of region is introduced as follows: B is a region iff (i) p/B= B x B and 
(ii) v 3 ( a p'b). A frequently used example for If and co is the following one.
a e. AâB be B
Example 5.12 (If - and co-graphs, regions)
' If places and transitions are interpreted as conditions and events (respectively), we can obtain a Petri net, consisting of conditions and 
events, having tokens in some conditions (the initial case). In a similar way, there are obtained a more complex models e.g. such as: placeÂ­
transition nets or individual-token sets (Reisig W. 1985, 1992) . Some time it is assumed (in a more general context) that P and T are 
countable (see the next subsection), e.g. assuming occurrence nets, see: (Bemardinello L. et al. 2009). In the last case, instead of'finite nef, it is 
used the term 'nef.
Here I *p  I and I p*  I denote the cardinalities of *p  and p*,  respectively: see the next subsection.

303
Figure 5.8 An example partially ordered set
In accordance with Figure 5.8, the obtained graphs for relations fi and co are shown below.
Figure 5.9 The fi - and co - graphs
The regions of fi and co , denoted by L's and C's , are called lines and cuts, respectively. According to 
Figure 5.9 (a) we have the following three lines: Li = {a, b, d, f, g}, L2 = [a, b, c] and L3 = [f, g, ej.lna 
similar way, by Figure 5.9 (b) we can obtain the following five cuts: Ci = [c, d, e}, C2 = [a, e], C3 = 
{b, e}, C4 = {c, f} and C5 = {c, g}. â¡
Let I A I be the cardinality of A (the number of elements if the set A is finite: see the next subsection). The 
following notion was introduced.
Definition 5.31 (k-dense set)
The poset X is k-dense iff I L n CI = 1 (for any L and C).
Example 5.13
In accordance with the last definition, the poset A of Figure 5.8 is a k-dense set. However, the poset shown 
in Figure 5.10 below is not k-dense. We have: Li = {a,b}, L2 = {c,b}, L3 = {c,d} and Ci = {a,c}, C2 = 
{b,d}, C3 = {a,d}.And hence, L2 n C3 = 0. This poset becomes k-dense by using the additional edge (a,d): 
left to the reader. â¡
Figure 5.10
Proposition 5.3
I L n CI < 1 (for any L and C)
Proof:
Let a, b e L n C. Assume that a ^b. We have: a fib and a co b. And hence: a = b(acontr). â¡
The study of such relations as fi and co derived from the partially ordered set (X, g) was presented in 
(Bemardinello L. et al. 2009). A more formal treatment is omitted: left to the reader.
5.5. Equinumerosity and countability

304
The following definition is first introduced.
Definition 5.32 (function)
Let p c X x Y. We shall say that p is a function iff V 3 ( x p y ).
Non-finite sets are usually interpreted as non-empty sets having cardinality different from any natural 
number. In the next definition, the notion of a natural number is eliminated.
*
* Julius Wilhelm Richard Dedekind (1831 - 1916)
t There exist various notations related to this notion, e.g. arrow notation, index notation, dot notation, etc. Here, it is used Euler's 
junctional notation (Leonhard Euler 1707 1783).
Terms used by the Trench mathematicians group Bourbaki.
Â§ X ~PX. X ~PY =3 Y ~p_! X. X ~PY a Y~o Z => X ~pt.o Z
** Known by Galileo Galilei (1564 1642)
Definition 5.33 (non-finite set)
X is a non-finite set in Dedekind's sense o 3 (Y^XaY~X). {see Df. 5.34, below}
In the next considerations we shal assume that X and Y are two numerical sets. Moreover, instead of 
relational notation 'xpy ' sometimes, for convenience, we shall use the functional notation ' y = f(x) 't The 
notions of injection, surjection and bijection are introduced as follows .
Let f : X â> Y (arrow notation). We shall say that f is injection (into function or one-to-one function, in 
short: f e 1 - 1) iff Xi xp =a f(xi) fjxi), for any Xi, X2 e X. This function is surjection (onto function) 
iff cod(f) = Y. And finally, f is bijection iff it is injection and suijection (or equivalently: p and p 1 are 
functions). The equinumerosity of two sets is presented as follows (Slupecki J. and Borkowski L. 1967).
Definition 5.34 (set equinumerosity)
Let p c X x Y. We shall say that p establishes the equinumerosity of X and Y, in short: X ~P Y iff 
p e 1 - 1 a X = dom(fi) a Y = cod(fi). The last two sets are equinumerous, in short: X ~ Y iff
a (X ~PY).
According to the last definition, the equinumerosity relation is reflexive, symmetric and transitive, i.e a 
relation of type equivalence (the corresponding proofs are omitted: see the last cited work)s\ The cardinality of a set X 
is below denoted by I XI . We shall assume that: I 01 =0 and I XI e N (the set of natural numbers), if X is 
a non-empty finite set.
(A5.4) I XI = I Y| o X ~ Y
Example 5.14
Let N, Ne and No be the set of natural numbers, i.e. N =<jf [1, 2, ...} and the subsets of even and odd 
natural numbers, respectively. We have: N ~ Ne and N ~ No (see below). â¡
N: 
1 
2 
3 
4 
5 ...
n -Â« 2n" : 
n 2n- 1: * * * Â§ **
10 ...
9 ...

305
Definition 5.35 (cardinal number)
m is a cardinal number ( or cardinal) Odf 3 (Z(X) a m =df
In particular, in accordance with Definition 5.35, it follows that zero and natural numbers are cardinal 
numbers. Next, we shall consider infinite sets (i.e. sets that are not finite). The notion of set countability is 
introduced as follows.
Definition 5.36 (countable set)
Let X be an infinite set. We shall say that X is a countable set iff X ~ N.
The countability property (for numerical sets) is discussed below. It is first considered the set 2 of integer 
numbers.
Proposition 5.4
IL =df {0, Â± 1, Â± 2, ...} is a countable set.
Proof:
For any n e 2. lei f: 2 h> N such that: f(n) =df if n <> 0 then 2n + 1 else - 2n. We have: 
f(0)= 1, f(-l) = 2, f(l) = 3, f(-2) = 4, f(2) = 5, f(-3) = 6, f(3) = 7, etc. â¡
Thesis 5.36
Let X and Y be two countable sets. Then X u Y isa countable set.
Proof:
Assume that X and Y are countable. And hence, their elements can be represented by the following two 
sequences.
X : xi x2 x3 ...
Y : yi y2 y3 ...
For any n e N , let 
below). â¡
f : N -a X a Y such that: f(n) =df if n is odd then x(n + i)/2 else y^ (see
N : 
1
2 
3 
4 
5 ...
X u Y: 
xi
yi 
x2 
y2 
x3 ...
Thesis 5.37
Let X and Y be two countable sets. Then X x Y is a countable set.
Proof:
Assume that X and Y are countable. Let X x Y =df { (x,y) / x e XAy e Y}. For any two different 
pairs pairs (xi.yj). (xm,yn) eX / Y, the binary relation p c (X x Y) x (X x Y) can be defined as follows: 
(Xj.yj) p (xm,yn) Odf (i+j < m + n) v ((i+j = m + n) a (i < m)): see below. â¡

306
X] X2 X3 Xi
yi
o< o
o
o
ys
y-2
Â°
o-
o
o
0
0
yi
Â°l 
Â°3
0
Corollary 5.3
The set of rational numbers Q =df { " / (m,n) e 7L x N } is a countable set. â¡ {Prop. 5.4, T 5.37}
Obviously, every subset of a countable set is also a countable one. In particular, the above thesis T 5.36 can 
be extended for any finite union of countable sets.
In general, there exist infinite sets that are not countable. In particular, it was shown that the set of real 
numbers K is uncountable (Cantor G. 1874). 'Cantor's discovery of uncountable sets in 1874 was one of the 
most unexpected events in the history of mathematics. Before 1874, infinity was not even considered a legitimate 
mathematical subject by most people, so the need to distinguish between countable and uncountable infinities 
could not have been imagined' (Stillwell J. 2010). The uncountability of K is presented in the next thesis 
(Kuratowski K. 1966). The following function tangens was used: y =df tg(n(x -1/2)) (intact: y = tg(â tc / 2), 
for x = 0 and y = tg(7u / 2), for x = 1, Â±tu /2 are two breakpoints)
*.
 The last map is a bijection. And so, (0,1) ~ K.
* '1'he tangens y - tg(x) has a period of n and asymptotes x - (k + 1/2) k, k e IL. This function is monotonic increasing for x e 
[- k /2, + k /2] and having values from -co to + co. The function's behaviour is repeated with period k.
Thesis 5.38
The set of real numbers K is uncountable.
Proof:
Assume that K is a countable set. And hence, the elements of K can be represented as a sequence: (rn). 
Let n,r2, ... rn, ... be the corresponding elements belonging to pq=df [0,1], The first element of this sequence 
can be eliminated from pq by dividing this interval into three parts of length equal to 1/3. If n belongs to one 
of these three parts, then, as a next subinterval is selected one of the remaining two parts. If n belongs to the 
borderline of two parts, then as a next subinterval is selected the remaining one. And hence, the next selected 
subinterval, denoted by piqi of length 1/3 is such one that n Â£ piqi. In a similar way, after selecting p2q2 of 
length 1/32 from piqi we can eliminate r2, i.e. r2 Â£ p2q2, ... .from pnqn of length 1/3" we can eliminate rn, 
etc. And finaly, we have: r\Pâqâ = {c}, such that c Â£ (rn) and c = Pn = hn 
n 
n^>co
The next example is under (Ross K.A. and Wright C.R.B. 1999).
Example 5.15
The set F =df {f/f: N {0,1}} is uncountable. In fact, assume that F is a countable set. And so, the 
elements of F can be represented as a sequence: (fn). Let now f*(n) =df if fn(n) = 1 then 0 else 1. And 
hence, f * e F and f * Â£ (fn). â¡

307
Consider now the following non-empty set S. named alphabet. The elements of this set are named letters. A 
word is a finite sequence of letters belonging to S . The set of all finite words in this alphabet is denoted by S . 
The empty word is denoted by X . Assume now that S =df {0,1} and S*  =df S u {X}. The last set is 
countable as it is shown in the next example.
* The above considered formula can be generalised for a radix m as follows: S a^.m 7 , where n and m correspond to the position 
7=1 '
number and used radix, respectively, for example, assuming n = 3 and m - 4. we can obtain: 1(232) = 2 x 1 + 3 x 4^2 + 2 x
43~3 = 46.
Joseph Liouville (1809 - 1882). The existence of irrational numbers was well-known even in Ancient Greece, e.g. Pithagoras (c.570 - 
c.495 b.c.).
1 Cantor's 'diagonal' proof concerning the existence of irrational numbers (1873): http://www.mathpages.com/home/kmath371.htm.
s Formal logic. Encyclopedical outline with applications to informatics and linguistics (1987).
Example 5.16
Consider the set S*.  By 'nb' we shall denote the 'number of bits' of a non-empty word x e S*.
 e.g. nb(011) 
fl 
_ â¢
= 3, for x = Oil. The decimalvalue of any binary word (or string) is defined as follows: lx =df 
' 
' 
,/=i '
where n=df nb, e.g. 1(0101) = 0 / 2* 4 s 1 + I/22- (i/2,,+ 1/2 ' = 5*.  The above set S*  is 
countable. The elements of this set can be ordered as follows (see below). â¡
For any x, y e S*:
(1) X -< x,
(2) x < y iff nb(x) < nb(y) v nb(x) = nb(y) a lx < ly.
Since Z*  = (J v1 .where SÂ° = {X}, Z = {0,1} = S, S2 = {00, 01, 10, 11}, etc., we can obtain: 
i-o
S*
: 
X 
0 
1 
00 
01 
10 
11 
000 
001 
010...
N: 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10...
Let T be the set of transcendental (or irrational) numbers (Lionville J. 1851)'. i.e. the set of real or complex 
numbers that are not algebraic ones (not be solutions of polynomial equations with integer coeficients: e.g. it , e, 2rt, 
e - 1, etc.). It was shown by Cantor that T is an uncountable set7. A more formal treatment is left to the reader.
In accordance with (A5.4) and Definition 5.35, the cardinality of X, i.e. I X I can be considered as an 
object associated with any Y such that Y ~ X. However, we have no any rule related to the map: X -> I XI 
and at the same time satisfying (A5.4)X And so, the last problem can be eliminated by assuming the following 
Zennelo's axiom, given in 1904 and known as the axiom of choice (another possibility is the use of Zennelo- 
Fraenkel's axiom of regularity or foundation). In general, the introduction of cardinal numbers will not be possible 
without using one of the last two axioms. In fact, some other approaches were also given, e.g. use of relation type 
axiom (a weakly version) instead of the regularity one: (Kuratowski K. and Mostowski A. 1966). Let Z denotes a 
family of sets. Zermelo's axiom of choice can be presented as as follows.
(A5.5) Z 0 a v (X e Z X Z 0) a v (EQ e Z a P Z Q PnQ =0)
X 
P.Q
3 V (X 6 Z =3 3! (X 6 X n Y)) 
y .V 
.v

308
Let Yx be a set of maps from X to Y. i.e. Yx =df {f/f:X -> Y}. The following two definitions are 
introduced (Slupecki J. and Borkowski L. 1967: for convenience, instead of the original XY, the set Yx is usedintlie 
second definition).
Definition 5.37 (set of maps)
Let p C X x Y. We shall say that p e Yx (the function p is a map from A' to T) iff dom(p) = X and 
p(X) c Y.
Definition 5.38 (cardinality of a set of maps)
I Y| 1x1 = I Yx| .
In the next considerations, the cardinalities of N and K , i.e. I N I and I K I , we shall denote by the 
following two cardinal numbers: X., and c, known as alef-zero
*
 and continuum, respectively. Some properties 
of these two nmnbers are presented below (Slupecki J. and Borkowski L. 1967).
* The used by Cantor symbol A' denotes the first letter of Hebraic alphaet.
1 The following two implications are satisfied (Slupecki J. and Borkowski L. 1967). Hie proof of these two implications is left to the 
reader.
(1) PcXa|p| = K, =$ 
3 (Y X a X ~ Y).
Definition 5.39 (sequence stock)
The set X is in stocA'for the sequence {xn} o V (x e X o 3 (i e N a x = xd).
The following proposition was shown.
Proposition 5.5
I XI = Xo o ( v (i j a x, x,) a X is in stock for {xn}). â¡ 
{.%Â«} i,j
Definition 5.40
I XI < I YI o 3 ( X ~ Z) .
Zcf
According to the last definition and reflexivity of equinumerosity, the following corollary was given.
Corollary 5.4
X c Y =e> Ixl I Y| . â¡
Definition 5.41
Ixl < I yI Â« IxI < I yI a Ixl I yI .
Thesis 5.39
k, Â£ C.n 
{Coroll. 5.4, Df. 5.41}
It was shown that the right side of Definition 5.33 is logicaly equivalent to the following expression
(see the next thesis): 3 (I P I = Xo )t
p â = ,v

309
Thesis 5.40
X is a non-finite set in Dedekind's sense o 3 
(I P I = No). â¡
P = A'
According to the last thesis, the existence of a non-finite set in Dedekind's sense is logically equivalent to the 
existence of a countable subset of this set.
Definition 5.42 (transfinite cardinality)
The cardinality of a non-finite set in Dedekind's sense is said to be transfinite one.
Corollary 5.5
A cardinal number m is transfinite iff No X m. â¡ {T 5.40, Df.5.42, Coroll. 5.4}
Corollary 5.6
The cardinal numbers N., and c are transfinite. â¡ {T 5.40, Df.5.42, Coroll. 5.4}
The following thesis is satisfied (Slupecki J. and Borkowski L. 1967).
Thesis 5.41
No c
Proof:
Assume that No = c {aip}. Let X =<jf K. And hence, in accordance with Proposition 5.5, there exists a 
sequence {xn} such that K is in stock for {xn}. On the other hand, it is known that for any x e R. there 
exists exactly one proper representation of x as non-finite decimal* (obviously, starting from a given position, all 
next digits may be equal to zero). We can obtain the following proper representations (any ci denotes the integer part of 
the real number xi and any yij-thejthdigit ofxi):
xi = ci, ynyieyn ... yin ...
X2 = C2, y2iy22y23 ... y2n ...
Xn = Cn, yniyn2yn3 â¢ . â¢ ynn â¢ â¢ -
Consider now the sequence {zn} such that: zn =df if ynn 1 then 1 else 2. We have a proper 
representation of some real number z = 0, Z1Z2Z3 ... and z Â£ {xn}. â¡ {contr.)
Corollary 5. 7
No < c. â¡ {T 5.39, T 5.41, Df. 5.41}
In particular, the following two theses were also shown (the corresponding proofs are omitted).
Thesis 5.42
(2) 
3 (Y * X a X ~ Y)
3 (I Pl = Nâ).
See also: (Knuth D.E. 1997: Donald Jftvin Knuth, bom 1938).

310
X c R A IXI = No =4> |K-X| = c. â¡
According to the last thesis, the cardinality of K is invariant under removing a countable subset of elements.
Thesis 5.43
nx = c. for any n e N -{!}.â¡
Example 5.17
Let F be the set considered in Example 5.15. Since F =df {0.1}11 then I F I = I {0.1}11 I = I {0,1} 11,1 
= 2^ = c. â¡ {Df. 5.38. T 5.43}
' Published independently by Fraenkel A. A. H. and Skolem A. T. (in 1922)
T t his axiomatic system was proposed in order to formulate a theory of sets tree of paradoxes such as Russell's paradox: 1901 (Bertrand 
Russell 1872- 1970). The same paradox was discovered in 1899 by Zennelo E. F. F. (but not published). Let Y =df {X / X t X). Tire 
following antinomy can be obtained: Y 6 Y <=> Y t Y. Another paradoxes were also observed, e.g. such as: Burali-Forti's paradox 
(1897), concerning ordinal numbers (a generalisation of natural numbers: Cesare Burali-Forti 1861 - 1931) or Cantor's paradox (1895 - 9) 
concerning natural numbers (77te Free Encyclopaedia. The Wikimedia Foundation. Inc.).
â  As an example: small set theory or also double extension set theory.
Â§ Saul Aaron Kripke, bom 1940 ; Richard Alan Platek, bom 1940
** The Free Encyclopaedia. The Wikimedia E'oundation. Inc.
The above introductory notions related to classical set theory are an illustration of this fundamental work. A 
more formal treatment is omitted: left to the reader. In the next considerations Kripke - Platek and other set 
theories are cited. A brief presentation of Kripke - Platek axiomatic set theory is only given.
5.6. Kripke - Platek and other set theories
Zennelo's axiomatic set theory was extended by adding new axioms, e.g. the axioms of replacement
*
 and 
regularity (or foundation) introduced in Zennelo-Fraenkel set theory.! On the other hand, there were also 
presented some alternative approaches, e.g. such as (Holmes M.R. 2017): typed theories of sets (Whitehead A.N. 
and Russell B. 1913), Ackermann's set theory (theory of classes in which some classes are sets), Quine's new 
foundations (as a simplification of the theory of types), positive set theories (with topological motivation), constructive 
(i.e. intuitionistic) set theories, set theory for nonstandard analysis, etc.! T]lc classical Kripke - Platek set theory is 
an axiomatic system weaker than Zennelo - Fraenkel set theory. Kripke - Platek set theory with urelements (i.e. 
with basic elements: allowing large or high-complexity objects) is an axiomatic system based on the classical Kripke- 
Platek set theory.5 The introduction of urelements was of interest for teclmical reasons in model theory (Barwise 
K. J. 1975). The teclmical advantage of this theory is that all of its constructions are 'absolute' in a suitable sense. 
This makes the theory suitable for the development of an extension of recursion theoiy to sets (Holmes M.R. 
2017). A brief presentation of the last system (denoted in short by KPU) is given below.
**
It is used in KPU a two-sorted first-order predicate logic language with a single binary relation symbol ' e ', 
denoted by L*  and defined as follows. Letters of the sort. p. q. r, ... denote urelements (if they are used) and 
letters of the sort', a. b. c. ... denote sets (instead of the traditional capital letters: A, B, C, ...). The letters: x, y, z, ... 
may denote urelements or sets, e.g. x =dt p or x =dÂ±- a. The letters of the sets may appear on both sides of 
' e' (e.g. a e b), but those for urelements may only appear on the left (e.g. p e b). The presented below axioms 
(in particular: Ao-separation and Ao-collection) will require reference to a certain collection of formulae called Ao- 
formulae, consisting only formulae built by the constants: 'e', 
'a' , V and bounded quantification. The
following KPU axiomatic system was presented (e.g. in accordance with ZFC, since a and b may be arbitrary, 
Al / zFCstyie can be represented as follows:

311
Al (axiom of extensionality)
A2(axiom of foundation)
A3 (axiom of pairing)
A4( axiom of union)
A5 ( axiom of Ao-separation)
A6 (axiom of Ao-collection)
A 7 (axiom of set existence)
V(xeaoxeb) => a = b
For every formula <p(x): 3 cp(a) =a 3 (cp(a) a v ~ <p(x))
3 ((x g a) a (y e a))
3 V V (y 6 a)'
3 c e b y e c
3 V (x 6 a Â« x 6 b a cp(x)) (for every Ao-formula <p(x))
v 3 cp(x.y) E w 3 cp(x.y)
x^a f 
x e a y G b
3 (a = a)
For example, in accordance with ZFC. since a and b may be arbitrary, Al / zrcstyie can be also represented 
as follows:
Al (axiom of extensionality)
V v (V (x e a ox e b) =o a = b)
a b x
The following two additional assumptions were used (describing the partition of objects into sets and urelements).
Assuumption 1
Assuumption 2
V V (P * a)
Or equivalently: E y ( ca) 
o c sb
t Tire universal quantifier closure of a formula <p is the formula whith no free variables obtained by adding a universal quantifier for every 
free variable in <p, e.g. V V (R(x) v E S(y,z)) is an universal quantifier closure of the formula <p =df R(x) v 3 S(y,z).
X Z 
y 
y
* Any axiom scheme can be considered as a standard way of introducing axioms having the same syntactic structure, e.g. the axiom Al (the
first law of the hypothetical syllogism: law of Duns Scotus, see Subsection 1.7) , of Lukasiewicz's implication-negation axiomatic system:
p ~ p q) can be generalised for any two formulae <p and ip. as follows: <p ;â  ( ~ <p ;â  ip).
Â§ Andrey Nikolaevich Kolmogorov (1903 - 1987)
" What is the significance of the Kolmogorov axioms'? Retrieved November 19, 2019 (The Free Encyclopaedia. The Wikimedia 
'Foundation. Inc.), https://www.stat.berkeley.edu/~aldous/Real_World/kohnogorov.html: David John Aldous, bom 1952
p a
v V (X Â£ p)
It can be observed that the used KPU axioms are universal quantifier closures^ of the corresponding 
formulae. In particular, the above axioms A2, A5 and A6 are axiom schemes^ This axiomatic system can be used 
in model theory of infinitaiy languages (assuming infinitary long statements or proofs). The transitive such models 
(inside a maximal universe) are called admissible sets. A more formal treatment is omitted: left to the reader.
5.7. Set theory: some aplications
Set theory (because of its general nature) has very many applications not only in classical mathematics (e.g. in 
differential and integral calculus) but also in theoretical computer science (in general, e.g. recursion theory) and 
discrete mathematics (in particular, e.g. the algebraic treatment of set operations). Set theory provides the basis of 
general topology (e g Polish spaces), etc. Kolmogorov's axioms5 (1933) are the foundations of probability theory 
(Kolmogorov A.N. 1956). 'These axioms remain central and have direct contributions to mathematics, the 
physical sciences, and real-world probability cases'(Aldous D.J."). This system is presented below. Some 
introductory notions are first presented (Fisz M. 1969). * * * * Â§

312
Let E be the set of elementary events (called also "atomic') . Any event which is not elementary can be 
considered as a subset of elementary events, e.g. A c E. The set of all such subsets of elementary events is 
denoted by Z. According to Definition 5.21. for |e| = n e N* we have: |z| = 2n.
* In general, the set E may also be of cardinality Ko or c.
t The probability p(A) satisfying Kolmogorov's axiomatic system can be considered as a normalised nonnegative and countably 
additive measure in Borel's field set of events Z (Mffix Edouard Justin Emile Borel: 1871 - 1956).
An event including all elements of E is said to be a sure event. An event which no includes any element of 
E is said to be impossible one. Set inclusion and set equality are introduced in the same manner as in classical set 
theory, assuming now that set elements are elementary events. In accordance with the last properties Z is 
defined as a Borel's field set of events.1'
Kolmogorov's axiomatic system is presented as follows.
Al (axiom ofnon-negativity) The probability p(A) 6 K of an event A e Z is a non-negative nmnber, i.e
A2 (axiom of unit measure)
A3 (axiom of a-additivity)
P(A) Â£ 0
P(E) = 1
pdjA, ) = S p(A ), for any countable sequence of disjoint sets {AJ
The event complement is defined as follows: A' =<jf E - A (in a similar way as set complement: see Definition 
5.8). Some consequences of the last axioms are illustrated below (Fisz M. 1969).
Proposition 5.6
p(A') = 1 - p(A)
Proof:
Since A and A' are disjoint sets of elementary events, we have: p(A u A') = p(A) + p(A') = 1. And 
hence: p(A') = 1 - p(A). â¡ {A2, A3}
Corollary 5.8
Since p(A') S 0 then 1 - p(A) S 0. Hence p(A) s, 1. We have: 0 < p(A) Â£ 1. â¡ {Al.Prop. 5.6}
Proposition 5.7
p(0) = 0
Proof:
For any A: A u E = E. Let A =df 0 . Then A and E are disjoint and hence p(A u E) = p(A) + 
p(E) = p(E) = 1. Hence p(A) = 0. â¡ {A2,A3,Coroll. 5.8}
Proposition 5.8
A c B =e> p(A) Â£ p(B)
Proof:
Assume that A c B. Then B = Au (B - A). And hence: p(B) = p(A) + p(B - A). Since 
p(B - A) 1> 0 then p(B) k P(A). â¡ 
{A1.A3}
Proposition 5.9

313
Let A, B e Z be two not necessarily disjoint sets of elementary events. Then: p(A u B) = p(A) + 
p(B) - p(A n B)
Proof:
Since AuB = (A-B)uB and A = (A - B) u (A n B) then: p(A u B) = p(A - B) + 
p(B) and p(A) = p(A - B) + p(A n B).
From the last equation we have: p(A - B) = p(A) - p(A n B). And hence: p(A u B) = (p(A) - 
p(A n B)) + p(B) = p(A) + p(B) - p(A n B). â¡ {A3}
Since ' n ' and ' u ' are two commutative, associative and mutually distributive binary operations, in 
accordance with the last proposition, for any three events A, B, C e Z we can obtain:
p(A u B u C)
[assoc. J
p((A u B) u C)
- p(A u B) + p(C) - p((A u B) n C)
{Prop. 5.9}
= (p(A) + p(B) - p(A n B)) + p(C) - p((A rt C) u (B n C)) 
[Prop. 5.9,
comm, and 
distribj
= p(A) + p(B) 
p((A n C) r
+ p(C) - p(A 
' (B n C)))
n B) - (p(A ,x C) + p(B n C) - {Prop. 5.9}
- p(A) + p(B) 
p(A n B n
+ p(C) - p(A 
C).D
n B) - p(A rx C) - p(B n C) + [comm., CnC 
= C[
Let now the above sets A, B and C be denoted by Ai,A2 and A3, respectively. The following expression 
can be obtained (the used here abbreviation ' It' denotes 'less than', i.e. '< ').
p(uAj) = vp(A;) 
; -1 
' = 1
1 p(Ai n Aj ) + (- 1)3 + 1 â  p(Ai n A2 n A3) 
ii,z2=l/Vt ^2 
1
In general, for Ai, A2, ... , An e Z (n L 3) the following expression can be obtained (known as 
Poincare's formula*
* Jules Henri Poincare (1854 - 1912)
t Known also as: 'totalprobability theorem'.
P( UA) 
i = l
L p(Aj)
S p(Aj n At ) 
;1,i2=l/i1 It i2
+ 
I p(Aj n A; n Aj )
'n'Z'h =l/'i 1*  *2  1*  b
+ (- l)n + 1 â  p(Ai n ... n An)
Let A be an event. Consider the sequence: Bi, B2, . .. ,Bn of mutually exclusive events forming a complete 
system. Assume now that A can be satisfied iff there exists B such that B is satisfied (i e {1, n}). And 
n
hence, the event A can be decomposed into the subcases A nBi, AnB2, ... . A n Bn, i.e. A = U (A n B. ) 
i â 1
n
. And so, we can obtain: p(A) = p( U (A n B. )) = fp(AnB). Since p(AnBj = p(B,) â¢ p(A / B,) we 
i 1 
1 
i=i 
1
have (the complete probability' fonnulaT): p(A) = X p(B. ) â¢ p(A/ B. ) . 
i = I 1 
1

314
p(B.)p(A/B.)
On the other hand: p(A) â¢ p(B / A) = p(B) â¢ p(A / B0. Hence: p(B / A) = ------------------------. And
P(A)
p(B )-p(A/B ) 
finally we have: p(B, / A) = ---------------------------- . The last formula is known as Baves ' theorem, given in the
Sp(B.).p(A'B.) 
i = 1 
1 
1
mid-eighteenth century by Thomas Bayes (1701 - 1761).
*
' (Bradistilov G. 1961): Georgi Bradistilov (1904 - 1977), (Roberts F:S. 1976): Fred Stefen Roberts, bom: 1943.
t Carl Adam Petri (1926 - 2010)
* A fragment of this paper is here presented. The paper describes a method of diagnosis-time assessment in discrete event systems. Any 
such system is modelled by a live, bounded, and reversible place-transition Petri net N. Also there are assumed some deterministically given 
delays associated with the transitions of N and hence N is assumed to be deterministic timed. For this purpose two different type of (single) 
fault models are used, i.e. place fault and transition fault models and the corresponding diagnosis process is assumed to be sequential.
"Discrete event systems (known also as: event-driven systems) are systems whose dynamic behaviour is driven 
by asynchronous occurrences of discrete events'. Petri nets? are fundamental models of such systems (Reisig W. 
1985, 1992). Set theory provides a foundation for Petri net theory and its applications. As an illustration (at tire 
end of tliis subsection), the notions of D-partition and net k-distinguishability are introduced below (Tabakow l.T. 
2008)2. At first, some basic notions are given.
In general any place-transition net N =df (T, P. A, ,K, Mo. W), where (T, P. A) is a finite net containing 
sets of transitions , places, and arcs called also edges, K : P â> (IN, - {0}) and W : A â> N are the 
corresponding place capacity and edge multiplicity (called also weight) functions, respectively. In particular, N 
is ordinary iff W(a) = 1 (for any a e A). The initial marking vector Mo: P IN0}, where N denotes the 
set of all natural numbers, IN =df No {0}, IN,, =df IN o {co}, and ro is an infinite number such 
that: co + k = ro and k < ro (for any ke IN) (Murata T. 1989, Reisig W. 1985, 1992). The forward 
marking class of N, i.e. [Mo > =df {Me IN I Et e T* (Mo [r >M ) }.
In the next considerations we shall assume N is a live and bounded net. In the case of manufacturing 
systems the net reversibility property is also required. Moreover, for simplicity it is assumed below that N is pure 
(i.e. it has no self-loops) and simple (there are no different vertices in N having the same pre- and post-sets). The 
net P-invariants (T-invariants) are computed using N â¢ i = 0 ( NT â¢ x = 0), where N is the PN-connectivity 
matrix of N (having |T | rows and |p| columns). We have: N = N+ - Ny, where N+ and N are the 
corresponding output and input matrices for N. The support of any P-invariant i wrt N is defined as follows: 
supp(i) =df {p e P / i(p) 0 } c P . Let I be the set of all (positive) P-invariants of N and J c I is a 
subset. The P-invariant matrix of N wrt J is introduced as follows: J : J x P -> IN, where J. (i,p) =df i(p) 
6 IN.
For convenience only, we shall assume below that the P-cover J of N is a set of all positive and minimal 
P-invariants. Any such set is assumed to be a set of linearly independent P-invariants. And in fact, any PÂ­
invariant matrix J can be considered as an information system. Hence, we shall assume that the set of PÂ­
invariants J (i.e. 'attributes' of this information system) is a reduced set (Murata T. 1989). Also we shall use the 
notion of the revised P-invariant matrix of N, defined as: Â£ : J x P â>{0.1}, where Â£(i.p) =df 1 iff i(p) * 0 
(Immanuel B. and RangarajanK. 2001). Let x e T o P . The pre-set (post-set) associated with x is defined 
as follows: 'x =df {y e T o P/ (y,x) eA} (x"=df { y e T o P / (x,y) e A } ). For any nonempty 
X g T o P : *X =df U x and X* =<jf U x . Any ordinary net is a marked graph iff I 'p I = I p' I =1 
xe.X 
xeX 
' 
'
(for any p e P). For simplicity, it is assumed below N have a P-cover. Otherwise, tliis method is also 
applicable. In the last case some additional test points is necessary to be introduced. Moreover, it can be observed 
that a selection of a minimal (or in general: optimal) P-cover may not guarantee a better net fault 
distinguishability. The net's places are interpreted below as representing resource states or operations and the 

315
transitions as representing start or completion of the corresponding discrete event (Zhou M.C. and DiCesare F. 
1993).
Let [Mo>Â« =df [Mo> u { MÂ« } . where Mo is the initial marking and MÂ« be a marking of N such 
that MÂ« Â£ [Mo> . We shall say Ma is a faulty marking. Since M â¢ i = Mr i, for any M e [Mo> and i e 
J (Reisig W. 1985), then AM â  i = 0 , where AM =df M - Mo. The last property is satisfied for any PÂ­
invariant i e J . Hence we can obtain J â  AMT = 0 . Therefore for M e [M0>a the above equation may be 
violated. Thus we have: J, â  AMT = a e {0,l}|j (for any Me [M0>a, obviously a = 0 iff M e [Mo> ). 
Without losing any generality, below (a)s Â£ 0 are interpreted as (a)s = 1 (s e {1,..., I JI }). And hence, 
in accordance with (Murata T. 1983), any (a)s = 1 will correspond to some subset of places supp(is) c P 
having a (potentially) faulty behaviour. Let Q(a) =df p| supp(is) n A supp(is)' c P. where supp(r,)'=,ir 
(a)s=l 
(a)s=0
P - supp(is) is the corresponding set complement operation (provided there is no ambiguity we shall use below 
the same designation " ' " as an index, e.g. to denote M', i.e. the marking M for N', where N' is the net 
simulator corresponding to N, in a similar manner Q' is used for Q of N'). The notions of D-partition and net 
k-distinguishability are given below (Tabakow LG. 2000, 2005, 2006 / fault distinguishability ...,2007).
Definition 5.41
By a D-partition of the set ofplaces P of a given place-transition net N wrt the P-cover J of N , denoted 
by Q(N,J ) , or Q if N and J are understood , we shall mean the (multi) family Q =df { Q(a) / a e 
{0,l}|j !}.
Proposition 5.10
(a) 
Q(0) = 0 ,
(b) 
V a.b 0 (a  b =r> Q(a) n Q(b) = 0 ) and
*
(c) 
U O(a) = P. â¡
* Perlis D.. Commonsense Set Theory. University of Maryland Department of Computer Science College Park. Maryland 20742: 
file: C: Users user Dociiniciits C( ).\1.\1O\SF\SF?'Â«2()Sr. l S"Â«20.\laryland"Â«20t<)"o20samo.pdf. 10pp. See also: (Geldenhuys A.E. et al. 
1999).
t (Ackermann W.F. / zuraxiomaiic â â â - 1956): Wilhelm Friedrich Ackermann (1896 - 1962)
ae(0,l)lJl
Definition 5.43
The Petri net N is a k-distinguishable net under Q iff
(a) 
3 Q(a) e Q ( I Q(a) I = k ) and
(b) 
V Q(a) e Q ( I Q(a) I < k ).
5.8. Commonsense sets: some comments
'Set theory has long been known for its phenomenal success in providing a basis for virtually all of 
mathematics, both in the philosophical sense of a precise foundation, and in the more prosaic sense of naturalness 
for defining other mathematical concepts with minimum pain. Here we explore the idea that also in coimnonsense 
reasoning there is a natural role for sets, although perhaps not as a basis for all such reasoning. Despite the wide 
variety of knowledge representation schemes that have been proposed, set theory seems not to have been 
explored as a vehicle for representing commonsense knowledge'.* In accordance with this work, 'it is argued that 
set theory provides a powerful addition to commonsense reasoning, facilitating expression of meta-knowledge, 
names, and self-reference. Difficulties in establishing a suitable language to include sets for such purposes are 
discussed, as well as what appear to be promising solutions. Ackermann's set theory as well as a more recent 
theory involving universal sets are discussed in terms of their relevance to commonsense'.

316
'The philosophical logician's evaluation of a theory should be regulated by meta-theoretical nonns which are 
neither rigid laws written on our genes not cultural artifacts embedded in ordinary discourse, but rather 
reflectively constructed expressions of our desire to be rational'(Poliard S. 2015). Some considerations, given in 
the last work, are cited below.
'As 1 have already indicated, we shall find that a mere grasp of commonsense notions of set will not supply 
us with an even remotely adequate appreciation for mathematical sets. In fact, I doubt whether any 
'commonsensicaT clarification of mathematical set theories is either possible or needed. My point is simply that 
we can be sure of this only after an investigation of ordinary language. And such an investigation is warranted 
even if its results are wholly negative'.
Some considerations related to Black's 'The Elusiveness of Sets'
*
 were also given (Poliard S. 2015): 'Black 
argues that commonsense sets (constructed in a certain way) are objects of the same type as mathematical sets. 
As a convenient shorthand we might say that Black 'identifies mathematical and commonsense sets' or 'claims 
that mathematical sets are commonsense objects''. T gather that Black is actually making the much less dubious 
claim that one can plausibly assert both that sets are commonsense objects and they are apparently 
uncommonsensical 'abstract entities' can be connected up with ordinary language. If this connection cannot be 
made, then sets may indeed be 'abstract entities', but they are not commonsense objects'.
' (Black M. 1971: Max Black 1909- 1988)
t Gottfried Wilhelm Leibniz (1646 - 1716), Karl Theodor Wilhelm Weierstrass (1815 - 1897), Julius Wilhelm Richard Dedekind (1831 - 
1916). Georg Ferdinand Ludwig Philipp Cantor (1845 - 1918), Friedrich Ludwig Gottlob Frege (1848 - 1925), Giuseppe Peano (1858 - 
1932)
1 According to this system, the letters of the sets may appear on both sides of' 6', but those for elements may only appear on the left side 
(as in KPU axiomatic system: see Subsection 5.6).
6. Multiset theory
'A multiset is a collection of objects (called elements) in which elements may occur more than once. The 
number of times an element occurs in a multiset is called its multiplicity. The cardinality of a multiset is the sum 
of the multiplicities of its elements. Multisets are of interest in certain areas of mathematics, computer science, 
physics, and philosophy'(Blizard W.D. 1989). Many aspects related to multiset theory can be found in 
mathematical literature, e.g. works given by: Leibniz, Weierstrass. Dedekind. Cantor, Frege. Peano . etc., see 
(Blizard W.D. 1989). Since multisets (called also bags or msets) are generalisation of sets, in accordance with the 
last work, it is developed 'a first-order two-sorted theory for multisets that 'contains' classical set theory. The 
intended interpretation of the atomic formula x e" y is x is an element of y with multiplicity n'.'Next, it 
is presented a model of multiset theory using ZFC (i.e. Zenuelo-Fraenkel axiomatics with the axiom of choiceji. Here, 
the above atomic formula x e" y' is interpreted as y(x) = n (multisets are modelled by positive integer - valued 
functions). As an example, the axiom of extensionality in this theory is presented as follows.
V V ( V v ( z en x o z en y) =$ x = y) 
X y Z n
Example 5.18 (multiset)
For any natural number n > 1, there exists exactly one such representation (called canonical}-, see Example 
5.9 of Subsection 5.4). Assume, e.g. n = 12 (22 x 3* 1). Hence n is related to the following multiset: {2,2,3}. In 
a similar way: n = 2700 = 22 x 33 x52 corresponds to {2,2,3,3,3,5,5}, etc.n
6.1. Basic notions and definitions

317
Let fB : X â> N u {0}, where IX I e N and fB, df $(xb.B) be the number (or the multiplicity) of
Xi's in B.
*  The following set is said to be a basis'. {fx/x e X}.+ And hence, fB = (fa.........faxi) = S #(x,B) â¢
* Because of the one-to-one correspondence between fB and B and hence, for convenience, some times fB is said to be multiset,
t Provided there is no ambiguity and for simplicity, fxl is used instead of f<xl> (for any x, e X).
Rohit Jivanlal Parikh, bom 1936.
Â§ Corresponds to the triangle inequality in a metric space.
xeX
fx. Here, fB is known as Parikh's vector (Parikh R. J. 1966).
Example 5.19 (Parikh's vector)
Let X =df {xi. X2. x3. x4} and fB =df (3.1.2.0). Since fM = (1. 0. 0. 0). fx3 = (0. 1. 0. 0). fx3 = (0. 0. 1. 0) 
and fXJ = (0. 0. 0. 1). then fB = 3 â¢ fxl + 1 â¢ fâ + 2 â¢ fx3 + 0 â¢ fx. = (3. 0. 0. 0) + (0. 1. 0. 0) + (0. 0. 2. 0) + 
(0. 0. 0. 0). â¡
Let A and B be two multisets on X. The distance function d(A,B) =df S | f\(x) - fB(x) | . In fact, the 
xeX
following properties are satisfied (for any A, B and C on X)..
d(A.A) = 0.
d(A.B) = d(B.A) and
d(A.B) + d(B.C) L d(A.C)Â«
Let a, p e K be two arbitrary real numbers. The following property is satisfied: | a | + | p | > | a + 
P |. In particular, for a =df a - c and p =df c - b we can obtain: | a â c | + | c â b | i | a â b |. And 
hence the last inequality is also satisfied (in accordance with the above notion of a distance function: a more formal 
treatment is left to the reader).
The support of a multiset B is defined as follows: supp(B) =df {x e X / #(x,B) > 0} c X. The
cardinality of B, i.e. |B| =df L#(xB). Let n e N u {0} and Bn =df {x e X/ #(x,B) S n}. We 
XG supp(B)
have: Bo = supp(B) and Bn c supp(B).
6.2. Multiset operations
Some definitions concerning multisets are given below (Peterson J.L. 1981). The multiset inclusion relation 
and multiset equation (denoted by 'cb' and '=b') are first introduced.
A cb B Â«df ( #(x.A) Â£ #(x.B))
A =b B Â«df V (#(x.A) = #(x.B)) 
xeX
According to the last bag equation, we can obtain:
V ( #(x.A) = #(x.B)) o V (( #(x.A) < #(x.B)) a ( #(x.B) i #(x.A))) 
x<=X 
x<=X
O V (#(X.A) . #(x,B) ) A V (#(X.B) < #(x,A) ) {Subsection 3.3} 
xt=.V 
xgA" * * * Â§

318
Â« ( A cb B ) a (B cb A). â¡
The following multiset operations are also considered.
A 
u B : 
#(x. A u B) =df max { #(x,A), #(x.B) }
A 
n B : 
#(x. A n B) =df min { #(x.A). #(x.B) }
A 
- B : 
#(x. A - B) =df #(x.A) - #(x. A n B)
A 
a B : 
#(x. A a B) =df max {#(x. A - B), #(x. B - A)}
A 
+ B : 
#(x. A + B) =df #(x.A) + #(x.B)
Example 5.20 (set union)
As in the previous example, let X =df [xi, x2, x3, x4} and A, B be two multisets on X, e.g. fA =<if 
(1.3.0.2) and fB =df {4.1.2.0). i.e. A = {xB x2. x2. x2. x4. x4} and B = {xB xB xB xB x2. x3. x3}. We have:
fA i-' b = S #(x. A u B) â¢ fx = S max{ #(x. A). #(x. B)} â¢ fx = 4 â¢ fxl + 3 â¢ fx2 + 2 â¢ fx3 + 2 â¢ fXJ = (4. 
xeX 
xeX
L = min{ fA(x). max{ fB(x). fc(x) }}
= min{ fA(x). fB(x)}
= fA(x)
0, 0, 0) + (0, 3, 0, 0) + (0, 0, 2, 0) + (0, 0, 0, 2) = (4, 3, 2, 2) = max{fA, fa} . And hence: A u B = {xi. 
Xi. Xi. Xi. x2. x2. x2. x3. x3. x4. x4}. â¡
It can be shown that multiset union and multiset intersection are two mutually distributive binary operations, 
i.e. the following proposition is satisfied.
Proposition 5.11
For any multisets A, B and C:
A n (B u C) =b (A n B) u (A n C)
and
A u (B n C) =b (A u B) n (A u C).
Proof:
In accordance with the first equality and the above definitions, we have: 
( L =) min{ fA(x). max{ fB(x). fc(x) }} = max { min { fA(x). fB(x) }. min { fA(x). fc(x) }} (= R)
The proof of the first equality will require the consideration of the following 32 = 9 cases (for any fA(x), 
fB(x), fc(x) and x e X) and also two times subcases: fA(x) > fc(x) and fA(x) < fc(x), as it is shown 
below.
As an illustration, by assuming case (7) we can obtain:
(1)
fA(x) > fB(x) > fc(x)
(2)
fA(x) > fB(x) = fc(x)
(3)
fA(x) > fB(x) < fc(x) (plus subcases: fA(x) > fc(x) and fA(.\) < fc(.\))
(4)
fA(x) = fB(x) > fc(x)
(5)
fA(x) = fB(x) = fc(x)
(6)
fA(x) = fB(x) < fc(x)
(7)
fA(x) < fB(x) > fc(x) (plus subcases: fA(x) > fc(x) and fA(.\) < fc(.\))
(8)
fA(x) < fB(x) = fc(x)
(9)
fA(x) < fB(x) < fc(x)

319
R = max { min { fA(x), fB(x) }, min { fA(x), fc(x) }}
= max { fA(x), min { fA(x), fc(x) }}
= fA(x) { min { fA(x), fc(x) } } = if fA(x) i fc(x) then fA(x) else fc(x) }
The remaining cases are considered in a similar way. The proof of the second equality is also left to the 
reader. â¡
Example 5.21
The multiset intersection is not distributive over symmetric multiset difference, e.g. A n (B 4- C) A 
(A n B) 4- (An C). The left and the right sides of the last inequality are given below.
L = min{ fA(x), max{ fB(x) - min { fB(x). fc(x) }. fc(x) - min { fB(x). fc(x)}}} and
R = max{ min { fA(x). fB(x)} - min { fA(x). fB(x). fc(x) }. min { fA(x). fc(x)} - min { fA(x). fB(x). fc(x)}}
Assuming 3,4 and 5, for fA(x), fB(x) and fc(x) respectively, we can obtain: L = 1 
0 = R. â¡
In general, multiset complement is not a definable operation. However, in some particular cases this 
operation may be used. Let A,B and C be multisets. Assume that A, B ch C. The last multiset can be 
considered as a multiset space wrt A and B. Hence, the C - multiset complement wrt A and B is introduced 
as follows: A' =df C - A and B' =df C - B. {Df. 5.8}
Proposition 5.12
Let A, B ci. C and A', B' be two C - multiset complements. The following restricted De Morgan's laws 
are satisfied: (A B) ' = A' n B' and (A n B) ' = A' B'.
Proof:
Let x e X be arbitrary. The proof of the first equality is given below (the proof of the second equality is 
similar: left to the reader).
L = flAuB| -(x) =df fc(x) - max{fA(x), fB(x)}
R = fA n B (x) =df min{ fc(x) - fA(x), fc(x) - fB(x) }
Let fA(x) > fB(x) then: L = fc(x) - fA(x) = R. Assume now that fA(x) < fB(x) we have: L = 
fc(x) - fB(x) = R. â¡
6.3. Multirelations
We shall consider below binary multirelations. Any such relation p can be represented as a subset of 
ordered pairs belonging to X x X and having some multiplicity, e.g. #((x;.Xj). MP), where MP is the matrix 
associated with p*. Unfortunately, in the case of computer science theory and applications (e.g. logical and 
algebraic methods in programming or theory and application of relational structures) another approach is used, first 
presented in (Parikh R.J. 1983) and (Rewitzky 1. 2003). Some basic notions and properties used below are 
under (Berghammer R. and Guttmann W. 2015)t The notion of multirelation is first presented. In accordance 
with the last work, the Z notation is used below (Spivey J.M. 1998), e.g. 'R c A x B' is denoted as: 
'R : A Â«-> B' (with source A and target B). Similarly, it is used matrix notation 'Rx/ instead of ' (x,y) e R'
* This approach is usefill in Petri net theory wrt the fundamental notion of unfolding (see the next subsection).
t See also the following extended version: Berghammer R. and Guttmann W., An algebraic approach to multirelations and their 
properties. 24pp: file:///C/Users/user/Documents/ALGEBRAlC%20PROPERTIES%20TO%20MULTlRELAT10NS.pdf.

320
or xRy', etc.
*
 The following three special relations are introduced: 
identity relations, i.e. O =dt 0 c X x X, T =<jf ?/ = X x X and
* According to the used here Z notation and for convenience with the next considerations, the above binary relation will be denoted in 
this subsection by 'R' instead of 'p'.
T Equivalently: p c A x
O. T and I (the empty, universal and 
I =df {(x,x)/x e X}, respectively).
A binary multirelation can be considered as a relation in the usual sense, i.e. R : A <-> B (see Definition 
5.17), assuming that (the targed) B is a powerset (see Definition 5.21)
Definition 5.44 (multirelation)
Let A, B be two sets and R be a binary relation under Definition 5.17 (here A and B correspond to X and 
Y, respectively) with the additional property that the targed (B) is a powerset (2B). Then we shall say that R is a 
multirelation.
According to the last definition, R : A <-> 2B is a multirelation, B is a superset. In particular, the empty, the 
universal and the membership multirelations are denoted by: O : A <-> 2B, T : A <-> 2B and E : A <-> 2A, 
where O = 0 , T = A x 2B and Ex, Y <=>df x e Y (for any x e A and Y e 2A).
Let Q : A x 2b and R : B x 2C be two multirelations. The composition of Q and R. denoted as Q ; R : 
A x 2C, is defined as follows.
(Q ; R)x.z Â«df 3 Qx.y a v Ry.z . for any x e A and Z e 2C.
Ye 2 B 
yeY
The transposition of a multirelation R is not multirelation (the transposed relation, i.e. converse, is denoted by 
Rc, obviously: (Rc)c = R). Instead, the dual operation is used (Berghammer R. and Guttmann W. 2015). The dual 
of R. denoted by Rd : A <-> 2B is defined as below (here Y denotes the complement of Y, i.e. Y' wrt the superset 
B).
Rd Y Odf ~ Rx.y - fÂ°r any x e A and Y e 2B.
The following operation precedence was introduced: the highest precedence have the unary operations 
complement and dual, then multirelation composition and next the multirelation operations of union and 
intersection (the definitions of the last two multirelation operations and multirelation complement are the same as in general 
relations, so they are omitted).
Let R : A <-> 2B . The following property is satisfied (for any x e A and Y, Z e 2B).
Rx.y a Y c Z =t> Rx, z.
In accordance with the last property, if x e A is related to a set Y e 2B then x also has to be related to 
all supersets of Y.
The notions of a contact multirelations and topological contact multirelations, concerning multirelations of 
type R : A <-> 2A and first introduced in (Aumann G. 1970), are given below: Aumann's axiomatic system is 
first presented (Berghammer R. and Guttmann W. 2015)
Al 
v ~ R x, o
Xâ¬ A
A2 
v R x, {xj
x e A
A3 
v 
v .Rx.y A Y c Z =} Rx.z
x = aY,Zg2a
A4 
v 
VryA(vrz) => Rx.z
xeA Y.Ze 2 A 
yeY
A3 V 
. R x. Y u Z <=> R x. Y v R X. Z
I5AY.Ze2A

321
Multirelations satisfying Al - A3 are said to be contact ones. Any contact multirelation is called a 
topological contact if . in addition. A4 and A5 are also satisfied. According to A3, R is up-closed 
multirelation from A to 2A.* Some properties (given in tire extended vesion of this work: Section 3) are illustrated 
below.
' In general, a multirelation p <z A x 2B is called up-closed if the following implication is satisfied: a p X a X c Y => apY 
(for any a 6 A and X, Y c B). The above notion can be introduced by using Parikh's vectors, e.g. fp: A /2E a X u {0}, left to the 
reader.
T Lattice theory will be considered in Part II of this book.
* Leonardo Fibonacci (c.l 170 -c.1250)
In accordance with the last work, being relations, the multirelations of type A <-> 2B form a bounded 
distributive lattice under the operations of union and intersection (which are mutually distributive). There were 
studied various aspects summarised in twenty-one theorems. As an example, the following two theorems were 
presented.
Thesis 5.44
Let P, Q and R be arbitrary multirelations of the same type 'A <-> 2B '. We have:
Thesis 5.45
(1)
O;R = O
(2)
E;R = R
(3)
T;R = T
(4)
R c R;E
{holds if R is up-closed}
(5)
(P u Q); R = P ; R u Q:R
(6)
(P n Q); R c P ; R n Q:R
{holds if P, Q are up-closed}
(7)
(P:Q):R c P;(Q;R)
{holds if Q is up-closed}
(8)
P ; Q u P : R c P;(Q u R)
(9)
P : (Q n R) C P : Q n P:R.D
Let Q and R be arbitrary multirelations of the same type 'A <-> 2B'. We have:
(1)
Od = T
(2)
Ed = E
(3)
Td = O
(4)
(Rd)d = R
(5)
(Q u R)d = Qd n Rd
(6)
(Q n R)d = Qd u Rd
(7)
(Q : R)d g Qd: Rd
(8)
(Q : R)d = (Q :E)d; Rd
{holds if Q is up-closed}
6.4. Applications
Multisets and multirelations arise naturally in modelling. Some interesting applications are cited below. 
'Fibonacci
*
 numbers have been studied for a long time and have been generalized in several ways'(Munarini E.

322
2005). Some notions introduced in the last work and related to multisets are given below (we shall use the original 
designations, except for N ) *.
' Provided there is no ambiguity and for convenience, here multiset is interpreted equivalently as a vector: 'p'. the multiplicity of x in p 
is denoted by p(x), instead of #(x, p), the set S is used, instead of X, etc., see Subsection 6.1. Moreover, in the above original work, by N 
it is denoted the set of natural numbers extended by 0.
T See also: (CmtetL. 1974).
1 There are two different types of place capacity: k and k*. The first one sets a bound on the number of tokens of a particular value that
can be resident in a place (as in place/transition nets, i.e. P/T nets), the second one, i.e. k*, set a bound on the total number of tokens
allowed in a place
A multiset on a set S is a function p.: S No {0}, where Isl e N. By p(x) it is denoted the
multiplicity of x e S in pi. The order of p is introduced as follows: or<7(p) =df X p(x) . By Mn it is
X Â£ S
denoted the family of all multisets on <n> =df {1, 2, ... , n}. It is said that p on S is m-filtering if p(x) < 
m, for any \ e S. The families of all m-filtering multisets on (n) and all m-filtering multisets of order k on 
S are denoted by Ml,"* 1' and ( S'km), respectively. The cardinality of the last family is the Andri (called also: 
polynomial) coefficient (Andre D. 1881) : (l8^1" ) . The following property holds:
(1 + X + X2 * + ... +xm~1)n = v [T)'xk 
k^.O '
The a-stastistic on Mn and the conjugate p of p on N o {0} are defined as follows (Munarini E.
2005): ct(p) =df Z x p(x) and p(x) =df p(n +1 - x), respectively. In particular: ord(p) = 
x â¬ <n)
ord(yt) and o(p) = (n+l)or<7(p) - o(p).
In accordance with the above illustrated properties (and also other ones, introduced in the previous 
considerations of this work: in particular, the definition of two kinds Fibonacci permutations on <n> having 
cardinalities that are generalised Fibonacci numbers) and using the notion of a multiset (e.g. in the proof of 
Theorem 11), there were introduced the generalised q-Fibonacci polynomials and two kinds generalised 
q-Fibonacci numbers. A more formal treatment is omitted: left to the reader.
Multisets are used as token bags in high level Petri nets, e.g. such as numerical Petri nets (Symons F.J.W. 
1978,1980) or coloured Petri nets (Jensen K. 1987, Jensen K. and Kristensen L.M. 2009). A generic fragment 
of a typical numerical Petri net is shown in the next example ( here, the used abbreviations DT, IC, TC, TO and CT 
denote as follows: Destroyed Tokens, Input Condition, Transition Condition, Transition Operation and Created Tokens, 
respectively)^
Example 5.22
(a)
p-variables
Xl
Xi
initial values
ai

323
(b)
p-variables
a
initial values
3
p-variables initial values
Figure 5.11 (a) A generic fragment, (b) Before firing ti and (c) After firing ti
PN states are represented by markings. We have: Mo Mi, where Mo =df ({<a>, 2<4,3> }, 0 / 3) 
denotes the initial marking and Mi - the next marking'. Mi = ({<a>, <4,3> }, <4,6> / 4). â¡
A categorical approach for modelling of Petri nets was proposed in (Brown C. and Gurr D. 1990). An 
extension of the last work was proposed in (De Paiva V. 1991). Here, the main purpose was 'to deal with 
multirelations, as Petri nets are usually modelled using multirelations 'pre' and 'post" * It is also presented a 
model of intuitionistic linear logic (without modalities).
* Corresponding to the notions of precondition and postcondition associated with some transition t (and related to the corresponding 
preset "t and postset f of places).
T See Subsection 2.4.
* The Kleene algebra of regular events will be presented in the next part of this work.
Â§ Bonet B., Hashim P., Hickmott S. and Thiebaux S.,
Directed unfolding of Petri nets. file:///C:/Users/user/Documents/UNEOLDlNGSÂ°o201NÂ°<>20PETRlÂ° o20NETS.pdf
** Any causal net is an occurrence net, but not vice versa.
Another interesting study was given in (Furusawa H. et al. 2008). There are studied basic properties of up- 
closed multirelations. It is shown that the set of finitary total up-closed multirelations over a set forms a 
probabilistic Kleene algebra?
' Unfolding, originally introduced in (McMillan K.L. 1993), is a method for reachability analysis which 
exploits and preserves concurrency information in the Petri net. It generates all possible firing sequences of the 
net, from the initial marking, whilst maintaining a partial order of events based on the causal relation induced by 
the net'? The notion of unfolding 'plays a major role in the so called non sequential semantics of Petri nets as 
well as in model checking of concurrent and distributed systems or in control theory' (Pinna G.M. 2011). In 
accordance with the last work, the following two approaches (concerning the above method) have been proposed: 
individual token philosophy (dependences among events are represented either taking into account the whole history of tire 
event) and collection token philosophy (considering the whole history irrelevant). And hence, there are proposed two 
kinds of unfoldings 'where the history is partially kept. These notions are based on unravelling a net rather than 
unfolding it'. And hence, there were introduced unravel nets'. "Causal nets structurally capture dependencies (and 
conflict) whereas occurrence nets structurally capture the unique occurrence property of each transition'." And 
so, the unravel nets are 'in between occurrence nets and causal nets'. Causal nets are structurally safe nets, i.e. 1- 
bounded (or bounded for n = 1: see Example 2.33 of Subsection 3.1). The corresponding multirelations, 
denoted in the last work by Fpre and Fpost are considered as a flow relation F c (S x T) u (T x S), * * * Â§ **
 

324
where: sF t iff Fpre(s,t) and t F s iff Fp03t(t,s).* The used in this work notions were compared with the 
classical ones. Some definitions given in (Pinna G.M. 2011) are illustrated below (we shall use the original 
designations, except for N).
* 'S' corresponds to the set of places, usually denoted by ' P ' (see Definition 5.29 (hi) of Subsection 5.4.).
T According to (Martin C.E. et al. 2007), there are specified systems 'that contain both angelic and demonic choice. One way to think of 
such specifications is as a contract (Back R.J.R. and Wright J. von. 1998) between two agents, both of whom are free to make various 
choices. One of the agents represents our interests, but the other may not. In this context, the angelic choices are interpreted as those made by 
our agent, since we assume that he will always make the choice that results in the best outcome for us. Conversely, the demonic choices are 
those made by the other agent, and since we have no control over them we must be prepared for all possibilities, including the worst'.
1 Some elements concerning graph theory will be presented in the next part of this work.
Let A be a set. Any multiset of A is a function m : A â> No {0}. Here, the family of all multisets on 
A is denoted by p.A. The usual operations on multisets are here used. The following definition is used: 
m < m ' if m(a) i m '(a), for any a e A. Also, it is introduced the multiset [m] such that: [m](a) =df 
if m(a) > 0 then 1 else 0. A multirelation f from A to B (here denoted by f: A -> B) is a multiset of 
A x B. In accordance with the main purpose of this work, there are considered only finitary multirelations, i.e. 
multirelations f such that the set [b eB/f(a.b) > 0} is finite.
Let tp =df m(a). The above multirelation f induces the function pf : pA o- pB ( possibly partial, since 
infinite coefficients are disallowed) such that: pf ( Â£ na â¢ a ) 
= 
Â£ S (na â¢ f(a,b)) â¢ b . A more formal
a e A 
bsBaeA
treatment is omitted: left to the reader.
Multirelations introduced in (Rewitzky 1. 2003) were considered as an 'alternative to predicate transformers 
for reasoning about programs' (Martin C.E. et al. 2007). Some notions related to these two works are given 
below,
"Angelic nondeterminism occurs when the choice is made by an 'angel': it is assumed that the angel will 
choose the best possible outcome. Demonic nondeterminism occurs when the choice is made by a 'demon': no 
assumption can be made about the choice made by the demon, so one must be prepared for the worst possible 
outcome. It is well known that both these kinds of behaviour can be described in the domain of monotonic 
predicate transformers (Back R..I.R. and Wright .1. von. 1998), (Morgan C.C. 1998), but this is usually associated with 
the derivation of imperative, rather than functional programs' (Martin C.E. et al. 2007). According to the last 
work, the types of all up-closed multirelations with source A and targed B are denoted by 'A =t B'. And 
hence, the angelic and demonic choices of two multirelations, e.g. Q and R are defined as follows: 
Q o R: A =t B and Q n R: A =t B, respectively^.
Let a be a program allowing both angelic and demonic choice. By S it is denoted the set of all states 
'regarded as infinite vectors of values of a countable collection of program variables'. And hence, the program a 
can be represented by the following binary multirelation (Rewitzky I. 2003): RÂ« c S x 2s and sRÂ«Q <=>df 
program a , 'when started in state s, is guaranted to terminate in a state in which Q holds and every state in Q 
is a possible outcome of a'. For any s e S, the set RÂ« (s) =df [Q e 2s / sRÂ«Q} 'captures the angelic 
choices available to the user' and for any Q e RÂ« (s), the set {s' e S/s'eQ) 'captures the demonic choices 
available of the machine'.
An ilustration of the above considerations are the two examples, given in (Martin C.E. et al. 2007) and 
'demonstrating how multirelations can be used to specify and manipulate some games and resource-sharing 
protocols'': left to the reader.
Let now X =<jf {xi, x2, ... , xn} be a set of elements called nodes (or vertices) and U =df {ui,U2, ... , um} 
C X x X = {(x,y)/x,y e X} be a set of elements called edges (or arcs). The obtained pair G =df (X, U) is 
said to be a graph
*.
 A graph having all edges oriented is said to be directed (or oriented) one, e.g. see Figure 5.7. 
A graph without edge orientation is said to be an undirected (or non-oriented) one: e.g. see Figure 5.4.

325
Any edge may appear more than one time, but no more than p times if G is a p-graph. Multigraphs are 
considered as undirected graphs having multiple edges, associated with the same pairs of nodes (not necessarily 
different) (Berge C. 1973)*. As an example. Euler's Konigsberg's bridges (L. Euler 1736)1 and the obtained 
multigraph are shown in the next figure below (Mallion R.B. 2007).
' Claude Jacques Berge (1926 - 2002)
t Leonhard Paul Euler (1707 - 1783)
* T/ie Free Encyclopaedia. The Wikimedia Foundation. Inc.
Â§ Lotti Aliasker Zadeh (1921-2017)
" Dieter Klaua (1930 - 2014)
tt Viacheslav Nikolaevich Salii, bom 1939.
** Tire algebraic system (L, A, V, Â° , e) is called a residuated lattice - ordered monoid or residuated lattice in short. It is assumed that 7 
incomplete'. /s.V e L are the infimum and the supremum of the set L , respectively, see Definition 5.28. And finally,'e'is the unity 
element of this system: algebraic systems will be given in the second part of this book. See: Jipsen P. and C. Tsinakis C., A Survey of 
residuated lattices. 37pp: file:///C:/Users/user/Documents/RESlDlUAlED" o20LAf llCES.pdf
Figure 5.12 Euler's Konigsberg's bridges
We observe that any (non-empty) multirelation, i.e. a multiset of ordered pairs, can be represented by some 
multigraph. In particular, labelled directed multigraphs (or multidigraphs) may be usable for describing various 
flight connections (by assigning to each edge its source and targed nodes, respectively) .
7. Fuzzy set theory
Fuzzy sets (also known as uncertain sets) are an extension of classical ones by assigning membership 
degrees to elements of the considered set. Fuzzy sets were introduced introduced independently in (Zadeh L.A. 
1965)Â§ and (Kiana D. 1965}**, 'as extension of the classical notion of set'. A more general (abstract algebraic) 
approach was given in (Salii V.N. 1965)F. In accordance with the last work, the following more general notion, 
called L- relotion. was defined as follows, e.g. (Belohlavek R. 2002): let X and Y be two non-empty sets 
and R : X x Y â> L. where L is the support set of the complete residuated lattice J? ." For x e X 
and y e Y, R(x,y) e L is the truth degree to wich x and y are in the relation R.
7.1. Basic notions, definitions and fuzzy set operations
Fuzzy sets are an important scientific direction also having very many applications. 'More often than not. 
the classes of objects encountered in the real physical world do not have precisely defined criteria of 

326
membership' (Zadeh L.A. 1965). Some elements concerning fuzzy set theory are given below. Zadeh's definition 
of a fuzzy set is first presented (below X is said to be a space point set).
*
* Provided there is no ambiguity and for convenience, instead of 'f'\(x)' (Zadeh L.A. 1965), we shall use equivalently: Tia(x) '. The 
universum is here denoted by X (a space point set).
t Instead of writing = j.iB(x) for all x in X', we shall write more simply: 'pA = Pb' , as in (Zadeh L.A. 1965).
* Corresponds to: X' =df - X (see Definition 5.8).
Â§ Or equivalently: pAuB =df Pa v Pb (Zadeh L.A. 1965).
** Or equivalently: pAnB =ar Pa a j.lb (Zadeh L.A. 1965).
Definition 5.45 (fuzzy set)
A fuzzy set A in X is characterised by a membership function pa(x) which associates with each point in 
X a real number in the interval [0,1], with the value of jia(x) of x representing the grade (or degree) of 
membership of x in A.
In accordance with the last definition, a fuzzy set is empty, i.e. A = 0 iff pA(x) = 0 (for all x e X). 
Some basic fuzzy set operations are given below (Zadeh L.A. 1965).
Definition 5.46 (fuzzy set equality)^
A = B odf V ( P-a(x) = P-b(x) )
Definition 5.47 (fuzzy set complement^
P-a =df 1 - Pa (i.e. V ( pA (x) =df 1 - Pa(x) )
Definition 5.48 (fuzzy set inclusion)
A c B Odf Pa Â£ Pb
Definition 5.49 (fuzzy set union)
P\ i: =df max{pA, Pb}* * * Â§ **
It was shown that the union of the fuzzy sets A and B is the smallest fuzzy set containing both A and B 
(Zadeh L.A. 1965). Let C' be an arbitrary fuzzy set. The following implication is satisfied.
Corollary 5.9
A, BcC => A u B c C
Proof:
(1)
A, B c C
{a}
(2)
Pa L Pc
{Df. 5.48
(3)
Pb L Pc
(4)
PAuB =df max{pA, Pb}
{Df. 5.49
(5)
PAuB <. pc
{ 2,3,4}
A u B C C.n
{Df. 5.48
Definition 5.50 (fuzzy set intersection)
Pai-, =df min{pA, Pb}

327
The intersection of the fuzzy sets A and B is the largest fuzzy set which is contained in both A and B 
(ZadehL.A. 1965).
In accordance with the last two definitions, as a t-norm and a t-conorm there were used Zadeh's such ones. 
The use of another t-norms, t-conorms and fuzzy negations, e.g. Sugeno's or Yager's ones, should be also 
possible but more complicated (see Subsection 2.2).
Let C' be an arbitrary fuzzy set. The following implication is satisfied (the proof is left to the reader).
Corollary 5.10
c G A.B
=> C g A n B.
It can be observed that two fuzzy sets A and B are disjoint iff A n B = 0 (as in classical sets). 
Moreover the fuzzy set union and fuzzy set intersection are two associative and mutually distributive operations. 
De Morgan's laws are also satisfied (as in classical set theory: see Subsection 5.2). And so. the following properties 
hold.
(1) 
A u (B u C) = (A u B) u C
(2) 
A n (B n C) = (A n B) n C
(3) 
A n (B u C) = (A n B) u (A n C)
(4) 
A u (B n C) = (A u B) o (A u C)
(5) 
(A u B)' = A'n B'
(6) 
(A n B)' = A'u B'
As an example. (3) corresponds to the proof of the following equality (for any x e X).
min[p.A(x). max{p.B(x). p-c(x)}} = max{min{p.A(x). pB(x)}. min{p.A(x). pic(x)}}.
In a similar way. e.g. according to (6) the obtained equality is as follows.
(L = ) 1 - min{p.A(x). qB(x)} = max{l - p.A(x). 1 - pB(x)} (= R)
In particular, the proof of the first equality is very similar to the proof given in Proposition 5.11: left to the 
reader. The proof of the second equality is given below (it is sufficient to consider the following two cases: 
pA(x) > |Ub(x) and pA(x) < |Tb(x)).
Proof(6):
(1.1)
p.A(x) > jiB(x)
{ada}
(1.2)
1 - p.B(x) = 1 - p.B(x)
{- jxA(x) <- jxB(x) : 1.1}
(2.1)
p.A(x) < jiB(x)
{ada}
(2.2)
1 - p.A(x) = 1 - p.A(x)
{- p.A(x) > - jiB(x) : 2.1}
L = R. â¡
{1.2. 2.2}
Some basic notions concerning fuzzy sets are also given below: see also (Bronstein LN. et al. 2001).
(1) qA.(x) =df if p.A(x) L 0.5 then 1 else 0 
{The classical (i.e. ordinary) set A*
corresponding to the fuzzy set A]
(2) B =df UAj and C =df AA; 
p.B(x) =df {see Subsection 5.3}
i 
i
sup{Pa,(x)} 
and pc(x) =df 
inf {nA. (x)}
i 
i 
*

328
(3)
supp(A) =df {x 6 X / pA(x) > 0}
{fuzzy set support}
(4)
tol(A) =df {X 6 X / Pa(x) = 1} c supp(A)
{fuZZy set tolerancy)
(5)
A> oc =df {x 6 X / pA(x) > a}
{a-cut, a e [0,1]}
(6)
A> a â df {x e X / pA(x) L a}
{strict a-cut, a e [0,1]}
(7)
PAnorm(x) =df
sup [nA(x)}
x eX
(if A 0)
{fuzzy set normalisation}*
It can be observed that the above two a-cuts are classical sets. Moreover, supp(A) = A> 0. And finally, the 
strict 1-cut A>i = tol(A). The following property is satisfied (Bronstein I.N. et al. 2001).
Proposition 5.13 (fuzzy set representation)
For any fuzzy set A on X, there exists exactly one monotonic family of a-cuts {A> a I a e (0,1]} in X 
(exactly one monotonic family of strict a-cuts {Aja /a e (0,1]} in X) such that: a<p=>A>a^A>p 
(Aia 2 Ay).
And vice versa, if there exists a monotonic family of subsets {Ua / a e (0,1]} in X (a monotonic family of 
subsets {VÂ« / a e (0,1]} in X) then there exists exactly one fuzzy set U in X (exactly one fuzzy set V in X) 
such that U>Â« = UÂ« (V>Â« = VÂ«) and pu(x) = sup {a e [0,1) } ( pv(x) = sup {ae(0,l]}). â¡ 
seuâ 
-vâ
Let X be finite, A be a fuzzy set defined in X and prtâ(x) =df if Pa(x) L a then 1 else 0
(corresponding to the notion of a strict a-cut). The fuzzy set A can be represented as follows: P-a(x) =
U a â¢ p A (x), x e X. This is illustrated in the next example. 
Cl 
"
Example 5.23
Let A be a fuzzy set in X =df {xi, x2, x3, x4}, defined by pa = (0.2, 0.5, 0.3, 0.9). We can obtain, e.g.
Pa(x2) = max{0.2 x p^Tx^ 0.3 x pAaj(x2). 0.5 x pAÂ»=(x2), 0.9 x pa,^x2)}
= max{0.2 x 1, 0.3 x 1, 0.5 x 1, 0.9 x 0}
= 0.5. â¡
The following definition is introduced (Bronstein LN. et al. 2001).
Definition 5.51 (fuzzy set similarity^
Two fuzzy sets A and B are similar iff v 3 (a < min{ai,a2}, supp(aipA)a c snpp(pB)Â« and 
ae (OJ] aj ,a2 51
supp(a2pB)Â« c supp( pA)Â«).
Proposition 5.14
t he fuzzy set A is said to be normalised iff the height of A. i.e. sup{ u . (x)} = 1 (otherwise A is said to be subnormal). 
x = X
t Let A, B be two fuzzy sets. The similarity measure S(A,B) =df (A n B) / (I AI + |b| - | A n BI), assuming that: A X B :â  
S(A,B) < a (is the threshold). The considered also possibility measure 'quantifies the extent to which A and B overlap': fl(A,B) =df 
sup{ min' u^lx). gg(x)}} : Mencar C.. Castellano G.. Fanelli A.M. and Bargiela A.. Similarity vs. possibility in measuring fuzzy sets 
x s X
distinguishability. 7pp: file:///C:/Users/user/Documents/SlMlLARlTY%20AND%20POSSlBlLlTY%201N%20FU?:ZY"o20SETS.pdf.

329
Two fuzzy sets A and B are similar iff tol(A) = tol(B). â¡
Definition 5.52 (strictly similarity)
Two similar fuzzy sets A and B are strictly similar iff supp(A) = supp(B).
Sometimes there are required additional interpolating operators between t-nonns and t-cononns: called 
compensative ones. e.g. lambda- and gamma-operators given below (Bronstein LN. et al. 2001).
Let A and B be two fuzzy sets. The lambda- and gamma-operators (in short: 2-operator and y-operator) 
are introduced as follows.
P-axb(x) =df X(pA(x)p.B(x)) + (1 - X)(pA(x) + p.B(x) - p.A(x)p.B(x))
Payb(x) =df (p-a(x)p.b(x))1-y ((1 - (1 - Pa(x)))(1 - (1 - ua(x))))Y
It can be observed that X = 0 (y = 1) and X = 1 (y = 0) correspond to the notions of algebraic sum: 
x Â© y =dfx + y- xy (algebraicproduct: xÂ®y =df xy ), respectively: see Subsection2.2.
In accordance with the last work, the above considered gamma-operator was extended as follows (to more 
n 
o 1 v 
n 8- n
than two but a finite number) arguments): 
p.(x) =df [II gj (x) l| ] 
* [1 - 11(1 - iq (X)) 1 ]7. where 
E5, = L
x e X and y e [0,1] (in particular, a similar operator was also given without using the weights 8i).
Let A be a fuzzy set. For convenience, sometimes the following scaling operations are also used 
(Petry F.E. 1996): CON, DIL and INT (i.e. concentration, dilation and intensification, respectively), defined as 
follows.
CON(A): 
p.coNiA)(x) =df (p.A(x))a (usually a =dt 2, a e N - {!]). This operation 'concentrates fuzzy
elements by reducing the membership grade proportionally more for elements that have smaller 
membership grades'.
DIL(A): 
P-dil(a>(x) =df (pa(x))1/Â£1 (usually 1/a =df 0.5). This operation 'dilates fuzzy elements by
increasing membership grade more for the elements with smaller membership grades'.
INT(A) |Uint(A)(x) =df if 0 Pa(x) 0.5 then 2(p.A(x))2 else 1 - 2(1 - p.A(x))2. This operation 
is Tike contrast of a picture. It raises the membership grade of those elements within the 
crossover points and reduces the membership grade of those outside the crossover points'.
In the scalar approaches (De Luca A. and S Termini S. 1972). the "power of a finite fuzzy sef A (or: the scalar 
cardinality of A or also: sigma-count of A) is defined as the sum of the membership degrees associated with A, i.e.
IA| =df E pA (x). The last definition (convenient in applications) was generalised in (Dhar M. 2013) by using (in 
xeX
addition to the membership function) also a reference function. This approach was related to the notion of a fuzzy 
number, introduced in (Baruah H. K.. 1999): A more formal treatment is omitted: left to the reader.
7.2. Fuzzy relations
Let X and Y be two universal sets and G =df X x Y be the obtained universal domain. By F(X), F(Y) 
and F(G) we shall denote below the sets of all fuzzy subsets defined in X, Y and G. respectively. In general, 
fuzzy relations are considered as fuzzy sets of ordered tuples (or pairs: in the binary case). And hence, the most of 
the above considered properties are here also satisfied. Fuzzy relations can be introduced in a similar way as in 
the case of classical ones. Some basic notions, definitions or other considerations are given below (Bronstein LN. 
et al. 2001).

330
Definition 5.53 (binary fuzzy relation)
R binary fuzzy relation p defined in F(G)* is a fuzzy subset of ordered pairs that belong to G.
* Provided there is no ambiguity and for convenience, sometimes instead of p defined in F(G)' equivalently we shall use: 'p(X.Y)'. In a 
similar way, by 'o(Y x Z)' we shall denote a binary fuzzy relation a defined in F(Y x Z). etc.
t Kruse R. and Moewes C., Fuzzy systems: fuzzy relations. University of Magdeburg: 34pp.
file: C: Users user documents H 7/Yl'.l20RfTl..\ ri()\Sl'.l2()lir:n\n i()\"i20ETC.pdf.
According to the last definition, p can be described by the membership function pP: G -> [0,1] such that 
pP(x,y) e [0,1] (for any (x,y) e G). As fuzzy relations are particular fuzzy sets, we can use the same fuzzy set 
operations as in the previous subsection, e.g. the union p u ct (assuming that p, o e F(G)) is defined as follows: 
uOLtJ(x,y) =df max{pP(x,y), pc(x,y)}, for any (x,y) e G.
Let p e F(G) be a fuzzy relation. The opposite fuzzy relation p 1 is defined as follows: pP-i(x,y) 
=df pP(y,x), for any (x,y) e G.
In the next considerations there are cited such notions as: projections, cylindric extensions and cylindric 
closure and finaly the notion of a fuzzy equivalence relation. The notion of Cartesian product is first given.
Definition 5.54 (Cartesian product of fuzzy setsf
Let At be fuzzy sets defined in the universal sets Xi (I < i < n). The Cartesian product Ai x ... x An is a 
fuzzy relation in the product space Xi x ... x Xn , defined by its membership function pA1 â¢ ... â¢ An(xi. ... ,xn) =df 
min{p.Ai(Xi) / Xi e Xi. 1 < i <, n}.
In accordance with the last definition, instead of the logical operation 'minimum' sometimes it is used the 
algebraic operation product: 'x', i.e. pAi An(xi. ... ,xn) is defined as: pAi(xi) x ... x p^fx,,).
Corollary 5.11
Let A e F(X) and B e F(Y). The Cartesian product A x B e F(G) is a fuzzy relation defined by its 
membership function: pA . B(x.y) =df min[pA(x). pn(y)}. for any (x,y) e G. â¡ {Df. 5.54}
Consider the Cartesian product of all sets in the family % =df {Xi, X2, ... , Xn}. Let p c Xi x ... x Xn 
be an n-ary relation. The projection of p on c % , denoted by P(pf9j), disregards all sets in % except 
those in the family .
Another operation on relations called cylindric extension was also introduced. This operation 'produces 
largest fuzzy relation that is compatible with projection', 'is the least specific' of all other such ones and 
guarantees that included information is complete. However, as it was observed, such reconstruction is limited. On 
the other hand, any such relation can be exactly reconstructed by taking set union of several of its projections or 
also by taking set intersection of their cylindric extensions. 'The resulting relation is usually called cylindric 
closure'', left to the reader.
Binary fuzzy relations play a significant role among n-dimentional relations. Some additional notions 
concerning these relations are given below (see the last work cited below).
Let p e F(G) be a binary fuzzy relation. The domain and codomain (called also: range or image) of p are 
defined as follows: pdomipfx) =df max{uP(x,y)/y e Y} and pcodipfy) =df max{uP(x,y) / x e X}, for any x e 
X and y e Y, respectively.
The standard composition of two binary relations p and ct (see Definition 5.19) is generalised as follows.
Definition 5.55 (composition of two binary fuzzy relations)
Let p(X,Y) and cr(Y.Z) be two binary fuzzy relations. The obtained composition is defined as follows.

331
[pÂ»c](x,z) =df sup{ min{p(x,y),o(y,z)}}
*,
 forany x e X and z e Z.
'Here: [p Â° a](x,z) =df Lipo(x,z), p(x,y) =df |y>(x,y) and a(y,z) =df (W y.z). Another possible compositions may be the following ones: 
inf{ max{ p(x, y). o(y, z)}} either sup{ p(x y) * o(y, z)} .
y r Â¥ 
y S Y
t Here: [p Â° o](x,z) =df u . . (\.z i. p(x,y) =df Pp(x,y) and a(y.z) =df J.io(y.z)
1 Obviously, the transitivity property maybe introduced by using another t-conorm and t-norm. respectively: see Subsection 2.2. However,
in applications, the above ones are widely used.
y e Y 
' 
' 
'
In accordance with the last definition, instead of supremum it is used the logical operation maximum if Y is 
finite. And hence, the obtained composition (or superposition) is called max-min one. The inverse of the max-min 
composition is defined by the following equality: [p(X,Y) Â° ct(Y,Z)] * 1 =dt '(Z.Y) o p ^Y.X).
It can be observed that the composition of two binary fuzzy relations is an associative binary operation. But 
this operation is not coimnutative. The matrix representation of this composition is realised similarly as in the 
classical case (see Example 5.11). And hence, the corresponding value of any matrix element, instead of {0,1}, will 
belong to the interval [0,1], And so, we have multiplication over fuzzy graph incidence matrices: left to the 
reader.
According to this work (see below: the work marked by star), the above max-min composition can be also 
realised into two steps. The following definition is first introduced.
Definition 5.56 (relationaljoin)
Let p(X,Y) and ct(Y,Z) be two binary fuzzy relations. The relational join of p and ct is defined as 
follows: [p * o|(x,y,z) =dt min{p(x,y), o(y,z)}t, for any x e X,y e Y and z e Z.
Corollary 5.12
[p Â° ct](x,z) = max {[p * a] (x, v, z)}, for any x e X and z e Z. â¡ {Df. 5.56} 
y e Y
The properties of crisp binary equivalence relations (see Definition 5.23) are extended for binary fuzzy 
relations as follows.
Definition 5.57 (binary fuzzy equivalence relation)
Let p(X,X) be a fuzzy relation on X. We shall say that p is a binary fuzzy equivalence relation iff p is at 
the same time reflexive, i.e. p(x,x) = 1 (for any x e X), symmetric, i.e. p(x,y) = p(y,x) (for any x,y e X) 
and transitive, i.e. if it satisfies: p(x,z) A max{ min{p(x, y), p(y, z)} }, for any x, z e X?.
y e Y
The introduced in Subsection 2.2 t-nonns and their t-cononns may be used for introducing new fuzzy 
relations. This is illustrated below.
Example 5.25
Let X =df {0, 1/4, 2/4, 3/4, 1}. Consider the following binary relation Â® c (X x X)2 defined as 
follows: (x,y)Â®(z,t) =df (xÂ®z,yÂ©t), where 'Â®' and 
are the corresponding generalised
Lukasiewicz's fuzzy t-norm and t-conorm, respectively. Assume that a =dt 2. And hence, we can obtain.
(x,y)<^(z,t) = (max{0, x2 + z2 - l}1/2_ min{l,y2 + t2}1/2).
The following implication is satisfied (for any pairs a, p, y e L =dt {(x,y) / x+y il}).
P E a => ct(P, y) < a(a, y), where: ct(P, y) =df sup {PÂ®5^yj and a(a, y) =dt sup{aÂ®5<y}.
8 e L 
8 e L

332
As an example: (2/4,1/4) 2: (0,2/4) =l> (0,3/4) 
(1/4, 3/4/). In general, ct is decreasing in the first
argument. Here, 0L = (0,1) and 11 = (1,0) correspond to the minimal and maximal elements, respectively: a 
more formal treatment is left to the reader. â¡
7.3. Fuzzy distances, measures and transformations
The notion of a fuzzy distance can be introduced either as a 'generalisation of the classic distance between 
subsets of a metric space or as a distance between membership functions of fuzzy sets or also as a fuzzy metric 
by generalising a metric space to a fuzzy-metric one' (Bednar J. 2005). In general, there exist various definitions 
of distances between fuzzy sets.Obviously, it is assumed below that X is finite and non-empty. The presented 
distances are mainly concerned about the image similarity, but other applications are also possible.
Let A and B be two fuzzy sets. Some most frequently used definitions are illustrated below, e.g. 
(Jani''s V. and Montes S 2007). The most simple ones are Chebyshev* * distance and Hamming^ distance (known 
also as: 'city block' or 'Manhattan distance').
' Pafhuty Lvovich Chebyshev (1821 - 1894).
t Richard Hamming (1915 - 1998).
* Herman Minkowski (1864 - 1909)
Â§ John Roger Bray, bom 1929, John Thomas Curtis (1913 - 1961), Thorvald Julius Sorensen (1902 - 1973). This distance can be 
n |x. vj
considered as a particular case (of the most generalised form, called) Camberra distance'. d(y.y) =df 
1 
: 
; 
7, where:
Tl â  Id
S =dr (xi, ... , xâ), y =df (yi, ... , yâ) 6 R": it was observed that the last distance (along with Bray - Curtis one) can perform very well in 
CB1R (Context Based Image Retrieval), significantly better than (mostly used) Manhattan or Euclidean ones.
Chebyshev distance:
d(A,B) =df max{ pA (x) - pB (x)} 
xeX
Hamming distance:
d(A,B) =df Z |pA(x)-pB(x)|
X 6.X
Minkowskf distance:
d(A,B) =df ( Z |pA(x)-pB(x)|n)1/n, n e N 
xeX
Bray - Curtis / Sorensen distance C
k (x) _
d(A,B) =df S
xeX PA(x) + pR(x)
Squared chord distance
d(A,B) =df X (JpA(x) - Jp (x))2 
xeX v 
V B
(it (x) - M
*))
2
Squared Chi - squared distance
d(A,B) =df S 
-
xeX p (x) + p (x)
A 
D
In particular. Euclidean distance can be obtained from Minkowski distance assuming a = 2. The above 
nosion of a distance between two fuzzy sets A and B can be also used in some definitions concerning measures 
of fuzziness. Some such measures, denoted by cp(A), are given below. Here, instead of B, there is used the 
classical (i.e. ordinary) set A* corresponding to the fuzzy set A , i.e. B =df A* (except for entropy measure, 
where it is used the fuzzy set complement of A, i.e. A': see Subsection 7.1).

333
Chebyshev measure'.
Hamming measure:
Minkowski measure
<p(A) =df
2d(A,A')
<p(A) =dt
2d(A,A
*)
 
lxl
<p(A) =df
2d(A,A')
. n e N
* According to Shannon's entropy (Claude Elwood Shannon: 1916 - 2001). Here, j.iA(x) corresponds to the notion offu::y set 
complement', in accordance with Definition 5.47, here it is implicitly assumed the standard complement (related to Lukasiewicz's negation: 
see Subsection 2.2).
t Corresponds to the notion of a scalar product of two vectors', a-b =df |a|.|b|. cos(a â  b) . And hence: cos(a ' bj = âj----- :â
|a| â¢ |b|
. Obviously: a-b g [R. It is assumed that a,b 0. This measure i sal so known as Ochini coefficient or Otuska -
Ochiai coefficient (Janosuke Otuska: 1903 - 1950): The Free Encyclopaedia, The Wikimedia Foundation, Inc.
Entropy measure of fuzziness
*
Cosine similarity measure'
<p(A) -df (- S (nA(x)-lg9nA(x) + nA,(x)-lg9nA,(x)))/|X| ? 
xeX
|1a(x) g (0,1), for any x g X
X JlA(x)-|IA. (x)
X G X
<p(A) =df 
= â 
=
X piA(x)2 â¢ I Z piA.(x)
l/xeX A VxeX A
â¢ 
f
The generalised Lukasiewicz's fuzzy t-norm and t-conorm. i.e. xt)y = max{0, x" + y" - 1} and
" 
1 /ft
xÂ©y = min{l. x" + y"} , introduced in Subsection 2.2, can be defined for more than two (a finite number) 
arguments. The following generalised t-norm and generalised t-conorm are obtained.
n 
c p\ 
â  -i -Â»1 /ot
Â®i = 1xi = max{0, Ex1 - n + 1}
i = l
and
Â®1 = 1X| = min{l, Xxj } .
The proofs of the last two formulae are inductive wrt n. As an example, the following proof for the second 
one can be obtained.
n
i =1 1 
1

334
Proof:
Let n =df k and F(k) =df min{l, ExÂ®)1'01. Since tins t-conomi is associative ? we can obtain: 
i = l
F(k+1) 
= (Â®. = 1xi)Â® Xk+1
. rir â¢ <1 ct 1 /ct ct a Ala
= mm{L {min{L Ex-} } +x } 
i-l 
k + l
= imn{l.min{l. Â£x"}+ x" 
i-l 
k+l
And so. it is necessarily to be shown that the left side (L) and the right side (R) of the following equality are 
equal.
k 
< ,â  o 
k+1 
> .â 
(L) inin{l, inin{l, Â£x"}+x" } 
= min{l. Zx"} " (R).
i=l 
k+l 
i=1 1
k 
k
Assume first that Exf > 1. Then: L - 1 = R. Let now Sx" < 1. We can obtain: L = 
i 1 
i = l
k 
k-r 1
mini. Xx: + x } 
- min{l. z.Xj } 
= R. â¡
i = l 
k + l 
i = 1 1
In accordance with the above generalised t-cononn, the following fuzzy set distance and measure of
fuzziness can be obtained (it is assumed that a =+ n e N).
n
Generalised Lukasiewicz's distance
d(A.B)
min{l, Z u (x)-u (x)| }1/n ?
X = X A 
B
Generalised Lukasiewicz's measure
2d(A.A
*)
<p(A) =df ----- jâ:-----
Example 5.24 (measures of fuzziness)
Some computations, related to the above given five measures of fuzziness are illustrated below. As an 
example, assume that we have the following input data.
X 6 X
Xi
X2
X3
X4
M-a(x)
0.3
0.8
0.2
0.9
J1A-(X)
0
1
0
1
M-a(x)
0.7
0.2
0.8
0.1
The obtained fuzziness measures are given below.
Chebyshev measure
Hamming measure
Minkowski measure
cp(A) = 0.60
cp(A) = 0.20
cp(A) = 0.4243... /n= 2. cp(A) = 0.22243... / n = 3.
ss 0.42 (Euclidean measure) ~ 0.22

335
Entropy measure of fuzziness
*
cp(A) = 2.794249... as 2.7942, and hence: 2.7942 / 4 = 
0.69855 as 0.70
Cosine similarity measure
cp(A) = 0.9563247... as 0.96 (ore. g.Â» 0.24, dividing by |X| = 4)
Generalised Lukasiewicz's 
measure
<p(A) = 0.2121320... as 0.21/n = 2, cp(A) = 0.1765 /n= 3, 
as 0.18. â¡
. 
10gbn
* lÂ°gan = 
, e.g. a 6 {:2, e). Here it is assumed: a =# 2 and b =# 10.
10Â§ba
1 Or equivalently: if A = A".
The last condition (c3) corresponds to the notion ofa 'sharpness relation' defined in [0, 1], introduced in (De Luca A. and Termini S.A. 
1972). And hence, the above condition is a 'sharpened' version of this notion.
Â§ Corresponds to the original text: 'j.iB(x) L j.La(x) v (1 - j.iA (x))'.
" F<3ix Edouard Justin Emile Borel (1871 - 1956).
Let F(X) be the set of all fuzzy subsets defined in X. A e F(X) with jj.a(x), defined for any x e X and 
having a measure of fuzziness cp(A). In accordance with (De Luca A. and Termini S.A. 1972), the following three 
conditions should be satisfied by cp(A).
(ci) <p(A) = 0 if A is a crisp set, i.e. Ha(x) e {0,1}, for any x e Xt
(C2) cp(A) should attain mximum value for |1a(x) = 0.5, for all x e X.
(c3) cp(A) Â£ cp(B) if A, B e F(X) and
pB(x) L pA(x) if x 6 {y/pA(y) i 0.5} c X
gB(x) A pA(x) if x e {y/pA(y) < 0.5} c XJ.
As it was observed, the above three conditions are not complete. And so, they can not be considered as 
axioms for measure of fuzziness (Wang Z.-X. 1984), In fact, by (c3) it follows that <p(A) attains maximum at 
pA(x) = 0.5 (for all x e X). However, 'there never exists any fuzzy set B which is differend from A, such 
that sets A and B satisfy (c3)'. And hence, (c3) was revised in (Wang Z.-X. 1984). The following generalised 
version of (c3) was introduced.
(c3') q>(A) Â£ cp(B) if AB e F(X) and
pB(x) max{pA(x), pA (x)}* * * * Â§ * if x e {y / pA(y) > 0.5} u {y / pB(y) > 0.5} c X
pB(x) A pA(x) if x 6 {y/pB(y) A 0.5} c X.
Let SB be a Borel's field
**
 consisting of ordinary subsets of X. The notion of a fuzzy measure space is 
introduced as follows (Wang Z.-X. 1984).
Definition 5.58 (fuzzy measure space)
Let p(-) : SB [0, 1], We shall say that p(-) is a fuzzy measure on SB if the following three conditions 
are satisfied.
(1) 
p(0) = 0 , p(X) = 1
(2) 
(A, B 6 SB ) a (A n B = 0) 
|_i(A u B) = max{p(A), p(B)} {fuzzy additivity}

336
(3) 
{An/n e Nj c SB is a monotonic sequence ==> p(limAn) = limp(An) {fuzzy continuity}
The ordered triple (X, SB, p) is said to be a fuzzy measure space.
Fuzzy measure theory was developed independently by Choquet G. (1953) and by Sugeno M. (1974)
*:
 
in the context of fuzzy integrals. By assuming an additive fuzzy measure, Choquet's integral is related to 
Lebesgue'si integral.
' Gustave Choquet (1915 - 2006), Muchio Sugeno, bom 1940.
t Henri Leon Lebesgue (1875 - 1941).
Grabisch M.. 77ie application of fuzzy integrals in Multicriteria Decision Making. Thomson-CSF, Central Research Laboratory Domaine 
de Corbeville, 91404 Orsay cedex, France 13pp: file:///C:/Users/user/Documents/LUZ7YÂ°o201NTEGRALS%202020Â°o20ETC.pdf
Some notions related to the fuzzy integrals are given below. The last work concerns the theory of 
multicriteria decision making wrt many new approaches (or paradigms), 'introduced in the second half of the 
twentieth century, especially in Europe'. As it was stressed 'a coimnon feature of all these approaches ... is that 
we need somewhere a fundamental operation which is aggregation'. In accordance with this work, besides the 
classical aggregation operators (quasi-arithmetic means, median, weighted minimum and maximum and ordered 
weighted averaging operators) there were also considered some fuzzy measures related to the above two integrals 
(restricting definitions to the strict minimum). Some requirements (concerning mathematical or behavioral properties) 
were also presented.
Let X =df {xi, x2, ... , xn} be a finite set of criteria. The following definition was introduced.
Definition 5.59 (fuzzy measure on the set A' of criteria)
A. fuzzy measure on X is a set function p : IP(X) [0,1] satisfying the following two axioms.
(Al) p(0) = 0, p(X) = 1,
(A2) A c B => p(A) < p(B), for any A,B e IP(X).
This measure p is additive (resp. superadditive I resp. subadditive) if p(A o B) =df p(A) + p(B) 
(resp. p(A o B) > p(A) + p(B) / resp. p(A u B) < p(A) + p(B)).
According to this work, fuzzy integrals are considered as operators on [0,l]n and hence the obtained 
definitions are restricted to [0,l]-valued functions.
Definition 5.60 (Sugeno's integral)
Let p be a fuzzy measure on X. Sugeno's integral of a function f : X -> [0,1] wrt p is defined as 
n
follows: Sn(f(xi)..........f(xn)) =df v (f(x ) a p(A )), where 'm' denotes a permutation of indexes as
,=1 Â© Â©
follows: 0 ^f(x(i)) < ... < f(xtni) < 1 and A(ll =df [x(ll, ... , x(nl}.
Definition 5.61 (Choquet's integral)
Let p be a fuzzy measure on X. Choquet's integral of a function f : X -> [0,1] wrt p is defined as
follows: Cn(f(xi).........f(xn)) =df S(f(x ) - f(x )) p(A ), where f(x(Ol) =df 0.
1 = i (i) 
(i-i) 
(i)
Some properties of the above two integrals (concerning aggregation) were also presented (wrt their suitability for 
multicriteria decision problems').A more formal treatment is omitted here, see: (Grabisch M. 1995) and (Grabisch 
M. et al. 1995).
The following definition is introduced (Ruspini, E.H. 1969).

337
Definition 5.62 (Ruspini's partition)
Ruspini'spartition
*
 is a finite family of fuzzy sets {fi, fz. ... . fn}. where f : [0,1] -y [0,1], such that:
' Enrique Hector Ruspini (1942 - 2019).
Dankova M. and Perfilieva I., Fuzzy transforms - a new bases for image fusion. University of Ostrava. Institute for Research and 
Applications of Rizzv Modeling. Ostrava. Czech Republic,21pp: 
file:///C:/Users/user/Docuinents/fiizzy"o20transl!o20iinagel!o20visionl!o20aplicl! o2OCzesi.pdf.
In general, 'image fusion is a process of combining relevant information from two or more images into a single image": see 17;e Free 
Encyclopaedia. The Wikimedia Foundation. Inc.
Â§ See also: (Stepnicka M. 2007).
" Huibert Kwakemaak. bom 1937.
tt https://users.physics.unc.edu/~deardorf7uncertainty/definitions.html
H From: 'uncertain'-, changeable, not reliable, not certainly knowing or known": Hornby A.S. with Cowie A.P. and Crimson A.C., Oxford 
advanced learner's dictionary of current english. Oxford University Press (1974) 1041pp: Science and Art. Sofia 1989.
X f (x) = 1 for all x e [0,1], 
i = i '
The notions of F-transform (equivalently: F-transfomiation or fuzzy transformation) and inverse F-transform can 
be introduced as follows.^
Definition 5.63 (discrete F-transform)
Assume that f(x) is defined for Xi, ... , xn e [a,b] and A =df [A,(x) / i = 1, ... ,n} is a Ruspini's 
partition. The vector of real numbers (Fi, ... , Fn) is a discrete F-transform of f(x) 
if Ft =df
Ef(xj)-A1(xJ)
-ââ---------------- (for i= 1, ... ,n and n < 1).
EA^Xj) 
j-i
Definition 5.64 (inverse F-transform)
Assume now that (Fi, ... , Fn) is the F-transform of f(x) wrt A. The inverse F-transform is introduced as
follows: Tf,n(x) =df E^-AJx). 
i - 1
In accordance with the last work, the above two notions were used in image noise reduction and also for 
'description offusioif using fuzzy transform'. A more formal treatment is omitted: left to the reader.5
7.4. Fuzzy-probabilistic models
The fuzzy-probabilistic models were introduced in such areas as, e.g. fuzzy probability theory (initiated by 
Kwakemaak H.
**
),
 fuzzy probabilistic logic, fuzzy probabilistic expert systems, fuzzy probabilistic approach for 
determining safety, and so on.
Some considerations related to the notion of uncertainty are first presented below (Moller B. and Beer M. 
2004). Unfortunately, 'terminology related to measurement uncertainty is not used consistently among experts', 
e.g. see: Definitions of Measurement Uncertainty Terms fi
In general, the term 'uncertainty
*^
 is associated with something which can not be described exactly, 
e.g. 'each measurement is more or less uncertain' (Moller B. and Beer M. 2004). In accordance with the last * * * Â§ * 

338
work: 'Mathematical statistics offers methods for describing data samples with the aid of random variables. A 
common approach for this purpose is to specify a probability distribution function in order to obtain a stochastic 
data model ... This uncertainty can neither be accounted for by the deterministic nor the stochastic data model'. 
Some other works, concerning fuzzy probabilistics and/or structural reliability are cited below.
The notions of 'interval of confidence' and 'time dependent fuzzy set theory' were introduced in (Aliev 
I.M. and Kara Z. 2004) and hence a 'general procedure to construct the membership function of the fuzzy 
reliability, when the failure rate is fuzzy'.
In particular, 'two types of uncertainties can be generally recognised in structural reliability: natural 
randomness of basic variables and vagueness of performance requirements. While the randomness of basic 
variables is handled by coimnon methods of the probability theory, the vagueness of the performance 
requirements is described by the basic tools of the theory of fuzzy sets. Both the types of uncertainties are 
combined in the newly defined fuzzy probabilistic measures of structural reliability, the damage function and the 
fuzzy probability of failure' (Holicky M. 2006).
'The process industry has always been faced with the difficult task of determining the required integrity of 
safeguarding systems such as Safety Instrumented Systems (SISs). The ANS1/1SA S84.01-1996 and 1EC 61508 
safety standards provide guidelines for the design, installation, operation, maintenance, and test of SIS. However, 
in the field, there is a considerable lack of understanding of how to apply these standards to both determine and 
achieve the required safety integrity level (SIL) for SIS. Moreover, in certain situations, the SIL evaluation is 
further complicated due to the uncertainty on reliability parameters of SIS components. This paper proposes a 
new approach to evaluate the "confidence" of the SIL determination when there is an uncertainty about failure 
rates of SIS components. This approach is based on the use of failure rates and fuzzy probabilities to evaluate the 
SIS failure probability on demand and the SIL of the SIS. Furthermore, we provide guidance on reducing the SIL 
uncertainty based on fuzzy probabilistic importance measures' (Sallak M. et al. 2008). According to this work, 
the SIS is 'a system composed of sensors. logic solver and final elements for the purpose of taking the process to 
a safe state when predetermined conditions are violated'. Here, by PFD it is denoted the probability that 'the SIS 
will fail such that it cannot respond to a potentially dangerous condition' (the average probability is denoted by 
PFDavg). In particular, it was observed that 'the probabilistic approaches combined with Monte Carlo simulation* 
which evaluate the PFD of SIS from the failure probabilities of its components might be inappropriate (most of 
the available failure rates data are point values without information concerning the corresponding probability distributions)'.
* Computational algorithms with repeated random sampling for obtaining numerical results (Enrico Fermi 1901 - 1954). See also: The 
Free Encyclopaedia, The Wikimedia Foundation, Inc.
t 'Suppose that we want to sample from a distribution f(x) that is difficult or impossible to sample from directly, but instead have a 
simpler distribution q(.x) from which sampling is easy. The idea behind rejection sampling (aka acceptance-rejection sampling) is to sample 
from q(.x) and apply some rejection/acceptance criterion such that the samples that are accepted are distributed according to f(x)': 
https://theclevennachine.wordpress.com/tag/envelope-distribution/.
Utkin L.V. and Coolen F.P.A., Imprecise reliability: An introductory overview, 46pp: 
'To address the fuzzy random uncertainty in structural reliability analysis, a novel method for obtaining the 
membership function of fuzzy reliability is proposed on the two orders four central moments (TOFM) method 
based on envelope distribution^. At each cut level, the envelope distribution is first constructed, which is a new 
expression to describe the bound of the fuzzy random variable distribution. The central moments of the bound 
distribution are determined by generating samples from the envelope distribution, and they are used to calculate 
the central moments of the limit state function based on the first two orders of the Taylor expansion. Thereafter, 
the modem approximation method is used to approximate the polynomial expression for the limit state function 
probability density function (PDF) by considering the central moments as constraint conditions. Thus, the 
reliability boundaries can be calculated under the considered cut level, and the membership function of the fuzzy 
reliability is subsequently obtained. Three examples are evaluated to demonstrate the efficiency and accuracy of 
the proposed method. Moreover, a comparison is made between the proposed method. Monte Carlo simulation 
(MCS) method, and fuzzy first-order reliability method (FFORM). The results show the superiority of the 
proposed method, which is feasible for the analysis of structural reliability with fuzzy randomness' (You L. et al 
2019).
The notion of imprecise reliability was also studied by Utkin L.V. and Coolen F.P. A. The main aim of this 
work was to define what imprecise reliability is. And hence, there were discussed 'a variety of problems that can 

339
be solved by means of a framework of imprecise probabilities. From this point of view, various branches of 
reliability analysis were considered, including analysis of monotone systems, repairable systems, multi-state 
systems, structural reliability, software reliability, human reliability, fault tree analysis. Various types of initial 
information used in imprecise reliability were considered. Some open problems were briefly discussed in the 
concluding section'.
And so, according to the introductory considerations of the last work: 'A lot of methods and models in 
classical reliability theory assume that all probabilities are precise, that is, that every probability involved is 
perfectly determinable. Moreover, it is usually assumed that there exists some complete probabilistic information 
about the system and component reliability behavior. The completeness of the probabilistic information means 
that two conditions must be fulfilled: 1) all probabilities or probability distributions are known or perfectly 
determinable: 2) the system components are independent, i.e.. all random variables, describing the component 
reliability behavior, are independent, or. alternatively, their dependence is precisely known. The precise system 
reliability measures can always (at least theoretically) be computed if both these conditions are satisfied (it is 
assumed here that the system structure is precisely defined and that there is a known function linking the system 
time to failure (TTF) and TTFs of components or some logical system function*). If at least one of these 
conditions is violated, then only interval reliability measures can be obtained. In reality, it is difficult to expect 
that the first condition is fulfilled. If the information we have about the functioning of components and systems is 
based on a statistical analysis, then a probabilistic uncertainty model should be used in order to mathematically 
represent and manipulate that information. However, the reliability assessments that are combined to describe 
systems and components may come from various sources. Some of them may be objective measures based on 
relative frequencies or on well-established statistical models. A part of the reliability assessments may be 
supplied by experts. If a system is new or exists only as a project, then there are often not sufficient statistical 
data on which to base precise probability distributions. Even if such data exist, we do not always observe their 
stability from the statistical point of view. Moreover, failure times may not be accurately observed or may even 
be missed. Sometimes, failures do not occur at all or occur partially, leading to censored observations of failure 
times, and the censoring mechanisms themselves may be complex and not precisely known. As a result, only 
partial information about reliability of system components may be available, for example, the mean time to 
failure (MTTF) or bounds for the probability of failure at a time. Of course, one can always assume that the TTF 
has a certain probability distribution, where, for example, exponential, Weibull and lognormal are popular 
choices. However, how should we trust the obtained results of reliability analyses if our assumptions are only 
based on our experiences or on those of experts. One can reply that if an expert provides an interval for the 
MTTF on the basis of his experience, why should we reject his assumptions concerning the probability 
distribution of TTFs? The fact is that judgements elicited from experts are usually imprecise and unreliable due to 
the limited precision of human assessments. Therefore, any assumption concerning a certain probability 
distribution in combination with imprecision of expert judgements may lead to incorrect results which often 
cannot be validateddue to lack of (experimental) data. In many situations, it is unrealistic to assume that 
components of systems are independent'.
file:///tf/fTlZZY%20PROBABlLlSTlCÂ° 620St.Petrsburg.pdf.
(Barlow R.E. and Proschan F. 1975).
7.5. Applications
Theory of fuzzy sets (continually being developed) have a lot of applications in various areas, e.g. such as: 
safety, industrial engineering, reliability analysis, social sciences, production management, psychology, artificial 
intelligence, medicine (e.g. intuitionistic fuzzy sets, fuzziness in medical measurement: in general, the use of fuzzy 
technology), geography (e.g. fuzzy classifications in large geographical databases), the use of nonconventional methods 
in fault diagnosis, e.g. based upon some statistical and fuzzy concepts to vibrations (Stefanoiu D. and lonescu 
F. 2006, Â§tefanoiu D. et al. 2009) and so on. In particular, such or similar, areas are important topics in the 
annual International Conference FSTA (Fuzzy Set Theory and Applications). Some fuzzy set applications are 
given below. The next introductory definitions are first presented (Zhang X.L. and Xu Z.S. 2014).
Definition 5.65 (Pythagorean fuzzy set)

340
A Pythagorean fuzzy set P in X, introduced by Yager
*,
 is defined as follows: P =df {< x, (ip (x), vp(x) > / 
x e X}, where the functions p? : X â> [0,1] and v? : X -> [0,1] represent the degrees of membership and 
nonmembership of x in P, respectively. Here, the following condition should be satisfied: 0 < pr (x) + vp2(x) 
< 1 (for any x e X).
In accordance with the last work, the following notions were also given: Pythagorean index associated with 
any x in P: np (x) =jf (1 - pr (x) - vp2(x))1/2 and this index is said to be a completely Pythagorean if 
Pp2 (x) = vp2(x) = 0, for all x e X. The notions of concentration and dilation were introduced as follows: 
CON(P) =df {< x, pconip) (x), vconip)(x) > / x 6 X}, where: pconip) (x) =df (pp (x))2 and vconipKx) =df (1 - (1 
- Vp2(x))2)1/2 and DIL(P) =df {< x, pdiupi (x), vDil(pi(x) > / x e X}, where: pdiupi (x) =df (pp (x))12 and 
VDIL(P)(x) =df (1 - (1 - Vp2(x))1/2)1/2.
In accordance with the last considerations, the concept of Pythagorean fuzzy sets 'provides a novel way to 
model uncertainty and vagueness with high precision and accuracy compared to intuitionistic fuzzy sets' (Yang 
M. - S. and Hussain Z. 2018). Here, there were studied 'both probabilistic and nonprobabilistic types to 
calculate fuzzy entropy of Pythagorean fuzzy sets'. In particular, there were constructed new entropy measures 
based on 'probability-type, entropy induced by distance, Pythagorean index, and max-min operation'. There was 
also given an axiomatic definition of entropy for Pythagorean fuzzy sets, and so on (with application to 
multicriterion decision making).
In general, Pythagorean fuzzy set theory is a generalisation of intuitionistic fuzzy set theory. "Pythagorean 
fuzzy sets, proposed by Yager, have advantages in handling vagueness in the real world and possess good 
symmetry. The entropy measure is the most widespread form of uncertainty measure' (Han Q. et al. 2019). In the 
last work, there was given an 'improved technique for order preference by similarity to an ideal solution 
(TOPSIS) method to better deal with multiple-attribute group decision making (MAGDM) problems based on 
Pythagorean fuzzy soft sets. To better determine the weights of attributes, there was firstly defined a novel, more 
reasonable and valid Pythagorean fuzzy soft entropy': left to the reader.
The notions of image segmentation and fuzzy clusterisation (or: clustering) are briefly presented below. 
Some related expected values, such as: FEV, WFEV or FE1 are also cited. And finaly, some considerations 
related to the fuzzy control systems are also given.
Fuzzy clustering (also referred as: fuzzy c - means, fuzzy k - means or soft clustering) was developed by 
Dunn J.C. (1973)1 and improved by Bezdek J.C. (1978)1. Some introductory notions concerning the image 
segmentation and fuzzy clustering are given below.
Image segmentation is 'the operation of partitioning an image into a collection of: regions (which usually 
cover the whole image), linear structures (such as line segments, curve segments), into 2D shapes (such as circles, 
ellipses, ribbons - long, symmetric regions)'. Clustering is 'a more general term than image segmentation. We 'can 
cluster all sorts of data (usually represented as feature vectors, not just image pixels) or e.g. web pages, financial 
records, etc. Clustering is a large area of machine learning (not supervised, i.e. labels of feature vectors are not 
known)'5. Here, there were presented basic notions concerning the so-called hard (or non-fuzzy) clustering. A 
review work on fuzzy clustering is briefly presented below.
' See: (Yager R.R. 2013) and (Yager R.R. and Abbasov A.M. 2013): Ronald R. Yager, bom 1941.
The used here term 'ISODATA' denotes: ' Iterative Self-Organizing DATA' analysis technique. 
https://www.tandfonline.com/doi/abs/10.1080/01969727308546046
â  The Free Encyclopaedia. The Wikimedia Foundation. Inc.See also: (Bezdek J.C. 1981).
Â§ Veksler O.. Artificial Intelligence 11. Lecture 15, Computer vision. Image segmentation:
file:///C:/Users/user/Downloads/hnageÂ°<>20SegmentationÂ°<>20orÂ° o2Oclustering.pdf.

341
"Puzzy clustering is useful clustering technique which partitions the data set in fuzzy partitions and this 
technique is applicable in many technical applications like crime hot spot detection, tissue differentiation in 
medical images, software quality prediction etc. In this review paper, we have done a comprehensive study and 
experimental analysis of the performance of all major fuzzy clustering algorithms named: FCM, PCM. PFCM. 
FCM-g. T2FCM, KT2FCM, IFCM, KIFCM, IFCM-o, KIFCM-o, NC, CFCM, DOFCM. To better analysis their 
performance we experimented with standard data points in the presents of noise and outlier' (Gosaina A. and 
Dahiyab S. 2016).
"Clustering is an important unsupervised form of classification technique of data mining [boows]. It divides 
the data elements in a number of groups such that elements within a group possess high similarity while they 
differ from the elements of other groups. Clustering can of two types: hard clustering and fuzzy clustering 
[boows]. When each element is solely dedicated to one group, that type of clustering is called hard clustering. In 
hard clustering, clusters have crisp sets for representing element's membership, i.e. the membership of elements 
in a cluster is assessed in binary terms according to a bivalent condition that an element either belongs or does not 
belong to the set. In contrast, when the elements are not solely belonging to any one group, instead they share 
some fraction of membership in a number of groups, that type of clustering is called fuzzy clustering. So. fuzzy 
clustering permits the gradual assessment of the membership of elements in a set which is described by a 
membership function valued in the real unit interval [0, 1], Thus membership functions are represented as a fuzzy 
set which can be either Type-I, Type-11 or Intuitionistic"
*
 (Gosaina A. and Dahiyab S. 2016). According to this 
work, the following algorithms are of Type-I : FCM, PCM, PFCM, NC. FCM-ct, CFCM and DOFCM. In a 
similar way we have: T2FCM, KT2FCM (of Type-II) and IFCM, IFCM-ct, KIFCM and KIFCM-ct (are 
intuitionistic ones).
* Type-2 fuzzy sets as a generalisation of ordinary fuzzy sets (i.e. Type-1 fuzzy sets) were introduced by Zadeh L.A. (1975): Lotti Aliascer 
Zadeh (1921 - 2017). Intuitionistic fuzzy sets were introduced by Atanassov K.T. (1986). See also: (Dan S. et al. 2019).
1 Known also as: Euclidean fuzzy c - means algorithm (Bezdek J.C. 1981).
1 The requirement of a crisp partition of X is replaced with the weaker requirement of a fuzzy pseudopartition on X (known also as a fussy c- 
partition).
Â§ See Subsection 7.3.
The above cited algorithms have a different "affinity" wrt noise or also used data structures (e g. the use of a 
centroid, i.e. the arithmetic mean of all figure points, instead of the center of the cluster), etc. The classical Bezdek's 
fuzzy c - means algorithm, i.e. FCM ('one of the most renowned fuzzy clustering algorithms'), is presented below 
(Gosaina A. and Dahiyab S. 2016).
The last algorithm works under assumption that the number of clusters 'c' associated with the considered 
data set. denoted by X =df [xi, ... , xn}. is known and minimizes the following objective function:
C n 
2
Jfcm =df Z Z11 ii- ' dj. where 'ut' is the membership of datapoint 'xf incluster 'k'(the process of assigning 
k = l ul
initial values to all uik is defined as initial fuzzy pseudo - partition^) and dft =df | Xi - Vk | is the Euclidean 
distance between x; and cluster center vk . According to 'uik'. the following condition should be also
satisfied: ZWk = 1 (fori = 1.2, ... , n). It is assumed here that the constant m =df 2, known as 
k=l
"fuzzifier or fuzziness index: as it controls the fuzziness of the resulting clusters'.
The minimisation of Jfcm is realised as follows (Bezdek J.C. 1981). The membership of every point is 
updated as follows.
n Em 
usk 'X
ulk =df ---------------------------- (for i = 1. 2. ... . n and k = 1. 2. ... . c) and vk =df â- ------------ .
Â£A^2/(m-l) 
,SUik * * * Â§

342
Unfortunately, the above algorithm FCM 'failed to detect noise and outliers, so it treats the noisy points and 
outliers same as the actual data points. Thus, it's centroid is attracted towards outliers instead of the center of the 
cluster'. And hence, a problem may be the selection of (the number of clusters) 'c' (which are not sensitive wrt initial 
assignment of centroids).
Traditional clustering is an unsupervised one wrt the obtained outcomes, i.e. groupings of pixels having 
common characteristics. 'Supervised clustering is based on the idea that a user can select sample pixels in an 
image that are representative of specific classes and then direct the image processing software to use these 
training sites as references for the classification of all other pixels in the image'*.
* The Free Encyclopaedia. The Wikimedia Foundation. Inc.
t (ai + ... + an) / n, (ax â  ... â  an)1/n, ((ai2 + ... + an2) / n)1/2, n / (1 / ai + ... + 1 / an), (wiai + ... + wnan) / (wi + ... + wâ) and ((wiai2 + ...
+ wnan2) / (wi + ... + wn))1/2, respectively.
The following two notions are different: 'fuzzy expected value" and 'expected value of a function f(x) having \ as a fuzzy variable'.
In general, fuzzy clustering has many applications, e.g. such as (Chaudhan A. 2013): medical imaging (X-ray 
computer tomography / CT, magnetic resonance imaging / MR1, position emission tomography / PET), image and speech 
enhancement, edge detection, video shot change detection and so on. Some other considerations are omitted: left 
to the reader.
Instead of the use of classical mean values (e.g. such as: arithmetic, geometric, scpiare, harmonic, weighted 
arithmetic or weighted scpiare means) . in accordance with the fuzzy set theory .in particular there are used such 
notions as e.g. FEV (fuzzy expected valuef, WFEV (weighted FEV), GWFEV (generalised WFEV) or FEI 
(FEzutervo/): (Schneider M. and Kandel A. 1993). The use of the first two notions are presented in the next 
example below.
Example 5.26 (FEV and H7/-.I)
|hr|
n 
pi1 
nt 
|pT| 
<p(F) =df TT min{pi ,cp(p)}
lxl
1
0.3
3
10
1.0
0.3
2
0.8+..........
2
7
0.7
3
0.5
1
5
0.5
0.5
4
0.9
4
4
0.4
0.4
Figure 5.13 FEV computation
Here: pu =dt p(xi). where \, e X and |X| = 10. If n = 1 then |pT| = 10. The next value of |pt| = 
|X| - ni = 10 - 3 = 7, etc. Since max{ minj p, ,cp(p)}} = 0.7 corresponds to pi = 0.8 (for n = 2) 
then we can obtain: FEV = 0.8. As an example, the corresponding arithmetic mean, equivalently represented 
as the following weighted one:
â¢ nx
I -1
n
i = i
0.3-3 + 0.8-2 + 0.5-1 + 0.9-4
--------------------------------------------- = 0.66
1+2+3+4
< 0.80 = 0.8 = FEV.

343
EHi'e 1 -nJ
Let so =df FEV and s =df ------------------------------ . In accordance with the last definition, the WFEV is
Ve F|.11, j .
i = l
computed iteratively, starting with so, until |s - s| < s (e.g. about 5 â 6 / si = 0.01 to 17-18 / 82 = 0.001 
iterations. Practically, it is assumed: p= 0.2 and %= 1.0).
Let now F(i) =df e p^' "s' â¢ n/ . And so, the following more simplified form can be obtained: s =
â¢ F(i)
----------------- . As an example (in accordance with the above Figure 5.13 , to compute si), we can obtain: F( 1) = 
EF(i)
i = 1
3e~01, F(2) = 2, F(3) = e"006 and F(4) = 4e~a02. Hence Si ~ 0.6697 and | Si - s01 = 0.1303. â¡
Automatic control is one of the application areas of fuzzy set theory. The first successful application of fuzzy 
logic to the control (of a laboratory - scale process) was given in (Mamdani E.H. and Assilian S. 1975). Some 
industrial application (may be the first one) was given in (Holmblad L.P. and Ostergaard J. J. 1982). 'A fuzzy control 
system is a control system based on fuzzy logic - a mathematical system that analyses analog input values in 
terms of logical variables that take on continuous values between 0 and 1, in contrast to classical or digital logic, 
which operates on discrete values of either 1 or 0 (true or false, respectively)'*.  Some considerations are briefly 
presented below (Babuska R. and Mamdani E.H. 2008).
The Free Encyclopaedia, 'The Wikimedia Foundation, inc.
According to the last work: 'Many processes controlled by human operators in industry cannot be automated 
using conventional control techniques, since the performance of these controllers is often inferior to that of the 
operators. One of the reasons is that linear controllers, which are commonly used in conventional control, are not 
appropriate for nonlinear plants. Another reason is that humans aggregate various kinds of information and 
combine control strategies, that cannot be integrated into a single analytic control law. The underlying principle 
of knowledge-based (expert) control is to capture and implement experience and knowledge available from 
experts (e.g., process operators). A specific type of knowledge-based control is the fuzzy rule-based control, 
where the control actions corresponding to particular conditions of the system are described in terms of fuzzy 
if-then rules)
In most cases fuzzy controllers are used for direct feedback control, e.g. Mamdani (linguistic) controller. 
'However, it can also be used on the supervisory level as, e.g., a self-tuning device in a conventional PID 
(Proportional-Integral-Differential) controller) e.g. Takagi-Sugeno controller (Babuska R. and Mamdani E.H. 
2008).
' Since the first use of fuzzy logic in the field of control engineering, it has been extensively employed in 
controlling a wide range of applications. The human knowledge on controlling complex and non-linear processes 
can be incorporated into a controller in the form of linguistic terms. However, with the lack of analytical design 
study it is becoming more difficult to auto-tune controller parameters. Fuzzy logic controller has several 
parameters that can be adjusted, such as: membership functions, rule-base and scaling gains. Furthermore, it is 
not always easy to find the relation between the type of membership functions or rule-base and the controller 
performance' (Saeed B. I. and Mehrdadi B. 2012). It is proposed in the last study 'a new systematic auto-tuning 
algorithm to fine tune fuzzy logic controller gains. A fuzzy PID controller is proposed and applied to several 
second order systems (initially, the controller gains are fixed and then automatically tuned to achieve the best possible 
performance). The relationship between the closed-loop response and the controller parameters is analysed to 
devise an auto-tuning method. The results show that the proposed method is highly effective and produces zero 
overshoot with enhanced transient response. In addition, the robustness of the controller is investigated in the 
case of parameter changes and the results show a satisfactory performance'.

344
8. Rough set theory
Rough set theory was developed by Pawlak Z. in the early 1980's and first published in (Pawlak Z. 1982, 
1991). 'The problem of imperfect knowledge has been tackled for a long time by philosophers, logicians and 
mathematicians. Recently it became also a crucial issue for computer scientists, particularly in the area of 
artificial intelligence. There are many approaches to the problem of how to understand and manipulate imperfect 
knowledge. The most successful one is, no doubt, the fuzzy set theory proposed by Zadeh L.A. (1965). Hie main 
advantage of rough set theory in data analysis is that it does not need any preliminary or additional information 
about data - like probability in statistics, or basic probability assigmnent in Dempster-Shafer theory*, grade of 
membership or the value of possibility in fuzzy set theory. ... Rough set theory is another approach to vagueness. 
Similarly to fuzzy set theory it is not alternative to classical set theory but it is embedded in it. Rough set theory 
can be viewed as a specific implementation of Frege's idea of vagueness i.e. imprecision in this approach is 
expressed by a boundary region of a set, and not by partial membership, like in fuzzy set theory 'T Some basic 
notions concerning rough sets are given below.
* 'The theory of belief functions, also referred to as evidence theory or Dempster-Shafer theory (Arthur P. Dempster, bom 1929 and Glenn 
Shafer, bom 1946), is a general framework for reasoning with uncertainty, with understood connections to other frameworks such as 
probability, possibility and imprecise probability theories': The Free Encyclopaedia. The Wikimedia Foundation. Inc.
t PawlakZ., Rough sets. 51pp: file:///C:/Users/user/Downloads/ZPAWLAKÂ°o20ROUGHI.pdf (ZdzislawPawlak 1926 - 2006).
8.1. The notion of approximation space
Let U be a set of objects and p c U x U be an undiscernibility relation 'representing our lack of 
knowledge about elements of U'. For simplicity, we shall assume below that p is an equivalence. Let also 
X c U. The last subset X can be characterised wrt p. 'To this end we will need the basic concepts of rough 
set theory', i.e. the following notions: lover approximation, upper approximation and boundary region, 
associated with X.
The set of ob jects (U)
According to Figure 8.1, the lower approchimation of X, denoted by A(X) =dt {x e U/ [x]P c X}. Ina 
similar way, the upper approchimation of X, denoted by A (X) =dt {x e U/ [x]P n X 0}. The boundary 
region of X, denoted here by BR(X) =dt ACS) - A(X).
Corollary 8.1

345
A(X) = U{ [x]P eU/p / [x]P c X} and A(X) = U{ [x]P eU/p / [x]P n X 0}. â¡
Corollary 8.2
Let y e U. Then: y e A (X) o y (xpy =â  ,\ e X) and y e A(X) o 3 (xpy a x e X) 
xg U xg U
Proof:
y eA(X) <Â» [y]p C X 
{df. A (X)}
Â» V (x 6 [y]p X 6 X) 
{df. c }
X G U
Â» 
(xpy x 6 X). 
{df. [y]P}
y 6 A(X) <Â» [y]P n X 0 
{df. A(X)}
Â» 
3 (xpy a x e X). â¡ 
{df n }
X G U
8.2. Rough set operations and approximation accuracy
Some properties related to the above two approchimations are cited below.
1- A(X) c X c A(X)
2. 
A(0) = A(0) = 0
and A(U) = A(U) = U
*  
3. 
4(XuY) = A(X) u A(Y)
4. 
A (X u Y) a A (X) u A (Y)
5. 
A (X n Y) c A(X) n A(Y)
6. 
A(XnY) = A(X) n A (Y)
7. 
X c Y =e> (A (X) c A (Y)) a (A (X) c A(Y))
8. 
A (X') = A(X) '
9. 
A (X') = A (X) '
10. 
A(A(X)) = A(A(X)) = A(X)
11. 
A (A (X)) = A (A (X)) = A(X)
* A(0) | = | A (0) | = | 0 | = 0 (see Subsection 5.5).
t 3(A(x) a B(x)) =$â  3 A(x) a 3 B(x) is also satisfied using bounded quantifiers (see Subsection 3.3).
{See: T 1.5 of Subsection 1.3}
As an illustration, the proof of inclusion 5 is given below. And so, according to Corollary 8.2. the following 
implication should be shown.
3 (xpy axeXgY) =3> 3 (xpy a x 6 X) a 3 (xpy a x 6 Y)
XG U 
XG U 
XG U

346
Another example is the proof of the above equality 9. This proof is given below.
Proof
(1)
3 (xpy r 
xe U
< X â¬:XnY)
{a}
(2)
~( 3 (w ' 
xe U
X X 6 X) A 3 (xpy A X 6 Y)) 
xe U 
'
{aip}
(3)
V (xp'y ' 
x e U
V X
Â£ X) v v (xp'y v x Â£ Y) 
x e U
{NK, N3,SR: 2}
(4)
apy
(5)
a eX
{- 3, - K., df.'n': 1}
(6)
a eY
(1.1)
V (xp'y â 
X e u
V X
Â£ X)
{ada: 3}
(1.2)
ap'y v a Â£ X
{-V: 1.1}
(1.3)
a Â£ X
{-A: 4, 1.2}
contr.
{5,1.3}
(2.1)
V (xp'y '
x e:U
V X
Â£ Y)
{ada: 3}
(2.2)
ap'y v a Â£ Y
{-V:2.1}
(2.3)
a Â£ Y
{-A: 4, 2.2}
contr. â¡
{6,2.3}
x eA(X)' o x Â£ A(X) 
{df. ' ' '}
o [x]P Â£ X 
{df.A(X)}
o [x]P n X' Â£ 0 {df. X'} 
0X6 A(X'). â¡ 
{df.A(X)}
Let Px : U ->â  [0,1], Rough sets can be also introduced by using (instead of approximation) the last rough
|Xr' MP|
membership function, where: Ii\(x) =df âi----------â¢ We have: A (X) = {x e U / dxfx) =
IhI
A (X) = {x e U / |tx(x) > 0} and BR(X) = {x e U / 0 < d\(x) < 1}- Several properties 
related to this function were also given.
In accordance with the last work: if BR(X) = 0 then X is a crisp set else X is a rough one. Moreover,
the following two definitions of rough sets were given: X is rough wrt p if A (X) Â£ A (X) or equivalently 
if 3 (0 < d\(x) < !}â¢ The accuracy of approximation, denoted by 0 <, ocP(X) =<jf
A(X)
Obviously. If ocP(X) = 1 then X is crisp else X is rough.
4 
1
As an example, according to the above Figure 8.1, we have: ocP(X) =â=â(= 25%). And hence.
16
4
X is rough.

347
Example 8.1 {approximation accuracy)
Let K. =df [0, oo) be the set of nonnegative real numbers and p be a binary relatin defined in R such 
that: xpy |xj = [yj, where [xj =df max{n < x / n e 2}.
2,
A
n ~ 2___n - 1..n _ _r . n + 1.
t
Figure 8.2
According to Figure 8.2, we can obtain: A ( [O.r) )
n-1
U [i.i + 1) and A( [O.r) ) 
i = 0
n
U [i.i + 1) . And 
i = 0
n 
hence: ocP(X) = ------ . â¡
n + 1
8.3. Information systems, reducts and decision tables
The notion of an information system is introduced as follows.* *
* Pawlak Z.. Rough sets. 51 pp: lilc: C: I scrs user I Jownloads ZP.WVI\K"o20ROUGHi.pdf: Chapter 2 {p.14: Rough sets and reasoning 
from data). See also: Skowron A. and Suraj Z.. ICS Report PAS: 18 / 1993 and (Skowron A. and Raus/er C. 1991).
t This information system is some times equivalently introduced as follows: S =ar (U, A, V, 1) , where f :Ux A -> V, V is the union of 
all V,/a e A and a(.x) -df f(.x,a).
* According to the used designations in Subsection 8.1: pA =ar p. And hence pB =ar ind(B).
Definition 8.1 (information system)
An information system S =df (U, A)1, where: U A 0 is a finite set of objects, called universe, A A 0 is a 
finite set of attributes, a: U â> Va (is the value set associated with a e A) and V =<jf UVa is the 
a e A
domain of A.
Let S = (U, A) and A c B. The obtained information system S* =df (U, B) is said to be a B - 
extension of S, and S is said to be a subsystem of S*. In general, there is no possibility of distinguishing all 
single objects using A of S. And so, differend objects may have the same values of attributes. Consequently, 
any set of attributes will establish a partition of U (Pawlak Z. 1991).
In accordance with (Pawlak Zâ Rough sets: Chapter 2 {p.14: see below), the above considerations have been 
presented more precisely as follow s.
Let S = (U, A). Assume now that B c A. Any such subset is associated with a binary relation 
ind (B) c U x U, called indiscernibility relation and defined as follows.
ind(B) =df {(x,y) eU x U/ v (a(x) = a(y))}.
a e B
We have: x ind (B) y o v (a(x) = a(y)). for any x, y e U. Obviously, this relation is an equivalence 
one. The family of all equivalence classes of ind(B) are denoted by U/ind(B) or in short: U/B (i.e. the partition 
determined by B). A block of the last partition containing x is denoted by B(x). The obtained blocks are referred 
as B-elementary sets. The last sets are considered as 'basic building blocks (concepts) of our knowledge about 
reality'.

348
If ind (B) = ind (B - {a}) then a e B is superfluous else a is independent. The obtained lower, upper 
approximations and the corresponding boundary region are said to be: B-lower approximation, B-upper 
approximation and B-boundary region, defined as follows:
B(X) =df {x 6 U / B(x) c X}, 
5(X) =df {x e U / B(x) n X 0 } and 
BR(X) =df B(X) - B (X), respectively.
In a similar way as in the previous considerations, if BR(X) = 0 then X is a crisp set else X is a rough 
one. The above lower and upper approximations of a set can be considered 'as interior and closure operations in 
a topology generated by the indiscemibility relation'. *
* Interior of a subset X of U: the union of all subsets of X that are open in U. Closure of a subset X of U: all points in X together 
with all limit points, The boundary bd(X) =df cl(X) - int(X). E.g. see: The Free Encyclopaedia, The Wikimedia Foundation, Inc.
There were introduced the following basic classes of rough sets (said also 'categories of vagueness').
B (X) 
0 , B(X) U
B (X) = 0 , B(X) U
B (X) 
0 , B(X) = U
B (X) = 0 , B(X) = U
X is roughly B-definable
<=> X is internally B-indefinable
X is. externally B-definable 
o X is totally B-indefinable
The obtained accuracy of approximation is introduced in a similar way as in the previous subsection, but wrt 
B c A.
Definition 8.2 (reduct)
We shall say that B* c B is reduct iff B* is a set of independent attributes and B* preserves 
classification, i.e. ind(B*l = ind (B). The set of all reducts of B, denoted by RED(B) =df { B* c B / B* is 
reduct of B} c 2s.
The following property is satisfied (connecting the notion of a core and reducts).
Proposition 8.1
CORE(B) = AB* .
BÂ» Â£ RED(B)
Let consider the following example (Pawlak Z., Rough sets: Chapter 2: Table 1 / p. 15 +p.l7).
Figure 8.3
Example 8.2 (information system)
a
b
c
d
X1
0
1
2
1
X2
1
0
2
1
x3
1
1
3
1
x4
0
1
4
0
Xs
1
0
2
0
X6
0
1
3
1
In accordance with the last figure and for convenience, here patients p, (i = 1, ... ,6) are denoted by x;. The 
set of attributes 'Headache, Muscle - pain. Temperature and Flu' are denoted by a, b, c and d, respectively. And

349
hence A =4f {a. b. c. d}. The integers 0.1.2,3 and 4 are here used to denote: 'wo'. "yes'. "high", "very high' and 
"normar, respectively.
We have: U =dt {x1.x2.x3.x4.x5.x6}. Consider the concept'Flu': X =df {x1.x2.x3.x6} c U and B 
=df {a.b. c} c A. Hence: U/ind(B) = {{xj. {x2. x5}. {x3}. {x4}. {x6}}. Since B (X) = {xi}u {x3} u {x6}
= {x1.x3.xe} 
0 and B (X) = {xju {x2. x5} u {x3} u {x6} = {X1.X2.X3.X5.X6} U this concept
3
is roughly B-definable. The obtained accuracy of approximation a^BiCX) = â . â¡
5
Let B c A. The discernibility matrix M(B) is defined as follows: [cj =dt {a e B / a(.\,) a(xj)} {i.j = 
1. 2, ... , n), where cq is the set of all attributes discerning x; and Xj. The calculation of reducts and core 
requires the use of only the following two laws:
*
 idempotence (x-x = x = x + x) and absorption (x + x-y 
= x = x-( x + y))_ It was shown that the core is the set of all single element entries of the discernibility matrix 
M(B), i.e. CORE(B) = {a e B/Cij = {a}, for some i.j} (Pawlak Zâ Rough sets: Chapter 2 {p.24).
* Lattice theory will be presented in the next part of this work.
t Provided there is no ambiguity and for simplicity, the subsets included in the discernibility matrix are presented as strings, e.g. bed =df 
{b.c.dj Au {dj.
* By starting with leaving parentheses we can obtain I1 â¢ 21 â¢ 33 â¢ 41 = 216 Cauchy products (Augustin-Louis Cauchy. 1759 - 1857) 
and I3 â  25 â  35 â  42 = 124416 . in accordance with the previous Example 8.2.
Â§ Usually it is assumed only one decision attribute.
" See also: Pawlak Z.. Decision tables and decision spaces. Institute of theoretical and Applied Informatics. Polish Academy of Sciences. 
file:///C:/Users/user/Downloads/Pawlak" o20dec" o20tables.pdf. 6pp.
Example 8. 3 (reducts and core)
Figure 8.4 A simple information system (a) and its discernibility matrix^ (b)
a
b
c
d
Xi
x2
X3
x4
Xi
1
2
3
2
X1
0
X2
1
3
2
1
X2
bed
0
X3
0
1
2
0
X3
abed
abd
0
x4
1
2
2
1
x4
cd
b
abd
0
(a)
(b)
According to Figure 8.4(b) we can obtain: F(A) =df (b + c + d)(a + b + c + d)(a + b + d)(c + d)(b)(a + b +d) 
= (a + b + d)(c + d)b = (ac + ad + be + bd + de + d)b = acb + be + db.1 And hence, the set of all 
reducts RED(A) = {{a.b.c}. {b.c}. {b.d}}. CORE(A) = {b}. â¡
Any finite information system can be interpreted as a decision table by partitioning the set of attributes A of 
this system into two classes of attributes: condition and decision ones (see Definition 8.3 given below5). We shall 
assume below that the obtained decision table is consistent, i.e. the same conditions should not implicate different 
decisions (Pawlak Zâ Rough sets: Chapter 2 { p. 18 - 19). As an example, by assuming a. b and c as condition 
attributes and d as decision attribute we can obtain: the information system of Figure 8.3 is inconsistent (the 
same conditions and different decision) and this one shown in Figure 8.4 is consistent. Some well known notions 
concerning decision tables are cited below.
Definition 8.3 (decision table)
**
R decision table is any information system of the form Sd =df (U. A u {d}). where d Â£ A is a 
distinguished attribute called decision attribute (in short: decision). The elements of A are called conditions. 
By A x V it is denoted the set of all descriptors, i.e. ordered pairs of the form (a.v) over A and V, where V 
is the set of all admissible values associated with any a e A.

350
Let Va c V be the subset of all admissible values associated with some a e A. The set of terms is 
introduced as the least set containing descriptors (over A and V) and closed wrt the following three basic logical 
connectives: 
a . v.*  The term t in Sd, in short ||T||sd (or ||t|| if Sd is known), was inductively defined as
* See Subsection 1.1.
The following three designations are equivalent: (a.v), a = v and av.
follows.
||(a,v)|| =df [x e U /a(x) = v} (a e A, v e Va)
||tivt2|| = ||T1|| U INI
||T1AT2|| = ||T1|| n ||t2||
||~t|| = U - ||t||
Consider the above decision table Sd . Let B c A, a Â£ B and dÂ®: U -> 2Va such that dÂ®(x)
=df {v e Va /y 3it (xind(B)y a a(y) = v)} c Va.
Definition 8.4 (decision ride)
The following implication: (ai=vi) Â° (a2 = v2)Â° ... Â° (an = vn) =a (a = v) is said to be a decision rule, 
where Â° e { a , v }. This rule is true in Sd if ||(ai=vi) Â° (a2 = v2)Â° ... Â°(an = vn)|| g l|a = v|| and 
has an example in Sd if ||(ai=vi) Â° (a2 = v2)Â° ... Â°(an = vn)|| Â£ 0.
The set of all decision rules related to Sd can be obtained from the corresponding matrix M(Sd) by using 
first the following algorithm. By Mk it is denoted below the matrix M(x0 corresponding to the k'1' row of the 
discernibility matrix associated with M(Sd), where \i< e U and |U| = n.
Algorithm 8.1 (Aik generation)
Input: The discernibility matrix of Sd, B c A
Output: {Mk / k = 1 ... n}
For k = 1 to n
(1) 
if i k then cij =df 0 (for any i.j ; i Â£ j, i Â£ k)
(2) 
if c kj 0 and dÂ® (xj) 
{vk} then ckj =df c kj n B else Ckj =df 0 .
Â£ 
End. â¡
Example 8. 4 (decision rules)
Let B =df A. Consider the information system and its discernibility matrix shown in the above Figure 8.4 
(a.b). The obtained decision table Sd and the matrix Mi related to the first row xi are shown in Figure 8.5(a,b) 
below. Since 'incj is an equivalence (in particular reflexive) and all rows are different, the obtained sets 
corresponding to any x, i.e. dÂ® (xd are one-element sets, as it is shown in Figure 8.5(a) below

351
Figure 8.5
a
b
c
d
d>)
Xi
X2
X3
x4
Xi
1
2
3
2
{2}
X1
0
be
abc
c
X2
1
3
2
1
{1}
X2
X3
0
1
2
0
{0}
X3
0
x4
1
2
2
1
{1}
X4
(a)
(b)
A decision table S,i (a) and the matrix Mi related to the row xi (b)
As an example, consider the first row (corresponding to xi) of Figure 8.4(b): (0 . bed. abed. cd). Since d'1 (x2), 
dÂ®(x3) and dÂ®(x4) are different from d'1 (xi) = {2}, in accordance with step (2) of the above Algorithm 8.1, we 
can obtain: {b.c.d} n A = {b.c}. {a.b.c.d} n A = {a.b.c} and {c.djnA = {c}: as it is shown in the above 
Figure 8.5(b).
Since xi =$ d2 and (b + c)(a + b + c)c = c then ci =$ d2 is the first obtained decision rule. In a 
similar way we can obtain: b2 = di . ai/bi = do and c, a b, di (corresponding to x2, x3 and \ à¥¤, 
respectively). In accordance with T 1.9 of Subsection 1.3 (law of addition of antecedents-. AA), the above two 
implications having the same consequent di can be represented as follows: b2vctAb=di.
8.4. Other applications
The applications of rough sets are related to the following their advantages:* '(1) It does not need any 
preliminary or additional information about data - like probability in statistics, grade of membership in the fuzzy 
set theory, (2) It provides efficient methods, algorithms and tools for finding hidden patterns of data. (3) It 
allows to evaluate the significance of data. (4) It allows to generate in automatic way the sets of decision rules 
from data. (5) It is easy to understand. (6) It offers straightforward interpretation of obtained results. (7) It is 
suited for concurrent (parallel) distributed processing.' As an illustration, some applications of rough sets are 
cited below.
* Novak-Brzezinska A., Rough set theory in decision support systems. 104pp: 
file: ///C :/U sers/usei7Downloads/ROUGH%20SEIS .pdf
A comprehensive study of the literature on applications of rough set theory in civil engineering was 
presented in (Wang W. et al. 2010). 'The relationships between rough set theory and other mathematical 
methods, such as conventional statistical methods, fuzzy sets, and evidence theory, were briefly introduced. The 
applications of rough set theory in civil engineering were discussed in structure engineering, pavement 
engineering, traffic engineering, transportation engineering, land management, and water resources management. 
The great majority of civil engineering applications of rough set theory were based on the rule induction. Recent 
works on integration of rough set theory with other computing paradigms such as genetic algorithm, fuzzy logic, 
evidence theory were also presented'.
The use of rough set theory in deriving information from large data sets was considered in (Das R. et al. 
2017). 'Rough Set theory is a very handy tool for imprecise and vague pattern of data . This paper shows how the 
concept of RST being used in deriving information from hidden pattern of data . From large data base software 
industries are the object of interest for applying Rough Set concept on the collected data. The set of rules which 
have been derived will be helpful in the development of software industries. This paper lias used two types of 

352
techniques in finding the reduct, first one uses duster in finding different dissimilar groups, the other one is the 
application of quick reduct algorithm in deriving the rules verifying them by using strength verification'.*
Â§ Lester Randolph Ford Jr. (1927 - 2017), Delbert Ray Fulkerson (1924 - 1976)
* Industrial strength techniques for system and software verification (e.g. combinatorial testing, the classification tree method, static 
analysis, etc.).
t See Subsection 5.7: Thomas Bayes (1701 - 1761)
* (Lukasiewicz J. 1913): Jan Lukasiewicz (1878 - 1956), see also (Adams E.W. 1975)
An use of gene selection based on rough set applications was studied in (Anitha K. 2012). 'Gene selection is 
a main procedure of discriminate analysis of microarray data which is the process of selecting most informative 
genes from the whole gene data base. This paper approach a method for selecting informative genes by using 
rough set theory. Rough set theory is a effective mathematical tool for selecting informative genes. This paper 
describes basics of rough set theory and rough set attribute reduction by quick-reduct based genetic algorithm'.
Rough modelling as an approach to model construction was proposed in ( Loken T. and Komorowski J. 
2001). 'Traditional data mining methods based on rough set theory focus on extracting models which are good at 
classifying unseen objects. If one wants to uncover new knowledge from the data, the model must have a high 
descriptive qualityâ it must describe the data set in a clear and concise manner, without sacrificing classification 
performance. Rough modeling, introduced by Kowalczyk W. (1998), is an approach which aims at providing 
models with good predictive and descriptive qualities, in addition to being computationally simple enough to 
handle large data sets. As rough models are flexible in nature and simple to generate, it is possible to generate a 
large number of models and search through them for the best model. Initial experiments confirm that the drop in 
performance of rough models compared to models induced using traditional rough set methods is slight at worst, 
and the gain in descriptive quality is very large.'
An approach of finding reducts of composed information systems was presented in (Kryszkiewicz M. and 
Rybinski H. 1994).' A set-theoretical approach to finding reducts of composed information systems is presented. 
It is shown how the search space can be represented in form of a pair of boundaries. It is also shown, how reducts 
of composing information systems can be used to reduce the search space of the composed system. Presented 
solutions are implied directly from the properties of composed monotonic Boolean functions. '
'Rough set theory offers new insight into Bayes' theorem . The look on Bayes' theorem offered by rough set 
theory is completely different to that used in the Bayesian data analysis philosophy. It does not refer either to 
prior or posterior probabilities, inherently associated with Bayesian reasoning, but it reveals some probabilistic 
structure of the data being analysed. It states that any data set (decision table) satisfies total probability theorem 
and Bayes' theorem ... the rough set approach to Bayes' theorem shows close relationship between logic of 
implications and probability, first studied by Lukasiewicz'. (Pawlak Z., Rough sets: Chapter 3: p. 29).
The proposed in (Lukasiewicz J. 1913) use of logic as a mathematical foundation of probability considers the 
replacement of probability by truth values of indefinite propositions, i.e. propositional functions (Pawlak Zâ 
Rough sets: Chapter 4: p. 37). And so. let U be a non-empty finite set and <|>(x) be a propositional function. 
'The meaning of 4>(x) in U. denoted by |4>(x)|. is the set of all elements of U. that satisfies 4>(x) in U. The truth 
value of 4>(x) is defined as card |4>(x)| / card U. For example, if U =dt {1. 2, 3, 4, 5, 6} and 4>(x) is the 
propositional function x > 4, then the truth value of 4>(x) = 2/6 = 1/3. If the truth value of 4>(x) is 1. then the 
propositional function is true, and if it is 0, then the function is false. Thus the truth value of any propositional 
function is a number between 0 and 1. Further, it is shown that the truth values can be treated as probability and 
that all laws of probability can be obtained by means of logical calculus'. In accordance with the last work, 
Lukasiewicz's approach is represented differently, i.e. by using flow graphs (optimal flow analysis), but different 
from those proposed by Ford and Fulkerson5 (Ford L.R.Jr. and Fulkerson D. R. 1962). 'However, flow graphs 
introduced here are different from those proposed by Ford and Fulkerson for optimal flow analysis, because they 
model rather, e.g.. flow distribution in a plumbing network, than the optimal flow. The flow graphs considered in 
this paper are basically meant not to physical media (e.g water) flow analysis, but to information flow 
examination in decision algorithms. To this end branches of a flow graph are interpreted as decision rules'.

353
Conflict analysis using rough set approach was illustrated in the last part (Pawlak Z., Rough sets: Chapter 5: p. 
45). 'Conflict analysis and resolution play an important role in business, governmental, political and lawsuits 
disputes, labor-management negotiations, military operations and others. To this end many mathematical formal 
models of conflict situations have been proposed and studied ... Various mathematical tools, e.g.. graph theory, 
topology, differential equations and others, have been used to that purpose. Needless to say that game theory can 
be also considered as a mathematical model of conflict situations. In fact there is no. as yet. "universal" theory of 
conflicts and mathematical models of conflict situations are strongly domain dependent. We are going to present 
in this paper still another approach to conflict analysis, based on some ideas of rough set theory'.There was 
presented a simple tutorial example of voting analysis in conflict situations.
Some other applications related to rough sets are cited as follows: 'Discovery of concurrent data models 
from experimental tables: A rough set approach"(Suraj Z. 1996), 74 parallel algorithm for real-time decision 
making: a rough set approach" (Skowron A. and Suraj Z. 1996), "Time and clock information systems: concepts 
and roughly fuzzy Petri net models" (Peters J.F. 1997), "Guarded 'Transitions in Rough Petri Nets" (Peters. J.F. et 
al. 1999),* "Conflict logic with degrees, rough fuzzy hybridisation - a new trend in deci son-making" (Nakamura 
A. 1999), "The rough set theory and applications" (Wu C. et al. 2004): 'This paper presents a comprehensive 
review of the available literature on applications of the rough set theory. Concepts of the rough set theory are 
discussed for approximation, dependence and reduction of attributes, decision tables and decision mles. The 
applications of rough sets are discussed in pattern recognition, information processing, business and finance, 
industry, enviromnent engineering, medical diagnosis and medical data analysis, system fault diagnosis and 
monitoring and intelligent control systems. Development trends and future efforts are outlined. An extensive list 
of references is also provided to encourage interested readers to pursue further investigations'.
' 'This paper considers the construction of Petri nets to simulate conditional computation in various forms of systems. Coloured Petri nets 
underly the definition of a family of Petri nets based on rough set theory. Two families of guards on transitions are introduced: Lukasiewicz 
guards and rough guards. Lukasiewicz guards provide a basis for transitions with a form of continuous enabling, the notion of level-of- 
enabling of transitions is introduced. Rough guards on transitions are derived from approximations of our knowledge of input values/
T Atanassov K.T., Intuitionistic fuzzy sets. In: Vll ITKR's Session, Sofia deposed in Central Sci.-Technical Library of'Bulg. Acad, of Sci., 
1697/84 (1983): in Bulgarian. See also: (Atanasov K.T. and Stoeva S. 1983)
1 Dubois D. and Prade H., Interval-valued fuzzy sets, possibility theory and imprecise probability. 6pp.
file :///C:/Users/user/Downloads/Dubois%20and%20Prade. pdf
9. Fuzzy rough sets and other nonstandard approaches
Some nonstandard approaches such as fuzzy rough sets and other non-standard ones (e g. intuitionistic fuzzy 
sets, complex fuzzy sets and complex intuitionistic fuzzy classes, fuzzy rough sets and intuitionistic fuzzy rough sets, interval 
type-2 fuzzy sets, near sets, nested sets, forcing sets, non-wellfounded and paraconsistent sets) are briefly presented below.
9.1. Intuitionistic fuzzy sets, complex fuzzy sets and complex intuitionistic fuzzy classes
The notion of an intuitionistic fuzzy set was introduced by Atanasov K.T. in 1983 . e.g. see: (Atanasov K.T. 
1986). Intuitionistic fuzzy sets and interval - valued fuzzy setf (abbreviated as IFS and IVFS, respectively) are two 
intuitively straightforward extensions of Zadeh's fuzzy sets that were conceived independently to alleviate some 
of the drawbacks of the latter (Comelis C. et al. 2004): 'IFS theory basically defies the claim that from the fact 
that an element x belongs to a given degree (say p) to a fuzzy set A, naturally follows that x should not 
belong to A to the extent 1 - p, an assertion implicit in the concept of a fuzzy set. On the contrary, IFSs assign 
to each element of the universe both a degree of membership p and one of non - membership v such that p + 
v T 1, thus relaxing the enforced duality v = 1 - p from fuzzy set theory. Obviously, when p + v = 1 for 
all elements of the universe, the traditional fuzzy set concept is recovered. IFSs owe their name to the fact that 

354
this latter identity is weakened into an inequality, in the other words: a denial of the Aristotelian law of excluded 
middle occurs, one of the main ideas of intuitionism'*.
* ' The term intuitionistic is to be read in a broad sence, alluding loosely to the denial of the law of the excluded middle on element level 
(since u + v < 1 is possible)'(Comelis C. et al. 2004): see also (Dubois D. et al. 2005).
There were juxtaposed the vagueness and uncertainty as two important aspects of imprecision. 'Some authors ... prefer to speak of 
non-specificity and reserve the term uncertainty for the global notion of imprecision'.
* A narrow graded extension of intuitionistic logic proper has also been proposed by Takeuti G. and Titani S. (1984) ... 'it bears no 
relationship to Atanassovs notion of ITS theory' (Comelis C. et al. 2004).
Â§ The rule of omitting an implication, i.e. modus ponens: see Subsection 1.2.
" 'Sheaf models and toposes have by now become an important means for studying intuitionistic systems. They provide a unitying 
generalization of earlier semantic notions, such as Kripke models, topological (Beth) models, and realizability interpretations. Moreover, 
higher order languages with arbitrary fiinctionand power-types can be interpreted naturally in these models.' (Van Der Hoeven G. and 
Moerdijk I. 1984). See also: (Fourman M.P. 1980). 'hi mathematics, a sheaf is a tool for systematically tracking locally defined data attached 
to the open sets of a topological space. The data can be restricted to smaller open sets, and the data assigned to an open set is equivalent to all 
collections of compatible data assigned to collections of smaller open sets covering the original one.'(T/;e Free Encyclopaedia. The 
Wikimedia Foundation. Inc.).
Denotes: intuitionistic Zennelo - Fraenkel set theory.
H See: Subsection 1.8.
H A global intuitionistic set theory with some constraints.
'1VFS theory emerged from the observation that in a lot of cases, no objective procedure is available to select 
the crisp membership degrees of elements in a fuzzy set. It was suggested to alleviate that problem by allowing to 
specify only an interval [p.i.p.2] to which the actual membership degree is assumed to belong ... Both approaches. 
1FS and 1VFS theory, have the virtue of complementing fuzzy sets, that are able to model vagueness, with an 
ability to model uncertainty as well' (Comelis C. et al. 2004): A related approach, second-order fuzzy set theory, 
introduced in (Zadeh L.A. 1975), was also cited.
According to the last work: 'Both approaches, IFS and IVFS theory, have the virtue of complementing fuzzy 
sets, that are able to model vagueness, with an ability to model uncertainty as well't
Another approach was proposed in (Takeuti G. and Titani S. 1984)i. In accordance with fuzzy set theory 
(Zadeh L.A. 1965), 'the characteristic of fuzzy sets is that the range of truth value of the membership relation is 
the closed interval [0,1] of real numbers' (Takeuti G. and Titani S. 1984). The logical connectives (called here 
operators) =a . ~ used in Zadeh's fuzzy sets 'seem to be Lukasiewicz's logic, where p => q = min{l, l-p + 
q}. ~ p = 1 - p.' The last logic was extended in (Hay L. S. 1963) to a predicate logic and proved its weak 
completeness theorem ... from a logical standpoint, each logic has its corresponding set theory in which each 
logical operation for set theory; namely, the relation c and = on sets are translation of the logical operations =x 
and o. For Lukasiewicz's logic, p a (p =x q) => q is not valid5. Translating it to the set version, it follows 
that the axiom of exstensionality does not hold. Thus this very basic principle of set theory is not valid in the 
corresponding set theory'. It was shown that the sheaf model
**
 associated with each complete Heyting algebra (a 
bounded lattice), defined in the closed interval [0,1] is a model of intuitionistic set theory ZFi (Grayson R.J. 
1977). The last algebra, denoted in short by cHa [0,1], was used for referring to the I-valued logic as 
intuitionistic fuzzy one (Takeuti G. and Titani S. 1984). Here, the logical value of implication 'p =x q' =dt if 
p < q then 1 else q. Similarly, the logical value of negation '~ p' = 'p => 0' = if p = 0 then 1 else 0. 
The obtained I - valued logic was referred as 'intuitionistic fuzzy logic IF in a language with proposisional 
variables'. In accordance with the last work, it was shown the consistency and strong completeness', if a 
sequent^ A I- T is valid in every IF then A I- T is provable (A is a finite or infinite sequence of formulae and T is 
a sequence of at most one formula).
The global intuitionistic analysis** and globalisation of intuitionistic set theory were presented in the next 
two works: (Takeuti G. and Titani S. 1986) and (Takeuti G. and Titani S. 1987), respectively. In particular, in 
the first work it was briefly presented the (stronger) intuitionistic set theory given by Grayson R.J. (1977), the 
intuitionistic linear algebra (Ruitenburg W.B.G. 1982) and the global intuitionistic set theory (Takeuti G. and 
Titani S. 1987).

355
Grayson's stronger intuitionistic set theory ZFi is a first-order intuitionistic theory with relation symbols ' e' 
and '='. and with nine axioms of. equality, extensionality, pairing, union, power set, e-iduction, separation, 
collection and infinity. As an example, the axiom of extensionality corresponds to Zennelo's axiom Al (see: 
Subsection 5.1) or equivalently to the first axiom in ZF's system
*.
 The sets of natural numbers and rational 
numbers, i.e. N and Q . are introduced as usual. Real numbers are introduced in ZFi as pairs of subsets of Q. In 
the next considerations, some basic notions concerning Ruitenburg's intuitionistic linear algebra are given (e g. 
such as: apartness , ring, apartness ring, apartness F-module, apartness vector space, etc.) and several properties are 
shown: left to the reader. Some considerations related to complex fuzzy sets are given below.
* VV(V(z e x <=> z 6 y) â x = y). In general, sets are commonly denoted with a capital letter. Without loss of generality, in the
ZF axiomatic system sets are also denoted by smail letters and they are always on the right hand side of the relation ' 6' ('is an element of): eg. 
'z ex' corresponds to 'z e X". Instead of Z(X) and Z(Y). there are used two additional quantifiers (see Al of Subsection 5.1).
I The apartness relation (usually denoted by or # ) is a binary relation (defined on a given set X) satisfying the following three conditions: (1) 
# is antireflexive, (2) # is symmetric and the following implication (3) x#y => x#z vy#z (foranyx,y,z e X). The complement of this 
relation is equivalence. In particular, if this equivalence is equality, then # is said to be tight.
* Daily total sunspot number. DTSN =df (the number of spots) + 10 x (the number of groups counted over the entire solar disk).
Â§ Dbmitrii Anatolevich Molodtsov, bom: 1949: 'A pair (S,A) will be called a soft set over X if S is a mapping from set A to the set of 
all subsets of X, i.e. S : A â> 2X.' See also: (Molodtsov D.A. 2018): The universe U is here denoted by X.
" Introduced in: (Iseki K. and Tanaka S. 1978).
:' An algebraic system is defined as an ordered set cP =df ( A ; cq, ... , <p ; Oi, ... , om), where A is an arbitrary set, cq 6 A (i = 1, n
) are the distinguished elements of A (constants of the algebraic system) and Oj : /\"j -> A (j = l,m ) are the system operations. The 
system .s' is finite if A is finite. The following sequence (0, 0, ... , 0, m, n2, ... , nm) is called type of si' (0's are related to the number of 
constants and nj correspond to the number of arguments of Oj, for any j). Two algebraic systems si" and S are similar if they are of the 
same type (Kemtopf P. 1967). Algebraic systems will be presented in Part II of this book.
Complex fuzzy sets were introduced (Ramot D. et al. 2002). The objective of this work was 'an investigation 
of the innovative concept of complex fuzzy sets. The novelty of the complex fuzzy set lies in the range of values 
its membership function may attain. In contrast to a traditional fuzzy membership function, this range is not 
limited to [0, 1], but extended to the unit circle in the complex plane. Thus, the complex fuzzy set provides a 
mathematical framework for describing membership in a set in terms of a complex number. The inlierent 
difficulty in acquiring intuition for the concept of complex-valued membership presents a significant obstacle to 
the realization of its full potential. Consequently, a major part of this work is dedicated to a discussion of the 
intuitive interpretation of complex-valued grades of membership. Examples of possible applications, which 
demonstrate the new concept, include a complex fuzzy representation of solar activity (via measurements of the 
sunspot number^), and a signal processing application. A comprehensive study of the mathematical properties of 
the complex fuzzy set is presented. Basic set theoretic operations on complex fuzzy sets, such as complex fuzzy 
complement, union, and intersection, are discussed at length. Two novel operations, namely set rotation and set 
reflection, are introduced. Complex fuzzy relations are also considered'.
'To solve complicated problems in economics, engineering, and enviromnent. we can't successfully use 
classical methods because of various uncertainties typical for those problems. There are three theories: the theory 
of probability, the theory of fuzzy sets, and the interval mathematics which we can consider as mathematical 
tools for dealing with uncertainties. But mathematical tools may be dealt with using a wide range of existing 
theories such as the probability theory, the theory of (intuitionistic) fuzzy sets, the theory of vague sets, the theory 
of interval mathematics, and the theory of rough sets. However, all of these theories have their own difficulties ' 
(Jun Y.B. 2008). As it was observed in the last work, ' all of these theories have their own difficulties pointed out 
in (Molodtsov D.A. 1999)Â§'. The soft set concept was used in (Jun Y.B. 2008) as 'a new mathematical tool for 
dealing with uncertainties that is free from the difficulties that have troubled the usual theoretical approaches'. 
And hence, the use of soft sets to the theory of BCK/BCI - algebras". The notions of soft BCK/BCI-algebras and 
soft subalgebras were first introduced. Some basic properties related to the last soft algebraic systems were also 
derived. As an illustration, the above notions of BCK/BCI - algebras were defined as follows (provided there is 
no ambiguity and for convenience, instead of 'x, y, z e X' (Jun Y.B. 2008), equivalently there are used below: 'a,b,c e A').

356
Definition 9.1 (BCK/BCI - algebras)
The algebraic system oW =<jf (A ; 0 ; o) of type (0,2) is said to be a BCI - algebra if the following four 
conditions are satisfied (for any a.b.c e A):
(1) (a o b) o (a o c) o (c o b) = 0,
(2) (a o (a o b)) o b = 0,
(3) a o a = 0 and
(4) (aob = 0) a (b o a = 0) =a a = b.
The above BCI - algebra is a BCK algebra if in addition the following condition holds:
(5) 0 o x = 0.
A more formal treatment is omitted: left to the reader. Some considerations related to the 'complex 
intuitionistic fuzzy classes' are given below.
'A complex fuzzy class is characterized by a pure complex fuzzy grade of membership. Pure complex fuzzy 
classes are paramount in providing rich semantics for cases where the fuzzy data is periodic with a fuzzy period. 
Often, however, the available data is contaminated by noise, opposing expert opinions, ambiguity, and false 
information. This opens the door for using intuitionistic fuzzy sets theory: representing the false information via a 
degree of non-membership. Several researchers have identified the benefits of integrating the two concepts of 
complex fuzzy sets and intuitionistic fuzzy sets. Nevertheless, complex fuzzy sets allow for only one component 
of the degree of membership to be fuzzy. In this paper, we introduce the concept of complex intuitionistic fuzzy 
classes, which are characterized by pure complex intuitionistic fuzzy grade of membership. We define the basic 
terms and operations on complex intuitionistic fuzzy classes and provide a motivating example of relevant 
application' (Ali M. et al. 2016)*. Here, A complex fuzzy class T, defined on 2Z (the universum), is characterised 
by a pure complex fuzzy grade of membership |_ii(V.Z) =df pr(V) + j-p,(z)', where p,(V) and p,(z) are the 
real and imaginery components of the last grade of membership (obviously: pr(V), |_i,(z) e [0,1]). And hence, a 
pure complex fuzzy class T =df {(V, z , pr(V,z)) / V e 2' . z e // ]. In accordance with the last work, some 
applications were also given.
* there was used Atanassov's intuitionistic fitzzy set theory (Atanassov K.T. 1986). Moreover, instead of sets. there are used classes ('to 
be avoided some set theoretical paradoxes").
t hi general, the algebraic form of a complex number z e C is defined as: z =# a + i-b , where a =df 7fe(z) and b =df /m(z) (a, b 6 
R, i2 = - 1). For convenience, instead of "i" , here the imaginary unit is denoted by 'j'.Any complex number can be represented by Argand's 
diagram (Jean-Robert Argand 1768 - 1822): first described by Caspar Wessel (1745 - 1818) and also called Gauss' plane (Carl Friedrich 
Gauss (1777 - 1855). See also: T/te Free Encyclopaedia. The Wikimedia Foundation. Inc.
* The last numbers (an extension of complex numbers C) were first introduced in (Hamilton W.R. 1844: William Rowan Hamilton 1805 - 
1865). Traditionally, this set is denoted by H.
Â§ Hie same terminology is used as in the case of complex numbers where the rectangular (or: algebraic} and the polar forms of z e C 
are given as follows: z = a + i-b and z =r-(cos<p + i-sin <p), respectively.
'Intuitionistic fuzzy sets are useful for modeling uncertain data of realistic problems' (Ngan R.T. et al.). 
Here, there was expanded the utility of complex intuitionistic fuzzy sets using the space of quaternion numbers?. 
'The proposed representation can capture composite features and convey multi-dimensional fuzzy information 
via the functions of real membership, imaginary membership, real non-membership, and imaginary nonÂ­
membership'. There were analysed 'the order relations and logic operations of the complex intuitionistic fuzzy 
set theory' and also introduced 'new operations based on quaternion numbers? There were also presented 'two 
quaternion distance measures in algebraic and polar forms?? An analysis of the obtained properties was given. 
The obtained quaternion representations and measures were used in decision-making models. In particular, this 

357
model was 'experimentally validated in medical diagnosis, which is an emerging application for tackling 
patient's symptoms and attributes of diseases'.
There are various forms of quaternion representation, e.g. such as: algebraic sum representation, matrix 
representations or e.g. pairs of complex numbers.
Definition 9.2 {quaternion as an algebraic sum)
A quaternion, denoted by 'q'. is defined by the following algebraic sum: q=dfa-e+b-i + c-j + 
d â¢ k, where a. b. c. d e K and e. i. j. k are the basic quaternion units.
In accordance with the last definition, we have: i2 = j2 = k2 = - e . The quaternion sum and product are 
realised in a similar way as for polynomials (having the above basic quaternion units as variables). Moreover, the 
quaternion product is not a commutative binary operation. The last product is defined in Figure 9.1 given below.
X
e
i
j
k
e
e
i
j
k
i
i
-e
k
-j
j
j
-k
-e
i
k
k
j
i
-e
Figure 9.1 The quaternion product
According to the last figure, 'e' is a neutral element (or identity) wrt to the binary operation 'x' , i.e. e x a 
= a x e = a (a e [i, j, k} ): the neutral element is often not included in quaternion's definition. The following 
expression is then obtained: q =df a + b- i + c- j + d- k. And hence, in the next example it is assumed 
that e = 1. Then: i2 = j2 = k2 = - 1 (asin C wrt 'i').
Example 9.1 {quaternion addition and multiplication)
Let qi =df 2 + 4i + 3k and q? =df 3 + 2j + 4k. The following sum and product can be obtained.
qi + q2 â (2 + 4i + 3k) + (3 + 2j + 4k) 
= 5 + 4i + 2j + 7k.
qi x q2 = 
(2 + 4i + 3k) x (3 + 2j + 4k)
= 
2 x (3 + 2j + 4k) + 4i x (3 + 2j + 4k) + 3k x (3 + 2j + 4k)
= 
6 + 4j + 8k + 12i + 8ij + 16ik + 9k 
+ 6kj + 12kk
= 
6 + 4j + 8k + 12i + 8k - 16j + 9k - 6i - 12
= - 6 + 6i - 12j + 25k. â¡ {Df. 'x'}
As an example, an interesting application, related to the quaternion space geometry, was given in (Yefremov 
A. et al. 2007)
*:
 left to the reader.
* Yang-Mills field from quaternion space geometry, and its Klein-Gordon representation (Chen Ning Yang: bom 1922, Robert Mills: 1927 
- 1999, Oskar Benjamin Klein: 1894 - 1977, Walter Gordon: 1893 - 1939).
9.2. Fuzzy rough sets and intuitionistic fuzzy rough sets

358
'Traditional rough set theory uses equivalence relations to compute lower and upper approximations of sets. 
The corresponding equivalence classes either coincide or are disjoint
*.
 This behaviour is lost when moving on to 
a fuzzy T-equivalence relation^ However, none of the existing studies on fuzzy rough set theory tries to exploit 
the fact that an element can belong to some degree to several "'soft similarity classes" at the same time. In this 
paper we show that taking this truly fuzzy characteristic into account may lead to new and interesting definitions 
of lower and upper approximations. We explore two of them in detail and we investigate under which conditions 
they differ from the commonly used definitions. Finally we show the possible practical relevance of the newly 
introduced approximations for query refinement' (De Cock M. et al. 2007).
* See Subsection 8.1.
t The questions 'whether approximate equality should satisfy transitivity, and whether fuzzy T-equivalence relations resolve the Poincar'e 
paradox' were discussed in (De Cock M. and Kerre E. 2003): lite 'approximate equality, or indistinguishability, can only be modelled by 
means of a T-equivalence relation when the following condition does not occur: 'two objects can also be approximately equal even if they are 
not exactly equal'.
1 See Subsection 2.2 / p.76.
Â§ xOy =df max{0, x" + y" - l}1/a and xÂ®y =df min{l,x" + y"J1/a (See: Subsection 2.2 / p. 90 - 91.
According to the last work, it was observed that the introduced definitions of the above two approximations 
require use of some fuzzy t-equivalence relation and hence a selection of a corresponding t-norm. In applications 
the often used as a t-norm is the classical Lukasiewicz's such one because the notion of fuzzy t-equivalence 
relation is dual to that of a pseudo-metric. And so, as an appropriate was proposed the Lukaszewicz's t-norm. In 
fact, the Lukaszewicz's t-norm is considered as one of the tree most important in fuzzy logic systems, in 
common with Godel 's and product logic systems (Hajek P. 1998) .
'Triangular norms are a generalisation of the classical two-valued conjunction. They were originally 
introduced for definition of the probabilistic (statistical) metric spaces as a generalisation of the classical triangle 
inequality for ordinary metric spaces. The next investigations were related with axiomatic of these norms. In this 
paper, a new t-norm is proposed which is generalisation of the Lukaszewicz's t-nornr. Some selected properties 
of this generalised t-norm are first presented. Next, it is shown a possibility of generalisation of the notions of 
lower and upper approximations used in fuzzy rough sets and also of obtaining better such approximations' 
(Tabakow LG. 2014). In accordance with this work, some selected properties of this generalised t-norm were 
first presented. Next, it was shown a possibility of generalisation of the notions of lower and upper 
approximations used in fuzzy rough sets and also of obtaining better such approximations.
In general, the lower and upper approximations of a given subset X c [J are computed using p and 
defined as follows: A(X) =df {x e U / [x]P c X} and A (X) =df { x e U / [x]P n X 0 }, respectively. 
An equivalent version of the above two approximations was originally proposed in (De Cock M. et al. 2007). 
And so, we have: y e A(X) Odf V (xpy => x e X) andy e A (X) odf 3 (xpy a x e X).
xeU 
xeU
By definition, it follows that y e A(X) o [y]P c x and y e A (X) o [y]P n X 
0. And hence,
the following two properties should be satisfied: [y]P c x o v (xpy => xeX) and [y]P n X 0
<3 3 (xpy a xeX). A more formal treatment is given below.
Proposition 9.1 
[y]p - X O V (xpy => x e X)
Proof (if-condition):
(1) 
[y]p S x
(2) 
~ V (xpy => xeX)
(3) 
JL/xPy A x^X) *Â§
{a}
{aip}
{ NV
*,
 NC, SR : 2}

359
contr. â¡ 
{6.8}
(4)
a g U
(5)
apy
{-3
*.
-K:3}
(6)
a Â£ X
(7)
a g [y]P
{df. ' [y]p': 5}
(8)
a e X
{df.' Â£': 1,7}
Proof (only if-conditiori):
(1)
V (xpy => x e X)
{a}
(2)
x
{aip}
(3)
~ ([y]P Â£ X)
{df.' Â£': 2}
(4)
~ ^(X e [y]p => x g X)
{df.' Â£'. SR: 3}
(5)
3 (x e [v]p a x Â£ X) 
xeU
{ NV". NC. SR : 4}
(6)
a e U
(7)
a e [y]P
{-3
*.
-K:5}
(8)
a Â£ X
(9)
aeU=>(apy=>aeX)
{-V
*
:1}
(10)
a py => a g X
{-C:6.9}
(ID
apy
{df.' Ly]P': 7}
(12)
a e X
{ C : 10.11}
contr. â¡
{8.12}
Proposition 9.2
3 (xpy a x e X) 
xeU
|y|P n X ? 0 o
Proof (if-conditiori):
(1)
[y]P n X * 0
{a}
(2)
~ 3 (xpy a xeX) 
xeU
{aip}
(3)
V ( X p'y v x Â£ X) 
xeU
{ N3". NK. SR : 2}
(4)
3 (X g [y]p n X) 
xgU
(1}
(5)
a g U
(6)
a e [y]P
{-3'.df.'n',-K:4}
(7)
a g X
(8)
apy
{df.' [y]p': 6}
(9)
a g U => a p'y v a g X
{-V
*
:3}
(10)
a p'y v a Â£ X
{-C:5.9}
(H)
a g X
{ A; 8.10}
contr. â¡
{7.11}
Proof (only if-conditiori):
(1)
3 (xpy a x e X)

360
contr. k 
{5,10}
(2)
[y]P n X = 0
{aip}
(3)
V (x Â£ [y]p n 
xeU
X)
{2}
(4)
a e U
(5)
apy
{-3
*.-K:
 1}
(6)
a e X
(7)
a Â£ [y]P n X
{-V
*
:3}
(8)
a Â£ [y]P v a Â£ X
{ df.'n'.NK. SR: 7}
(9)
a Â£ [y]P
{-A: 6.8}
(10)
ap'y
{df.' Lv]p': 9}
The considered in (De Cock M. et al. 2007) relation p(x.y) =df max{0, 1 - I x - y 1} remains a fuzzy t- 
equivalence for any a L 1. In fact, the following proposition holds.
Proposition 9.3
Let a i 1. Then p(x.y) =df max{0, 1 - |x - y 1} is a fuzzy t-equivalence with respect to the generalised 
Lukasiewicz's t-nonn.
Proof:
Assume that a 1. It is sufficient to show that p is t-transitive. i.e. p(x,z) p(x,y) Â® p(y.z) (for any x, 
y. z e K). where Â® is the generalised Lukasiewicz's t-nonn. Equivalently, the following inequality should be 
shown: max{0, 1 - I x - z 1} L max{0, max{0, 1 - I x - y |}" + max{0, l-|y-z|}"-l} . And 
hence: max{0, 1 - I x - z |}" > max{0, max{0, 1 - I x - y |}" + max{0, 1 - I y - z |}" - 1}. Since any 
absolute value lx - zl.lx - yl and ly - zl may be greater than, equal to. or less than Lin general. 33 = 
27 cases should be considered (eventually reduced to 23 = 8). However, the most important is the case when |x 
â z I = 1. I x â y I < 1 and ly - z| < 1. Hence, the following inequality should be shown: (1 - I x - y |)" 
+ (1 - I y - z |)" 
1. This case is considered below.
Since 1 = I x - z I < |x â yl + ly â z|,|x â yl.ly â z|<l and 1 - I x - z I S 1 - (I x - y I 
+ I y - z I), the above inequality is always satisfied. In fact, for any a > 1 we have: (1 - I x - y |)" + (1 - 
I y - z b" (1 - I x - y I + 1 - I y - z |)" = (1 - (I x - y.[ + I y - z I) + 1)"<(1 - I x - z I + 1)" 
= (1 - 1 + 1)" = 1" = 1 (since LaJ < a < Pal, where LaJ and Pal are the corresponding floor and 
ceiling functions and a11 + bn <. (a + b)n). t
Some other considerations are left to the reader. The intuitionistic fuzzy rough sets are briefly presented 
below.
'The properties of the intuitionistic fuzzy rough sets are very complicated and inadequate in the sense of the 
extension of intuitionistic properties. In order to overcome this unnaturalness, we introduce a new definition of 
intuitionistic fuzzy rough sets and investigate important properties about the image and inverse image of an 
intuitionistic rough sets under a mapping. All the results obtained from this new definition are different from the 
results in other papers, and will be proven useful in expanding the related theory' (Yun S.M. and Lee S.J. 2020). 
In accordance with the last work, some introductory considerations are cited below.

361
The idea of fuzzy rough sets was proposed in (Nanda S. and Majumdar S. 1992)
*
 and (Coker D. 1998). The 
next research was oriented mainly in combining 'the concepts of fuzzy rough sets and intuitionistic fuzzy sets' 
(Samanta S.K. and Mondal T.K. 2001). 'Many attempts at combining fuzziness and rouglmess have been made. 
... However, the properties of the intuitionistic fuzzy rough sets are very complicated and inadequate in the 
sense of the extension of intuitionistic properties. This is because of the unnaturalness of the definition of fuzzy 
rough sets. For example, the double complement of a fuzzy rough set is different from itself. The property that 
the double complement of a set becomes the set itself is one of the essential properties of Boolean algebra. Hence 
this flaw is critical in expanding the related theory. In order to overcome this unnaturalness, we need a new 
approach to intuitionistic fuzzy rough sets'.
In accordance with (Yun S.M. and Lee S.J. 2020), it was introduced 'a new definition of intuitionistic fuzzy 
rough sets and investigated important properties about the image and inverse image of an intuitionistic rough sets 
under a mapping. This new approach enables us to manipulate fuzzy rough sets more simply and easily. All the 
results obtained from this new definition are different from the results in other papers, and will be proven useful 
in expanding the related theory '. Some results obtained in this work are given below.
The notion of a fuzzy rough set on X, introduced in (Nanda S. and Majumdar S. 1992), was considered as 
'an object of the form A = (AL,Au), where AL and Au are characterised by a pair of maps: AL : XL -> L and 
Au : Xu -> L with AL(x) < Au(x), for all x e XL, where (L, <) is a fuzzv lattice^ (it was assumed XL c 
Xu).
As it was observed in (Yun S.M. and Lee S.J. 2020), 'the double complement of a fuzzy rough set A is 
different from A, because Al and A'u are different, i.e., Al <A'u, The property that double complement of a set 
becomes the set itself is one of the essential properties of Boolean algebra. Hence this flaw is critical in 
expanding the related theory. Thus we are going to introduce the new definition of a fuzzy rough set by 
weakening the condition of the old definition. Then the properties we obtain in this paper are different from the 
results in the above paper'. Moreover, 'the properties of the intuitionistic fuzzy rough sets are very complicated 
and inadequate in the sense of the extension of intuitionistic properties. This is because of the unnaturalness of 
the definition of fuzzy rough sets. Hence this flaw is critical in expanding the related theory. In order to overcome 
this unnaturalness, we introduce a new definition of intuitionistic fuzzy rough sets and investigate important 
properties about the image and inverse image of an intuitionistic rough sets under a mapping. This new approach 
enables us to manipulate fuzzy rough sets more simply and easily. All the results obtained from this new 
definition are different from the results in other papers, and will be proven useful in expanding the related 
theory'. The notions of fuzzy rough set and intuitionistic fuzzy rough are illustrated below (Yun S.M. and Lee 
S.J. 2020).
Definition 9.3 (fuzzy rough set)
Let X be an underlying set and (L, A) a fuzzy lattice. A fuzzy rough set in X is an object of the form A 
=df (Al, Au), where AL and Au are defined by a pair of maps AL : X -> L and Au : X -> L with AL(x) 
A Au(x), for all x e X. The null and the whole fuzzy rough sets in X are defined by 0 =dt (Qu, Qu) and 1 =df 
(11, lu), respectively.
Definition 9.4 (fuzzy rough set complement)
The complement A = ((A)L, (A)u) of a fuzzy rough set A = (AL, Au) in X is defined by (A)L(x) =dt 
(Au(x)) ' and (A)u(x) =df (AL(x)) ' for all x e X.
Corollary 9.1 (closeness of complement)
(A)l(x) = (Au(x)) ' A (Al(x)) ' = (A)u(x). â¡ 
{Df.3, Df.4}
' The proposed here model corresponds to the L -fuzzy set model developed by Atanassov K.T. (1986): see: (Coker D. 1998).
t A. fuzzy lattice is a pair (L,j.i), where L is a crisp lattice and (L x L, li) is a fuzzy set with membership function u : L x L 
[0,1]
such that j.i(x,y) = 1 iff x A- y (Kaburlasos V.G. et al. 2007). Algebraic structures will be considered in the next part of this book.

362
In accordance with the last corollary A is a fuzzy rough set. It was also shown the following double 
complement property: A = A . The notion of an ituitionistic fuzzy rough set (in short: IF rough set) was 
introduced as follows (Yun S.M. and Lee S.J. 2020).
Definition 9.5 (IF rough set)
If A = (Al. Au) and B = (BL. Bu) are two fuzzy rough sets in X with B c A then the ordered pair 
(A.B) is called an intuitionistic fuzzy rough set (briefly IF rough set) in X. The condition B c A is called the 
intuitionistic condition (briefly IC).
It is easily to show that B c A <=> A c B (in accordance with Remark 3.2 given in the last work). A more 
formal treatment is left to the reader* *.
This interesting work includes: 2 Corollaries, 10 Definitions, 4 Examples, 6 Remarks and 13 Theorems.
T See also: (Wu D. and Tan W.W. 2006) and (Mendel J.M. 2007).
* According to the above Figure 9.2, instead of 'X' , the considered fuzzy set is denoted by 'A'. 'X' is used as a space point set (see 
Definition 5.45 of Subsection 7.1.).
9.3. Interval type-2 fuzzy sets
Fuzzy sets were introduced introduced independently in (Zadeh L.A. 1965) and (Klaua D. 1965}, 'as 
extension of the classical notion of set'. The last theory, known also as "type-1 (in short: Tl) fuzzy set theory'' was 
successfully applied in many areas (e.g. see Subsection 7.5). An illustration of the basic ideas of interval type-2 
(in short: IT2) fuzzy sets was given in (Wu D. 2010)t According to the last tutorial, an 'obstacle in learning IT2 
fuzzy logic is its complex notions': some considerations introduced in this work are cited below. In particular, 
examplesofa Tl FS and IT2FS are illustrated in Figure 9.2 below/(WuD. 2010).
(b) IT2FS
(a) T1FS
Figure 9.2
Let first consider the Tl FS A. shown in Figure 9.2(a). This set is represented as follows: {0/2, 0.5/3, 1/4, 
1/5, 0.67/6, 0.33/7, 0/8}. Here, the used abbreviation "a/b" denotes that p-A(b) =df a, e.g. 0.33/7 denotes that 
Pa(7) =df 0.33. Ina similar way: pa(2) = 0, pA(4) = 1, etc. On the other hand, for a crisp set, the membership 
degree of any element in it e {0,1}.
The membership function pA(x) of a Tl FS 'can either be chosen based on the users opinion ((hence, the 
membership functions from two individuals could be quite different depending upon their experiences, perspectives, cultures, 
etc.) or it can be designed using optimisation procedure'. On the other hand, there were observed 'limitations 

363
concerning the ability of T1 FS. to model and minimise the effect of uncertainties (certain in the sense that its 
membership grades are crisp values)'. Type-2 FSs introduced by Zadeh L.A. (1975) were characterised by fuzzy 
membership functions. T12 FSs (Mendel J.M. 2001) as 'a special case of Type-2 FSs. are currently the most 
widely used for their reduced computational cost'.
Consider now the example IT2 FS A of the above Figure 9.2(b). Instead of numbers (as in the previous T1 
FS), the membership of an IT2 FS is an interval. e.g. instead of 0.5/3 . 1/5. 0.67/6 and 0.33/7 we can obtain: 
[0.25, l]/3. [0.75, l]/5, [0,l]/6 and [0, 0.5]/7. respectively. It can be observed that a is bounded from above 
and below by the following two T1 FSs: A and A , called upper and lower membership functions (in short: 
UMF and LMF, respectively). The area between A and A is said to be the footprint of uncertainty'' (FOU: here is 
marked in blue).
1T2 FSs 'are practically useful, when it is difficult to determine the exact MF, or in modelling the diverse 
options from different individuals. The MFs can be constructed from surveys or using optimisation algorithms'. 
A block diagram of an 1T2 fuzzy logic system (1T2 FLS) is shown in Figure 9.3 below. This diagram 'is similar to 
its T1 counterpart, the major difference being that at least one of the FSs in the rule base is an IT2 FS. Hence, the 
outputs of the inference engine are IT2 FSs. and a type-reducer is needed to convert them into a T1 FS before 
defuzzification can be carried out' (Wu D. 2010).
Crisp 
inputs
Fuzzifier
1T2 FSs
Rulebase
Defuzzifier ââº crisp outputs
T1FS
Inference Engine--------- âº Type-reducer
IT2 FSs
Figure 9.3 IT2 fuzzy logic system
As it was shown in the last work, in practice the computations in an IT2 FLS can be significantly simplified. 
The presented here rule-base for IT2 FLS is consisting of the following N rules'.
Rn : if ai is A" and â¢â¢â¢ and ai is Af then b is Bn (n= 1,2, ...,N),
where Ain (i = 1.2, ...,I) are IT2 FSs and Bn =<jf [bn.bn] 'is an interval, which can be understood as 
the centroid of a consequent IT2 FS. or the simplest TSK model*, for its simplicity'. In accordance with the last 
work it is used: b n - S" (each rule consequent is a crisp number).
* See: fl'akagi 1. and Sugeno M. 1985) and (Sugeno M. and Kang G. 1988).
t 'By contrast, the proposed approach to assessing the nearness {closeness) of objects is not defined directly using a distance metric' 
(Peters j.F. 2007).
* Zdzislaw Pawlak (1926 - 2006)
In accordance with (Wu D. 2010) . typical computations in an IT2 FLS involve four (generalised) steps using 
as a sub procedure two times the Karnik - Mendel (KM) algorithms (Mendel J.M. 2001): computing yi (switch 
pomt from the upper firing level to the lower firing level) and yr (switch pomt from the lover tiring level to the upper firing 
level). And finaly. the obtained defuzzified output y is defined as an arithmetic mean. i.e. y =df (yi + yr)/2. A 
more formal treatment is omitted: left to the reader.
9.4. Near sets and nested sets
The approximation of sets of objects that are 'qualitatively but not necessarily spatially neaF each other' was 
considered in (Peters J.F. 2007): 'The term qualitatively near is used here to mean closeness of descriptions or 
distinctive characteristics of objects. The solution to this problem is inspired by the work of Zdzisaw Pawlak/ 

364
during the early 1980s on the classification of objects by means of their attributes. This article introduces a 
special theory of the nearness of objects that are either static (do not change) or dynamic (change over time). The 
basic approach is to consider a link relation, which is defined relative to measurements associated with features 
shared by objects independent of their spatial relations. One of the outcomes of this work is the introduction of 
new forms of approximations of objects and sets of objects. The nearness of objects can be approximated using 
rough set methods. The proposed approach to approximation of objects
*
 is a straightforward extension of the 
rough set approach^ to approximating objects, where approximation can be considered in the context of 
information granules (neighborhoods). In addition, the usual rough set approach to concept approximation has 
been enriched by an increase in the number of granules (neighborhoods) associated with the classification of a 
concept as near to its approximation. A byproduct of the proposed approximation method is what we call a near 
set. It should also be observed that what is presented in this paper is considered a special (not a general) theory 
about nearness of objects. The contribution of this article is an approach to nearness as a vague concept which 
can be approximated from the state of objects and domain knowledge'. In accordance with the last work, 'a view 
of approximation spaces' is introduced 'in a slightly modified manner in comparison with the original definition' 
given in (Pawlak Z. 1982, 1991). Some basic notions related to near set theory, introduced by Peters J.F.(2007) 
are illustrated below.
' It was suggested by Pawlak Z. (1982, 1991) that objects can be classified by their attributes. In accordance with (Peters J.F. 2007), 'the 
term object denotes something that has parts. A feature of an object is a form (configuration, design) or distinguishing characteristic in the 
make-up of the object ... Ute focus in this article is on what it means for one object to be close (qualitatively near) to another object', hi this 
approach, the assertion 'x and y are very close in P - relevant respects means that the objects x. y are near (close) wrt the relevant features 
for the approximation of a concept represented by the vague predicate f" (i.e. the predicate 1 that can be applied to this pair of objects).
t See Subsection 8.1.
1 IP(U) denotes the powerset of U (see Definition 5.21 of Subsection 5.4).
Â§ Rough inclusion functions are mappings considered in rough set theory with which one can measure the degree of inclusion of a set 
(information granule) in a set (information granule) in line with rough mereology (Gomoliriska A. and Wolski M. 2014).
Let p c X x X be a binary relation and Y c X. By [Y]P and P[Y] we shall denote the sets 
{x e X/3 (y p x)} and {x e X/3 (x p y)}, respectively. The notion of an approximation space was 
y e Y 
ye Y
introduced as follows: AS =df (U. if. v), where S is 'a covering of a finite universe of objects, i.e:
U S = U and v : IP(U) x P>(U) -> [0.1],i
It is assumed in the sequel that v is a standard rough inclusion function*. Let X c U. The Â§ - lower 
and Â§ - upper approximations of X are defined as follows.
if*  =df U { Y e S / v(X.Y) = 1 }
and
r =df U { Y 6 if / v(X.Y) > 0 }.
The following binary link relation links G U x U was also introduced.
x links y eedf â  ((X e S) a (x.y e X )).
The neighbourhood of \ e U was defined as: |x|///z/cy =df [y e U / x links y}. According to (Peters 
J.F. 2007), each approximation space AS =df (U. S. v) defines an approximation space AS/,-,
*,
 =df (U. I. v). 
where the neighborhood function I : U -> IP(U) is defined by I(x) =<jf [x] /â*,  for x e U. The above 
links relationon on subsets of U was also extended to a nearness relation as follows.
XLY Odf 
(x links y).
In accordance with (Peters J.F. 2007). there exists a possibility of introducing 'many other possible nearness 
relations defined by links . e.g. X L'Y iff { (x.y) / x links y} is sufficiently large. Some differences concerning 

365
the notions nearness and roughness were also presented ('distinction between near sets and rough sets'), considering 
the notion of an information system.
Let S =df (U, A) be an information system
*
 and Nr(A) =df l; U( A) U/IND(B) (for: I < r < |A|), 
where Pr(A) =<jf {B c A / |B| = r}. Here, by IND (B) it is denoted the indiscernibility relation defined. As 
it was shown in (Peters J.F. 2007),'a set X relative to the family of neighborhoods Nr(B) is a B-near set iff | 
BNDn (Bj(X) | k 0. Then X is B - near wrt its lower approximation (NrlB))*(X) or B - near wrt its upper 
approximation (NrlB))*(X), if BNDn^B)(X) = 0 .'In accordance with the last work,'nearness diminishes as 
the size of BNDn /B)(X) increases' and X is a rough one iff | BND^ .^(X) | > 0. The rouglmess of X 
increases as | BNDn (B)(X) | increases. A more formal treatment is omitted: left to the reader.
' See Definition 8.1 of Subsection 8.3: 'lhe information system is here denoted by S.
1 [Using nested sets - Joomla! Documentation]. See also: Nested sets and relational division, https://vadimtropashko.wordpress.com/why- 
relational-division-is-so-uncommon/nested-sets-and-relational-division/.
J Known also e.g. as: babushka or matryoshka dolls.
Some considerations concerning nested sets (known also as trees or hierarchies) are given below. Informally, 
any such set can be considered as a chain of subsets. Tn the nested sets model each data item is stored as a row in 
the database table in the normal manner. However, additional columns are present in the table to express the 
hierarchical relationship between the data items. Each data item is referred to as a node and the collection of 
nodes can be thought of as forming a tree. Nodes can have zero, one or many child nodes. A node that has no 
children is referred to as a leaf node. A child node can itself have children and this nesting can carry on to 
arbitrary depth. The table is assumed to hold a single tree with a single node being allocated as the root nodeO
1 ail 
Head
A 
B
B 
D
B 
E
A 
C
(b)
Figure 9.4
Example 9.2 {nested set)
The nested structure associated with the binary tree of the above Figure 9.4(a) having as a root node A and 
as leaf nodes'. C, D and E. The mean length of this tree (2 + 2 + 1) / 3 Â« 1.66(6). The corresponding adjacency 
relation is shown in Figure 9.4(b), where: A =<jf {a, b, c, d, e}, B =<jf (b,d,e), C =<jf {c}, D =<jf {d} and E =<jf 
{e}. It can be observed that, e.g. D c B and B c A (i.e. D c B c A : like in Russian dolls* 1). Another way of 
representing nested sets structure can be obtained by using 'set elements as boxes and sets as the ovals including 
them': left to the reader. â¡
In general, in applications, nested sets are used as a model for storing hierarchical information in relational 
databases. On the other hand, the combinatorics of nested sets and set partitions play an important role in discrete 
mathematical structures.

366
'Let Dn + i,k -1 be the number of dissections of a convex polygon with n + 1 labelled edges by k - 1 
diagonals, such that no two of the diagonals intersect in their interior. The formula Dn + i,k -1 dates back to 
Kirkman T.P.
*
 (1857) and Cayley A.i (1890): who gave the first complete proof' (Gaiffi G. 2015). The above 
formula is presented as follows.
â¢ 1'homas Penyngton Kirkman (1806 - 1895).
t Arthur Cayley (1821 - 1895).
'Some generalisations of De Concini and Procesi's definition successively appeared in various combinatorial contexts' (Gaiffi G. 2015).
Â§ See Definition 5.21(the notion of a power set) of Subsection 5.2.
" Henry Morgan Ward (1901 - 1963).
On - line Encyclopedia of Integer Sequences (Neil James Alexander Sloane, bom 1939).
** Hermann Gunther Grassmann (1809 - 1877).
H Consider the set V =# { X / X g X). Is V an element of its own? Let V e V. We have a contradiction with the definition of the 
set V. Assume now that V g V. According to the same definition we have: V e V. And hence: V g V <=> V e V. This paradox (previously 
observed by Zennelo in 1899: Ernst Friedrich Ferdinand Zennelo 1871 - 1953) was next independently studied in (Russell H. 1903).
Dn+l.k-l -
1 rn-2\rn+fc-l\ 
k v/c-iA fc-i )
In fact, there exist various proofs of the last formula. In accordance with the last work, the obtained proof 
'consists in the description of two explicit bijections and is based on the combinatorics of nested sets and set 
partitions.
According to (Gaiffi G. 2015). the notion of nested set 'appeared in geometiy in connection with models of 
configmation spaces, first in (Fulton W. and MacPherson R. 1994), with more generality in De Concini and 
Procesi's papers', e.g. (De Concini C. and Procesi C. 1995 /459-535)i.
Let now P2G L 2, .... n}) c IP({ 1, 2, .... n}) be a subset with elements of cardinality greater than or equal 
to 2/ 'The following definition of nested set of P2G1. 2, .... n}) is a special case of the more general definition 
given in (De Concini C. and Procesi C. 1995 /459 - 535)'.
Definition 9.6 (nested set)
Let n > 2. A subset S of P2GL 2, .... n}) is a nested set iff it contains {1. 2, ... , n} and for any 
I. J e S we have that either I c J or J c I or I n J = 0 . By ^(mk) it is denoted the set of the nested sets 
S of F^GL 2, .... n}) such that | S | = k.
It was also observed a bijective correspondence between ^(mk) and the set 12(11 + k - 1, k) of 
partitions of the set {1. 2, .. , n + k - 1} into k blocks of cardinality greater than or equal to 2: 'can be obtained 
as a particular case of the bijection between rooted trees on n leaves and partitions, proven in (Erdos P.L. and 
Szekely L. 1989)'. Moreover, in accordance with (Gaiffi G. 2015) and for fixed n,'the cardinalities |'^2(n.k)| = 
|T2(n + k - 1, k)| are the Ward"
*
 numbers (WardM. 1934): see the sequence A134991 of OEIS :) and can be read 
along the diagonals in the table of the 2-associated Stirling numbers of the second kind (Comtet L. 1974). They 
can as well be interpreted as the face numbers in the tropical Grassmannian G(2, n + 1), i.e. the space of 
phylogenetic trees Tn+i (Billera L.J. et al. 2001; Speyer D. and Stunnfels B. 2004; FeichtnerE. 2006).
9.5. Paraconsistent sets
'It is known from Russell's paradox^ that the first-order axiomatization of the naive set theory (defined in 
natural language, without using any axiomatics) of Cantor and Frege is inconsistent in classical logic
*
 ... Naive set â¢ * * Â§ **
 

367
theory is thus one of the simplest examples of an intuitively correct theory leading so readily and desperately to 
such a contradiction ... Although it fortunately appeared that these contradictory sets are by no means essential 
ocfor the foundations of mathematics, certain logicians have expressed a desire that such inconsistent objects be 
handled and studied within suitable theories, namely para(in)consistent ones .. To end this introduction, let us 
indicate how such a membership ambiguity can easily be concocted within a classical context' (Libert T. 2005). 
Some considerations given in the last work are cited below.
Let % be an universum consisting of a 'collection U of objects together with a topology on it which might 
materialise some notion of indiscemibility on U. ' The following two definitions were introduced (for any x e U 
and S g U): x 6uS -A-x e S and x gu S -A-x e UâS. where (â ) is the closure operator on U. 
Obviously: x e S =â¢ xeS and x 6uU - S o x Â£u S (for some x e U and S c U. Inconsequence, 
the following conjunction becomes possible: xeS and xg-S (for some x eU and S c U).'Note that 
the non-contradictory subsets of U nothing but the clopen subsets^ in Moreover, "eu, Â£u are actually not 
independent ... it is hopeless to define a model for paraconsistent set theory assuming that ei .gr c U x 
IP(U). not of U x U. ... Nevertheless, we have a situation here in which a paraconsistent set can already be 
thought of as a covering pair of closed subsets of the universe'. Some structures for a paraconsistent set theory 
are given below (Libert T. 2005).
Let M be a set and IPp(M) be the set of ordered pairs of subsets covering M, defined as follows.
IPp(M) =df { (X.Y)/X u Y = M ;
By T1Z it is denoted the structure of a paraconsistent set theory, formally defined below.
7U âdf (M , [â ];$â ).
where: [â ].<: M IPp(M) is an extension function, which applies to any a eM the ordered pair of its 
positive [a] .^ and fa negative [a] .^- extension, i.e. [a].^ =df ([a]- . [a] .nz-)-
In accordance with (Libert T. 2005), 'this conception of a paraconsistent set leads naturally to the related 
following notion of (strong) extensionality'.
a V (([a].^ = [b].^) a ([a].<- = [b].<_) a = b)
<1,011V1
According to the last expression, the above structure TR is strongly extensional if the extension function 
[ â  ] .< is injective and hence M 'can be identified with a subset of IPp(M). namely the range of [â ] .<.
The following two definitions were introduced (for any a.b e M): a e ,/ b Odf a e [b] and 
ae.<b Odf a e |bI ;., . Hence, the obtained structure T1Z was equivalently defined by the following two 
binary relations on M: T1Z =df (M; e<. g.<), where u = M x M. A more formal treatment is 
omitted: left to the reader.
9.6. Forcing sets, non well-founded sets and stationary sets
It is first introduced below the notion of a forcing set (Sujana J. G. and Rajalaxmi T.M. 2020). Here is 
considered a graph model of an electric power system, where a vertex represents an electrical node and an edge 
represents a transmission line joining two electrical nodes. A set S g V is a dominating set of G if every vertex 
in V - S has at least one neighbor in S. The minimum cardinality of a dominating set of G is its domination 
number, denoted by y(G) (Ferrero D. et al. 2011).
* Bertrand Russell (1872 - 1970), Georg Ferdinand Ludwig Philipp Cantor (1845 - 1918), Friedrich Ludwig Gottlob Frege (1848 - 1925)
A clopen set in a topological space is a set which is both closed and open (in short: clopen}. See: The Free Encyclopaedia, The 
Wikimedia Foundation, Inc.

368
'In a graph G. suppose S is a subset of vertices which are all colored and the rest of the vertices are not 
colored. The dynamic coloring of the vertices is defined as. at each discrete time interval, a colored vertex forces 
exactly one vertex which is not colored to be colored. This process continues to make all the vertices colored. 
The subset S is called a forcing set of G. The forcing number C( G ) of a graph G is the minimum cardinality of a 
set S with colored vertices which forces the set V(G)* * to be colored after some time. If the subset S has an 
additional property that it induces a subgraph of G whose components are all edges, then S is called a ^P:-forcing 
set of G. The minimum cardinality of a Pi-forcing set of G with a is called the Pj-forcing number of G and is 
denoted by CPit G). Analogous to the Pj-forcing set, we define set S as a P3-forcing set if all components of S are 
vertex disjoint paths on 3 vertices. The minimum cardinality of a Pa-forcing set is called the Pi-forcing number of 
G and is denoted by CPa(G). We compute the Pa-forcing number and Pa-forcing number of the triangular grid 
network" (Sujana J. G. and Rajalaxmi T.M. 2020).
' V(G) denotes the set of all vertices of G.
T 't he PpGFpath graph corresponding to a graph G has for vertices the set of all paths of length k in G. Two vertices are joined by an edge 
if and only if the intersection of the corresponding paths forms a path of length k 1 in G, and their union forms either a cycle or a path of 
length k + 1. Path graphs, introduced in (Broersma H.J. and Hoede C. 1989) are a generalisation of line graphs (the 1st can be obtained 
for k = 1). Graphs will be presented in the next Part 11 of this book.
* Dmitry Semionovitch Minmanoff (1861 - 1945)
Â§ Eg. see: (Mirimanoff D. 1917): 'there was 'first stated the fundamental difference between well-founded and non-well-founded sets. He 
called sets with no infinite descending membership sequence well founded and others non-well-founded'.
1 * Peter Henry George Aczel, bom 1941.
See: The P'ree Encyclopaedia, The Wikimedia Foundation, Inc.
See also: Grausi R., Non well-founded set theory. The Pantheon-Sorbonne University, 7pp: 
file:///C:/Users/user/Downloads/non%20 well-founded0 o20sets.pdf.
The following definition was introduced in (Ferrero D. et al. 2011).
Definition 9.7 (closure of a subset of vertices')
For a graph G and a set T c V(G). the closure of T in G denoted by Co(T) is recursively defined as 
follows: Start with Co(T) = T. As long as exactly one of the neighbors of some element of Co(T) is not in 
Cg(T) . add that neighbor to Co(T). If Co(T) = V(G) at some stage, then T is a zero forcing set of G. A 
forcing set of minimum cardinality is called the forcing number of G and is denoted by 2(G).
The notion of a Pa - forcing set of G is introduced as follows (Sujana J. G. and Rajalaxmi T.M. 2020).
Definition 9.8 (P? - forcing set of G)
Let G be a graph. For a set K of independent Pa - paths in G . define T to be the set of all end vertices of 
edges in K. Proceeding as in Definition 9.7. if at some stage CG(T) = V(G) then K is called a P: -forcing set 
of G. The minimum cardinality of a Pa - forcing set of G is the P: - forcing number of G. denoted by 2P?(G).
In accordance with (Sujana J. G. and Rajalaxmi T.M. 2020). an additional condition on a forcing set that it is 
composed of paths of length 2 or 3 ensures more reliability. The next considerations of this work are related to 
the study of Pa - and P3 - forcing problems in triangular grid networks', left to the reader.
'Non-well-founded set theories are variants of axiomatic set theory that allow sets to be elements of 
themselves and otherwise violate the rule of well-foundedness. In non-well-founded set theories, the foundation 
axiom of ZFC is replaced by axioms implying its negation. The study of non-well-founded sets was initiated 
by Dmitry MirimanofP in a series of papers between 1917 and 1920, in which he formulated the distinction 
between well-founded and non-well-founded sets5; he did not regard well-foundedness as an axiom. Although a 
number of axiomatic systems of non-well-founded sets were proposed afterwards, they did not find much in the 
way of applications until Peter Aczel's" hyperset theory P (Aczel P. 1988). Some considerations related to the 
last work are given below^f

369
In accordance with the last work, 'a non-well-founded set is an extraordinary set in the sense of Mirimanoff. 
Such a set has an infinite descending membership sequence; i.e. an infinite sequence of sets, consisting of an 
element of the set, an element of that element, an element of that element of that element and so on ad infinitum. 
What is extraordinary about such a set is that it would seem that it could never get formed: for in order to form 
the set we would first have to form its elements, and to form those elements we would have to have previously 
formed their elements and so on leading to an infinite regress ... If non-well-founded sets are not needed for the 
development of mathematics then it may well seem natural to leave them out of consideration when formulating 
an axiomatic basis for mathematics. Sometimes a stronger view is expressed. According to that view there is only 
one sensible coherent notion of set. That is the iterative conception in which sets are arranged in levels, with the 
elements of a set placed at lower levels than the set itself. For the iterative conception only well-founded sets 
exist and FA and the other axioms of ZFC are true when interpreted in the iterative universe of pure sets' (Aczel 
P. 1988).
According to the above work, 'there has been yet one more reason . .. why FA has been routinely included 
among the axioms of axiomatic set theory. This is the fact that the cumulative hierarchy of the iterative universe 
has an enticingly elegant mathematical structure. This structure was already revealed by Mirimanoff and over the 
years it has been powerfully exploited by set theorists in a great variety of model constructions. There is a natural 
reluctance to forgo the pleasure of working within this structure'.
The last study was stimulated by some earlier works (concerning non-well-founded sets, mathematical theory of 
concurrent processes and situation theory), such as: (Boffa M. e.g. 1969), (Milner R. 1980) and (Barwise K.J. 1986), 
respectively*. In particular, there was proposed (in Part I of the last work) a modified ZFC axiom system, denoted 
by 'ZFC"+ AFA', where ZFC is the system ZFC without FA (the foundation axiom)', replaced by AFA (,4wh- 
Foundation Axiom). This modified ZFC system is presented below.
Â§ Some basic elements A graph theory will be presented in the next part of this book.
' Robin Milner (1934 - 2010). Maurice Boffa (1939 - 2001). Kenneth Jon Barwise (1942 - 2000).
t See: e.g. Figure 5.1 of Subsection 5.2.
* In fact: N u {0}.
As an introduction to AFA, it was considered a pictural representation of sets (different from Venn diagrams!), 
e.g. using ' the standard set theoretical representation of the natural numbers!, where the natural number n is 
represented as the set of natural numbers less than n'
Example 9. 3 (pictural representation of sets)
As an example, the natural number 2 can be represented by the set {0,1}, 3 by the set {0,1,2}, etc. Any such 
representation is related to some oriented tree. e.g. the corresponding tree associated with 2 is shown in 
Figure 9.5(a) below. A more general, called 'pointed graph representation' is shown in Figure 9.5(b). In a 
similar way. the pointed graph representation associated with 3 is shown in Figure 9.5(c): see (Aczel P. 1988). â¡
Figure 9.5
(c)
Let X 0 be a set and p c X x X . Here, in accordance with Figure 9.5, any pointed graph
*
 
G = (X, p) is defined as follows: (x.y) e p iff x is a parent of y (or equivalently: y is a child of x).

370
Provided there is no ambiguity and for convenience, in the next considerations ordered pairs (x.y) will be 
denoted by (nh fit +1): the last edge is also written by it; n, +i . where n, +1 is the child of fit 
(i e N u {0}). Any path (of finite or infinite length) in G is considered as a sequence no-> iii-> n2-> ... of 
nodes no. ni. n2, ... linked by edges (no. m), (ni. n2), ... (Aczel P. 1988). According to this work, the following 
basic notions were also introduced:
â¢ pointed graph (a graph together with a distinguished node called its point', in diagrams always located at the top),
â¢ accessible pointed graph (apg\ if for any node n there is a path from the point no to the node n).
â¢ rooted tree (an accessible pointed graph having always unique path from the point n0 to the node n: the point n0 
is the root of the tree).
â¢ decoration of a graph (an assigmnent of a set to each node of the graph in such a way that the elements of the 
set assigned to a node are the sets assigned to the children of that node) and
â¢ picture of a set (an apg which has a decoration in which the set is assigned to the point}.
In accordance with the above approach, there is only one way to decorate the apgs.
Example 9. 4 (decoration of a graph)
Consider the oriented graph of the above Figure 9.5(c). The obtained decoration is shown in Figure 9.6 
below. â¡
node label children (sets)
0 
0
{0} 
{0.1} 
{0.1.2}
Figure 9.6
The following definition was introduced in (Aczel P. 1988).
Definition 9.9 (well-founded graph)
A graph G is said to be well-founded one if it has no infinite path.
As an example, the graph G of the above Figure 9.6 is a well-founded one. The following property is 
satisfied.
Lemma 9.1 (Mostowski's
*
 collapsing lemma)
* Andrzej Stanislaw Mostowski (1913- 1975).
t A binary relation < is said to be well-founded if it has no infinite descending chains. An infinite descending chain is an infinite sequence 
of elements ao, ab a2, . . . such that ai. à¥¤ < a; for all i.i 0. Note that a well-founded relation cannot be reflexive. As an example, the less-than 
â <' and the greater-than '>' binary relations, defined in N to {0}, are well-founded and not well-founded ones, respectively. See: Myers 
A., Well-founded induction. CS 6110 Lecture 7 (2013) 6 pp: https://www.cs.comell.edu/courses/cs6110/2013sp/lectures/lec07-spl3.pdf.
Every well-founded graph has an unique decoration. â¡
This lemma was proved 'by a simple application of definition by recursion on a well-founded relation^ to 
obtain the unique function d defined so that dn =df {dn' / n âÂ» n'} for each node n of G. The decoration d 
assigns the set dn to the node n'. As a consequence of the above Lemma 9.1: "Every well-founded apg is a 

371
picture of an unique set' and 'Every set has a picture' (Aczel P. 1988). In accordance with the last work, the 
following anti-foundation axiom was introduced.
The Anti-Foundation Axiom
Every graph has an unique decoration.
Corollary 9.2
(1) Every apg is a picture of an unique set.
(2) Non- well-founded sets exist. â¡
Let G be a labelled graph, i.e. 'a graph together with an assignment of a set at of labels to each node a'. 
The labelled decoration of G is introduced as an assigmnent d of a set da to each node* a such that: 
da =df {db /a -> b} u at.
* Graph vertices are traditionally denoted by: x, y, etc. or equivalently by: a, b, etc.
T For convenience, e.g. the sets: aM , bM, etc. are sometimes denoted also by a, b, etc.
1 Provided there is no ambiguity and also for convenience wrt the above presented work, the logical negation symbol was used to 
represent an equivalence relation on Vo.
The Labelled Anti-Foundation Axiom
Every labelled graph has a unique labelled decoration.
The following notions are also introduced (Aczel P. 1988): a system ('a class M of nodes together with a class 
of edges, consisting of ordered pairs of nodes ... write a â> b if (a,b) is an edge of M'). Provided there is no ambiguity 
and for convenience, 'M' was also used to refer the system. The system M was also required to satisfy the 
following condition: the class a\, =df {b e M / a-> b} of children of a is a sett The following binary relation 
was also introduced: a = b iff 'there is an apg that is a picture of both a and b'.
Definition 9.10 (bisimulation)
A binary relation p on the system M is a bisimulation on M if p c p+ , where for a, b e M: 
ap b a.i: I v E xpy) a ( V 3 xpy).
x e aM y e bM 
y G bM x e aM
Any system map G â> M is said to be Al - decoration of G and M is a complete system if every graph
has an unique decoration. Some notions used in construction of a complete system are cited below (Aczel P. 
1988). Every apg is of the form Ga where G is a graph and a is a node of G. 'The class of apgs form a
system Vo with edges (Ga, Gb) whenever G 
is a graph and a is a node of G'. The notion of a strongly
extensional quotient of Vo was introduced as follows: rtc : Vo -> Vc (Acz.el P. 1988): it was shown that for 
each system M there is an unique system map M Vc. According to Theorem 3.4 of the last work, the 
following are equivalent for a system M: For any system M'there is an unique system map M' -> M, M is 
complete and M = Vc (the symbol 's' is used here to denote the isomorphism relation between apgs). In 
accordance with the last considerations, 'the system Vo of apgs has an edge (Ga, Gb) whenewer a -> b in the 
graph G'.
Definition 9.11 (regular bisimulation)
A bisimulation relation ~ on Vo is a regular bisimulation relation if:
(1) 
~ is an equivalence relation on Vo,
(2) 
Ga = G'a' =o Ga ~ G'a' and
(3) 
a(i = a'c =a Ga ~ Ga' (for a, a' e G).

V
372
In general, the ordinary anti-foundation axiom (AFA) may be considered as a special case 'by treating 
ordinary graphs as labelled graphs with an empty set of labels attached to each node'. As an extension, the notion 
of system was also considered 'as a class of nodes together with a class of edges consisting of ordered pairs of 
nodes' (Aczel P. 1988). Some variants of AFA were presented in the next Part 11 of this work (in particular, variants 
using a regular bisimulation). Some applications of AFA (e.g. such as: "fixed points of set continuous operators, the special 
final coalgebra theorem and an application to communicating systems) were illustrated in the last Part III of this work: 
left to the reader.
Stationary sets are important tools in proofs of properties in sets of uncountable cardinality. Some basic 
notions are cited below*.
* See: T/ie Eree Encyclopaedia. The Wikimedia foundation. Inc., see also: (Vermeulen J. 2020).
t Is an abbreviation from: 'closed' and 'unbounded'.
See: Definition 5.25 of Subsection 5.4.
Â§ Geza Fodor (1927 - 1977}
" Stanislaw Marcin Ulam (1909 - 1984), Robert Martin Solovay (bom 1938).
Topology, is concerned with the properties of a geometric object that are preserved under continuous 
deformations.
Order topology, a certain topology that can be defined on any totally ordered set.
Limit ordinal', an ordinal number that is neither zero nor a successor ordinal, i.e. an ordinal /. > 0 is a limit 
ordinal iff it has no immediate predecessor.
Club1' set. a subset of a limited ordinal that is closed under the order topology and is unbounded relative to 
the limit ordinal.
Stationary set'. A set that is not too small in the sense that it intersects all club sets.
Let A be a partially ordered set (in short: poset) and B g A. The subset B is said to be cofinal in A if 
the following condition is satisfied: V 3 
( a < b ).
aeA bcB
The cofinality cf(A) is the least of the cardinalities of the cofinal subsets of A.
A regular cardinal is a cardinal nmnber that is equal to its own cofinality.
Let k be a cardinal of uncountable cofinality, S c k and S intersects every club set in k , then S is 
called a stationary set. The last set is a bi stationary if both S and k - S are stationary.
Lemma 9.1 (Fodor's lemma)
*
If k is regular, uncountable cardinal, S c k is stationary and f: S -> k is regressive (i.e. f(oc) < a for 
any a e S - {0}) then there is some y and some stationary So c S such that f(oc) = y for any a e So. â¡
Theorem 9.1 (Ulam S.M. andSolovay R.M.)
**
Every stationary subset of k is the union of k disjoint stationary subsets. â¡
10. Bunch Theory
'Perhaps because set theory is so useful in mathematics, computer science has adopted it for some purposes. 
Sets appear explicitly in some programming languages (e.g. SETL, Pascal), and very commonly in reasoning 
about programs ... A programming language is a set of programs, but we do not specify a language in set * * * Â§ * 

,4(x)
373
notation. Instead, we use a grammar in the form of rewriting rules ... Set theory in its entirety is more powerful 
than necessary for most of computer science ... We may. of course, use only those parts of set theory that are 
useful to us. and ignore the rest .. But the notation of set theory, designed for power we don't want, is 
sufficiently cumbersome that we have tended instead to invent many special notations where a weaker set theoiy 
would have served well. These dissatisfactions lead to propose a set theoiy that has the right power for computer 
science, and that is notationaly more convenient for our purposes than mathematical set theory. The new theory 
called bunch theory, does not exclude set theory, when appropriate, we can form sets of bunches, or bunches of 
sets' (Hehner E.C.R. 1981)
*.
 Some basic notions related to this theory are illustrated belw.
* See also: (Hehner E.C.R. 1984, 1993): Hehner Eric C.R., bom 1947., the
file:///C:/Users/user/Downloads/Eric%20Hehner%20Bunch%201heoryl! o200ryginal.pdf
Is a programming language.
10.1. Basic notions and definitions
Let {1,3.6} be a set containing three integers. The obtained bunch is written as follows: 1.3,6 (i.e. the 
set without curly braces). Obviously, in accordance with the last notation: 'an element and a bunch containing 
only that element are indistinguishable. More generally, a bunch built from other bunches does not retain the 
structure, as does a set whose elements are sets. This corresponds well to Pascal , in which sets of sets are illegal 
... '. The following three bunch axioms were introduced (Hehner E.C.R. 1981).
(Al) There exist bunches that are considered 'elementary'. Each such bunch is called an 
element.
(A2) A predicate p on the elements elements specifies the bunch consisting of those elements 
for which this predicate is true. This bunch is denoted as x S p(x).
(A3) If a and b are bunches then a.b is the bunch consisting the elements of both a and b.
The above three axioms Al, A2 and A3 are called existence, specification and union, respectively. There 
are no other bunches. In accordance with the last work, the null (or empty) bunch and the universal bunch are 
introduced as follows: null =, ir x S false and universe =df I x $ true, respectively. As it was observed, in set 
theory, 'postulating the universal set is inconsistent, leading to paradoxes. But the universal bunch causes no 
problems, and for this reason our specification axiom is simpler . . By choosing a countable universe of 
elements, no bunches of uncountable cardinality can be constructed'.
10.2. Bunch operations
Similarly as in set theory, the following three relations were introduced (Helmer E.C.R. 1981): e (element 
of), c (sub - bunch of) and = (equal to). The binary relation x e a is defined separately, i.e. in accordance with 
the next three possible ways (in which a was constructed):
x e a means
' x = a. if a is an element
- p(x). if a is y $ p(y)
x e b v x e c. if a is b.c.
For any two bunches a and b: a c b iff V (x e a => x e b) and a = b iff (a c b) a (b c a). In 
the case 'when the left operand is an element, the last two relations e and c coincide. For equality, the order 
and multiplicity of elements is irrelevant'. The following example was given in (Helmer E.C.R. 1981).

374
Example 10.1 (bunch name, bunch operations')
The name of a bunch is first written, followed by a colon, followed by the bunch', e.g. a : 1, 3, 6 means that 
whenever a occurs, it stands for 1, 3, 6. In accordace with the last definition, writing e.g. b : 6 , a, 4 is 
equivalent to writing b : 6, 1, 3, 6. 4 which in turn is equivalent to writing b : 1. 3, 4, 6.
Let 'o' be a binary operation on the elements of our universe and X, Y be two bunches. We have: 
XoY =df z ISB 3, (x e X a y e Ya z = xoy). As an example: (1.2) + (10,20) = 11.12.21.22. (1.2) +
10 = 11, 12, 1 + 1 = 2, etc. In accordance with the first two examples, it is assumed that ' + ' has higher 
precedence than 'â¡
In accordance with the last work, the following two applications were also presented: within a programming 
language and as language description. In the first application, it was suggested 'a few of the possible uses of 
bunch within an ALGOL - like programming language. As an example, 'in addition to the notations of the 
specification and union axioms, it seems useful to introduce the notation i to j. for suitable expressions i and j 
to mean the bunch k S i k < j , that is. i. i + 1. ... . j -1. j '. In the second application, the considered 
language was described as a bunch program of strings. CFG* formalism was also discussed (left to the reader).
Context - Free Grammar, see also: the notation technique for context-free grammars'. John Backus (1924 - 2007), Peter Naur (1928 - 
2016).

375
Conclusions
Starting with the classical-oriented theories (concerning propositions, predicates and sets), there were also 
presented and some non-classical systems. And so, the considered here basic theories may be used as a part of 
lectures, predestined at first for computer science students, however it can be useful in other areas, e.g. such as 
system techniques and control, teclmical cybernetics, telecommunication, managing etc. The considered here 
systems may be also useful for any researcher who is interested in the above given area. The expected effects can 
be summarised as twofold. First, thorough knowledge of the sense of using natural deduction methods in 
computer science and second, a possibility of obtaining a knowledge for the purpose of efficient bibliographic 
search in this field of application and also with respect to future scientific investigations and/or practical 
applications.
References
Ackermann W.F., Begriindung einer strengen implication. Journal of Symbolic 
Logic, vol. 21 (1956) 113 - 128.
Ackermann W.F., Zur axiomatik der mengenlehre. Mathematische Annalen, 
Springer, vol.131 (1956) 336-345.
Aczel P.. Non-well-founded sets. Foreword by Jon Barwise. CSL1 (Center for the 
Study of Language and Information). Stanford. Lecture Notes no. 14 (1988) 159pp.
Adams E.W.. The logic of conditionals, an application of probability to deductive 
logic. D.Reidel Publishing Company, Dordrecht, Boston (1975) 155pp.
Aerts D., Description of compound physical systems and logical interaction of 
physical systems. Current Issues on Quantum Logic. Beltrametti E.G. and 
Fraassen B.C. van eds.. Physical Sciences, Dordrecht, Kluwer Academic, vol. 8 
(1981) 381 -405.
Alchourron C.. Gardenfors P. and Makinson Dâ On the logic of theory change: 
partial meet contraction and revision functions. Journal of Symbolic Logic, vol. 
50. issue 2 (1985) 510-530.
Ali M., Tamir D.E., Rishe N.D. and Kandel A., Complex Intuitionistic Buzzy 
Classes. IEEE International Conference on Fuzzy Systems (2016) 2027 - 2034.
Aliev I.M. and Kara Z., Fuzzy system reliability analysis using time dependent 
fuzzy sets. Control and Cybernetics, vol. 33, no. 4 (2004) 653 - 662.
Alodat M., Intuitionistic fuzzy logic applied to real-time traffic: 373odelling and 
optimization (abstract). PhD, University of Craiova (2015) 15pp.
Alur R. and Madhusudan P., Adding nesting structure to words. Journal of the 
ACM. vol. 56. issue 3 (2009) 1 -45.
Anderson A.R., A reduction of deontic logic to alethic modal logic. Mind vol. 67 
no. 265, Oxford Univ. Press (1958) 100 - 103.
Anderson A.R. and Belnap N.D.. Entailment: the logic of relevance and 
necessity. Princeton Univ. Press. Princeton, N.J., vol. 1 (1975).

376
Anderson A.R., Belnap N.D. and Dunn J.M., Entailment: the logic of relevance 
and necessity. Princeton Univ. Press. Princeton, N.J., vol. 2 (1992).
Andre C., The Behaviour of a Petri Net on a subset of transitions. R.A.I.R.O. 
Systems Analysis and Control 17,France (1983) 5 -21.
Andre Dâ Stir les permutations alternees. J. Math. Pures Appl., no. 7 (1881) 167 
- 184.
Anitha K., Gene selection based on rough set applications in computational 
biology. International Journal of Computing Algorithm, vol. 1, issue 2 (2012) 38 
-41.
Arieli O. and Avron A., Reasoning with logical bilattices. Journal of Logic, 
Language and Information, vol. 5 (1996) 25 -63.
Arruda A.L, N.A. I'asiliev: a forerunner of paraconsistent logic. Philosophia 
Naturalis, vol. 21 (1984) 472 - 491.
Asenjo F.G., A calculus of antinomies. Notre Dame Journal of Formal Logic, 
vol.7, no.1(1966) 103 - 105.
Asenjo F.G., Antinomicity and the axiom of choice. To the memory of Stanislaw 
Jaskowski, Logic and Logical Philosophy (1996) 53 - 95.
Asenjo F.G., The general concept of antinomicity. Foundations of Science, 
Dordrecht, Kluwer, vol. 3 (1999) 429 - 465.
Atanassov K.T. and Stoeva S., Intuitionistic fuzzy sets. Proc, of Polish Symp. on 
Interval and Fuzzy Mathematics, Poznan (1983) 23 - 26.
Atanassov K.T., Intuitionistic fuzzy sets. Fuzzy Sets and Systems, vol. 20, no. 1 
(1986) 87-96.
Atanassov K.T., Two variants of intuitionistic fuzzy propositional calculus. 
Preprint 1MMFA1S-5-88, Sofia (1988).
Atanassov K.T. and Gargov G., Elements of intuitionistic fuzzy logic: part I., 
Fuzzy Sets and Systems, vol. 95, no.l (1998) 39 - 52.
Atmanspacher H., Determinism is ontic, determinability is epistemic, Univ, of 
Pittsburgh (2001) 49 - 54.
Aumann G., Kontakt-Relationen. Sitzungsberichte der Bayerischen Akademie der 
Wissenschaften, MathematiscliNaturwissenschaftliche Klasse (1970) 67 - 77.
Avron A., A constructive analysis of RM. Journal of Symbolic Logic, vol. 52, 
no.4 (1987) 939-951.
Avron A., Hypersequents, logical consequence and intermediate logics for 
concurrency. Armais of Mathematics and Artificial Intelligence, vol.4 (1991) 225 
-248.
Avron A., The method of hypersequents in the proof theory of propositional non- 
classical logics. Logic: Foundations to Applications, Hodges Wâ Hyland M., 
Steinhorn C. and Truss J. eds., Oxford Science Publications (1996) 36pp: 
file:///C:/Users/Liser/DocLiments/AVRON%20SURVFY%20PAPFR%201N%200XFURD. 
pdf.
Baaz M. and Zach R., Hypersequents and the proof theory of intuitionistic fuzzy 
logic. In Computer Science Logic (CSL'2000), LNCS, vol. 1862, (2000) 187 - 
201.
Baaz M., Ciabattoni A. and Fermuller C.G., Hypersequent c Journal for Godel 
logics - a survey. Journal of Logic Computation, vol. 13, no. 6 (2003) 835 - 861.

377
Babuska R. and Mamdani E.H., Fuzzy control. Scholarpedia, vol. 3, no.2 (2008) 
14pp: http ://www. scholarpedia.org/article/Fuzzy control
Back R.J.R. and Wright J. von.. Refinement calculus: a systematic introduction. 
In: Graduate Texts in Computer Science, Springer-Verlag, New York (1998) 
519pp.
Badia A., Quantifiers in action: generalised quantification in query. Logical and 
Natural Languages, Springer - Verlag (2009) 74 - 76.
Ball T. and Rajamani S.K., Boolean programs: a model and process for software 
analysis. Tech. Rep. MSR-TR-2000-14, Microsoft Research, 2000, 29 pp.
Baltag A. and Smets S., LQP: The dynamic logic of quantum information. 
Mathematical Structures in Computer Science. Special issue on quantum 
programming languages, vol. 16, issue 3 (2006) 491 - 525.
Baltag A. and Smets S., Complete axiomatizations of quantum actions. 
International Journal of Theoretical Physics, vol.44, issue 12 (2005) 2267-2282.
Barlow R.E. and Proschan F., Statistical theory of reliability and life testing: 
probability models. New York: Holt, Rinehart and Winston, New York (1975) 
290 pp.
Barnum H., Mueller Mâ Ududec Câ Graydon M. and Wilce A., Quantum and 
Jordan-algebraic theories. Single-system characterizations, and Jordan- 
algebraic composites (2014) 39pp: 
http://www.physics.Lisyd.edLi.aLi/~erici:/SQF2014/slides/Howard%20BaniLini.pdf.
Baruah H. K., Fuzzy membership with respect to a reference function. Journal of 
the Assam Science Society, vol. 40, no. 3 (1999) 65-73.
Barwise K.J., Admissible sets and structures. An approach to definability theory. 
Springer - Verlag, Berlin, Heidelberg, New York (1975) 394pp.
Barwise K.J., Situations, sets and the axiom of foundation. Logic Colloquium'84, 
Studies in Logic, North Holland (1986) 21 -36.
Barwise K.J. and Cooper R., Generalized Quantifiers and Natural 
Language, Linguistics and Philosophy 4, (1981) 159-219.
Barwise K.J. and Perry J., Situations and attitudes. The David Hume series. CSL1 
Publications,.Stanford,Calif.Originally publ. Cambridge.Mass. MIT Press (1983) 
352pp.
Baskent C., A quick introduction to dynamic logic. The City Univ, of New York / 
Istanbul Kultur Univ (2010) 21pp.
Bazhanov V. A., The imaginary geometry of N.I. Lobachevski and the imaginary 
logic ofN.A. Vasiliev. Modem Logic, vol. 4 (1994) 148 - 156.
Becker O., Zur logic der modalitaten. Jahrbuch fur Philosophic und 
Phenomenologische Forschung, XI (1930) 497 - 518.
Bednar J., Fuzzy distances. Kybemetika, vol. 41, no.3 (2005) 375 - 388.
Bell J.S., On the Einstein-Podolsky-Rosen Paradox, Physics, vol. 1 (1964) 195 - 
200.
Belnap N.D., A useful four-valued logic. Modem uses of multiple-valued logic, 
Dunn J.M. and Epstein G. eds., Reidel, Dordrecht (1977) 8 - 37.
Belohlavek R., Binary Fuzzy Relations. In: Fuzzy Relational Systems. 
International Federation for Systems Research International Series on 
Systems Science and Engineering, Springer, Boston, MA, vol 20 (2002)

378
181-213.
Benthem J. van.. Questions about quantifiers. Journal of Symbolic Logic, vol. 49 
(1986) 443 -466.'
Berge C.. Graphes et hypergraphes MvmoA.P'ans (1973) 516pp.
Berghammer R. and Guttmann W., A relation - algebraic approach to 
multirelations. In: Mathematics of Program Construction. 12th International 
Conference MPC 2015, Konigswinter, Germany, June 29 - July 1. Proceedings. 
Springer International Publishing, Switzerland. Hinze R. and Voigtlander J. eds. 
(2015) 50-70.
Bemardinello Lâ Pomello L. and Rombola S.. Orthomodular lattices in 
occurrence nets. Applications and theory of Petri nets - 30th International 
Conference. Paris. France. Proceedings. Franceschinis G. and Wolf K.. eds.. 
Springer (2009) 162- 181: 
https://books.google.pl/books?id-a.xosKVLigYq4C&pg-PA165&lpg-PA165&dq=%22rela 
tions+li+and+co%22&soLirce=bl&ots=FKxhRjcf8y&sig=ACfU3UlwP24-Fp6L3Qe2Xm- 
pyqO87e40nw&hl=pl&s2RX&ved.pdf.
Berto F., How to Rule Out Things with H ords: Strong Paraconsistency and 
the Algebra of Exclusion. In: New Waves in Philosophical Logic. New 
Waves in Philosophy, Restall G. and Russell G. eds.. Palgrave Macmillan, 
London (2012).
Best. E. and Devillers R.. Sequential and concurrent behaviour in petri net 
theory. Theoretical Computer Science, vol. 55, issue 1 (1987) 87 - 136.
Bezdek J.C.. Fuzzy partitions and relations and axiomatic basis for 
clustering. Fuzzy Sets and Systems, vol.l. no.2 (1978) 111-127.
Bezdek J.C.. Pattern recognition with fuzzy objective function algorithm. Plenmn 
Press (1981) 256pp.
Bezhanishvili N. and Jongh D. de.. Intuitionistic Logic. Institute for Logic. 
Language and Computation Universiteit van Amsterdam (2006) 57pp: 
https://eprints.illc.uva.n1/200/l/PP-2006-25.te.xt.pdf.
Beziau J-Y., Logica universalis: towards a general theory of logic. Springer 
(2007) 246pp.
Bhattacharyya A., Li B. and Randell B., Time in structured occurrence nets. 
International Workshop on Petri Nets and Software Engineering: PNSE' 16 (2016) 
55pp: 
tile:///C:/Users/user/Dociiments/OCCURRENCE%20NETS%20DALEJ%20PDF.pdf.
Biamonte J. and Perkowski M., Automated Test Pattern Generation for Quantum 
Circuits. McNair Research Journal, vol. 1. issue 1 (2005) 10pp.
Bienvenu M., Herzig A. and G. Qi.. Prime implicate-based belief revision 
operators. A note (2006) 2pp:
http://w w w. lirmm. tr/~meghy n/papers/BieHerQi_EC A10 8 .pdf.
Billera L.J., Holmes S.P. and Vogtmann K..,, Geometry of the space of 
phylogenetic trees. Advances in Applied Mathematics. Elsevier, vol. 27, no. 4 
(2001) 733 -767.
Birkhoff G. and Neumann J. von.. The Logic of Quantum Mechanics. Armais of 
Mathematics vol. 37 (1936) 823 - 843.
Bishop E., Foundations of Constructive Analysis. McGrow-Hill (1967) 370pp.
Bjorvand A.T., Fractal logic. A new approach to intelligent systems theory. 
Project report. The University of Trondheim (1995) 47pp.

379
Black Mâ The elusiveness of sets. Review of metaphysics, vol. 24, no. 4 (1971) 
614-636.
Blizard W.D., Multiset Theory. Notre Dame Journal of Formal Logic, vol. 30, no. 
1 (1989) 36-66.
Boffa M., Sur la theorie des ensembles sans axiome de fondement. Bulletin de la 
Societe Mathematique de Belgique. Societe mathematique de Belgique. 
Bruxelles, Belgique., vol. 31 (1969) 16 - 56.
Bonatti P.A. and Olivetti N., Sequent calculi for propositional nonmonotonic 
logics. ACM Transactions on Computational Logic, vol. 3, issue 2 (2002) 226 - 
278.
Bonferroni C. Sidle medie multiple di potenze. Bolletino Matematica Italiana. vol. 
5 (1950) 267 -270.
Borkowski L. and Slupecki J., A logical system based on rules and its application 
in teaching mathematical logic. Studia Logica 7 (1958).
Bradfield J. and Stirling C.. Modal logics and mu-calculi: an introduction. Univ, 
of Edinburgh,4Ipp: http://www.dis.uniromal .it/~degiacom/didattica/semiiigsoft/SIS05- 
06/materiale/3-servizi/altro%20materiale/bradfield-stirling-HPA-mu-intro.pdf. See also: 
Bergstra J.A. , Ponse A. and Smolka S.A. eds.. Handbook of process algebra. 
Elsevier (2001) 1329pp.
Bradistilov G., High level mathematics .Part III, Technika, Sofia (1961) 422pp.
Brady R.T., Universal logic. Stanford. Centre for the Study of Language and 
Information: CSLI Publications (2006) 346pp.
Brains G.W., Reseaux de Petri: Theorie et Pratique (G.W. Brains denote name of 
collective).Tome I: Theorie et analyse. Masson, Paris (1983)121 - 147.
Bratiner T., Introduction to Linear Logic. Basic Research In Science. BRICS 
Lecture Series LS966, Centre of the Danish National Research Foundation, 
Technical Report (1996) iiiv + 55pp.
Breuer M.A. and Friedman A.D., Diagnosis and Reliable Design of Digital 
Systems. Pitman,London (1977)36 - 97.
Brodie M.L. and Mylopoulos J. eds.. On knowledge base management systems: 
integrating artificial intelligence and database technologies. New York, 
Springer-Verlag (1986) 660pp.
Broersma H.J. and Hoede C.. Path graphs. Journal of Graph Theory, John Wiley 
& Sons. vol. 13 (1989) 427 - 444.
Bronstein I.N., Semendjajew K.A., Musiol G. and Miihlig Hâ Taschenbuch der 
Mathematik. Verlag Harri Deutsch (2001) 1149pp.
Brouwer, L. E. J., On the Foundations of Mathematics. Thesis. Amsterdam 
(1907). English translation in Heyting A. ed. (1975) 11 - 101.
Brown C. and Gurr D., A categorical linear framework for Petri nets. In: 
Proceedings of the 5th LICS Symposium, IEEE Press (1990) 208 - 218.
Bull R. and Segerberg Kâ Basic modal logic. Gabbay D. and Guentlmer F. eds.. 
Handbook of Philosophical Logic, vol.2: Extensions of Classical Logic. Reidel. 
Dordrecht (1984) 1 - 88.
Burgess J.P.. Philosophical logic. Princeton University Press (2009) 153pp.
Cantor G.. Uber eine Eigenschaft des Inbegriffes alter reellen algebraischen 
Zahlen. Journal fur die reine und angewandte Mathematik, vol. 77 (1874) 258 -

380
262.
Cantor G.. Ein Beitrag zur Mannigfaltigkeitslehre. Journal fur Reine und 
Angewandte Mathematik. vol. 84 (1878) 242 - 258.
Cardone F. and Hindley J.R.. History of Lambda-calculus and Combinatory 
Logic. Swansea Univ.. Mathematics Depart.. Research Report no. MRRS-05-06 
(2006) 93pp.
Carnap R.. Einfuhrung in die symbolische Logik, mit besonderer 
Beriicksichtigung ihrer Anwendungen. Springer-Verlag. Wien (1954) 209pp.
Carson J., Modal logic. The Stanford Encyclopaedia of Philosophy, Zalta E.N. 
ed.. The Metaphysics Research Lab at the Center for the Study of Language and 
Information, Stanford University. Stanford. CA (1995) 16pp.
Cattaneo G.. Chiara M.L.D., Giuntini R. and Paoli F., Quantum logic and 
nonclassical logics. Semantic Scholar, University di Milano - Bicocca. 98pp: 
https://pdfs.senianticscholar.Org/9e4a/2d6900i:ei:7671dd68adc5de6c44aa33858a9.pdf.
Cayley A... On the partitions of a polygon. Proc. Lond. Math. Soc. 1 (1890) 237 - 
264. '
Chang C.-L. and Lee R.C.-T., Symbolic logic and mechanical theorem proving.
Academic Press, New York.San Francisco.London (1973) 358pp.
Chaudhan A., Fuzzy clustering. Technology. Health & Medicine (2013) 18pp.
http s: //w w w. slideshare, net/Akshay Cha Lidhari2/fuzzy -dm
Chaum D.L., Untraceable electronic mail, return addresses and digital 
pseudonyms. Programming Techniques and Data Structures. Technical Note. 
Rivest R. ed.. Communications of the ACM, vol.24, no.2 (1981) 84 - 88.
Chen Z-H., He H-C.and Mao M-Y., Exploration of fractal and chaos logics based 
on universal logic. National Natural Science Foundation of China. Grant No.
60273087 (2010) llpp: https://www.sinoss.net/qikan/Liploadfile/2010/1130/1375.pdf.
Chiri(a C.. A completeness theorem for three-valued temporal predicate logic. 
Annals of the University of Craiova. Math. Comp. Sci. Ser., vol.35, (2008) 41 - 
53.
Choquet G., Theory of capacities. Annales de ITnstitut Fourier, vol. 5 (1953) 131 
-295.
Church A., Un unsolvable problem of number theory. Amer. Journal Math., no. 58 
(1936) 345 -363.
Church A., The Calculi of Lambda Conversion. Princeton Univ.Press. Princeton, 
New Jersey. U.S.A. (1941) 19pp.
Church A., The weak theory of implication, Kontrolliertes Denken, Aber, 
Munchen (1951) 22-37.
Ciabattoni A., A Proof-theoretical Investigation of global intuitionistic (fuzzy) 
logic. TU Wien, Springer-Verlag (2004) 23pp.
Ciabattoni A. and Metcalfe G.. Bounded Lukasiewicz logics. Mayer M.C. and 
Pirri F. eds.. TABLEAUX 2003, Lecture Notes in Computer Science, vol. 2796, 
Springer (2003) 32-47.
Cignoli. R.. Esteva. Fâ Godo. Lâ and Torrens. A., Basic logic is the logic of 
continuous t-norms and their residua. Soft Computing, 4 (2000) 106-112.
Cintula P.. Navara Mâ Compactness of fuzzy logics. Fuzzy Sets and Systems, vol. 
143 (2004) 59-73.

381
Cintula P., Fermiiller C.G., and Noguera C., Fuzzy logic. The Stanford 
Encyclopaedia of Philosophy, Zalta E.N. edâ The Metaphysics Research Lab at 
the Center for the Study of Language and Information, Stanford University, 
Stanford, CA (2017) 17pp.
Clark H.H. and Brennan S.E., Grounding in communication', from Perspectives 
on socially shared cognition. Resnick L.B., Levine J.M., and Teasley S.D. eds., 
Washington Psychological Association (1991) 127 - 149.
Cocchiarella N.B., Notes on deontic logic (based on course on modal logic). State 
Univ, of California, San Francisco (in the late 1960s) 19pp.
Cockett J.R.B. and Seely R.A.G., Weakly distributive categories. Journal of Pure 
and Applied Algebra, Elsevier, vol.114, issue 2 (1997) 133 - 173.
Coecke B., Structure, logicality and sense in quantum theory (a quick draft version 
of a course, Univ, of Oxford, 23pp:
http://www.cs.ox.ac.uk/people/bob.coecke/SLS.pdf.
Coker D., Fuzzy rough sets are intuitionistic L-fuzzy sets. Fuzzy Sets and 
Systems, vol. 96, no. 3 (1998) 381 - 383.
Colmerauer A. and Roussel Pâ The birth of Prolog. Histoiy of programming 
languages 11, ACM, New York (1996) 331 - 367.
Comtet L., Advanced combinatorics: the art of finite and infinite expansions. 
Dordrecht, Boston, D. Reidel Pub. Co. (1974) 343pp. / Springer Science & 
Business Media (2012) 343pp.
Comelis, C. and Deschrijver G., The compositional rule of inference in an 
intuitionistic fuzzy logic setting. Proceedings of the 13th European Summer 
School in Logic, Language and Information, Striegnitz K. ed., ESSLLI'2001 
(2001) 83 -94.
Comelis C., Deschrijver G. and Kerre E.E., Implication in intuitionistic fuzzy and 
interval - valued fuzzy set theory: construction, classification, application. 
International Journal of Approximate Reasoning, Elsevier, vol. 35 (2004) 55 - 95.
Craus M., Birlcscu V.S. and Agop M., Fractal aspects in classical parallel 
computing. Computers, Multidisciplinary Digital Publishing Institute, vol. 5, issue 
19 (2016) 1-17.
D'Alfonso D.. Generalised quantifiers: logic and language. Logic and 
Philosophy Science, vol. 9, no. 1 (2011) 85 - 94.
Da Costa N.C.A., On the theory of inconsistent formal systems. Notre Dame 
Journal of Formal Logic, vol. 15, no. 4 (1974) 497 - 510.
Da Costa N.C.A. and Wolf R.G., Studies in paraconsistent logic 1: the dialectical 
principle of the unity of opposites. Philosophia, Springer, vol. 9 (1980) 189 -217.
Da Costa N.C.A. and Wolf R.G., Studies in paraconsistent logi II: Quantifiers 
and the unity of opposites. Revista Colombiana de Matematicas, vol. 19 (1985) 59 
-67.
Dan S., Kar M.B., Majumder S., Roy B., Kar S. and Pamucar Dâ Intuitionistic 
type 2 -fuzzy set and its properties. Symmetry, MDPI (2019) 18pp.
Das R., Mishra D. and Mishra S., Rough set applications for the classification of 
software industries using rule based approach. International Journal of Computer 
Applications, vol. 175 (2017) 26 - 28.
Davenport H. and Hasse H., Die Nullstellen der Kongruenzzetafunktionen in 
gewissen zyklischen Fallen. (On the zeros of the congruence zeta-functions in 

382
some cyclic cases). Journal fur Reine und Angewandte Mathematik 172 (1935) 
151-182, in German.
Davis M. and Putnam H., A computing procedure for quantification theory. 
Journal Assoc. Comput. Mach., vol. 7, no. 3 (1960) 201 - 215.
De Cock M. and Kerre E., Why fuzzy T- equivalence relations do not resolve the 
Poincare paradox and related issues. Fuzzy Sets and Systems, vol. 133 (2003) 
181-192.
De Cock M., Comelis C. and Kerre E.E., Fuzzy rough sets: the forgotten step. 
IEEE Trans, on Fuzzy Systems, vol. 15, no.l (2007) 121 - 130.
De Concini C. and Procesi C., Wonderful models of subspace arrangements, 
Selecta Mathematica, Springer, vol. 1 (1995) 459-494.
De Concini C. and Procesi C., Hyperplane arrangements and holonomy 
equations. Selecta Mathematica, Springer, vol. 1 (1995) 495 - 535.
De Luca A. and S Termini S., A definition of non probabilistic entropy in the 
settings of fuzzy set theory. Information and Control, vol. 20 (1972) 301-312.
De Paiva V., Categorical multirelations, linear logic and Petri nets (draft). 
Technical Report no. 225, Univ, of Cambridge (1991) 31pp.
Delgado M., Sanchez D. and Vila M. A., Fuzzy cardinality based evaluation of 
quantified sentences. International Journal of Approximate Reasoning, vol. 23, 
no.l (2000) 23 -66.
Detyniecki M., Lesot M-J. and Moncuquet P., Intuitionistic fuzzy tautology 
definitions for the validity of intuitionistic fuzzy implications: an experimental 
sstudy (2014) 
12pp: http://www-poleia.lip6.fr/~marcin/web/wp-i;ontent/paperi;ite-
data/pdf/Detyniecki_lS_2014.pdf.
Deutsch D., Quantum theory, the Church -'luring principle and the universal 
quantum computer. Proc. Royal Society, London, A400, vol.97 (1985).
Dhar M., Cardinality of fuzzy sets: An Overview. International Journal of Energy, 
Information and Communications, vol. 4, issue 1 (2013) 15 - 22.
Di Cosmo R. and Miller D., Linear logic. The Stanford Encyclopaedia of 
Philosophy, Zalta E.N. ed.. The Metaphysics Research Lab at the Center for the 
Study of Language and Information, Stanford University, Stanford, CA (2016) 
9pp.'
Diamond J., Pedrycz W. and McLeod Dâ Fuzzy J-K flip-flops as computational 
structures: design and implementation. IEEE Trans, on Circuit and Systems - II: 
Analog and Digital Signal Processing, vol. 41, no. 3 (1994) 215 - 226.
Dijkstra E.W., A Discipline of Programming. Englewood Cliffs, Prentice Hall 
Inc. (1976) 217pp.
Dimitrescu D., Lazzerini B. and Jain L.C., Fuzzy sets and their application to 
clustering and training. The CRC Press, International Series on Computational 
Intelligence. Boca Raton, London, New York, Washington D.C. (2000) 622pp.
Dubois D., Gottwald S., Hajek P., Kacprzyk J. and Prade Hâ Terminological 
difficulties in fuzzy set theory - the case of "intuitionistic fuzzy sets." Fuzzy Sets 
and Systems, vol. 156 (2005) 485 - 491.
Dunn, J. C., A fuzzy relative of the ISODATA Process and its use in detecting 
compact well-separated clusters. Journal of Cybernetics, vol.3, no. 3 (1973) 32Â­
57.
Dunn J.M., Intuitive semantics for first-degree entailments and 'coupled trees'.

383
Philosophical Studies 29 (1976) 149 - 168.
Dunn J.M. and Restall G.. Relevance logic. http://conseqLiently.org/papers/rle.pdf, 
136pp.
Dvorak A. and Holcapek M., Fuzzy quantifiers: from Zadeh's fuzzy 
quantification to theory of fuzzy quantifiers. FSTA: The Fourteenth Int. 
Conference on Fuzzy Set Theory and Applications (2018) 57pp.
Eichelberger E.B., Hazard detection in combinational and sequential switching 
circuits. IBM J.Res.Develop.,vol.9 (1965) 90 - 99.
El-Hakeim K. and Zeyada F., Comments on some versions of intuitionistic fuzzy 
propositional calculus due to K. Atanassov and G. Gargov. Fuzzy Sets and 
Systems, vol. 110, no. 3 (2000) 451 - 452.
El-Naschie M.S., Computational fractal logic for quantum physics and 
cosmology. American Journal of Astronomy and Astrophysics, vol.4, issue 4, 
(2016) 42-53.
Encyclopedia of Mathematics, Kluwer Academic Publishers (2002): 
https://www.encyclopediaofmath.org/index.php/Main_Page.
Erdos P.L. and Szekely L., Applications of antilexicographic order. I. An 
enumerative theory of trees. Advances in Applied Mathematics, Elsevier, vol. 10, 
no. 4 (1989) 488-496.
Ervin J.C. and Altekin S.E., Techniques for developing large scale fuzzy logic 
systems. 12'11 Int. Conference on Information Processing and Management of 
Uncertainty in Knowledge-Based Systems, IPMU'08 proceedings, Magdalena L., 
Ojeda-Aciego M. and Verdegay J.L. (eds), Malaga, Spain (2008) 806 - 811.
Erwig M., Sclmeider M. and Girting R.H., Temporal objects for spatio - temporal 
data models and a comparison of their representations. International Workshop 
on Advances in Database Technologies. LNCS, vol. 1552, Springer (1998) 454 - 
465.
Eslami E., An algebraic structure for intuitionistic fuzzy logic. Iranian Journal of 
Fuzzy Systems, vol. 9, no. 6 (2012) 31-41.
Etchemendy J., The concept of logical consequence.Cambridge.Mass. Harward 
Univ. Press (1990) 174pp. Also in: CSL1 publications (1999).
Feichtner E., Complexes of trees and nested set complexes. Pacific Journal of 
Mathematics, vol. 227, no. 2 (2006) 271-286.
Ferrero D., Varghese A. and Vijayakumar A., Power domination in honeycomb 
networks. Journal of Discrete Mathematical Sciences and Cryptography, vol. 14. 
no. 6 (2011) 521 -529.
Finch P.D., Quantum logic as an implication algebra. Bull. Austral. Math. Soc., 
vol. 2 (1970)~101 - 106.
Fisz M., Probability theory and mathematical statistics. PWN, Warsaw (1969) 
694pp; English translation: Huntington, N.Y., Krieger Pub. Co. (1980) 677pp.
Fischer M.J. and Ladner R.E., Propositional dynamic logic of regular programs. 
Journal of computer and system sciences, vol.18, issue 2 (1979) 194 - 211.
Fitting M., A Kripke - Kleene semantics for general logic programs. Logic 
Programming 2 (1985) 295 - 312.
Fitting M., Kleene's tree valued logics and their children. Proc, of the Bulgarian 
Kleene 90 Conference, 1990,21pp.An enlarged version: NSF Grant CCR- 
9104015.

384
Floyd R.W.. Assigning meanings to programs. Proceedings of the American 
Mathematical Society Symposia on Applied Mathematics, vol. 19 (1967) 19-31.
Ford L.R., Jr. and D. R. Fulkerson D.R., Flows in Networks. Princeton 
University Press. Princeton, New Jersey, (1962) 194pp.
Formal logic. Encyclopedical outline with applications to informatics and 
linguistics. Marciszewski W. ed.. PWN, Warsaw (1987) 472pp,in Polish.
Founnan M.P., Sheaf models for set theory. Journal of Pure and Applied Algebra. 
North-Holland, vol.19 (1980) 91 - 101.
Frege G.. Begriffsschrift, eine der arithmetischen nachbildete Formelsprache des 
reinen Denkens. Halle (1879) 105pp.
Fulton W. and MacPherson R., A compactification of configuration spaces. 
Annals of Mathematics. Princeton University, vol. 139, no. 1 (1994) 183 - 225.
Furusawa Hâ Tsumagari N. and Nishizawa Kâ A non-probabilistic relational 
model of probabilistic Kleene algebras. Springer-Verlag. Berlin, Heidelberg, New 
York, BerghammerR., Moller B. and Struth G. eds. (2008) 110 - 122.
Gabbay D.M., Rodrigues O.T. and Russo A., Revision, acceptability and context: 
theoretical and algorithmic aspects. Springer Science & Business Media (2010) 
386pp.
Gaiffi G.. Nested sets, set partitions and Kirkman - Caley dissection numbers. 
European Journal of Combinatorics, vol. 43 (2015) 279 - 288.
Galindo J.. Carrasco R.A. and Almagro A.Maâ Fuzzy quantifiers with and without 
arguments for databases: definition, implementation and application to fuzzy 
dependencies. Proceedings of 1PMU'O8 (Information Processing and 
Management of Uncertainty in Knowledge-Based Systems). Torremolinos. Spain 
(2008) 227 - 234.
Geldenhuys A.E., van Rooyen H.O. and Stetter Fâ Introduction to the theory of 
relation nets. In: Knowledge Representation and Relational Nets. The Kluwer 
International Series in Engineering and Computer Science, vol. 506, Springer, 
Boston. MA (1999) 193 - 208.
Gentzen G.K.E., Untersuchungen liber das logische Schliessen. Math. Zeitschrift 
39 (1934) 176 -210/(1935)405 -431.
Ghilardi S.. Unification in intuitionistic logic. Journal of Symbolic Eogic. vol. 64, 
issue 2 (1999) 859 - 880.
Ginis A., Non-monotonic logic (2008) 52pp:
http://www.cs.taLi.ac.i1/~annaz/teai:hmg/TAU_winter08/Semmar/ArielLogii:.pdf
Ginsberg M.I., Multivalued logics: a uniform approach to inherence artificial 
inteligence. Computational Inteligence vol.4, no.3(1988) 265 - 316.
Glivenko V., Sur qulques points de la logique de M. Brouwer. Academic Royale 
de Belgique. Bulletins de la classe des sciences, vol. 5, issue 15 (1929) 183-188.
Glottopedia. the free encyclopedia of linguistics. Naumann S. and Wohlgemuth J. 
eds.
Glbckner 1., A framework for evaluating approaches to fuzzy quantification. 
Technical Report TR99-03, Universitat Bielefeld (1999).
Glbckner I. and Knoll A., A formal theory of fuzzy natural language 
quantification and its role in granular computing. W. Pedrycz ed.. Granular 
computing: An emerging paradigm. Studies in Fuzziness and Soft Computing, 

385
vol. 70. Physica-Verlag (2001) 215-256.
Glockner I., Fuzzy Quantifiers in Natural Language: Semantics and 
Computational Models. PhD thesis. Universitat Bielefeld (2004) 465pp.
Glockner I., Fuzzy quantifiers. A computational theory. Springer-Verlag. Berlin, 
Heidelberg (2006) 460pp.
Glockner I., Generalised fuzzy quantifiers and the modelling of fuzzy branching 
quantification. International Journal of Intelligent Systems, vol. 24, no. 6 (2009) 
624 - 648.
Glushkov V.M.. Introduction to Cybernetics Ukranian Academy of Sciences. 
Kiev (1964).in Russian.
Gniewek L. and Kluska J.. Family of fuzzy J-K flip-flops based on bounded 
product, bounded sum and complementation. IEEE Trans, on Systems. Man, and 
Cybernetics, Part B: Cybernetics, vol. 28, no. 6 (1998) 861 - 868.
Gniewek L. and Kluska J.. Hardware implementation of fuzzy Petri net as a 
controller. IEEE Trans, on Systems. Man, and Cybernetics. Part B: Cybernetics, 
vol. 34. no. 3 (2004) 1315 - 1324.
Gniewek L., Modeling and synthesis of control systems using fuzzy interpreted 
Petri nets. ReszOw (2012) 157pp., in Polish.
Goebel G.. An introduction to fuzzy control systems. Public domain, vol.0.4 
(2003).
Gomoliriska A. and Wolski M., Rough inclusion functions and similarity indices. 
Fundamenta Infonnaticae. IOS Press, vol. 133. no. 2/3 (2014) 149 - 163.
Gosaina A. and Dahiyab S., Performance Analysis of Various Fuzzy Clustering 
Algorithms: A Review. In: 7th International Conference on Communication, 
Computing and Virtualization, Thakur College of Engineering and Technology. 
Mumbai. Maharashtra. India. Procedia Computer Science. Elsevier B.V.,vol. 79 
(2016) 100- 111.
Gottwald S.. Many-valued logic. The Stanford Encyclopaedia of Philosophy, 
Zalta E.N. ed.. The Metaphysics Research Lab at the Center for the Study of 
Language and Information, Stanford University. Stanford. CA (2000) 14pp.
Godel K., Die vollstandigkeit der axiome des logischen funktionenkalkills. 
Monatshefte fur Math, und Physik XXXVII (1930) 349 - 360.
Godel K., Zum intuitionistischen aussagenkalkul. Ergebnisse eines 
mathematischen kolloquiums. vol. 4 (1933) 34 - 38.
Grabisch M., Fuzzv integral in multicriteria decision making. Fuzzy Sets and 
Systems, vol.69 (1995) 279-298.
Grabisch M., Nguyen H.T. and Walker E.A., Fundamentals of uncertainty 
calculi, with applications to fuzzv inference. Kluwer Academic.Dordrecht. Boston 
(1995) 346pp.
Grayson, R.J., Heyting-valued models for intuitionistic set theory. In: 
Applications of Sheaves (Lecture Notes in Mathematics, vol. 753), M.P. 
Founnan, C.J. Mulvey, and D.S. Scott (eds.). Berlin: Springer (1979) 402 - 414.
Grinshpan A., The number ofpartitions of a set. Drexel University. Philadelphia. 
Ipp: http://www.matli.dre.xel.edLi/~tolya/partitions.pdf
Grzegorczyk A., The mathematical logic outline.PWN. Warsaw (1969) 505pp..in 
Polish.

386
Gurov D. and Huisman M., Reducing behavioural to structural properties of 
programs with procedures. Theoretical Computer Sciience. Nord-Holland, vol. 
480 (2013)69- 103.
Haar S.. On Occurrence Net Semantics of Petri Nets. RR-3718, 1NR1A. inria- 
00072949 (1999) 36pp: tile:///C:/Users/user/Dociiments/OCCURRENCE%20NET.pdf.
Hamilton W.R., On quaternions, or on a new system of imaginaries in algebra. 
Philosophical Magazine, vol. 25, no. 3 (1844) 489 - 495.
Han Qâ Li Wâ Song Yâ Zhang T. and Wang R., A new method for M4.GDM 
based on improved TOPSIS and a novel Pythagorean fuzzy soft entropy. 
Symmetry, MDP1 (2019) 14pp.
Handbook of philosophical logic. Gabbay D.M. and Guenthner F. eds.. Springer 
Science and Business Media, Dodrecht, Boston. Kluwer Academic Publishers. 
2nd. edition,vol.4 (2002) 431pp.
Handbook of quantum logic and quantum structures. Quantum logic. Engesser 
Kâ Gabbay M. and Lehmann D. eds., Elsevier (2009) 703pp.
Harel D. and Sherman R., Propositional dynamic logic of flowcharts. Information 
and Control, vol. 64 (1985) 119 - 135.
Harel D., Kozen D.C. and Timyn J., Dynamic logic. MIT Press (2000) 476pp.
Hay L.S.. Axiom arization of the infinite-valued predicate calculus. Journal of 
Symbolic Logic, vol. 28 (1963) 77 - 86.
Hajek P. and Godo L., Deductive systems of fuzzy logic (a tutorial).Tatra- 
mountains mathematical publications, vol. 13 (1997) 35 - 66.
Hajek P., Metamathematics offuzzv logic. Kluwer Acad.Publ.. Dordrecht (1998) 
297pp.
Hajek P., Huzzy Logic. The Stanford Encyclopaedia of Philosophy, Zalta E.N. ed.. 
The Metaphysics Research Lab at the Center for the Study of Language and 
Information, Stanford University. Stanford. CA (2002) 7pp.
Hajek P., Arithmetical Complexity of Huzzy Predicate Logics - A Survey. Soft 
Computing, vol. 9 (2005) 935-941, see also: Complexity of models of fuzzy 
predicate logics with witnessed semantics. CAS, 23pp: 
file:///C:/Users/Liser/DocLiments/FLizzy_Modal_Temporal_lntit%20and%20Paracons%20q 
Liantifiers/Peter%20Hajek%20COMPLEXlTY%20ot%20fuzZy%20pred%201ogii;.pdf.
Helmer E.C.R., Bunch Theory: A Simple Set Theory for Computer Science. 
Information Processing Letters, Elsevier, vol.12 no.l (1981) 26 - 30.
Helmer E.C.R.. The logic of programming. Englewood Cliffs. N.J., Prentice Hall 
International (1984) 361pp.
Helmer E.C.R.. A Practical Theorv of Programming. Springer-Verlag. New York 
(1993) 243pp.
Hella L., Definability hierarchies of generalised quantifiers. Armais of Pure and 
Applied Logic, vol.43, no.3 (1989) 235 - 271.
Hendries V. and Symons J., Epistemic logic. The Stanford Encyclopaedia of 
Philosophy, Zalta E.N. ed.. Center for the Study of Language and Information, 
Stanford University. Stanford. CA (2006) 6pp.
Henkin L., Some remarks on infinitely long formulas. Infinitistic Methods. 
Proceedings of the Symposium on Foundations of Mathematics, Warsaw (1959): 
PWN and Pergamon Press. Warsaw (1961) 167-183.

387
Hennessy M., Milner R., Algebraic laws for nondeterminism and concurrency. 
Journal of the ACM. vol. 32 . issue 1 (1985)137 - 161.
Herbrand J.. Recherches sur la theorie de la demonstration. PhD thesis. 
University of Paris (1930). Translated as: Investigations in proof theory. Goldfarb 
W ed., Jacques Herbrand - Logical writings. Harvard University Press (1971), see 
also: Handbook of automated reasoning, Robinson A. and Voronkov A. eds., vol. 
I, Elsevier (2001) 2115pp.
Heyting, A., Die formalen Regeln der intuitionistischen Logik. In three parts. 
Sitzungsberichte der preussischen Akademie der Wissenschaften (1930) 42-71, 
158-169. English translation of Part I inMancosu (1998) 311-327.
Hewitt C., ORG's for scalable, robust, privacy-friendly client cloud computing. 
IEEE Internet computing.vol.12 no.5 (2008) 96.
High-level Petri Nets - Concepts, Definitions and Graphical Notion. Final Draft 
International Standard ISO / IEC 15909 version 4.7.1 October 28 (2000) 43pp. 
Software and Systems Engineering - High-level Petri Nets, Part 2: Transfer 
Format. International Standard ISO / IEC 15909 - 2, WD version 0.9.0 June 23 
(2005) 50pp.
Hilbert D. and Bemays P., Die Grundlagen der Mathematik, in two volumes. 
Springer, Berlin (1934, 1939).
Hintikka J., Knowledge and belief. An introduction to the logic of the two notions. 
Cornell Univ. Press, Ithaca, New York (1962) 179pp.
Hirota K. and Ozawa Kâ The concept offuzzy flip-flop. IEEE Trans, on Systems, 
Man, and Cybernetics, vol. 19, no. 5 (1989) 980 - 987.
Hitchcock P. and Park D.M.R., Introduction rules and termination proofs. Proc. 
1st Int. Colloq. on Automata, Languages and Prograrmning. North-Holland, 
Amsterdam (1973) 225 - 251.
Hoare C. A. R., An axiomatic basis for computer programming. Communications 
of the ACM, vol. 12, issue 10 (1969) 576-580.
Holicky Mâ Fuzzy probabilistic models in structural reliability. Maintenance and 
Reliability, vol.18, no. 2 (2006) 11 - 13.
Holiday W.H., Epistemic logic and epistemology. Handbook of Formal 
Philosophy, Hansson S.O. and Hendries V.F. eds.. Springer (2016) 18pp.
Holmblad L.P. and Ostergaard J.J. Control of a cement kiln by fuzzy logic. In: 
Fuzzy Information and Decision Processes, Gupta M.M. and Sanchez E. eds., 
North-Holland (1982) 389 - 399.
Holmes M.R., Alternative axiomatic set theories. The Stanford Encyclopaedia of 
Philosophy, Zalta E.N. ed., Stanford, CA (2017) 42pp.
Horty J.F., Moral dilemmas and nonmonotonic logic. Journal of Philosophical 
Logic, vol. 23 (1994) 35 -65.
Horty J.F., Nonmonotonic logic (2001) 33pp:
http://www.uniiacs.unid.edu/~horty/articles/2001-nomiion.pdf.
Howard W.A., The formulae-as-type notion of construction. To H.B. Curry: 
Essays on Combinatory Logic, Lambda Calculus and Formalism, Seldin J.P. and 
Hindley J.R. eds., London, New York, Academic Press (1980) 606pp.
Huacan He. ed.. Universal logics principle. China Science Publ. House, Beijing 
(2001).

388
Huisman M., Aktug 1. and Gurov D., Program models for compositional 
verification. LNCS, vol. 5256, Springer (2008) 147-166.
Huzar Z., Elements of logics for computer scientists. Of.Wyd. TU Wroclaw, 
Wroclaw University of Technology ISBN 83-7085-625-X (2002),266pp..
Immanuel B. and Rangarajan K., System diagnosis and k-distinguishability in 
Petri nets, Private communication, India (2001) 14pp.
Iseki K. and Tanaka S., An introduction to the theory of BCK-algebras. 
Mathematica Japonica, Japanese Association of Mathematical Sciences, vol. 23 
(1978) 1 -26.
International Organization for Standardization, ISO Central Secretariat, Geneva, 
Switzerland, High-level Petri Nets - Concepts, Definitions and Graphical 
Notation. Final Draft International Standard 1SO/1EC 15909, Version 4.7.1, 
October 28 (2000) 43pp. and Software and Systems Engineering - High-level 
Petri Nets, Part 2: Transfer Format, International Standard 1SO/1EC 15909-2, 
WD Version 0.9.0, June 23 (2005) 50pp.
Jani ~s V. and Montes S., Distance between fuzzy sets as a fuzzy quantity. Acta 
Universitatis Matthiae Belii, ser. Mathematics, vol. 14 (2007) 41 -49.
Jankov V. A., On the extension of the intuitionistic propositional calculus to the 
classical calculus, and the minimal calculus to the intuitionistic calculus. Journal 
of Symbolic Logic, vol. 38, issue 2 (1973) 331 - 332.
Japaridze G., Introduction to computability logic. Annals of Pure and Applied 
Logic, Elsevier, vol. 123, issues 1-3 (2003) 1 - 99.
Japaridze G., Intuitionistic computability logic. Acta Cybemetica, vol. 18 (2007) 
77-113.
Jaskowski S., Propositional calculus for contradictory deduction systems. Studia 
Societatis Scientiarum Torunniensis, sec. AI (1948) 57 - 77., in Polish.
Jensen K., Coloured Petri nets and the invariant method. Theoretical Computer 
Science, Nord-Holland, 14 (1981) 317 - 336.
Jensen K., Coloured Petri nets. LNCS, vol. 254, Springer (1987) 248 - 299.
Jensen K., Coloured Petri nets - basic concepts, analysis methods and practical 
use. EATCS Monographs on Theoretical Computer Science, Berlin, SpringerÂ­
Verlag, vol. 1: Basic concepts (1992) 234 pp., vol. 2: Analysis methods (1994) 
173pp. and vol. 3: Practical use (1997) 265pp.
Jensen K. and Kristensen L.M., Coloured Petri nets: modelling and validation of 
concurrent systems. Dordrecht, New York, Springer (2009) 384pp.
Jun Y.B., Soft BCK'BCI-algebras. Computers and Mathematics with 
Applications, Elsevier, vol. 56 (2008) 1408 - 1413.
Kaburlasos V.G., Athanasiadis LN. and Mitkas P.A., Fuzzy lattice reasoning 
(FLR) classifier and its application for ambient ozone estimation. International 
Journal of Approximate Reasoning, Elsevier, vol. 45 (2007) 152 - 188.
Kalmbach G., Orthomodular lattices. Academic Press, London, New York (1983) 
390pp.
Kamide N. and Wansing H., Symmetric and dual paraconsistent logics. Logic and 
Logical Philosophy, vol 19 (2010) 7 - 30.
Kamp H., Tense logic and the theory of linear order. University of California 
dissertation, Los Angeles, USA (1968).

389
Kamp H. and Reyle U.. From discourse to logic: introduction to modeltheoretic 
semantics of natural language, formal logic and discourse representation theory. 
Kluwer Academic. Dordrecht, Boston (1993) 713pp.
Kanger S.. Provability in logic. Stockholm Studies in Philosophy, vol. 1, 
Almqvist and Wiksell, Stockholm (1957).
Katarzyniak R.P., Grounding modal language in communications of agent 
systems. EXIT. Warsaw (2007) 320pp..in Polish.
Katsuno H. and Mendelzon A... Propositional knowledge base revision and 
minimal change. Artificial Intelligence, vol.52, issue 3 (1991) 263-294.
Kavitha Bâ Karthikeyan S. and Sheeba Maybell P.. Emerging Intuitionistic Fuzzy 
Classifiers for Intrusion Detection System. Journal of advances in information 
technology, vol.2, no. 2 (2011) 99 - 108.
Kawaguchi M.F., Watari O. and Miyakoshi M., Fuzzy Logics and Substructure! 
Logics without Exchange. Proceedings of the Joint 4th Conference of the 
European Society for Fuzzy Logic and Technology and the 11th Rencontres 
Francophones sur la Logique Floue et ses Applications. EUSFLAT-LFA, 
Barcelona. Spain, (2005) 973 - 978.
Keenan, E.L. and Stavi J., 1986. .1 semantic characterization of natural language 
determiners, Linguistics and Philosophy (1986) 253-326.
KeislerH.J., Logic with the qwuantifier "there exists uncountably many". Annals 
of Mathematical Logic, vol. 1 (1970) 1 -93.
Kemtopf P.. Fundamental mathematical notions in automata theory: relations, 
algebraic systems, lattices. PWN , Warsaw (1967 ) 65pp..in Polish.
Kirkman T.P... On the k-partitions of the r-gon and r-ace, Philos. Trans. Roy. 
Soc. London 147 (1857) 217 - 272.
Kiana D., Uber einen ansatz zur mehrwertigen mengenlehre. Monatsberichte 
Deutsche Akademie Wissensschaften zu Berlin, 7 (1965) 859 - 867.
Kleene S.C.. Introduction to Metamathematics. Groningen,P.Noordhoff N.V., 
North-Holland Pub (1952) 550pp.
Kleene S.C.. Representation of Events in Serve Nets and Finite 
Automata. Automata Studies. Shannon C.E. and McCarthy J. eds.. Princeton 
University Press (1956) 3 - 42.
Klement E.P., Navara M., A survey of different triangular norm-based fuzzy 
logics. Fuzzy Sets and Systems, vol. 101 (1999) 241 - 251.
Knuth D.E., The art of computer programming. Reading, Mass..Addison-Wesley, 
vol. 1 (1997) 650pp. "
Kohlenbach U.. Applied proof theory: proof interpretations and their use in 
mathematics. Springer monographs in mathematics. Berlin, New York, SpringerÂ­
Verlag (2008) 532pp.
Kolmogorov A.N., O principle tertium non datur. Mat. Sbomik, XXXII (1925) 
646 - 667.
Kolmogorov A.N., Foundations of the theory of probability. Morrison N. ed. . 
New York. Chelsea Pub.Co. (1956) 84pp.
Kowalczyk W.. Rough data modelling: A new technicpie for analyzing data. In: 
Rough Sets and Knowledge Discovery 1: Methodology and Applications. 
Heidelberg, Physica-Verlag. Ch.20 (1998) 400-421.

390
Kozen D.C., Results on the propositional p-calculus. Theoretical Computer 
Science 27 (1983) 333 -354.
Kozen D.C., A completeness theorem for Kleene algebras and the algebra of 
regular events. Information and Computation, vol.110 (1994) 366 - 390.
Kripke S., Semantical Analysis of Modal Logic (abstract). The Journal of 
Symbolic Logic, 24 no.4 (1959) 323 - 324.
Kripke S., Semantical analysis of modal logic I: normal modal propositional 
calculi. Zeitschrift fur Math. Logic und Grundlagen der Math, no. 9 (1963) 67 - 
96.
Kripke S., Transfinite recursion on admissible ordinals. The Journal of Symbolic 
Logic, 29 (1964) 161 - 162.
Kripke S., Semantical analysis of modal logic II: non normal propositional 
calculi. The theoiy of models.North-Holland Publishing, Amsterdam (1965) 206 
-220.
Kripke S., Semantical analysis of intuitionistic logic. In: Formal systems and 
recursive function theory, Crossley J.N. and Dmmnett M.A.F. eds.. North - 
Holland Publishing, Amsterdam (1965) 320pp.
Kroger F., LAR: a logic of algorithmic reasoning. Acta Infonnatica, vol. 8 (1977) 
243 - 246.
Kiyszkiewicz M. and Rybinski H., Finding reducts in composed information 
systems. In: Rough Sets, Fuzzy Sets and Knowledge Discovery, Ziarko W.P. ed., 
British Computer Society (1994) 261 - 273.
Kummer O. and Stehr M - O., Petri's axioms of concurrency. A selection of 
recent results. 18th International Conference, TCATPN'97: Applications and 
Theory of Petri Nets 1997, Azema P. and Balbo G. eds.,Toulouse, France, 
Proceedings, Springer (1997) 195 - 214.
Kuratowski K., Sur la notation de I'ordre dans la theorie des ensembles. 
Fundamenta Mathematicae, vol. 2, no.l (1921) 161 - 171.
Kuratowski Kâ Introduction to set theoiy and topology. Warszawa, PWN (1966) 
275pp: Oxford, New York, Pergamon Press (1972) 352pp.
Kuratowski K. and Mostowski A., Set theory. Mathematical Monographs, vol. 27, 
PWN Warszawa (1966) 375pp.
Lafont Y., Introduction to linear logic. Lecture notes from TEMPUS Smmner 
School on Algebraic and Categorical Methods in Computer Science, Brno, Czech 
Republic (1993).
Lafont Y., Linear logic pages. Universite d'Aix-Marseille, (1999,last correction: 
2017),17pp: http://iiiil.univ-mrs.fr/~lafont/pub/llpages.pdf.
Lambert K.A., Nance D.W. and Naps T.L., Introduction to Computer Science 
with C++. West Publishing Company, Minneapolis/St. Paul, New York ,Los 
Angeles, San Francisco (1996) 962pp.
Larsen H.L., Fundamentals of fuzzy sets and fuzzy /ogle.Course in fuzzy logic 
Part I - II, Aalborg University, Esbjerg, Demnark (1998).
Lemmon E.J. and Scott D., An introduction to modal logic. American 
Philosophical Quarterly, Monograph Series, Oxford (1977) 94pp.
Lewis C.I., A survey of symbolic logic. Univ, of California Press, Berkeley (1918) 
406pp. New edition (1960).

391
Lewis C.l. and Langford C.H., Symbolic logic. Dover, New York (1932). New 
edition (1959).
Libert T., Models for a paraconsistent set theory. Journal of Applied Logic, 
Elsevier, vol. 3 (2005) 15 - 41.
Lichtenstein 0., Pnueli A. and Zuck L., The glory of the past. Conference on 
Logics of Programs, LNCS, vol. 193, Springer (1985) 196 - 218.
Lindley Dâ The quantum word. New Scientist, Reed Business Information, 
(1998)'64pp.
Lindstrom P., First order predicate logic with generalised quantifiers. Theoria 32 
(1966) 186- 195.
Lionville J., Sur des classes tres etendues de quantites don't la valeur n'est ni 
algebraique, ni meme reducible a des irrationnelles algebriques. J. Math. Pures 
Appkvol. 16 (1851) 133 - 142.
Loken T. and Komorowski J., Rough modelling - a bottom - up approach to 
model construction. International Journal of Applied Mathematics and Computer 
Science, vol. 11, no. 3 (2001)675 -690.
Losada D.E., Diaz-Hennida F. and Bugarin A., Semi-fuzzy quantifiers for 
information retrieval. Soft Computing in Web Information Retrieval. Models and 
Applications, Herrera-Viedma Eâ Pasi G. and Crestani F. eds.. Springer (12006) 
195-220.
Lu H. and Lee S.C., Fault detection in m-logic circuits using the M-diffcrencQ. 
Proceedings of the IEEE International Symposium on Multiple-Valued Logic 
(1984)62-70.
Lu H. and Lee S.C., M-algebra. Proceedings of the IEEE International 
Symposium on Multiple-Valued Logic (1985)272 - 284.
Lukasiewicz J., Die logishen Grundlagen der Wbilityahrscheinilchkeitsrechnung. 
Krakow (1913), in: 'Jan Lukasiewicz - selected works'. North Holland Publishing 
Company, Amsterdam, London, Polish Scientific Publishers, Warsaw, Borkowski 
L. ed. (1970) 405pp.
Lukasiewicz J., Die Logic und das Grundlagenproblem. Les entretiens de Zurich 
sur les fondement et la methode des sciences mathematiques, XII (1938) 6 - 9, 
Zurich (1941) 82 - 100.
Luszczewska - Rolunanowa S., Analysis and generalisations of Venn diagrams 
method for testing of logical formulae. Studia Logica, T. L (1953), in Polish.
MacLane S. and Birkhoff G., Algebra. New York, Macmillan (1967).
Mallion R.B., The six (or seven) bridges of Kaliningrad: a personal Eulerian 
walk. MATCH Communications in Mathematical and in Computer Chemistry, 
no. 58 (2007) 529 - 556.
Maliy E., Grundgesetze des Sollens: Elemente der Logik des Willens, Leusclmer 
und Lubensky, Universitats-Buchhandhmg, Graz (1926). Reprinted in Maliy E., 
Logische Schriften: Grofies Logikfragment, Grundgesetze des Sollens, Karl Wolf 
and Paul Weingartner eds., Dordrecht (1971) 227 - 324.
Mamdani E.H. and Assilian S., An experiment in linguistic synthesis with a fuzzy 
logic controller. International Journal of Man-Machine Studies.vol. 7 (1975) 1 - 
13.
Mandelbrot B.B., The fractal geometry of nature. W.H. Freeman and Company

392
(1983) 468pp.
Manna Z. and Pnueli A., The Temporal Logic of Reactive and Concurrent 
Systems. Specification. Springer-Verlag. New York (1992) 427pp.
Manna Z. and Pnueli A., Temporal verification of reactive systems : safety. 
Springer-Verlag, New York (1995) 512pp.
Mares E.D., Relevance Logic. The Stanford Encyclopaedia of Philosophy, Zalta 
E.N. edâ The Metaphysics Research Lab at the Center for the Study of Language 
and Information. Stanford University. Stanford, CA (1998) 6pp.
Martin C.E., Curtis S.A. and Rewitzky 1.. Modeling angelic and demonic 
nondeterminism with multirelations. Science of Computer Programming, 
Elsevier, vol. 65 (2007) 140 - 158.
Mayeda W.. Graph Theory. John Wiley & Sons.Inc..New York (1972)523 - 557.
Mazurkiewicz A., Introduction to Trace Theory.m The Book of Traces, V. 
Diekert. G. Rozenberg eds.. World Scientific. Singapore (1995) 3 -41.
McArthur R.P., Tense Logic. Dordrecht. Holland. Boston, D. Reidel Pub. Co. 
(1976) 84pp.
McCarthy J., Circumscription - a form of non-monotonic reasoning. Artificial 
Intelligence, vol. 13 (1980) 27 - 29.
McColl H., Symbolic logic and its applications. London (1906) 141pp.
McDermott D. and Doyle J.. Non-monotonic logic I. Intelligence, vol. 13 (1980) 
41-72.
McGill V.J. and Parry W.T., The unity of opposites: a dialectical principle. 
Science and Society, vol. 12 (1948) 418 - 444.
McMillan K.L., Using unfoldings to avoid the state explosion problem in the 
verification of asynchronous circuits. In: International Conference on Computer 
Aided Verification, CAV 1992, New York, LNCS. vol. 663, Springer, 
Heidelberg, Probst D.K. and von Bochmann G. eds. (1993) 164 - 177.
Megill N.D., The existential uniqueness quantifier. (2005) Hpp: 
http://us.metamath.org/downloads/megillaward2005eu.pdf.
Megill N.D. and Pavicic M., Quantum implication algebras. Int. Journal of 
Theoretical Physics, vol. 42, issue 12 (2003) 21pp.
Mendel J.M., Uncertain rule-based fuzzy logic systems: introduction and new 
directions. Upper Saddle River, NJ: Prentice Hall (2001) 555pp.
Mendel J.M., Advances in type-2 fuzzy sets and systems. Information Sciences, 
vol. 177. issue 1 (2007) 84 - 110.
MengerK., Statistical metrics. Proc. Nat. Acad. Sci. USA, 28 (1942) 535 - 537.
Metcalfe G.. Olivetti N. and Gabbay D., Proof theory for fuzzy logics. Springer 
Science - Business Media B.V. (2009) 276pp.
Meyden R. van der.. Proof computation and agency. Synthese Library, vol.352, 
Springer Science + Business Media B.V. (2011) 133 - 144.
Milner R., A calculus of communicating systems. LNCS. Springer - Verlag. 
Berlin, Heidelberg, vol. 92 (1980) 165pp.
Mirek R., The systems of relevance logic. Argument J., vol.l. issue 1 (2011) 87 - 
102.

393
Mirkowska G. and Salwicki A., Algorithmic Logic. Warszawa & Boston: PWN & 
D. Reidel Publ. (1987) 372pp.
Mittelstaedt P., Quantenlogische interpretation orthokomplementarer 
quasimodularer verbande. Z. Naturforsch, vol. 25 (1970) 1773 - 1778.
Moh Shaw-Kwei.. The deduction theorem and two logical systems. Methodos. 
vol.2 (1950) 56-75.
Molodtsov D.A., Soft set theory - first results. Computers and Mathematics with 
Applications. Elsevier, vol. 37 (1999) 19 -31.
Molodtsov D.A., Equivalence and correct operations for soft sets. International 
Robotics & Automation Journal, vol. 4, issue 1 (2018) 18 - 21.
Monaghan P.X., Property possession as identity. An essay in Metaphysics. Ontos 
Verlag, Frankfurt, Paris, Lancaster, New Brunswick (2011) 19
Montague R., Formal philosophy: selected papers of Richard Montague, edited 
and with an introduction by Richmond H. Thomason, Yale University Press, New 
Haven (1974). 
5
Montague R., Universal grammar. Theoria, vol. 36 (1970) 373 - 398.
Moore E.G., External and internal implications. Proceedings of Aristotelian 
Society, n.s. XX (1920) 40 - 62.
Moore R.C., Possible-world semantics for autoepistemic logic. Proc, of the 
Workshop on non-monotonic reasoning. Association of the Advancement of 
Artificial Intelligence (1984) 344 - 354.
Morgan C.C., Programing from specifications. Prentice Hall (1998) 331pp.
Moschovakis J.R., Intuitionistic Logic. The Stanford Encyclopaedia of 
Philosophy, Zalta E.N. ed.. The Metaphysics Research Lab at the Center for the 
Study of Language and Information, Stanford University, Stanford, CA (2015) 
5pp.
Mostowski A.S., On a generalisation of quantifiers. Fundamenta Mathematicae, 
vol. 44 (1957) 12-36.
Mostowski A.W. and Pawlak Zâ Logics for engineers. PWN, Warsaw (1970) 
315pp.,in Polish.
Moszkowski B., A temporal logic for multi-level reasoning about hardware. 
Report Nos: STAN-CS-82-952, Stanford, CA. (1982) 30pp.
Moszkowski Bâ Executing temporal logic programs. Cambridge University Press 
(1983), ACM SIGART Bulletin, ACM, New York, issue 98, Oct. (1986) p.15.
Moller B. and Beer M., Fuzzv Randomness. Springer, Berlin, Heidelberg 
(2004)307pp.
Munarini Eâ Generalised q-Fibonacci numbers. Fibonacci Quarterly 43, no.3 
(2005) 234 - 242.
Murata Tâ Petri nets and their application. Journal Soc. Instrum. Control Eng. 
vol. 22 (1983), 65-72.
Murata T., Petri nets: properties, analysis and applications. Proceedings of the 
IEEE, vol. L no.4 (1989) 541 - 580.
Muravitsky A.Y., Aew mathematical foundations for knowledge maintenance 
systems: research program. National Science Foundatin Oct. (1994) 13pp.

394
Muzio J.C. and Wesselkamper T.C.. Multiple-valued switching theory. Adam 
Hilger Ltd. Bristol and Boston (1986) 195pp.
Nakamura A., Conflict logic with degrees, rough fuzzy hybridisation - a new 
trend in decison-making, ( Pal S. K. and Skowron A. eds.). Springer (1999) 136 - 
150.
Nanda S. and Maiumdar S., Fuzzv rough sets. Fuzzy Sets and Systems, vol. 45, 
no. 2 (1992) 157- 160.
Navara M., Satisfiability in fuzzy logics. Neural Network World vol. 10 (2000) 
845 - 858.
Nelson D., Constructible falsity. Journal of Symbolic Logic, vol. 14 (1949) 16 - 
26.
Neumann J. von., Grundlagen der Quantenmechanik. Springer Verlag. Berlin 
(1932): Mathematical Foundations of Quantum Mechanics, Princeton University 
Press. New Jersey. Beyer R.T. ed..translated from the German (1955) 445pp.
Ngan R.T., Son L.H, Ali M., Tamir D.E., Rishe N.D. and Kandel A., 
Representing complex intuitionistic fuzzy set by quaternion numbers. Applied Soft 
Computing Journal. Elsevier, vol. 87 (2020) 1 - 15.
Olivetti N., Introduction to non-monotonic reasoning. Master Recherche SIS 
Universite Paul Cezanne. CNRS LSIS (2010/11) 
36pp:
http://www.lsis.org/olivetti/TEACHlNG/MASTER/lNTRONMRl.pdf.
Parikh R.J., On context-free languages. Journal of the ACM, vol. 13, no. 4 (1966) 
570-581.
Parikh R.J., Propositional logics of programs: new directions. International 
Symposium on Fundamentals of Computation Theory, LNCS. Springer, vol. 158 
(1983) 347 -359.
Parikh R.J., Belief revision and splitting languages . Logic, Language, and 
Computation, CSLI Publications, vol. 2 (1999) 19pp.
Parikh R.J. and Pauly M., Game logic - an overview. Studia Logica. vol. 72, issue 
2 (2003) 165 - 182.'
Pacuit E., Dynamic epistemic logic II: Logics of information change. Philosophy 
Compass (2013) 1 - 19.
Paraconsistency: the logical way to the inconsistent. The second world congress 
on Paraconsistency. Juquehy-Sao Sebasstiao. Sao Paulo. Brazil, Camielli W.A., 
Coniglio M. and D'ottaviano I.M.L. eds.. CRC Press (2002) 376pp.
Parry W.T., Implication, Thesis. Harvard Univ. (1932).
Parry W.T., Ein axiomensystem filr eine neue art von 392mplication (analylische 
implication). Ergebnisse eines mathematischen Kolloquiums. vol. 6 (1933) 4-5.
Pawlak Z., Automated theorem proving. PZWS Warsaw (1965),in Polish.
Pawlak Z., Mathematical machines. PZWS Warsaw (1971),in Polish.
Pawlak Z., Rough sets. International Journal of Computer and Information 
Sciences, vol. 11 (1982) 341 -356.
Pawlak Z., Rough sets-theoretical aspect of reasoning about data. Kluwer 
Academic Publishers. Dodrecht. Boston (1991) 229pp.
Perrussel L., Marchi J. and Zhang D., Characterizing relevant belief revision 
operators. Al 2010, In: LNAI, Springer-Verlag. Berlin / Heidelberg, LNAI vol. 
6464 (2010) 42-51.

395
Peters J.F., Time and clock information systems: concepts and roughly fuzzy 
Petri net models. In: Rough Sets in Knowledge Discovery, Heidelberg:Physica- 
Verlag, vol. 2, pp. 385-418, 1997.
Peters J.F., A'ew frontiers in scientific discovery - Commemorating the life and 
work ofZdzislaw Pawlak. Fundamenta Infonnaticae, vol. 75, no.l - 4 (2007) 407 
-433.
Peters J.F., Skowron A., Suraj, Z. and Ramanna, S., Guarded Transitions in 
Rough Petri Nets. In: Proc, of the 7th European Congress on Intelligent 
Techniques & Soft Computing, Aachen, Germany, September 13-16 (1999) 1 -6.
Peters S. and Westerstahl Dâ Quantifiers. Draft (2002) 77pp: 
https://web.stanford.edLi/groLip/nasslli/coLirses/peters-wes/PWbookdraft2-3.pdf.
Peterson G.L., Myths about the mutual exclusion problem. Information 
Processing Letters, vol. 12, no. 3 (1981) 115 - 116.
Peterson J.L., Petri net theory and the modeling of systems. Prentice Hall, 
Englewood Cliffs. N.J. (1981) 280pp.
Petri C. A., Kommunikation mit Automaten, Institut fur Instrumentelle 
Mathematik, Schriftendes 11M Nr. 3, Bonnn(1962) 132pp.
Petry F.E., Fuzzy databases : principles and applications ; with contribution by 
Patrick Bose. Kluwer Academic Publishers, Boston, Dordrecht, London (1996) 
226pp.
Pickover C.A. ed.. Chaos and Fractals. A Computer Graphical Journey, Elsevier 
(1998) 451pp.
Pigozzi D., Data tvpes over multiple-valued logics. Theoretical Computer Science 
77 (1990) 161 - 194.
Pinna G.M., How much is worth to remember? A taxonomy based on Petri nets 
unfoldings. 32nd Int. Conference Petri Nets, Newcastle, UK, Proceedings, 
Kristensen L.M. and Petrucci L eds.. Springer, Heidelberg, Dordrecht, London, 
New York (2011) 109- 128.
Platek R.A., Foundation of recursion theory. PhD thesis. Department of 
Mathematics, Stanford University (1966) 219pp.
Plaza J.A., Logic of public communication. 4th International Symposium on 
Methodologies for Intelligent Systems. Emrich M.L., Pfeifer M.S., Hadzikadic M. 
and Ras Z.W. eds. (1989) 201 - 216.
Pnueli A., The temporal logic of programs. The 18th Annual Symposium on 
Foundations of Computer Science, IEEE (1977) 46 - 57.
Pogonowski J. and Smigerska J., Generalised quantifiers. Adam Mickiewicz 
University, Poland (2008) 88ppâ in Polish:
https://www.yLiinpLi.eom/.x.x/docLinient/view/37113011/o-kwantyfikatorach-Liogalnionych- 
zakaad-logiki-stosowanej-Liam/23.
Poliard S., Philosophical introduction to set theory. University of Notre Dame
Press (1990) 180ppâ Courier Dover Publications (2015) 192pp.
Portoraro F.D., Automated Reasoning. The Stanford Encyclopaedia of 
Philosophy, Zalta E.N. ed..University of Toronto,Canada (2001) 23pp.
Pottinger G., Uniform cut-free formulations off S4 and S5 (abstract). Journal of 
Symbolic Logic, vol. 48, no.3 (1983) 900.
Pratt V.R., Six Lectures on Dynamic Logic. Foundations of Computer Science 111, 
Part 2, 53-82, Mathematical Centre Tracts 109, Amsterdam (1980) 53 - 82.

396
Pratt V.R., A decidable g-calculus (Preliminary Rept.). Proc. 22nd IEEE Symp. 
on Foundations of Computer Science (1981) 421 - 427.
Priest G.. Tanaka K. and Weber Z.. Paraconsistent logic. The Stanford 
Encyclopaedia of Philosophy. Zalta E.N. ed.. The Metaphysics Research Lab at 
the Center for the Study of Language and Information, Stanford University. 
Stanford. CA (2013) 20pp.
Prior A.N., Time and Modality. Clarendon, Oxford (1957), Westport Conn., 
Greenwood Press (1979) 148pp.
Prior A. Nâ Past. Present and Future. Clarendon, Oxford (1967) 217pp.
Radhika C.. R. Parvathi R. and Karthikeyani Visalakshi N., Noise removal from 
images using intuitionistic fuzzy logic controller. Armais of Fuzzy Mathematics 
and Informatics (2016) 15pp.
Rajarajeswari P. and Uma N., Advanced fuzzy intuitionistic logic techniques in 
image processing. Indian Journal of Computational and Applied Mathematics, 
vol.l.no.l (2013) 9-20.
Ramot Dâ Milo R.. Friedman M. and Kandel A., Complex fuzzy sets. IEEE 
Transaction on Fuzzy Systems, vol.10, issue 2 (2002) 171 - 186.
Rasiowa H. and Sikorski R., The mathematics of metamathematics.Polish 
Scientific Publishers. Warsaw (1963) 519pp.
Read S.. Hugh MacColl and the algebra of strict implication. Nordic Journal of 
Philosophical Logic 3,UK (1998) 59 - 83.
Reisig W.. Petri Nets. An Introduction'. Springer-Verlag. Berlin, Heidelberg, New 
York, Tokyo (1985) 161pp.
Reisig W.. A primer in Petri net design. Springer - Verlag. Berlin, Heidelberg 
(1992) 120pp.
Reiter Râ A logic for default reasoning. Artificial Intelligence, vol. 13 (1980) 81 
- 132.
Rewitzky I.. Binary multirelations. In: Theory and Applications of Relational 
Structures as Knowledge Instruments. Springer-Verlag. Berlin, Heidelberg, New 
York, De Swart Hâ Orlowska E., Schmidt G. and Roubens M. eds. (2003) 259 - 
274.
Roberts F. S.. Discrete mathematical models with applications to social, 
biological and environmental problems. Englewood Cliffs. Prentice - Hall. N.J. 
(1976) 559pp.
Robinson J.A., Theorem proving on the computer. Journal. Assoc. Comput. 
Mach., vol. 10. no. 2 (1963) 163 - 174.
Robinson J.A., Automatic deduction with hyper-resolution. Intemat. Journal. 
Comput. Math., no.l (1965) 227 - 234.
Roger Jang J.S. and Gulley Nâ MATLAB. Fuzzy logic toolbox. Computation. 
Visualization. Programming. User's Guide, Version 1, The MathWorks.Inc. 
(1997) 208pp.
Ross A.N.C.. Imperatives and Logic. Theoria vol. 7 (1941) 53-71.
Ross K.A. and Wright C.R.B., Discrete mathematics. Prentice Hall Inc. (1992) 
753pp.Polish translation, PWN, Warszawa (1999) 899pp.
Ruitenburg W.B.G.. Intuitionistic algebra: theory and sheaf models. 
Rijksuniversiteit te Utrecht (1982) 143pp.

397
Rushdi A.M., Zarouan M., Alsheim T.M. and Rushdi A., A Modern Syllogistic 
Method in Intuitionistic Fuzzy Logic with Realistic Tautology. The Scientific 
World Journal. Hindawi Publishing Corporation (2015) 
12pp:
http://dx.doi.org/10.1155/2015/327390
Ruspini E.H.: A new approach to clustering. Information and Control 15 (1969) 
22-32.
Russell B. Principles of mathematics. London (1903). New York (1938) 534pp.
Rybakov V.V., Rules of inference with parameters for intuitionistic logic. Journal 
of Symbolic Logic, vol. 57, issue 3 (1992) 912 - 923.
Saeed B. I. and Mehrdadi B., Design of an iterative auto-tunning algorithm for 
fuzzy PID controller. 25th Int. Congress on Condition Monitoring and Diagnostic 
Engineering, IOP Publishing, Journal of Physics: Conference Series 364 (2012) 
14pp.
Salii V.N., Binary L-relations. Izvestiya Vyshych Uchebnych Zavedenii, 
Matematika 44 / 1 (1965) 133 -145.
Sallak M., Simon C. and Aubry J - F., A Fuzzy Probabilistic Approach for 
Determining Safety Integrity Level. IEEE Transactions on fuzzy systems, vol. 16, 
no. 1 (2008) 239 - 248.
Samanta S.K. and Mondal T.K., Intuitionistic fuzzy rough sets and rough 
intuitionistic fuzzy sets. Journal of Fuzzy Mathematics, vol. 9, no. 3 (2001) 561 - 
582.
Sart F., A purely combinatorial approach to deontic logic. Logique & Analyse. 
206 (2009) 131 - 138.
Sasaki U., Orthocomplemented lattices satisfying the exchange axiom. J. Sci. 
Hiroshima Univ. A 17 (1964) 293 - 302.
Schneider M. and Kandel A., Properties of the fuzzy expected value and the fuzzy 
expected interval in fuzzy environment. In: Readings in Fuzzy Sets for Intelligent 
Systems. Science Direct. Elsevier, Dubois Dâ Prade H. and Yager R.R. eds. 
(1993)258-264.
Schutte Kâ Intuitionistic predicate calculus. In: Proof Theory. Grundlehren der 
mathematischen Wissenschaften (A series of Comprehensive Studies in 
Mathematics).Springer Verlag. Berlin, Heidelberg (1977) 36 - 55.
Schweizer B. and Sklar A., Statistical metric spaces. Pacific J. Math. 10 (1960) 
313 -334.
Schweizer B. and Sklar A., Associative functions and abstract semi-groups. Publ. 
Math. Debrecen 10 (1963) 69 - 81.
Schweizer B. and Sklar A., Probabilistic metric spaces. North Holland (1983), 
see also: Mineola N.Y..Dover Publications (2005) 313pp.
Scott Dâ Advice in modal logic. In. Philosophical Problems in Logic. Lambert K. 
(1970) 143 - 173.
Segerberg, K., A completeness theorem in the modal logic of programs. Notices 
of the American Mathematical Society, vol.24 ( 1977) 522.
Shapiro S.. Classical Logic. The Stanford Encyclopaedia of Philosophy, Zalta 
E.N. ed.. The Metaphysics Research Lab at the Center for the Study of Language 
and Information, Stanford University. Stanford. CA (1995) 26pp.
Sher G.. Logical quantifiers. EBSCO Publishing (2015) 571 
http://philosophyfaculty.ucsd.edu/faculty/gslier/logical_quantifiers.pdf.
595:

398
Shor P.W., Algorithms for quantum computation: discrete logarithms and 
factoring. Proc. 35
*
 Symp. on Foundations of Computer Science (1994) 124 - 
134.
Skowron A. and Rauszer C.. The discernibility matrices and functions in 
information systems. In: Intelligent Decision Support Systems, Handbook of 
Applications and Advances in Rough Set Theory, Slowiriski R. ed., Dordrecht, 
Kluwer Academic Publishers (1991) 331-362.
Skowron A. and Suraj Z., A parallel algorithm for real-time decision making: a 
rough set approach. Journal, of Intelligent Information Systems, vol. 7 (1996) 5 - 
28.
Slupecki J. and Borkowski L., Elements of mathematical logic and set theory. 
International series of monographs in pure and applied mathematics, Oxford, New 
York, Pergamon Press, vol. 96 (1967) 349pp.
Smarandache F., A unifying field in logics: neutrosophic logic. Multiple-Valued 
Logic. An International Jouma/, vol. 8, no.3 (2002) 385 - 438.
Soleimanifard S., Gurov D. and Huisman M., ProMoVer: Modular verification of 
temporal safety properties. SEFM 2011, LNCS , Barthe Gâ Prado A. and 
Schneider G. eds.. Springer-Verlag, Berlin, Heidelberg (2011) 366 - 381.
Speyer D. and Stunnfels Bâ The tropical Grassmannian. Advances in Geometry, 
Walter de Gruyter, vol. 4, no. 3 (2004) 389-411.
Spivey J.M., The Z notation: a reference manual. Programming Research Group, 
University of Oxford, England (1998) 158 pp.
Stefanoiu D. and lonescu F., Fuzzy - statistical reasoning in fault diagnosis. In: 
Computational Intelligence in Fault Diagnosis, Springer-Verlag, London Limited, 
Palade V., Bocaniala C.D. and Jain L. eds. (2006) 125 - 178.
Â§tefanoiu D., Cnli(a J. and lonescu F., Fast methods for identification of vibration 
defects. University Politeclmica of Bucharest, Sci. Bull., Series C, vol. 71, no 1 
(2009) 33 -44.
Stepnicka M., Fuzzy transform and its applications to problems in engineering 
practice. Ph.D. thesis. University of Ostrava, Faculty of science. Department of 
mathematics (2007) 194pp.
Stillwell J., Roads to infinity. The mathematics of truth and proof. CRC Press, 
(2010) 250pp.
Stirling C.P., Modal and temporal logics of processes. Springer, Heidelberg 
(2001) 190pp.
Suber Pâ A bibliography of non-standard logics. Electronic hand-out for the 
course. Logical Systems.Earlham College (1997 - 2000) 15pp.
Suber P., Paradoxes of material implication. Electronic hand-out for the course. 
Logical Systems.Earlham College (1997) 4pp.
Sugeno M., Theory of fuzzy integrals and its applications. Tokyo Institute of 
Technology, Ph.D. thesis (1974) 124pp.
Sugeno M. and Kang G., Structure identification of fuzzy model. Fuzzy Sets and 
Systems, vol. 26 (1988) 15-33.
Sujana J. G. and Rajalaxmi T.M., Forcing sets in triangular grid networks. 
Procedia Computer Science, Elsevier, vol. 172 (2020) 159 - 164.
Sulkunen P. and Torronen J., The production of values. The concept of modality 

399
in textual discourse analysis. Semiotica 113 - 1/2 (1997) 43 - 69.
Suraj Z.. Discovery of concurrent data models from experimental tables: A rough 
set approach. Fundamenta lufonnaticae. vol. 28 (1996) 3 -4.
Surikova S., Model of developing pupils 'social competence and its algorithm of 
introducing in the primary school teaching/learning process. Proc, of the ATEE 
Spring University.Klaipeda University (2007) 253 - 263.
Svozil Kâ Quantum logic. Springer-Verlag (1998) 221pp.
Swart H.C.M. de.. An intuitionistically plausible interpretation of intuitionistic 
logic. Journal of Symbolic Logic, vol. 42, issue 4 (1977) 564 - 578.
Symons F.J.W., Modelling and analysis of communication protocols using 
numerical Petri nets. PhD thesis. Dep. Elec. Eng. Sci., Univ. Essex, Telecommun. 
Syst. Group Rep. 152, May 1978. See also: Introduction to numerical Petri nets, 
a general graphical model of concurrent processing systems. Australian 
Telecommunications Research, vol. 14, no.l (1980) 28 - 32.
Szmidt E. and Kacprzyk J., Distances between intuitionistic fuzzy sets. Fuzzy Sets 
Syst, vol. 114, no. 3 (2000) 505 - 518.
Tabakow LG., Boolean Interpreted Petri Nets: The Behaviour Equivalence, 
Reduction and PN-Fault Detectability Considerations. Petri Net Newsletter 
32,Germany (1989) 8 -17.
Tabakow I.G., Using D-algebra to generate tests for m-logic combinational 
circuits. International Journal of Electronics 75, UK (1993) 897 - 906.
Tabakow I.G., Using Petri net invariants in system diagnosis: Petri Net 
Newsletter 58 (2000) 21 -31.
Tabakow I.G., Digital circuits and systems: test generation and fault 
distinguishability. A mathematical approach. Oficyna Wyd. TU Wroclaw, 
Wroclaw University of Technology, ISBN 83-7085-551-2 (2001) 193pp.
Tabakow LG., Using place invariants to isolate faults in concurrent systems: Petri 
Net Newsletter 68, Germany (2005) 10 - 20.
Tabakow I.G., Fault Diagnosis of Discrete Event Systems Using Place Invariants: 
Ninth International Conference on Knowledge-Based & Intelligent Information & 
Engineering Systems KES'2005, Invited Session on Coimnunicative Intelligence, 
Melbourne, Australia, September 14 - 16 (2005) in: LNCS, Springer-Verlag Vol. 
3682 (2005) 541 - 547.
Tabakow I.G., An introduction to fuzzy propositional calculus using proofs from 
assumptions. +10th Int. Conference on Knowledge Based Intelligent Information 
& Engineering Systems, Bournemouth, UK Main Conference date: 9, 10 & 11 
October 2006 Invited Session on Communicative Intelligence 2006. In: LNA1, 
Springer-Verlag, Berlin / Heidelberg, LNA1 vol. 4252, Proceedings, Part 11, 
Gabrys B., Howlett R.J., and Jain L.C. eds. (2006) 187 - 194.
Tabakow I.G., Fault Distinguishability of Discrete Event Systems. Int.Conf.on 
Computational Science, Workshop on Knowledge and Information Management 
in Computer Communication Systems KIMCCS'06, University of Reading, UK, 
May 28-31 (2006). In: LNCS, Springer-Verlag, Berlin / Heidelberg Vol. 3993 , 
Proceedings, Part 111, Alexandrov V.N., G.D. van Albada, P.M.A. Sloot and 
Dongarra J. Eds. (2006)168 - 175.
Tabakow I.G., Using Place Invariants and Test Point Placement to Isolate Faults 
in Discrete Event Systems. Journal of Universal Computer Science, vol. 13, no.2 
(2007)224-243. '

400
Tabakow LG.. Using place and transition fault net models for sequential 
diagnosis time assessment in discrete event systems. 21st International 
Conference on Industrial. Engineering and Other Applications of Applied 
Intelligent Systems. IEA / AIE. Wroclaw. Poland. LNCS 5027 (2008) 677 - 686.
Tabakow I.G.. A generalised Lukasiewicz's t-norm system: definition, properties 
and applications. The Seventeenth International Conference on System Science. 
Wroclaw (2010). In Advances in Systems Science. Academic Publishing House 
EXIT. Warsaw (2010) 373 - 383.
Tabakow I.G.. Using generalised Lukasiewicz's t-norm to represent and improve 
fuzzy rough approximations. Advances in Computer Science: an International 
Journal vol.3, issue 6, no 12 (2014) 1-9.
Takagi T. and Sugeno M., Fuzzy identification of systems and its application to 
modeling and control. IEEE Transactions on Systems. Man, and Cybernetics, vol. 
15 (1985) 116-132.
Takeuti G. and Titani S.. Intuitionistic Fuzzy Logic and Intuitionistic Fuzzy Set 
Theory. The Journal of Symbolic Logic, vol. 49, issue 3 (1984) 851 - 866.
Takeuti G. and Titani Sâ Global intuitionistic analysis. Annals of pure and 
applied logic, vol. 31 (1986) 307 - 339.
Takeuti G. and Titani S., Globalization of intuitionistic set theory. Annals of 
Pure and Applied. Logic, vol. 33 (1987) 195 - 211.
The Free Encyclopaedia. The Wikimedia Foundation, Inc., San Francisco, 
California, U SA
The internet encyclopaedia of philosophy. Fieser J. and Dowden B. eds. (2001).
The little encyclopaedia of logic. Publishing House Ossoliriskich, Warsaw (1988) 
256pp.,in Polish.
Tripathy B.K., Satapathy M.K. and Choudhmy P.K., Intuitionistic Fuzzy Lattices 
and Intuitionistic Fuzzy Boolean Algebras. International Journal of Engineering 
and Technology, vol.5, no. 3 (2013) 2352 - 2361.
Turing A.M., On computable numbers, with an application to the 
entscheidungsproblem. Proc. London Math. Soc.mo. 42 (1936) 230 - 265.
Turner W., Logic. The catholic encyclopaedia, Knight K. ed.. Robert Appleton 
Comp..Online (1999). 10pp.
Turunen E., On Brouwerian valued fuzzy logic. University di Pisa. Dipartimento 
di Mathematica, vol.2, issue 14 (1989) p.461. See also: On fuzzy intuitionistic 
logic. Annales Univ. Sci., Sect. Comp. 12, Budapest (1991) 241 - 247.
Udrescu-Milosav M., Quantum circuits engineering: efficient simulation and 
reconfigurable quantum hardware. Ph.D. Thesis, Politelmica Univ, of Timisoara 
(2005) 156pp.
Umezawa T.,. On logics intermediate between intuitionistic and classical 
predicate logic. Journal of Symbolic Logic, vol. 24, issue 2 (1959) 141 - 153.
Umezawa T., On some properties of intermediate logics. Journal of Symbolic 
Logic, vol. 25, issue 3 (1960) 297 - 298.
Van Der Hoeven G. and Moerdijk L, Sheaf models for choice sequences. Annals 
of Pure and Applied Logic, North-Holland, vol. 27 (1984) 63 - 107.
Vaananen J., Generalised quantifiers. Bulletin of the European Association for 
Theoretical Computer Science, vol. 62 (1997) 115 - 136: reprinted in Generalised 
Quantifiers and Computation, Lecture Notes in Computer Science, vol. 1754, 

401
Springer (1999).
Venema Y., Lectures on the modal ^.-calculus. Inst. For Logic. Language and 
Computation, Univ, of Amsterdam (2008) 156pp.
Venkata S.R.P., Fuzzy temporal predicate logic for incomplete information. 
International Conference on Fuzzy Theory and Its Applications (lEEE).Yilan, 
Taiwan (2015) 86-90.
Vermeulen J., Stationary sets and on the existence of homeomorphisms between 
them. BSc report Applied mathematics. Delft University of Technology, Delft 
(2020) 34pp.
Vetter Bâ Potentiality. From dispositions to modality. Oxford Univ. Press (2015) 
330pp.
Vilenkin N. Ya. and Shreider Yu. A., Majority spaces and majority quantifier. 
Semiotics and Informatics, vol. 8, Moscow (1977), in Russian.
Vollmer H., .1 generalised quantifier concept in computational complexity theory. 
ESSLLF97, Lecture Notes in Computer Science, vol. 1754 (1999) 99 - 123.
Wald A., On a statistical generalization of metric spaces. Proc. Nat. Acad. Sci. 
USA , 29 (1943), 196 - 197.
Walukiewicz L, Completeness of Kozen's axiomatisation of the propositional u- 
calculus. Logic in Computer Science, LICS'95, IEEE (1995) 14 - 24.
Wang Dâ A CUSUM control chart for fuzzy quality data. Advances in Soft 
Computing 6, Springer-Verlag, Berlin, Heidelberg (2006) 357 - 364.
Wang Weijie, Ren G. and Wang Wei., The applications of rough set theory in 
civil engineering. Artificial Intelligence and Computational Intelligence: 
International Conference, AICI 2010, Sanya, China, , Proceedings, vol.l (2010) 
27-31.
Wang Z.-X., Fuzzy measures and measures of fuzziness. Journal of Mathematical 
Analysis and Applications, Elsevier, vol. 104 (1984) 589 - 601.
Wansing H., Constructive negation, implication, and co-implication. Journal of 
Applied Non-Classical Logics, vol. 18 (2008) 341 - 364.
Westerstahl D., Quantifiers. Goteborg University (2001) 
26 pp:
file:///F:/HP%20info%20programs%20and%20papers%202018%20state/2001%20Blackw 
ellQLiant%20QLiantifiers%20WHBTERSH.pdf.
Westerstahl D., Generalised quantifiers. The Stanford Encyclopaedia of 
Philosophy, The Metaphysics Research Lab at the Center for the Study of 
Language and Information, Stanford University, Stanford, CA (2011) 25pp. See 
also: Generalised quantifiers: linguistics meets model theory. Stockholm 
University,,41pp:
https://www.philosophy.SLi.se/polopoly_fs/L165898.1391710202i/iiienLi/standard/file/2013 
%20CambridgeHandbookGQ.pdf.
Whitehead A.N. and Russell Bâ Principia mathematica. Cambridge Univ. Press, 
Cambridge, A three-volume work (1913).
Wittgenstein Lâ Tractatus Logico-Philosophicus. Routledge and Kegan Paul, 
London(1922)75pp.
Wright G.H. von.. Deontic logic. Mind vol. 60 no. 237, Oxford Univ. Press 
(1951) 1 - 15.
Wright G.H. von.. An essay in modal logic. North-Holland Publishing, 
Amsterdam (1951) 90pp.

402
Wu C.. Yue Y.. Li M. and Adjei O.. The rough set theory and applications. 
Engineering Computations. Emerald Group Publishing, vol. 21, no. 5 (2004) 488 
-511.
Wu D. and Tan W.W., .1 simplified type-2 fuzzy controller for real-time control. 
ISA Transactions, Elsevier, vol. 15, issue 4 (2006) 503 - 516.
Wu D., A brief tutorial on interval type-2 fuzzy sets and systems. University of 
Southern California. Scholar articles (2010) 1 - 13: in Fuzzy Sets and S, ystems 
(2010).
Xu Z.S. and Yager R.R., Some geometric aggregation operators based on 
intuitionistic fuzzy sets. Int. J. Gen. Syst., vol. 35, no. 4 (2006) 417 - 433.
Xu Z.S. and Yager R.R., Intuitionistic f uzzy Bonferroni Means. IEEE Trans, on 
Systems. Man. and Cybernetics. Part B: Cybernetics, vol.41, no.2 (2011) 568 - 
578.
Yager R.R., Connectives and quantifiers in fuzzy sets. Fuzzy Sets and Systems, 
vol. 40 (1991) 39-75.
Yager R.R., A general approach to rule aggregation in fuzzy logic control. 
Applied Intelligence, vol. 2 (1992) 333 -351.
Yager R.R., Aggregation operators and fuzzv systems modeling. Fuzzy Sets and 
Systems 67 (1994) 129 - 145.
Yager R.R., Pythagorean fuzzy subsets. Proceedings of the 9th Joint World 
Congress on Fuzzy Systems and NAF1PS Annual Meeting , 1FSA/NAF1PS 
(2013) 57-61.
Yager R.R. and Abbasov A.M., Pythagorean membership grades, complex 
numbers and decision making. International Journal of Intelligent Systems, vol. 
28. no.5 (2013) 436 -452.
Yang M. - S. and Hussain Z., Fuzzy entropy for Pythagorean fuzzy sets with 
application to multicriterion decision making. Wiley / Hindawi (2018) 14pp: 
https://doi.org/10.1155/2018/2832839
Yefremov A., Smarandache F. and Christianto V., Yang-Mills field from 
quaternion space geometry, and its Klein-Gordon representation. Progress in 
Physics. IOP publishing, vol. 3 (2007) 42 - 50.
You L., Zhang J., Li Q. and Ye N., Structural reliability analysis based on fuzzy 
random uncertainty. Maintenance and Reliability, vol.21, no. 4 (2019) 599 - 609.
Yun S.M. and Lee S.J., AYw approach to intuitionistic fuzzy rough sets. 
International Journal of Fuzzy Logic and Intelligent Systems. Korean Institute of 
Intelligent Systems, vol. 20, no. 2 (2020) 129 - 137.
http://w w w. ij fis. org/j o Limal/vie w. html? iiid=915&& vmd=F Lili
Zadeh L.A., Fuzzy sets. Information and Control 8 (1965) 338 - 353.
Zadeh L.A., Fuzzy logic and its application to approximate reasoning. 
Information Processing 74 (1974) 591 - 594.
Zadeh L.A., The concept of a linguistic variable and its application to 
approximate reasoning-1. Information Sciences, vol. 8 (1975) 199 - 249.
Zadeh L.A., A computational approach to fuzzy quantifiers in natural languages. 
Computer Mathematics with Applications, vol. 9 (1983) 149 - 183.
Zennelo E., Untersuchungen liber die grundlagen (Axiome) der Mengenlehre I. 
Mathematische Annalen, vol. 65 (1908) 261 - 281.

403
Zhang X.L. and Xu Z.S.. Extension of TOPSIS to multiple criteria decision 
making with pythagorean fuzzy sets. International Journal of Inteligent Systems, 
vol. 29. no. 12 (2014) 1061 - 1078.
Zhou M.C. and DiCesare F., Petri net synthesis for discrete event control of 
manufacturing systems'. Kliwer Academic, Dordrecht, Boston, London (1993) 
233pp.



â¡fi
WUST Publishing House 
mailorder: 
zamawianie.ksiazek@pwr.edu.pl
ISBN 978-83-7493-188-5

